(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["FP"] = factory();
	else
		root["FP"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FP;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

var _utils2 = _interopRequireDefault(_utils);

var _monads = __webpack_require__(/*! ./monads */ 3);

var _arrays = __webpack_require__(/*! ./arrays */ 4);

var _arrays2 = _interopRequireDefault(_arrays);

var _events = __webpack_require__(/*! ./events */ 5);

var _conditional = __webpack_require__(/*! ./conditional */ 6);

var _promise = __webpack_require__(/*! ./promise */ 7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { isFunction, flatten } = _utils2.default;
const { map, find, findIndex, filter, reduce } = (0, _arrays2.default)(FP);

FP.prototype.all = _promise.all;
FP.prototype.map = map;
FP.prototype.find = find;
FP.prototype.findIndex = findIndex;
FP.prototype.filter = filter;
FP.prototype.reduce = reduce;
FP.prototype.listen = _events.listen;
FP.prototype.tapIf = _conditional.tapIf;
FP.prototype.thenIf = _conditional.thenIf;
FP.prototype._thenIf = _conditional._thenIf;
FP.prototype.delay = _promise.delay;
FP.prototype._delay = _promise._delay;
FP.prototype.reject = _promise.reject;

// FP.default = FP
// export const all = allPromises

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = msec => FP.resolve().delay(msec);
FP.silent = limit => FP.resolve().silent(limit);

// Monadic Methods
FP.chain = _monads.chain;
FP.prototype.chainEnd = _monads.chainEnd;
FP.reject = FP.prototype.reject;
FP.resolve = resolve;

FP.promisify = promisify;
FP.promisifyAll = promisifyAll;
FP.unpack = unpack;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency(limit = Infinity) {
  if (this.steps) return this.addStep('concurrency', [...arguments]);
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet(errorLimit = Infinity) {
  if (this.steps) return this.addStep('quiet', [...arguments]);
  this._FP.errors = { count: 0, limit: errorLimit };
  return this;
};
FP.prototype.silent = FP.prototype.quiet;

FP.prototype.get = function get(...keyNames) {
  if (this.steps) return this.addStep('get', [...arguments]);
  keyNames = flatten(keyNames);
  return this.then(obj => {
    if (typeof obj === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce((extracted, key) => {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [...arguments]);
  return this.then(obj => {
    if (typeof obj === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [...arguments]);
  if (arguments.length === 2) return this.catchIf(...arguments);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.catch(err => fn(err)));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [...arguments]);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + typeof fn);

  return FP.resolve(this._FP.promise.catch(err => {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [...arguments]);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [...arguments]);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(value => fn(value) ? value : value));
};

function resolve(value) {
  return new FP((resolve, reject) => {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
}

function promisify(cb) {
  return (...args) => new FP((yah, nah) => cb.call(this, ...args, (err, res) => err ? nah(err) : yah(res)));
}

function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {
    throw new Error('Invalid Argument obj in promisifyAll(obj)');
  }
  return Object.getOwnPropertyNames(obj).filter(key => typeof obj[key] === 'function').reduce((obj, fnName) => {
    if (!/Sync/.test(fnName) && !obj[`${fnName}Async`]) obj[`${fnName}Async`] = FP.promisify(obj[`${fnName}`]);
    return obj;
  }, obj);
}

function unpack() {
  let resolve,
      reject,
      promise = new FP((yah, nah) => {
    resolve = yah;reject = nah;
  });
  return { promise, resolve, reject };
}

function FP(resolveRejectCB) {
  if (!(this instanceof FP)) {
    return new FP(resolveRejectCB);
  }
  if (arguments.length !== 1) throw new Error('FunctionalPromises constructor only accepts 1 callback argument');
  this._FP = {
    errors: { limit: 0, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4
  };
}
// if (process && process.on) {
//   // process.on('uncaughtException', e => console.error('FPromises: FATAL EXCEPTION: uncaughtException', e))
//   process.on('unhandledRejection', e => console.error('FPromises: FATAL ERROR: unhandledRejection', e))
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJGUCIsImlzRnVuY3Rpb24iLCJmbGF0dGVuIiwidXRpbHMiLCJtYXAiLCJmaW5kIiwiZmluZEluZGV4IiwiZmlsdGVyIiwicmVkdWNlIiwicHJvdG90eXBlIiwiYWxsIiwiYWxsUHJvbWlzZXMiLCJsaXN0ZW4iLCJ0YXBJZiIsInRoZW5JZiIsIl90aGVuSWYiLCJkZWxheSIsIl9kZWxheSIsInJlamVjdCIsIm1zZWMiLCJyZXNvbHZlIiwic2lsZW50IiwibGltaXQiLCJjaGFpbiIsImNoYWluRW5kIiwicHJvbWlzaWZ5IiwicHJvbWlzaWZ5QWxsIiwidW5wYWNrIiwiYWRkU3RlcCIsIm5hbWUiLCJhcmdzIiwic3RlcHMiLCJwdXNoIiwiY29uY3VycmVuY3kiLCJJbmZpbml0eSIsImFyZ3VtZW50cyIsIl9GUCIsImNvbmN1cnJlbmN5TGltaXQiLCJxdWlldCIsImVycm9yTGltaXQiLCJlcnJvcnMiLCJjb3VudCIsImdldCIsImtleU5hbWVzIiwidGhlbiIsIm9iaiIsImxlbmd0aCIsImV4dHJhY3RlZCIsImtleSIsInNldCIsImtleU5hbWUiLCJ2YWx1ZSIsImNhdGNoIiwiZm4iLCJjYXRjaElmIiwiRnVuY3Rpb25hbEVycm9yIiwicHJvbWlzZSIsImVyciIsImNvbmRpdGlvbiIsInRhcCIsImNiIiwieWFoIiwibmFoIiwiY2FsbCIsInJlcyIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiRXJyb3IiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm5OYW1lIiwidGVzdCIsInJlc29sdmVSZWplY3RDQiIsIlByb21pc2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQTRJd0JBLEU7O0FBNUl4Qjs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQSxNQUFNLEVBQUVDLFVBQUYsRUFBY0MsT0FBZCxLQUEwQkMsZUFBaEM7QUFDQSxNQUFNLEVBQUVDLEdBQUYsRUFBT0MsSUFBUCxFQUFhQyxT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QU4sS0FBYztBQUFFMUMsY0FBVXlDLEdBQVYsQ0FBZTNDLFNBQVM0QyxHQUFUO0FBQWMsR0FBcEQsQ0FBL0I7QUFDQSxTQUFPLEVBQUVOLE9BQUYsRUFBV3BDLE9BQVgsRUFBb0JGLE1BQXBCLEVBQVA7QUFDRDs7QUFHYyxTQUFTbEIsRUFBVCxDQUFZdUUsZUFBWixFQUE2QjtBQUMxQyxNQUFJLEVBQUUsZ0JBQWdCdkUsRUFBbEIsQ0FBSixFQUEyQjtBQUFFLFdBQU8sSUFBSUEsRUFBSixDQUFPdUUsZUFBUCxDQUFQO0FBQWdDO0FBQzdELE1BQUlwQyxVQUFVVyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCLE1BQU0sSUFBSXFCLEtBQUosQ0FBVSxpRUFBVixDQUFOO0FBQzVCLE9BQUsvQixHQUFMLEdBQVc7QUFDVEksWUFBa0IsRUFBRWxCLE9BQU8sQ0FBVCxFQUFZbUIsT0FBTyxDQUFuQixFQURUO0FBRVRlLGFBQWtCLElBQUlnQixPQUFKLENBQVlELGVBQVosQ0FGVDtBQUdUbEMsc0JBQWtCO0FBSFQsR0FBWDtBQUtEO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGdW5jdGlvbmFsRXJyb3IgfSBmcm9tICcuL21vZHVsZXMvZXJyb3JzJ1xuaW1wb3J0IHV0aWxzIGZyb20gJy4vbW9kdWxlcy91dGlscydcbmltcG9ydCB7IGNoYWluLCBjaGFpbkVuZCB9IGZyb20gJy4vbW9uYWRzJ1xuaW1wb3J0IGFycmF5cyBmcm9tICcuL2FycmF5cydcbmltcG9ydCB7IGxpc3RlbiB9IGZyb20gJy4vZXZlbnRzJ1xuaW1wb3J0IHsgX3RoZW5JZiwgdGFwSWYsIHRoZW5JZiB9IGZyb20gJy4vY29uZGl0aW9uYWwnXG5pbXBvcnQgeyBfZGVsYXksIGRlbGF5LCByZWplY3QsIGFsbCBhcyBhbGxQcm9taXNlcyB9IGZyb20gJy4vcHJvbWlzZSdcbmNvbnN0IHsgaXNGdW5jdGlvbiwgZmxhdHRlbiB9ID0gdXRpbHNcbmNvbnN0IHsgbWFwLCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlciwgcmVkdWNlIH0gPSBhcnJheXMoRlApXG5cbkZQLnByb3RvdHlwZS5hbGwgPSBhbGxQcm9taXNlc1xuRlAucHJvdG90eXBlLm1hcCA9IG1hcFxuRlAucHJvdG90eXBlLmZpbmQgPSBmaW5kXG5GUC5wcm90b3R5cGUuZmluZEluZGV4ID0gZmluZEluZGV4XG5GUC5wcm90b3R5cGUuZmlsdGVyID0gZmlsdGVyXG5GUC5wcm90b3R5cGUucmVkdWNlID0gcmVkdWNlXG5GUC5wcm90b3R5cGUubGlzdGVuID0gbGlzdGVuXG5GUC5wcm90b3R5cGUudGFwSWYgPSB0YXBJZlxuRlAucHJvdG90eXBlLnRoZW5JZiA9IHRoZW5JZlxuRlAucHJvdG90eXBlLl90aGVuSWYgPSBfdGhlbklmXG5GUC5wcm90b3R5cGUuZGVsYXkgPSBkZWxheVxuRlAucHJvdG90eXBlLl9kZWxheSA9IF9kZWxheVxuRlAucHJvdG90eXBlLnJlamVjdCA9IHJlamVjdFxuXG4vLyBGUC5kZWZhdWx0ID0gRlBcbi8vIGV4cG9ydCBjb25zdCBhbGwgPSBhbGxQcm9taXNlc1xuXG5GUC5hbGwgPSBGUC5wcm90b3R5cGUuYWxsXG5GUC50aGVuSWYgPSBGUC5wcm90b3R5cGUuX3RoZW5JZlxuRlAuZGVsYXkgPSBtc2VjID0+IEZQLnJlc29sdmUoKS5kZWxheShtc2VjKVxuRlAuc2lsZW50ID0gbGltaXQgPT4gRlAucmVzb2x2ZSgpLnNpbGVudChsaW1pdClcblxuLy8gTW9uYWRpYyBNZXRob2RzXG5GUC5jaGFpbiA9IGNoYWluXG5GUC5wcm90b3R5cGUuY2hhaW5FbmQgPSBjaGFpbkVuZFxuRlAucmVqZWN0ID0gRlAucHJvdG90eXBlLnJlamVjdFxuRlAucmVzb2x2ZSA9IHJlc29sdmVcblxuRlAucHJvbWlzaWZ5ID0gcHJvbWlzaWZ5XG5GUC5wcm9taXNpZnlBbGwgPSBwcm9taXNpZnlBbGxcbkZQLnVucGFjayA9IHVucGFja1xuXG5GUC5wcm90b3R5cGUuYWRkU3RlcCA9IGZ1bmN0aW9uIGFkZFN0ZXAobmFtZSwgYXJncykge1xuICBpZiAodGhpcy5zdGVwcykgdGhpcy5zdGVwcy5wdXNoKFtuYW1lLCB0aGlzLCBhcmdzXSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuRlAucHJvdG90eXBlLmNvbmN1cnJlbmN5ID0gZnVuY3Rpb24gY29uY3VycmVuY3kobGltaXQgPSBJbmZpbml0eSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY29uY3VycmVuY3knLCBbLi4uYXJndW1lbnRzXSlcbiAgdGhpcy5fRlAuY29uY3VycmVuY3lMaW1pdCA9IGxpbWl0XG4gIHJldHVybiB0aGlzXG59XG5cbkZQLnByb3RvdHlwZS5xdWlldCA9IGZ1bmN0aW9uIHF1aWV0KGVycm9yTGltaXQgPSBJbmZpbml0eSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgncXVpZXQnLCBbLi4uYXJndW1lbnRzXSlcbiAgdGhpcy5fRlAuZXJyb3JzID0geyBjb3VudDogMCwgbGltaXQ6IGVycm9yTGltaXQgfVxuICByZXR1cm4gdGhpc1xufVxuRlAucHJvdG90eXBlLnNpbGVudCA9IEZQLnByb3RvdHlwZS5xdWlldFxuXG5GUC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KC4uLmtleU5hbWVzKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdnZXQnLCBbLi4uYXJndW1lbnRzXSlcbiAga2V5TmFtZXMgPSBmbGF0dGVuKGtleU5hbWVzKVxuICByZXR1cm4gdGhpcy50aGVuKChvYmopID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChrZXlOYW1lcy5sZW5ndGggPT09IDEpIHJldHVybiBvYmpba2V5TmFtZXNbMF1dXG4gICAgICByZXR1cm4ga2V5TmFtZXMucmVkdWNlKChleHRyYWN0ZWQsIGtleSkgPT4ge1xuICAgICAgICBleHRyYWN0ZWRba2V5XSA9IG9ialtrZXldXG4gICAgICAgIHJldHVybiBleHRyYWN0ZWRcbiAgICAgIH0sIHt9KVxuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH0pXG59XG5cbkZQLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQoa2V5TmFtZSwgdmFsdWUpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3NldCcsIFsuLi5hcmd1bWVudHNdKVxuICByZXR1cm4gdGhpcy50aGVuKG9iaiA9PiB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSBvYmpba2V5TmFtZV0gPSB2YWx1ZVxuICAgIHJldHVybiBvYmpcbiAgfSlcbn1cblxuRlAucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdjYXRjaCcsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgcmV0dXJuIHRoaXMuY2F0Y2hJZiguLi5hcmd1bWVudHMpXG4gIGlmICghaXNGdW5jdGlvbihmbikpIHRocm93IG5ldyBGdW5jdGlvbmFsRXJyb3IoJ0ludmFsaWQgZm4gYXJndW1lbnQgZm9yIGAuY2F0Y2goZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyB0eXBlb2YgZm4pXG4gIHJldHVybiBGUC5yZXNvbHZlKHRoaXMuX0ZQLnByb21pc2UuY2F0Y2goZXJyID0+IGZuKGVycikpKVxufVxuXG5GUC5wcm90b3R5cGUuY2F0Y2hJZiA9IGZ1bmN0aW9uIGNhdGNoSWYoY29uZGl0aW9uLCBmbikge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY2F0Y2hJZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLmNhdGNoSWYoY29uZGl0aW9uLCBmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArIHR5cGVvZiBmbilcblxuICByZXR1cm4gRlAucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLmNhdGNoKGVyciA9PiB7XG4gICAgaWYgKGNvbmRpdGlvbiAmJiBlcnIgaW5zdGFuY2VvZiBjb25kaXRpb24pIHJldHVybiBmbihlcnIpIC8vIHRyeSByZS10aHJvdywgbWlnaHQgYmUgcmVhbGx5IHNsb3cuLi5cbiAgICB0aHJvdyBlcnJcbiAgfSkpXG59XG5cbkZQLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gdGhlbihmbikge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgndGhlbicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLnRoZW4oZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyB0eXBlb2YgZm4pXG4gIHJldHVybiBGUC5yZXNvbHZlKHRoaXMuX0ZQLnByb21pc2UudGhlbihmbikpXG59XG5cbkZQLnByb3RvdHlwZS50YXAgPSBmdW5jdGlvbiB0YXAoZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcCcsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLnRhcChmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArIHR5cGVvZiBmbilcbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS50aGVuKHZhbHVlID0+IGZuKHZhbHVlKSA/IHZhbHVlIDogdmFsdWUpKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgRlAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICh2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pKSByZXR1cm4gdmFsdWUudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpXG4gICAgcmVzb2x2ZSh2YWx1ZSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gcHJvbWlzaWZ5KGNiKSB7XG4gIHJldHVybiAoLi4uYXJncykgPT4gbmV3IEZQKCh5YWgsIG5haCkgPT5cbiAgICBjYi5jYWxsKHRoaXMsIC4uLmFyZ3MsIChlcnIsIHJlcykgPT4gZXJyID8gbmFoKGVycikgOiB5YWgocmVzKSkpXG59XG5cbmZ1bmN0aW9uIHByb21pc2lmeUFsbChvYmopIHtcbiAgaWYgKCFvYmogfHwgIU9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSB7IHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBcmd1bWVudCBvYmogaW4gcHJvbWlzaWZ5QWxsKG9iaiknKSB9XG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopXG4gICAgLmZpbHRlcihrZXkgPT4gdHlwZW9mIG9ialtrZXldID09PSAnZnVuY3Rpb24nKVxuICAgIC5yZWR1Y2UoKG9iaiwgZm5OYW1lKSA9PiB7XG4gICAgICBpZiAoIS9TeW5jLy50ZXN0KGZuTmFtZSkgJiYgIW9ialtgJHtmbk5hbWV9QXN5bmNgXSkgb2JqW2Ake2ZuTmFtZX1Bc3luY2BdID0gRlAucHJvbWlzaWZ5KG9ialtgJHtmbk5hbWV9YF0pXG4gICAgICByZXR1cm4gb2JqXG4gICAgfSwgb2JqKVxufVxuXG5mdW5jdGlvbiB1bnBhY2soKSB7XG4gIGxldCByZXNvbHZlLCByZWplY3QsIHByb21pc2UgPSBuZXcgRlAoKHlhaCwgbmFoKSA9PiB7IHJlc29sdmUgPSB5YWg7IHJlamVjdCA9IG5haCB9KVxuICByZXR1cm4geyBwcm9taXNlLCByZXNvbHZlLCByZWplY3QgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZQKHJlc29sdmVSZWplY3RDQikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRlApKSB7IHJldHVybiBuZXcgRlAocmVzb2x2ZVJlamVjdENCKSB9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uYWxQcm9taXNlcyBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgMSBjYWxsYmFjayBhcmd1bWVudCcpXG4gIHRoaXMuX0ZQID0ge1xuICAgIGVycm9yczogICAgICAgICAgIHsgbGltaXQ6IDAsIGNvdW50OiAwIH0sXG4gICAgcHJvbWlzZTogICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZVJlamVjdENCKSxcbiAgICBjb25jdXJyZW5jeUxpbWl0OiA0LFxuICB9XG59XG4vLyBpZiAocHJvY2VzcyAmJiBwcm9jZXNzLm9uKSB7XG4vLyAgIC8vIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgZSA9PiBjb25zb2xlLmVycm9yKCdGUHJvbWlzZXM6IEZBVEFMIEVYQ0VQVElPTjogdW5jYXVnaHRFeGNlcHRpb24nLCBlKSlcbi8vICAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgZSA9PiBjb25zb2xlLmVycm9yKCdGUHJvbWlzZXM6IEZBVEFMIEVSUk9SOiB1bmhhbmRsZWRSZWplY3Rpb24nLCBlKSlcbi8vIH1cbiJdfQ==

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
class FunctionalError extends Error {
  constructor(msg, options) {
    if (typeof msg === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }
    super(msg);
    if (typeof options === 'object') {
      Object.getOwnPropertyNames(options).forEach(key => {
        this[key] = options[key];
      });
    }
    this.name = this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(this, this.constructor);
  }
}
exports.FunctionalError = FunctionalError;
class FunctionalUserError extends FunctionalError {}
exports.FunctionalUserError = FunctionalUserError;
class FPUnexpectedError extends FunctionalError {}
exports.FPUnexpectedError = FPUnexpectedError;
class FPInputError extends FunctionalError {}
exports.FPInputError = FPInputError;
class FPSoftError extends FunctionalError {}
exports.FPSoftError = FPSoftError;
class FPTimeout extends FunctionalError {}
exports.FPTimeout = FPTimeout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibXNnIiwib3B0aW9ucyIsIm1lc3NhZ2UiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImtleSIsIm5hbWUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLGVBQU4sU0FBOEJDLEtBQTlCLENBQW9DO0FBQ3pDQyxjQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLE9BQU9ELEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCO0FBQ0QsVUFBTUYsR0FBTjtBQUNBLFFBQUksT0FBT0MsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQkUsYUFBT0MsbUJBQVAsQ0FBMkJILE9BQTNCLEVBQ0dJLE9BREgsQ0FDV0MsT0FBTztBQUNkLGFBQUtBLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FISDtBQUlEO0FBQ0QsU0FBS0MsSUFBTCxHQUFZLEtBQUtSLFdBQUwsQ0FBaUJRLElBQTdCO0FBQ0E7QUFDQVQsVUFBTVUsaUJBQU4sQ0FBd0IsSUFBeEIsRUFBOEIsS0FBS1QsV0FBbkM7QUFDRDtBQWhCd0M7UUFBOUJGLGUsR0FBQUEsZTtBQWtCTixNQUFNWSxtQkFBTixTQUFrQ1osZUFBbEMsQ0FBa0Q7UUFBNUNZLG1CLEdBQUFBLG1CO0FBQ04sTUFBTUMsaUJBQU4sU0FBZ0NiLGVBQWhDLENBQWdEO1FBQTFDYSxpQixHQUFBQSxpQjtBQUNOLE1BQU1DLFlBQU4sU0FBMkJkLGVBQTNCLENBQTJDO1FBQXJDYyxZLEdBQUFBLFk7QUFDTixNQUFNQyxXQUFOLFNBQTBCZixlQUExQixDQUEwQztRQUFwQ2UsVyxHQUFBQSxXO0FBQ04sTUFBTUMsU0FBTixTQUF3QmhCLGVBQXhCLENBQXdDO1FBQWxDZ0IsUyxHQUFBQSxTIiwiZmlsZSI6ImVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBGdW5jdGlvbmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1zZywgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgbXNnID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IG1zZ1xuICAgICAgaWYgKCBtc2cubWVzc2FnZSApIG1zZyA9IG1zZy5tZXNzYWdlXG4gICAgfVxuICAgIHN1cGVyKG1zZylcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcHRpb25zKVxuICAgICAgICAuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XVxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAvLyBDYXB0dXJpbmcgc3RhY2sgdHJhY2UsIGV4Y2x1ZGluZyBjb25zdHJ1Y3RvciBjYWxsIGZyb20gaXQuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3RvcilcbiAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmV4cG9ydCBjbGFzcyBGUFVuZXhwZWN0ZWRFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0IGNsYXNzIEZQSW5wdXRFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0IGNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5leHBvcnQgY2xhc3MgRlBUaW1lb3V0IGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG4iXX0=

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
const utils = {
  isPromiseLike(p) {
    return !!(p && typeof p.then === 'function');
  },
  isFunction(fn) {
    return typeof fn === 'function';
  },
  isEnumerable(list) {
    return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';
  },

  flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce((results, item) => results.concat(Array.isArray(item) ? utils.flatten(item) : [item]), []);
  }
};

exports.default = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwiaXNQcm9taXNlTGlrZSIsInAiLCJ0aGVuIiwiaXNGdW5jdGlvbiIsImZuIiwiaXNFbnVtZXJhYmxlIiwibGlzdCIsIkFycmF5IiwiaXNBcnJheSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZmxhdHRlbiIsImFyciIsIkVycm9yIiwicmVkdWNlIiwicmVzdWx0cyIsIml0ZW0iLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsUUFBUTtBQUNaQyxnQkFBY0MsQ0FBZCxFQUFpQjtBQUFFLFdBQU8sQ0FBQyxFQUFFQSxLQUFLLE9BQU9BLEVBQUVDLElBQVQsS0FBa0IsVUFBekIsQ0FBUjtBQUE4QyxHQURyRDtBQUVaQyxhQUFXQyxFQUFYLEVBQWU7QUFBRSxXQUFPLE9BQU9BLEVBQVAsS0FBYyxVQUFyQjtBQUFpQyxHQUZ0QztBQUdaQyxlQUFhQyxJQUFiLEVBQW1CO0FBQUUsV0FBT0EsUUFBUUMsTUFBTUMsT0FBTixDQUFjRixJQUFkLENBQVIsSUFBK0IsT0FBT0EsS0FBS0csT0FBT0MsUUFBWixDQUFQLEtBQWlDLFVBQXZFO0FBQW1GLEdBSDVGOztBQUtaQyxVQUFRQyxHQUFSLEVBQWE7QUFDWCxRQUFJLENBQUNMLE1BQU1DLE9BQU4sQ0FBY0ksR0FBZCxDQUFMLEVBQXlCLE1BQU0sSUFBSUMsS0FBSixDQUFVLGlEQUFWLENBQU47QUFDekIsV0FBT0QsSUFBSUUsTUFBSixDQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixLQUFtQkQsUUFBUUUsTUFBUixDQUFlVixNQUFNQyxPQUFOLENBQWNRLElBQWQsSUFBc0JqQixNQUFNWSxPQUFOLENBQWNLLElBQWQsQ0FBdEIsR0FBNEMsQ0FBQ0EsSUFBRCxDQUEzRCxDQUE5QixFQUFrRyxFQUFsRyxDQUFQO0FBQ0Q7QUFSVyxDQUFkOztrQkFXZWpCLEsiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHtcbiAgaXNQcm9taXNlTGlrZShwKSB7IHJldHVybiAhIShwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicpIH0sXG4gIGlzRnVuY3Rpb24oZm4pIHsgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuICBpc0VudW1lcmFibGUobGlzdCkgeyByZXR1cm4gbGlzdCAmJiBBcnJheS5pc0FycmF5KGxpc3QpIHx8IHR5cGVvZiBsaXN0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicgfSxcblxuICBmbGF0dGVuKGFycikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBgZmxhdHRlbmAgcmVxdWlyZXMgdmFsaWQgYXJyYXkgcGFyYW1ldGVyJylcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgocmVzdWx0cywgaXRlbSkgPT4gcmVzdWx0cy5jb25jYXQoQXJyYXkuaXNBcnJheShpdGVtKSA/IHV0aWxzLmZsYXR0ZW4oaXRlbSkgOiBbaXRlbV0pLCBbXSlcbiAgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXRpbHNcbiJdfQ==

/***/ }),
/* 3 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chain = chain;
exports.chainEnd = chainEnd;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

/**
 * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
 * @returns FunctionalPromise
 */
function chain() {
  const FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  const promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
 * Call after starting a `.chain()`.
 *
 * One of the few non-chainable methods in the API.
 * @returns a Function. It runs your functional chain!
 */
function chainEnd() {
  const FP = __webpack_require__(/*! ./index */ 0);

  return input => {
    if (!this.steps || this.steps.length <= 0) throw new _errors.FPInputError('No steps defined between .chain() & .chainEnd()');
    let stepCount = 0;
    let { promise, resolve, reject } = FP.unpack();
    while (stepCount < this.steps.length) {
      const [fnName,, args] = this.steps[stepCount];
      promise = promise[fnName](...args);
      stepCount++;
    }
    resolve(input);
    return promise;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsiY2hhaW4iLCJjaGFpbkVuZCIsIkZQIiwicmVxdWlyZSIsInByb21pc2UiLCJyZXNvbHZlIiwic3RlcHMiLCJpbnB1dCIsImxlbmd0aCIsIkZQSW5wdXRFcnJvciIsInN0ZXBDb3VudCIsInJlamVjdCIsInVucGFjayIsImZuTmFtZSIsImFyZ3MiXSwibWFwcGluZ3MiOiI7Ozs7O1FBTWdCQSxLLEdBQUFBLEs7UUFjQUMsUSxHQUFBQSxROztBQXBCaEI7O0FBRUE7Ozs7QUFJTyxTQUFTRCxLQUFULEdBQWlCO0FBQ3RCLFFBQU1FLEtBQUtDLFFBQVEsU0FBUixDQUFYO0FBQ0E7QUFDQSxRQUFNQyxVQUFVRixHQUFHRyxPQUFILEVBQWhCO0FBQ0FELFVBQVFFLEtBQVIsR0FBZ0IsRUFBaEI7QUFDQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1PLFNBQVNILFFBQVQsR0FBb0I7QUFDekIsUUFBTUMsS0FBS0MsUUFBUSxTQUFSLENBQVg7O0FBRUEsU0FBT0ksU0FBUztBQUNkLFFBQUksQ0FBQyxLQUFLRCxLQUFOLElBQWUsS0FBS0EsS0FBTCxDQUFXRSxNQUFYLElBQXFCLENBQXhDLEVBQTJDLE1BQU0sSUFBSUMsb0JBQUosQ0FBaUIsaURBQWpCLENBQU47QUFDM0MsUUFBSUMsWUFBWSxDQUFoQjtBQUNBLFFBQUksRUFBQ04sT0FBRCxFQUFVQyxPQUFWLEVBQW1CTSxNQUFuQixLQUE2QlQsR0FBR1UsTUFBSCxFQUFqQztBQUNBLFdBQU9GLFlBQVksS0FBS0osS0FBTCxDQUFXRSxNQUE5QixFQUFzQztBQUNwQyxZQUFNLENBQUNLLE1BQUQsR0FBV0MsSUFBWCxJQUFtQixLQUFLUixLQUFMLENBQVdJLFNBQVgsQ0FBekI7QUFDQU4sZ0JBQVVBLFFBQVFTLE1BQVIsRUFBZ0IsR0FBR0MsSUFBbkIsQ0FBVjtBQUNBSjtBQUNEO0FBQ0RMLFlBQVFFLEtBQVI7QUFDQSxXQUFPSCxPQUFQO0FBQ0QsR0FYRDtBQVlEIiwiZmlsZSI6Im1vbmFkcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZQSW5wdXRFcnJvciB9IGZyb20gJy4vbW9kdWxlcy9lcnJvcnMnXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbigpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgLy8gY3JlYXRlIGEgcGxhY2Vob2xkZXIvaW5pdGlhbCBwcm9taXNlIHRvIGhvbGQgdGhlIHN0ZXBzL2NoYWluIGRhdGFcbiAgY29uc3QgcHJvbWlzZSA9IEZQLnJlc29sdmUoKVxuICBwcm9taXNlLnN0ZXBzID0gW11cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuLyoqXG4gKiBDYWxsIGFmdGVyIHN0YXJ0aW5nIGEgYC5jaGFpbigpYC5cbiAqXG4gKiBPbmUgb2YgdGhlIGZldyBub24tY2hhaW5hYmxlIG1ldGhvZHMgaW4gdGhlIEFQSS5cbiAqIEByZXR1cm5zIGEgRnVuY3Rpb24uIEl0IHJ1bnMgeW91ciBmdW5jdGlvbmFsIGNoYWluIVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhaW5FbmQoKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi9pbmRleCcpXG5cbiAgcmV0dXJuIGlucHV0ID0+IHtcbiAgICBpZiAoIXRoaXMuc3RlcHMgfHwgdGhpcy5zdGVwcy5sZW5ndGggPD0gMCkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignTm8gc3RlcHMgZGVmaW5lZCBiZXR3ZWVuIC5jaGFpbigpICYgLmNoYWluRW5kKCknKVxuICAgIGxldCBzdGVwQ291bnQgPSAwXG4gICAgbGV0IHtwcm9taXNlLCByZXNvbHZlLCByZWplY3R9ID0gRlAudW5wYWNrKClcbiAgICB3aGlsZSAoc3RlcENvdW50IDwgdGhpcy5zdGVwcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFtmbk5hbWUsICwgYXJnc10gPSB0aGlzLnN0ZXBzW3N0ZXBDb3VudF1cbiAgICAgIHByb21pc2UgPSBwcm9taXNlW2ZuTmFtZV0oLi4uYXJncylcbiAgICAgIHN0ZXBDb3VudCsrXG4gICAgfVxuICAgIHJlc29sdmUoaW5wdXQpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxufVxuIl19

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (FP) {

  return { map, find, findIndex, filter, reduce };

  function find(callback) {
    return _find.call(this, callback).then(({ item }) => item);
  }
  function findIndex(callback) {
    return _find.call(this, callback).then(({ index }) => index);
  }

  function _find(iterable, callback) {
    if (this.steps) return this.addStep('_find', [...arguments]);
    if (typeof iterable === 'function') {
      callback = iterable;
      iterable = this._FP.promise;
    }

    return FP.resolve(iterable).filter(callback).then(results => results[0] != undefined ? { item: results[0], index: results.indexOf(results[0]) } : { item: undefined, index: -1 });
  }

  function filter(iterable, callback) {
    if (this.steps) return this.addStep('filter', [...arguments]);
    if (typeof iterable === 'function') {
      callback = iterable;
      iterable = this._FP.promise;
    }

    return reduce(iterable, (acc, item) => Promise.resolve(callback(item)).then(x => x ? acc.concat([item]) : acc), []);
  }

  function reduce(iterable, reducer, initVal) {
    if (this.steps) return this.addStep('reduce', [...arguments]);
    if (typeof iterable === 'function') {
      initVal = reducer;
      reducer = iterable;
      iterable = this._FP ? this._FP.promise : this;
    } else iterable = FP.resolve(iterable, this);

    return new FP((resolve, reject) => {
      return iterable.then(iterable => {
        const iterator = iterable[Symbol.iterator]();
        let i = 0;

        const next = total => {
          const current = iterator.next();
          if (current.done) return resolve(total);

          Promise.all([total, current.value]).then(([total, item]) => next(reducer(total, item, i++))).catch(reject);
        };

        next(initVal);
      });
    });
  }

  /*eslint max-statements: ["error", 60]*/
  function map(args, fn, options) {
    if (this.steps) return this.addStep('map', [...arguments]);
    if (arguments.length === 1 && this && this._FP) {
      fn = args;
      args = this && this._FP && this._FP.promise;
    }
    let resolvedOrRejected = false;
    const threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
    const innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
    let initialThread = 0;
    let errors = [];
    let count = 0;
    const results = [];
    const threadPool = new Set();
    const threadPoolFull = () => threadPool.size >= threadLimit;
    const isDone = () => errors.length > this._FP.errors.limit || count >= args.length || resolvedOrRejected;
    const setResult = index => value => {
      threadPool.delete(index);
      results[index] = value;
      return value;
    };
    return FP.resolve(new Promise((resolve, reject) => {
      const resolveIt = x => {
        // console.log('Action.resolve:', resolvedOrRejected, x)
        if (resolvedOrRejected) {
          return null;
        } else {
          resolvedOrRejected = true;
        }
        resolve(x);
      };
      const rejectIt = x => {
        if (resolvedOrRejected) {
          return null;
        } else {
          resolvedOrRejected = true;
        }
        // console.log('Action.reject:', resolvedOrRejected, x)
        reject(x);
      };
      innerValues.then(items => {
        args = [...items];
        if (!(0, _utils.isEnumerable)(items)) return reject(new _errors.FPInputError('Invalid input data passed into FP.map()'));
        const complete = () => {
          let action = null;
          if (errors.length > this._FP.errors.limit) action = rejectIt;
          if (isDone()) action = resolveIt;
          if (action) return Promise.all(results).then(data => action(results)) ? true : true;
          return false;
        };
        const checkAndRun = val => {
          // console.log('checkAndRun', count, resolvedOrRejected, val)
          if (resolvedOrRejected) return;
          if (!complete() && !results[count]) runItem(count);
          return val;
        };

        const runItem = c => {
          if (resolvedOrRejected) {
            return null;
          } else {
            count++;
          }
          if (threadPoolFull()) return setTimeout(() => runItem(c), 0);
          if (results[c]) return results[c];
          threadPool.add(c);
          // either get value with `fn(item)` or `item.then(fn)`
          results[c] = Promise.resolve(args[c]).then(val => fn(val, c, args)).then(val => setResult(c)(val)).then(checkAndRun).catch(err => {
            this._FP.errors.count++;
            errors.push(err);
            // console.log('ERR HANDLER!', errors.length, this._FP.errors.limit)
            if (errors.length > this._FP.errors.limit) {
              const fpErr = errors.length === 1 ? err : new _errors.FunctionalError(`Error Limit ${this._FP.errors.limit} Exceeded.
                idx=${c} errCnt=${this._FP.errors.count}`, { errors, results, ctx: this });
              Promise.resolve(setResult(c)(err)).then(() => rejectIt(fpErr));
            } else {
              // console.warn('Error OK:', JSON.stringify(this._FP.errors))
              return Promise.resolve().then(() => setResult(c)(err)).then(checkAndRun);
            }
          });

          return results[c];
        };

        // Kick off x number of initial threads
        while (initialThread < threadLimit && initialThread < args.length) runItem(initialThread++);
      });
    }));
  }
};

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

var _errors = __webpack_require__(/*! ./modules/errors */ 1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listen = undefined;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

const listen = exports.listen = function (obj, ...eventNames) {
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) throw new _errors.FPInputError('Valid EventEmitter required.');
  // Gets callback to attach to the event handlers
  const handler = this.chainEnd();
  this._FP.destroy = () => this._FP.destroyHandles.map(fn => fn() || true).filter(v => v).length;
  this._FP.destroyHandles = eventNames.map(eventName => {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return () => obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);
  });
  return this;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsibGlzdGVuIiwib2JqIiwiZXZlbnROYW1lcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJGUElucHV0RXJyb3IiLCJoYW5kbGVyIiwiY2hhaW5FbmQiLCJfRlAiLCJkZXN0cm95IiwiZGVzdHJveUhhbmRsZXMiLCJtYXAiLCJmbiIsImZpbHRlciIsInYiLCJsZW5ndGgiLCJldmVudE5hbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRU8sTUFBTUEsMEJBQVMsVUFBU0MsR0FBVCxFQUFjLEdBQUdDLFVBQWpCLEVBQTZCO0FBQ2pELE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RCxNQUFNLElBQUlDLG9CQUFKLENBQWlCLDhCQUFqQixDQUFOO0FBQzVEO0FBQ0EsUUFBTUMsVUFBVSxLQUFLQyxRQUFMLEVBQWhCO0FBQ0EsT0FBS0MsR0FBTCxDQUFTQyxPQUFULEdBQW1CLE1BQU0sS0FBS0QsR0FBTCxDQUFTRSxjQUFULENBQXdCQyxHQUF4QixDQUE0QkMsTUFBTUEsUUFBUSxJQUExQyxFQUFnREMsTUFBaEQsQ0FBdURDLEtBQUtBLENBQTVELEVBQStEQyxNQUF4RjtBQUNBLE9BQUtQLEdBQUwsQ0FBU0UsY0FBVCxHQUEwQlAsV0FBV1EsR0FBWCxDQUFlSyxhQUFhO0FBQ3BEZCxRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RZLFNBQXRELEVBQWlFVixPQUFqRTtBQUNBLFdBQU8sTUFBTUosSUFBSUEsSUFBSWUsbUJBQUosR0FBMEIscUJBQTFCLEdBQWtELEtBQXRELEVBQTZERCxTQUE3RCxFQUF3RVYsT0FBeEUsQ0FBYjtBQUNELEdBSHlCLENBQTFCO0FBSUEsU0FBTyxJQUFQO0FBQ0QsQ0FYTSIsImZpbGUiOiJldmVudHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGUElucHV0RXJyb3IgfSBmcm9tICcuL21vZHVsZXMvZXJyb3JzJ1xuXG5leHBvcnQgY29uc3QgbGlzdGVuID0gZnVuY3Rpb24ob2JqLCAuLi5ldmVudE5hbWVzKSB7XG4gIGlmICh0eXBlb2YgZXZlbnROYW1lcyA9PT0gJ3N0cmluZycpIGV2ZW50TmFtZXMgPSBbZXZlbnROYW1lc11cbiAgaWYgKCFvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignVmFsaWQgRXZlbnRFbWl0dGVyIHJlcXVpcmVkLicpXG4gIC8vIEdldHMgY2FsbGJhY2sgdG8gYXR0YWNoIHRvIHRoZSBldmVudCBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIHRoaXMuX0ZQLmRlc3Ryb3kgPSAoKSA9PiB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcy5tYXAoZm4gPT4gZm4oKSB8fCB0cnVlKS5maWx0ZXIodiA9PiB2KS5sZW5ndGhcbiAgdGhpcy5fRlAuZGVzdHJveUhhbmRsZXMgPSBldmVudE5hbWVzLm1hcChldmVudE5hbWUgPT4ge1xuICAgIG9ialtvYmouYWRkRXZlbnRMaXN0ZW5lciA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdvbiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgICByZXR1cm4gKCkgPT4gb2JqW29iai5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ29mZiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgfSlcbiAgcmV0dXJuIHRoaXNcbn0iXX0=

/***/ }),
/* 6 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._thenIf = exports.tapIf = exports.thenIf = undefined;

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

exports.thenIf = thenIf;
exports.tapIf = tapIf;
exports._thenIf = _thenIf;


function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if ((0, _utils.isPromiseLike)(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if ((0, _utils.isPromiseLike)(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse, true)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf(cond = x => x, ifTrue = x => x, ifFalse = () => null, returnValue = false) {
  const FP = __webpack_require__(/*! ./index */ 0);
  return value => FP.resolve(cond(value)).then(ans => ans ? ifTrue(value) : ifFalse(value)).then(v => returnValue ? value : v);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVxdWlyZSIsInJlc29sdmUiLCJhbnMiLCJ2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O1FBRVFBLE0sR0FBQUEsTTtRQUFRQyxLLEdBQUFBLEs7UUFBT0MsTyxHQUFBQSxPOzs7QUFFdkIsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYixFQUF1QixDQUFDLEdBQUdDLFNBQUosQ0FBdkIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUksMEJBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS0MsSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFTSixLQUFULENBQWVFLElBQWYsRUFBcUJDLE1BQXJCLEVBQTZCQyxPQUE3QixFQUFzQztBQUNwQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsT0FBYixFQUFzQixDQUFDLEdBQUdDLFNBQUosQ0FBdEIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUksMEJBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS0MsSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLEVBQXFDTyxLQUFyQyxDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLENBQVA7QUFDRDs7QUFFRCxTQUFTSCxPQUFULENBQWlCQyxPQUFPTyxLQUFLQSxDQUE3QixFQUFnQ04sU0FBU00sS0FBS0EsQ0FBOUMsRUFBaURMLFVBQVUsTUFBTSxJQUFqRSxFQUF1RVEsY0FBYyxLQUFyRixFQUE0RjtBQUMxRixRQUFNQyxLQUFLQyxRQUFRLFNBQVIsQ0FBWDtBQUNBLFNBQU9ILFNBQ0xFLEdBQUdFLE9BQUgsQ0FBV2IsS0FBS1MsS0FBTCxDQUFYLEVBQ0dELElBREgsQ0FDUU0sT0FBUUEsTUFBTWIsT0FBT1EsS0FBUCxDQUFOLEdBQXNCUCxRQUFRTyxLQUFSLENBRHRDLEVBRUdELElBRkgsQ0FFUU8sS0FBTUwsY0FBY0QsS0FBZCxHQUFzQk0sQ0FGcEMsQ0FERjtBQUlEIiwiZmlsZSI6ImNvbmRpdGlvbmFsLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQcm9taXNlTGlrZSB9IGZyb20gJy4vbW9kdWxlcy91dGlscydcblxuZXhwb3J0IHt0aGVuSWYsIHRhcElmLCBfdGhlbklmfVxuXG5mdW5jdGlvbiB0aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0aGVuSWYnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZlRydWUgPSBjb25kXG4gICAgY29uZCA9IHggPT4geFxuICB9XG4gIGlmIChpc1Byb21pc2VMaWtlKHRoaXMpKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2YWx1ZSA9PiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSkodmFsdWUpKVxuICB9XG4gIHJldHVybiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSlcbn1cblxuZnVuY3Rpb24gdGFwSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0YXBJZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBfdGhlbklmKGNvbmQgPSB4ID0+IHgsIGlmVHJ1ZSA9IHggPT4geCwgaWZGYWxzZSA9ICgpID0+IG51bGwsIHJldHVyblZhbHVlID0gZmFsc2UpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgcmV0dXJuIHZhbHVlID0+XG4gICAgRlAucmVzb2x2ZShjb25kKHZhbHVlKSlcbiAgICAgIC50aGVuKGFucyA9PiAoYW5zID8gaWZUcnVlKHZhbHVlKSA6IGlmRmFsc2UodmFsdWUpKSlcbiAgICAgIC50aGVuKHYgPT4gKHJldHVyblZhbHVlID8gdmFsdWUgOiB2KSlcbn1cbiJdfQ==

/***/ }),
/* 7 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = all;
exports.promiseAllObject = promiseAllObject;
exports.reject = reject;
exports._delay = _delay;
exports.delay = delay;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

function all(promises) {
  const FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  const keys = Object.getOwnPropertyNames(obj);
  const values = keys.map(key => obj[key]);
  return Promise.all(values).then(results => results.reduce((obj, val, index) => {
    var _Object$assign;

    const key = keys[index];
    return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
  }, {}));
}

function reject(err) {
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error(`Reject only accepts a new instance of Error!`);
}

function _delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new _errors.FPInputError('FP.delay(millisec) requires a numeric arg.');
  return value => new FP(resolve => {
    setTimeout(() => resolve(value), msec);
  });
}

function delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [...arguments]);
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbImFsbCIsInByb21pc2VBbGxPYmplY3QiLCJyZWplY3QiLCJfZGVsYXkiLCJkZWxheSIsInByb21pc2VzIiwiRlAiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIkFycmF5IiwiaXNBcnJheSIsIlByb21pc2UiLCJvYmoiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInZhbHVlcyIsIm1hcCIsImtleSIsInRoZW4iLCJyZXN1bHRzIiwicmVkdWNlIiwidmFsIiwiaW5kZXgiLCJhc3NpZ24iLCJlcnIiLCJFcnJvciIsIl9lcnJvciIsIm1zZWMiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJGUElucHV0RXJyb3IiLCJ2YWx1ZSIsInNldFRpbWVvdXQiLCJzdGVwcyIsImFkZFN0ZXAiLCJhcmd1bWVudHMiLCJfRlAiXSwibWFwcGluZ3MiOiI7Ozs7O1FBSWdCQSxHLEdBQUFBLEc7UUFLQUMsZ0IsR0FBQUEsZ0I7UUFTQUMsTSxHQUFBQSxNO1FBUUFDLE0sR0FBQUEsTTtRQU1BQyxLLEdBQUFBLEs7O0FBaENoQjs7QUFJTyxTQUFTSixHQUFULENBQWFLLFFBQWIsRUFBdUI7QUFDNUIsUUFBTUMsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxTQUFPRCxHQUFHRSxPQUFILENBQVdDLE1BQU1DLE9BQU4sQ0FBY0wsUUFBZCxJQUEwQk0sUUFBUVgsR0FBUixDQUFZSyxRQUFaLENBQTFCLEdBQWtESixpQkFBaUJJLFFBQWpCLENBQTdELENBQVA7QUFDRDs7QUFFTSxTQUFTSixnQkFBVCxDQUEwQlcsR0FBMUIsRUFBK0I7QUFDcEMsUUFBTUMsT0FBT0MsT0FBT0MsbUJBQVAsQ0FBMkJILEdBQTNCLENBQWI7QUFDQSxRQUFNSSxTQUFTSCxLQUFLSSxHQUFMLENBQVNDLE9BQU9OLElBQUlNLEdBQUosQ0FBaEIsQ0FBZjtBQUNBLFNBQU9QLFFBQVFYLEdBQVIsQ0FBWWdCLE1BQVosRUFBb0JHLElBQXBCLENBQXlCQyxXQUFXQSxRQUFRQyxNQUFSLENBQWUsQ0FBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsS0FBcUI7QUFBQTs7QUFDN0UsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsV0FBT1QsT0FBT1UsTUFBUCxzQ0FBaUJOLEdBQWpCLElBQXVCSSxHQUF2QixtQkFBOEJWLEdBQTlCLENBQVA7QUFDRCxHQUgwQyxFQUd4QyxFQUh3QyxDQUFwQyxDQUFQO0FBSUQ7O0FBRU0sU0FBU1YsTUFBVCxDQUFnQnVCLEdBQWhCLEVBQXFCO0FBQzFCLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9kLFFBQVFULE1BQVIsQ0FBZXVCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLENBQVcsOENBQVgsQ0FBTjtBQUNEOztBQUVNLFNBQVN2QixNQUFULENBQWdCeUIsSUFBaEIsRUFBc0I7QUFDM0IsUUFBTXRCLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBSSxDQUFDc0IsT0FBT0MsU0FBUCxDQUFpQkYsSUFBakIsQ0FBTCxFQUE2QixNQUFNLElBQUlHLG9CQUFKLENBQWlCLDRDQUFqQixDQUFOO0FBQzdCLFNBQU9DLFNBQVMsSUFBSTFCLEVBQUosQ0FBT0UsV0FBVztBQUFFeUIsZUFBVyxNQUFNekIsUUFBUXdCLEtBQVIsQ0FBakIsRUFBaUNKLElBQWpDO0FBQXdDLEdBQTVELENBQWhCO0FBQ0Q7O0FBRU0sU0FBU3hCLEtBQVQsQ0FBZXdCLElBQWYsRUFBcUI7QUFDMUIsUUFBTXRCLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBSSxLQUFLMkIsS0FBVCxFQUFnQixPQUFPLEtBQUtDLE9BQUwsQ0FBYSxPQUFiLEVBQXNCLENBQUMsR0FBR0MsU0FBSixDQUF0QixDQUFQO0FBQ2hCLFNBQU8sUUFBUSxLQUFLQyxHQUFiLEdBQW1CL0IsR0FBR0UsT0FBSCxDQUFXLEtBQUtXLElBQUwsQ0FBVWhCLE9BQU95QixJQUFQLENBQVYsQ0FBWCxDQUFuQixHQUF5RHpCLE9BQU95QixJQUFQLEdBQWhFO0FBQ0QiLCJmaWxlIjoicHJvbWlzZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZQSW5wdXRFcnJvciB9IGZyb20gJy4vbW9kdWxlcy9lcnJvcnMnXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICByZXR1cm4gRlAucmVzb2x2ZShBcnJheS5pc0FycmF5KHByb21pc2VzKSA/IFByb21pc2UuYWxsKHByb21pc2VzKSA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzZUFsbE9iamVjdChvYmopIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iailcbiAgY29uc3QgdmFsdWVzID0ga2V5cy5tYXAoa2V5ID0+IG9ialtrZXldKVxuICByZXR1cm4gUHJvbWlzZS5hbGwodmFsdWVzKS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0cy5yZWR1Y2UoKG9iaiwgdmFsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBba2V5XTogdmFsIH0sIG9iailcbiAgfSwge30pKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVqZWN0KGVycikge1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2RlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihtc2VjKSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignRlAuZGVsYXkobWlsbGlzZWMpIHJlcXVpcmVzIGEgbnVtZXJpYyBhcmcuJylcbiAgcmV0dXJuIHZhbHVlID0+IG5ldyBGUChyZXNvbHZlID0+IHsgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHZhbHVlKSwgbXNlYykgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdkZWxheScsIFsuLi5hcmd1bWVudHNdKVxuICByZXR1cm4gdGhpcyAmJiB0aGlzLl9GUCA/IEZQLnJlc29sdmUodGhpcy50aGVuKF9kZWxheShtc2VjKSkpIDogX2RlbGF5KG1zZWMpKClcbn1cbiJdfQ==

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,