(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["FP"] = factory();
	else
		root["FP"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FP;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

var _monads = __webpack_require__(/*! ./monads */ 3);

var _arrays = __webpack_require__(/*! ./arrays */ 4);

var _events = __webpack_require__(/*! ./events */ 6);

var _conditional = __webpack_require__(/*! ./conditional */ 7);

var _promise = __webpack_require__(/*! ./promise */ 8);

// FP.prototype.reso = resolve
FP.prototype.all = _promise.all;
FP.prototype.map = _arrays.map;
FP.prototype.find = _arrays.find;
FP.prototype.findIndex = _arrays.findIndex;
FP.prototype.filter = _arrays.filter;
FP.prototype.reduce = _arrays.reduce;
FP.prototype.listen = _events.listen;
FP.prototype.tapIf = _conditional.tapIf;
FP.prototype.thenIf = _conditional.thenIf;
FP.prototype._thenIf = _conditional._thenIf;
FP.prototype.delay = _promise.delay;
FP.prototype._delay = _promise._delay;
FP.prototype.reject = _promise.reject;

FP.default = FP;
// export const all = allPromises

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = msec => FP.resolve().delay(msec);
FP.silent = limit => FP.resolve().silent(limit);

// Monadic Methods
FP.chain = _monads.chain;
FP.prototype.chainEnd = _monads.chainEnd;
FP.reject = FP.prototype.reject;
FP.resolve = resolve;

FP.promisify = promisify;
FP.promisifyAll = promisifyAll;
FP.unpack = unpack;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency(limit = Infinity) {
  if (this.steps) return this.addStep('concurrency', [...arguments]);
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet(errorLimit = Infinity) {
  if (this.steps) return this.addStep('quiet', [...arguments]);
  this._FP.errors = { count: 0, limit: errorLimit };
  return this;
};
FP.prototype.silent = FP.prototype.quiet;

FP.prototype.get = function get(...keyNames) {
  if (this.steps) return this.addStep('get', [...arguments]);
  keyNames = (0, _utils.flatten)(keyNames);
  return this.then(obj => {
    if (typeof obj === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce((extracted, key) => {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [...arguments]);
  return this.then(obj => {
    if (typeof obj === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [...arguments]);
  if (arguments.length === 2) return this.catchIf(...arguments);
  if (!(0, _utils.isFunction)(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.catch(err => fn(err)));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [...arguments]);
  if (!(0, _utils.isFunction)(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + typeof fn);

  return FP.resolve(this._FP.promise.catch(err => {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [...arguments]);
  if (!(0, _utils.isFunction)(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [...arguments]);
  if (!(0, _utils.isFunction)(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(value => fn(value) ? value : value));
};

function resolve(value) {
  return new FP((resolve, reject) => {
    if (value && (0, _utils.isFunction)(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
}

function promisify(cb) {
  return (...args) => new FP((yah, nah) => cb.call(this, ...args, (err, res) => err ? nah(err) : yah(res)));
}

function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {
    throw new Error('Invalid Argument obj in promisifyAll(obj)');
  }
  return Object.getOwnPropertyNames(obj).filter(key => typeof obj[key] === 'function').reduce((obj, fnName) => {
    if (!/Sync/.test(fnName) && !obj[`${fnName}Async`]) obj[`${fnName}Async`] = FP.promisify(obj[`${fnName}`]);
    return obj;
  }, obj);
}

function unpack() {
  let resolve,
      reject,
      promise = new FP((yah, nah) => {
    resolve = yah;reject = nah;
  });
  return { promise, resolve, reject };
}

function FP(resolveRejectCB) {
  if (!(this instanceof FP)) {
    return new FP(resolveRejectCB);
  }
  if (arguments.length !== 1) throw new Error('FunctionalPromises constructor only accepts 1 callback argument');
  this._FP = {
    errors: { limit: 0, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4
  };
}
// if (process && process.on) {
//   // process.on('uncaughtException', e => console.error('FPromises: FATAL EXCEPTION: uncaughtException', e))
//   process.on('unhandledRejection', e => console.error('FPromises: FATAL ERROR: unhandledRejection', e))
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
class FunctionalError extends Error {
  constructor(msg, options) {
    if (typeof msg === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }
    super(msg);
    if (typeof options === 'object') {
      Object.getOwnPropertyNames(options).forEach(key => {
        this[key] = options[key];
      });
    }
    this.name = this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(this, this.constructor);
  }
}
exports.FunctionalError = FunctionalError;
class FunctionalUserError extends FunctionalError {}
exports.FunctionalUserError = FunctionalUserError;
class FPUnexpectedError extends FunctionalError {}
exports.FPUnexpectedError = FPUnexpectedError;
class FPInputError extends FunctionalError {}
exports.FPInputError = FPInputError;
class FPSoftError extends FunctionalError {}
exports.FPSoftError = FPSoftError;
class FPTimeout extends FunctionalError {}
exports.FPTimeout = FPTimeout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibXNnIiwib3B0aW9ucyIsIm1lc3NhZ2UiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImtleSIsIm5hbWUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLGVBQU4sU0FBOEJDLEtBQTlCLENBQW9DO0FBQ3pDQyxjQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLE9BQU9ELEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCO0FBQ0QsVUFBTUYsR0FBTjtBQUNBLFFBQUksT0FBT0MsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQkUsYUFBT0MsbUJBQVAsQ0FBMkJILE9BQTNCLEVBQ0dJLE9BREgsQ0FDV0MsT0FBTztBQUNkLGFBQUtBLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FISDtBQUlEO0FBQ0QsU0FBS0MsSUFBTCxHQUFZLEtBQUtSLFdBQUwsQ0FBaUJRLElBQTdCO0FBQ0E7QUFDQVQsVUFBTVUsaUJBQU4sQ0FBd0IsSUFBeEIsRUFBOEIsS0FBS1QsV0FBbkM7QUFDRDtBQWhCd0M7UUFBOUJGLGUsR0FBQUEsZTtBQWtCTixNQUFNWSxtQkFBTixTQUFrQ1osZUFBbEMsQ0FBa0Q7UUFBNUNZLG1CLEdBQUFBLG1CO0FBQ04sTUFBTUMsaUJBQU4sU0FBZ0NiLGVBQWhDLENBQWdEO1FBQTFDYSxpQixHQUFBQSxpQjtBQUNOLE1BQU1DLFlBQU4sU0FBMkJkLGVBQTNCLENBQTJDO1FBQXJDYyxZLEdBQUFBLFk7QUFDTixNQUFNQyxXQUFOLFNBQTBCZixlQUExQixDQUEwQztRQUFwQ2UsVyxHQUFBQSxXO0FBQ04sTUFBTUMsU0FBTixTQUF3QmhCLGVBQXhCLENBQXdDO1FBQWxDZ0IsUyxHQUFBQSxTIiwiZmlsZSI6ImVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBGdW5jdGlvbmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1zZywgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgbXNnID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IG1zZ1xuICAgICAgaWYgKCBtc2cubWVzc2FnZSApIG1zZyA9IG1zZy5tZXNzYWdlXG4gICAgfVxuICAgIHN1cGVyKG1zZylcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcHRpb25zKVxuICAgICAgICAuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XVxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAvLyBDYXB0dXJpbmcgc3RhY2sgdHJhY2UsIGV4Y2x1ZGluZyBjb25zdHJ1Y3RvciBjYWxsIGZyb20gaXQuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3RvcilcbiAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmV4cG9ydCBjbGFzcyBGUFVuZXhwZWN0ZWRFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0IGNsYXNzIEZQSW5wdXRFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0IGNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5leHBvcnQgY2xhc3MgRlBUaW1lb3V0IGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG4iXX0=

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
const utils = {
  isPromiseLike(p) {
    return p && typeof p.then === 'function';
  },
  isFunction(fn) {
    return typeof fn === 'function';
  },
  isEnumerable(list) {
    return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';
  },

  flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce((results, item) => results.concat(Array.isArray(item) ? utils.flatten(item) : [item]), []);
  }
};

exports.default = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwiaXNQcm9taXNlTGlrZSIsInAiLCJ0aGVuIiwiaXNGdW5jdGlvbiIsImZuIiwiaXNFbnVtZXJhYmxlIiwibGlzdCIsIkFycmF5IiwiaXNBcnJheSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZmxhdHRlbiIsImFyciIsIkVycm9yIiwicmVkdWNlIiwicmVzdWx0cyIsIml0ZW0iLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsUUFBUTtBQUNaQyxnQkFBY0MsQ0FBZCxFQUFpQjtBQUFFLFdBQU9BLEtBQUssT0FBT0EsRUFBRUMsSUFBVCxLQUFrQixVQUE5QjtBQUEwQyxHQURqRDtBQUVaQyxhQUFXQyxFQUFYLEVBQWU7QUFBRSxXQUFPLE9BQU9BLEVBQVAsS0FBYyxVQUFyQjtBQUFpQyxHQUZ0QztBQUdaQyxlQUFhQyxJQUFiLEVBQW1CO0FBQUUsV0FBT0EsUUFBUUMsTUFBTUMsT0FBTixDQUFjRixJQUFkLENBQVIsSUFBK0IsT0FBT0EsS0FBS0csT0FBT0MsUUFBWixDQUFQLEtBQWlDLFVBQXZFO0FBQW1GLEdBSDVGOztBQUtaQyxVQUFRQyxHQUFSLEVBQWE7QUFDWCxRQUFJLENBQUNMLE1BQU1DLE9BQU4sQ0FBY0ksR0FBZCxDQUFMLEVBQXlCLE1BQU0sSUFBSUMsS0FBSixDQUFVLGlEQUFWLENBQU47QUFDekIsV0FBT0QsSUFBSUUsTUFBSixDQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixLQUFtQkQsUUFBUUUsTUFBUixDQUFlVixNQUFNQyxPQUFOLENBQWNRLElBQWQsSUFBc0JqQixNQUFNWSxPQUFOLENBQWNLLElBQWQsQ0FBdEIsR0FBNEMsQ0FBQ0EsSUFBRCxDQUEzRCxDQUE5QixFQUFrRyxFQUFsRyxDQUFQO0FBQ0Q7QUFSVyxDQUFkOztrQkFXZWpCLEsiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHtcbiAgaXNQcm9taXNlTGlrZShwKSB7IHJldHVybiBwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicgfSxcbiAgaXNGdW5jdGlvbihmbikgeyByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nIH0sXG4gIGlzRW51bWVyYWJsZShsaXN0KSB7IHJldHVybiBsaXN0ICYmIEFycmF5LmlzQXJyYXkobGlzdCkgfHwgdHlwZW9mIGxpc3RbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGZsYXR0ZW4oYXJyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHRocm93IG5ldyBFcnJvcignTWV0aG9kIGBmbGF0dGVuYCByZXF1aXJlcyB2YWxpZCBhcnJheSBwYXJhbWV0ZXInKVxuICAgIHJldHVybiBhcnIucmVkdWNlKChyZXN1bHRzLCBpdGVtKSA9PiByZXN1bHRzLmNvbmNhdChBcnJheS5pc0FycmF5KGl0ZW0pID8gdXRpbHMuZmxhdHRlbihpdGVtKSA6IFtpdGVtXSksIFtdKVxuICB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCB1dGlsc1xuIl19

/***/ }),
/* 3 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chain = chain;
exports.chainEnd = chainEnd;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

/**
 * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
 * @returns FunctionalPromise
 */
function chain() {
  const FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  const promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
 * Call after starting a `.chain()`.
 *
 * One of the few non-chainable methods in the API.
 * @returns a Function. It runs your functional chain!
 */
function chainEnd() {
  const FP = __webpack_require__(/*! ./index */ 0);

  return input => {
    if (!this.steps || this.steps.length <= 0) throw new _errors.FPInputError('No steps defined between .chain() & .chainEnd()');
    let stepCount = 0;
    let { promise, resolve, reject } = FP.unpack();
    while (stepCount < this.steps.length) {
      const [fnName,, args] = this.steps[stepCount];
      promise = promise[fnName](...args);
      stepCount++;
    }
    resolve(input);
    return promise;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsiY2hhaW4iLCJjaGFpbkVuZCIsIkZQIiwicmVxdWlyZSIsInByb21pc2UiLCJyZXNvbHZlIiwic3RlcHMiLCJpbnB1dCIsImxlbmd0aCIsIkZQSW5wdXRFcnJvciIsInN0ZXBDb3VudCIsInJlamVjdCIsInVucGFjayIsImZuTmFtZSIsImFyZ3MiXSwibWFwcGluZ3MiOiI7Ozs7O1FBTWdCQSxLLEdBQUFBLEs7UUFjQUMsUSxHQUFBQSxROztBQXBCaEI7O0FBRUE7Ozs7QUFJTyxTQUFTRCxLQUFULEdBQWlCO0FBQ3RCLFFBQU1FLEtBQUtDLFFBQVEsU0FBUixDQUFYO0FBQ0E7QUFDQSxRQUFNQyxVQUFVRixHQUFHRyxPQUFILEVBQWhCO0FBQ0FELFVBQVFFLEtBQVIsR0FBZ0IsRUFBaEI7QUFDQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1PLFNBQVNILFFBQVQsR0FBb0I7QUFDekIsUUFBTUMsS0FBS0MsUUFBUSxTQUFSLENBQVg7O0FBRUEsU0FBT0ksU0FBUztBQUNkLFFBQUksQ0FBQyxLQUFLRCxLQUFOLElBQWUsS0FBS0EsS0FBTCxDQUFXRSxNQUFYLElBQXFCLENBQXhDLEVBQTJDLE1BQU0sSUFBSUMsb0JBQUosQ0FBaUIsaURBQWpCLENBQU47QUFDM0MsUUFBSUMsWUFBWSxDQUFoQjtBQUNBLFFBQUksRUFBQ04sT0FBRCxFQUFVQyxPQUFWLEVBQW1CTSxNQUFuQixLQUE2QlQsR0FBR1UsTUFBSCxFQUFqQztBQUNBLFdBQU9GLFlBQVksS0FBS0osS0FBTCxDQUFXRSxNQUE5QixFQUFzQztBQUNwQyxZQUFNLENBQUNLLE1BQUQsR0FBV0MsSUFBWCxJQUFtQixLQUFLUixLQUFMLENBQVdJLFNBQVgsQ0FBekI7QUFDQU4sZ0JBQVVBLFFBQVFTLE1BQVIsRUFBZ0IsR0FBR0MsSUFBbkIsQ0FBVjtBQUNBSjtBQUNEO0FBQ0RMLFlBQVFFLEtBQVI7QUFDQSxXQUFPSCxPQUFQO0FBQ0QsR0FYRDtBQVlEIiwiZmlsZSI6Im1vbmFkcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZQSW5wdXRFcnJvciB9IGZyb20gJy4vbW9kdWxlcy9lcnJvcnMnXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbigpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgLy8gY3JlYXRlIGEgcGxhY2Vob2xkZXIvaW5pdGlhbCBwcm9taXNlIHRvIGhvbGQgdGhlIHN0ZXBzL2NoYWluIGRhdGFcbiAgY29uc3QgcHJvbWlzZSA9IEZQLnJlc29sdmUoKVxuICBwcm9taXNlLnN0ZXBzID0gW11cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuLyoqXG4gKiBDYWxsIGFmdGVyIHN0YXJ0aW5nIGEgYC5jaGFpbigpYC5cbiAqXG4gKiBPbmUgb2YgdGhlIGZldyBub24tY2hhaW5hYmxlIG1ldGhvZHMgaW4gdGhlIEFQSS5cbiAqIEByZXR1cm5zIGEgRnVuY3Rpb24uIEl0IHJ1bnMgeW91ciBmdW5jdGlvbmFsIGNoYWluIVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhaW5FbmQoKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi9pbmRleCcpXG5cbiAgcmV0dXJuIGlucHV0ID0+IHtcbiAgICBpZiAoIXRoaXMuc3RlcHMgfHwgdGhpcy5zdGVwcy5sZW5ndGggPD0gMCkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignTm8gc3RlcHMgZGVmaW5lZCBiZXR3ZWVuIC5jaGFpbigpICYgLmNoYWluRW5kKCknKVxuICAgIGxldCBzdGVwQ291bnQgPSAwXG4gICAgbGV0IHtwcm9taXNlLCByZXNvbHZlLCByZWplY3R9ID0gRlAudW5wYWNrKClcbiAgICB3aGlsZSAoc3RlcENvdW50IDwgdGhpcy5zdGVwcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFtmbk5hbWUsICwgYXJnc10gPSB0aGlzLnN0ZXBzW3N0ZXBDb3VudF1cbiAgICAgIHByb21pc2UgPSBwcm9taXNlW2ZuTmFtZV0oLi4uYXJncylcbiAgICAgIHN0ZXBDb3VudCsrXG4gICAgfVxuICAgIHJlc29sdmUoaW5wdXQpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxufVxuIl19

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reduce = exports.filter = exports.findIndex = exports.find = exports.map = undefined;

var _ = __webpack_require__(/*! ../ */ 5);

var _2 = _interopRequireDefault(_);

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.map = map;
exports.find = find;
exports.findIndex = findIndex;
exports.filter = filter;
exports.reduce = reduce;


function find(callback) {
  return _find.call(this, callback).then(({ item }) => item);
}
function findIndex(callback) {
  return _find.call(this, callback).then(({ index }) => index);
}

function _find(iterable, callback) {
  if (this.steps) return this.addStep('_find', [...arguments]);
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return _2.default.resolve(iterable).filter(callback).then(results => results[0] != undefined ? { item: results[0], index: results.indexOf(results[0]) } : { item: undefined, index: -1 });
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [...arguments]);
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, (acc, item) => Promise.resolve(callback(item)).then(x => x ? acc.concat([item]) : acc), []);
}

function reduce(iterable, reducer, initVal) {
  if (this.steps) return this.addStep('reduce', [...arguments]);
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else iterable = _2.default.resolve(iterable, this);

  return new _2.default((resolve, reject) => {
    return iterable.then(iterable => {
      const iterator = iterable[Symbol.iterator]();
      let i = 0;

      const next = total => {
        const current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).then(([total, item]) => next(reducer(total, item, i++))).catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {
  if (this.steps) return this.addStep('map', [...arguments]);
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }
  let resolvedOrRejected = false;
  const threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  const innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  let initialThread = 0;
  let errors = [];
  let count = 0;
  const results = [];
  const threadPool = new Set();
  const threadPoolFull = () => threadPool.size >= threadLimit;
  const isDone = () => errors.length > this._FP.errors.limit || count >= args.length || resolvedOrRejected;
  const setResult = index => value => {
    threadPool.delete(index);
    results[index] = value;
    return value;
  };
  return _2.default.resolve(new Promise((resolve, reject) => {
    const resolveIt = x => {
      // console.log('Action.resolve:', resolvedOrRejected, x)
      if (resolvedOrRejected) {
        return null;
      } else {
        resolvedOrRejected = true;
      }
      resolve(x);
    };
    const rejectIt = x => {
      if (resolvedOrRejected) {
        return null;
      } else {
        resolvedOrRejected = true;
      }
      // console.log('Action.reject:', resolvedOrRejected, x)
      reject(x);
    };
    innerValues.then(items => {
      args = [...items];
      if (!(0, _utils.isEnumerable)(items)) return reject(new _errors.FPInputError('Invalid input data passed into FP.map()'));
      const complete = () => {
        let action = null;
        if (errors.length > this._FP.errors.limit) action = rejectIt;
        if (isDone()) action = resolveIt;
        if (action) return Promise.all(results).then(data => action(results)) ? true : true;
        return false;
      };
      const checkAndRun = val => {
        // console.log('checkAndRun', count, resolvedOrRejected, val)
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      const runItem = c => {
        if (resolvedOrRejected) {
          return null;
        } else {
          count++;
        }
        if (threadPoolFull()) return setTimeout(() => runItem(c), 0);
        if (results[c]) return results[c];
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        results[c] = Promise.resolve(args[c]).then(val => fn(val, c, args)).then(val => setResult(c)(val)).then(checkAndRun).catch(err => {
          this._FP.errors.count++;
          errors.push(err);
          // console.log('ERR HANDLER!', errors.length, this._FP.errors.limit)
          if (errors.length > this._FP.errors.limit) {
            const fpErr = errors.length === 1 ? err : new _errors.FunctionalError(`Error Limit ${this._FP.errors.limit} Exceeded.
              idx=${c} errCnt=${this._FP.errors.count}`, { errors, results, ctx: this });
            Promise.resolve(setResult(c)(err)).then(() => rejectIt(fpErr));
          } else {
            // console.warn('Error OK:', JSON.stringify(this._FP.errors))
            return Promise.resolve().then(() => setResult(c)(err)).then(checkAndRun);
          }
        });

        return results[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) runItem(initialThread++);
    });
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 5 */
/*!****************************************!*\
  !*** ./dist/functional-promise.min.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function (a, b) {
               true ? module.exports = b() : "function" == typeof define && define.amd ? define([], b) : "object" == typeof exports ? exports.FP = b() : a.FP = b();
})("undefined" == typeof self ? undefined : self, function () {
              return function (a) {
                            function b(d) {
                                          if (c[d]) return c[d].exports;var e = c[d] = { i: d, l: !1, exports: {} };return a[d].call(e.exports, e, e.exports, b), e.l = !0, e.exports;
                            }var c = {};return b.m = a, b.c = c, b.d = function (a, c, d) {
                                          b.o(a, c) || Object.defineProperty(a, c, { configurable: !1, enumerable: !0, get: d });
                            }, b.n = function (a) {
                                          var c = a && a.__esModule ? function () {
                                                        return a["default"];
                                          } : function () {
                                                        return a;
                                          };return b.d(c, "a", c), c;
                            }, b.o = function (a, b) {
                                          return Object.prototype.hasOwnProperty.call(a, b);
                            }, b.p = "", b(b.s = 0);
              }([function (a, b, c) {
                            "use strict";
                            function d(b) {
                                          if (!(this instanceof d)) return new d(b);if (1 !== arguments.length) throw new Error("FunctionalPromises constructor only accepts 1 callback argument");this._FP = { errors: { limit: 0, count: 0 }, promise: new Promise(b), concurrencyLimit: 4 };
                            }Object.defineProperty(b, "__esModule", { value: !0 }), b.default = d;var e = c(1),
                                f = c(2),
                                g = c(3),
                                h = c(4),
                                i = c(5),
                                j = c(6),
                                k = c(7);d.prototype.all = k.all, d.prototype.map = h.map, d.prototype.find = h.find, d.prototype.findIndex = h.findIndex, d.prototype.filter = h.filter, d.prototype.reduce = h.reduce, d.prototype.listen = i.listen, d.prototype.tapIf = j.tapIf, d.prototype.thenIf = j.thenIf, d.prototype._thenIf = j._thenIf, d.prototype.delay = k.delay, d.prototype._delay = k._delay, d.prototype.reject = k.reject, d.default = d, d.all = d.prototype.all, d.thenIf = d.prototype._thenIf, d.delay = b => d.resolve().delay(b), d.silent = b => d.resolve().silent(b), d.chain = g.chain, d.prototype.chainEnd = g.chainEnd, d.reject = d.prototype.reject, d.resolve = function (e) {
                                          return new d((a, b) => e && (0, f.isFunction)(e.then) ? e.then(a).catch(b) : void a(e));
                            }, d.promisify = function (e) {
                                          return (...a) => new d((f, c) => e.call(this, ...a, (d, a) => d ? c(d) : f(a)));
                            }, d.promisifyAll = function (c) {
                                          if (!c || !Object.getPrototypeOf(c)) throw new Error("Invalid Argument obj in promisifyAll(obj)");return Object.getOwnPropertyNames(c).filter(a => "function" == typeof c[a]).reduce((c, a) => (/Sync/.test(a) || c[`${a}Async`] || (c[`${a}Async`] = d.promisify(c[`${a}`])), c), c);
                            }, d.unpack = function () {
                                          let e,
                                              f,
                                              g = new d((a, b) => {
                                                        e = a, f = b;
                                          });return { promise: g, resolve: e, reject: f };
                            }, d.prototype.addStep = function (c, a) {
                                          return this.steps && this.steps.push([c, this, a]), this;
                            }, d.prototype.concurrency = function (b = 1 / 0) {
                                          return this.steps ? this.addStep("concurrency", [...arguments]) : (this._FP.concurrencyLimit = b, this);
                            }, d.prototype.quiet = function (b = 1 / 0) {
                                          return this.steps ? this.addStep("quiet", [...arguments]) : (this._FP.errors = { count: 0, limit: b }, this);
                            }, d.prototype.silent = d.prototype.quiet, d.prototype.get = function (...c) {
                                          return this.steps ? this.addStep("get", [...arguments]) : (c = (0, f.flatten)(c), this.then(d => "object" == typeof d ? 1 === c.length ? d[c[0]] : c.reduce((b, a) => (b[a] = d[a], b), {}) : d));
                            }, d.prototype.set = function (d, a) {
                                          return this.steps ? this.addStep("set", [...arguments]) : this.then(b => ("object" == typeof b && (b[d] = a), b));
                            }, d.prototype.catch = function (c) {
                                          if (this.steps) return this.addStep("catch", [...arguments]);if (2 === arguments.length) return this.catchIf(...arguments);if (!(0, f.isFunction)(c)) throw new e.FunctionalError("Invalid fn argument for `.catch(fn)`. Must be a function. Currently: " + typeof c);return d.resolve(this._FP.promise.catch(a => c(a)));
                            }, d.prototype.catchIf = function (g, a) {
                                          if (this.steps) return this.addStep("catchIf", [...arguments]);if (!(0, f.isFunction)(a)) throw new e.FunctionalError("Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: " + typeof a);return d.resolve(this._FP.promise.catch(b => {
                                                        if (g && b instanceof g) return a(b);throw b;
                                          }));
                            }, d.prototype.then = function (b) {
                                          if (this.steps) return this.addStep("then", [...arguments]);if (!(0, f.isFunction)(b)) throw new e.FunctionalError("Invalid fn argument for `.then(fn)`. Must be a function. Currently: " + typeof b);return d.resolve(this._FP.promise.then(b));
                            }, d.prototype.tap = function (c) {
                                          if (this.steps) return this.addStep("tap", [...arguments]);if (!(0, f.isFunction)(c)) throw new e.FunctionalError("Invalid fn argument for `.tap(fn)`. Must be a function. Currently: " + typeof c);return d.resolve(this._FP.promise.then(a => c(a) ? a : a));
                            };
              }, function (a, b) {
                            "use strict";
                            Object.defineProperty(b, "__esModule", { value: !0 });class c extends Error {
                                          constructor(c, d) {
                                                        "object" == typeof c && (d = c, c.message && (c = c.message)), super(c), "object" == typeof d && Object.getOwnPropertyNames(d).forEach(b => {
                                                                      this[b] = d[b];
                                                        }), this.name = this.constructor.name, Error.captureStackTrace(this, this.constructor);
                                          }
                            }b.FunctionalError = c;b.FunctionalUserError = class extends c {};b.FPUnexpectedError = class extends c {};b.FPInputError = class extends c {};b.FPSoftError = class extends c {};b.FPTimeout = class extends c {};
              }, function (a, b) {
                            "use strict";
                            Object.defineProperty(b, "__esModule", { value: !0 });const c = { isPromiseLike(b) {
                                                        return b && "function" == typeof b.then;
                                          }, isFunction(b) {
                                                        return "function" == typeof b;
                                          }, isEnumerable(b) {
                                                        return b && Array.isArray(b) || "function" == typeof b[Symbol.iterator];
                                          }, flatten(b) {
                                                        if (!Array.isArray(b)) throw new Error("Method `flatten` requires valid array parameter");return b.reduce((d, a) => d.concat(Array.isArray(a) ? c.flatten(a) : [a]), []);
                                          } };b.default = c;
              }, function (a, b, c) {
                            "use strict";
                            Object.defineProperty(b, "__esModule", { value: !0 }), b.chain = function () {
                                          const d = c(0),
                                                a = d.resolve();return a.steps = [], a;
                            }, b.chainEnd = function () {
                                          const h = c(0);return a => {
                                                        if (!this.steps || 0 >= this.steps.length) throw new g.FPInputError("No steps defined between .chain() & .chainEnd()");let i = 0,
                                                            { promise: j, resolve: b, reject: e } = h.unpack();for (; i < this.steps.length;) {
                                                                      const [c,, a] = this.steps[i];j = j[c](...a), i++;
                                                        }return b(a), j;
                                          };
                            };var g = c(1);
              }, function (a, b, o) {
                            "use strict";
                            function c(d, e) {
                                          const f = o(0);return this.steps ? this.addStep("_find", [...arguments]) : ("function" == typeof d && (e = d, d = this._FP.promise), f.resolve(d).filter(e).then(b => null == b[0] ? { item: void 0, index: -1 } : { item: b[0], index: b.indexOf(b[0]) }));
                            }function d(f, e, i) {
                                          const g = o(0);return this.steps ? this.addStep("reduce", [...arguments]) : ("function" == typeof f ? (i = e, e = f, f = this._FP ? this._FP.promise : this) : f = g.resolve(f, this), new g((b, d) => f.then(c => {
                                                        const j = c[Symbol.iterator]();let f = 0;const k = g => {
                                                                      const a = j.next();return a.done ? b(g) : void Promise.all([g, a.value]).then(([b, a]) => k(e(b, a, f++))).catch(d);
                                                        };k(i);
                                          })));
                            }Object.defineProperty(b, "__esModule", { value: !0 }), b.reduce = b.filter = b.findIndex = b.find = b.map = void 0;var t = o(2),
                                u = o(1);b.map = function (v, p) {
                                          const q = o(0);if (this.steps) return this.addStep("map", [...arguments]);1 === arguments.length && this && this._FP && (p = v, v = this && this._FP && this._FP.promise);let w = !1;const c = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4)),
                                                e = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(v);let f = 0,
                                              s = [],
                                              h = 0;const x = [],
                                                j = new Set(),
                                                k = () => j.size >= c,
                                                l = () => s.length > this._FP.errors.limit || h >= v.length || w,
                                                m = c => a => (j.delete(c), x[c] = a, a);return q.resolve(new Promise((b, d) => {
                                                        const g = c => w ? null : void (w = !0, b(c)),
                                                              i = b => w ? null : void (w = !0, d(b));e.then(a => {
                                                                      if (v = [...a], !(0, t.isEnumerable)(a)) return d(new u.FPInputError("Invalid input data passed into FP.map()"));const b = () => {
                                                                                    let b = null;return s.length > this._FP.errors.limit && (b = i), l() && (b = g), !!b && (!!Promise.all(x).then(() => b(x)) || !0);
                                                                      },
                                                                            n = c => {
                                                                                    if (!w) return b() || x[h] || o(h), c;
                                                                      },
                                                                            o = d => w ? null : (h++, k()) ? setTimeout(() => o(d), 0) : x[d] ? x[d] : (j.add(d), x[d] = Promise.resolve(v[d]).then(a => p(a, d, v)).then(b => m(d)(b)).then(n).catch(c => {
                                                                                    if (this._FP.errors.count++, s.push(c), s.length > this._FP.errors.limit) {
                                                                                                  const a = 1 === s.length ? c : new u.FunctionalError(`Error Limit ${this._FP.errors.limit} Exceeded.
              idx=${d} errCnt=${this._FP.errors.count}`, { errors: s, results: x, ctx: this });Promise.resolve(m(d)(c)).then(() => i(a));
                                                                                    } else return Promise.resolve().then(() => m(d)(c)).then(n);
                                                                      }), x[d]);for (; f < c && f < v.length;) o(f++);
                                                        });
                                          }));
                            }, b.find = function (b) {
                                          return c.call(this, b).then(({ item: b }) => b);
                            }, b.findIndex = function (b) {
                                          return c.call(this, b).then(({ index: b }) => b);
                            }, b.filter = function (c, e) {
                                          return this.steps ? this.addStep("filter", [...arguments]) : ("function" == typeof c && (e = c, c = this._FP.promise), d(c, (d, a) => Promise.resolve(e(a)).then(c => c ? d.concat([a]) : d), []));
                            }, b.reduce = d;
              }, function (a, b, c) {
                            "use strict";
                            Object.defineProperty(b, "__esModule", { value: !0 }), b.listen = void 0;var d = c(1);b.listen = function (e, ...a) {
                                          if ("string" == typeof a && (a = [a]), !e[e.addEventListener ? "addEventListener" : "on"]) throw new d.FPInputError("Valid EventEmitter required.");const f = this.chainEnd();return this._FP.destroy = () => this._FP.destroyHandles.map(b => b() || !0).filter(b => b).length, this._FP.destroyHandles = a.map(a => (e[e.addEventListener ? "addEventListener" : "on"](a, f), () => e[e.removeEventListener ? "removeEventListener" : "off"](a, f))), this;
                            };
              }, function (a, b, f) {
                            "use strict";
                            function e(g = b => b, h = b => b, b = () => null, c = !1) {
                                          const a = f(0);return d => a.resolve(g(d)).then(c => c ? h(d) : b(d)).then(b => c ? d : b);
                            }Object.defineProperty(b, "__esModule", { value: !0 }), b._thenIf = b.tapIf = b.thenIf = void 0;var d = f(2);b.thenIf = function (f, g, h) {
                                          return this.steps ? this.addStep("thenIf", [...arguments]) : (1 === arguments.length && (g = f, f = b => b), (0, d.isPromiseLike)(this) ? this.then(a => e(f, g, h)(a)) : e(f, g, h));
                            }, b.tapIf = function (f, g, h) {
                                          return this.steps ? this.addStep("tapIf", [...arguments]) : (1 === arguments.length && (g = f, f = b => b), (0, d.isPromiseLike)(this) ? this.then(a => e(f, g, h, !0)(a)) : e(f, g, h, !0));
                            }, b._thenIf = e;
              }, function (a, b, c) {
                            "use strict";
                            function d(d) {
                                          const g = Object.getOwnPropertyNames(d),
                                                a = g.map(a => d[a]);return Promise.all(a).then(b => b.reduce((b, a, c) => {
                                                        var d;const h = g[c];return Object.assign((d = {}, d[h] = a, d), b);
                                          }, {}));
                            }function e(d) {
                                          const a = c(0);if (!Number.isInteger(d)) throw new f.FPInputError("FP.delay(millisec) requires a numeric arg.");return e => new a(a => {
                                                        setTimeout(() => a(e), d);
                                          });
                            }Object.defineProperty(b, "__esModule", { value: !0 }), b.all = function (e) {
                                          const a = c(0);return a.resolve(Array.isArray(e) ? Promise.all(e) : d(e));
                            }, b.promiseAllObject = d, b.reject = function (b) {
                                          if (b instanceof Error) return this && (this._error = b), Promise.reject(b);throw new Error(`Reject only accepts a new instance of Error!`);
                            }, b._delay = e, b.delay = function (d) {
                                          const a = c(0);return this.steps ? this.addStep("delay", [...arguments]) : this && this._FP ? a.resolve(this.then(e(d))) : e(d)();
                            };var f = c(1);
              }]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listen = undefined;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

const listen = exports.listen = function (obj, ...eventNames) {
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) throw new _errors.FPInputError('Valid EventEmitter required.');
  // Gets callback to attach to the event handlers
  const handler = this.chainEnd();
  this._FP.destroy = () => this._FP.destroyHandles.map(fn => fn() || true).filter(v => v).length;
  this._FP.destroyHandles = eventNames.map(eventName => {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return () => obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);
  });
  return this;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsibGlzdGVuIiwib2JqIiwiZXZlbnROYW1lcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJGUElucHV0RXJyb3IiLCJoYW5kbGVyIiwiY2hhaW5FbmQiLCJfRlAiLCJkZXN0cm95IiwiZGVzdHJveUhhbmRsZXMiLCJtYXAiLCJmbiIsImZpbHRlciIsInYiLCJsZW5ndGgiLCJldmVudE5hbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRU8sTUFBTUEsMEJBQVMsVUFBU0MsR0FBVCxFQUFjLEdBQUdDLFVBQWpCLEVBQTZCO0FBQ2pELE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RCxNQUFNLElBQUlDLG9CQUFKLENBQWlCLDhCQUFqQixDQUFOO0FBQzVEO0FBQ0EsUUFBTUMsVUFBVSxLQUFLQyxRQUFMLEVBQWhCO0FBQ0EsT0FBS0MsR0FBTCxDQUFTQyxPQUFULEdBQW1CLE1BQU0sS0FBS0QsR0FBTCxDQUFTRSxjQUFULENBQXdCQyxHQUF4QixDQUE0QkMsTUFBTUEsUUFBUSxJQUExQyxFQUFnREMsTUFBaEQsQ0FBdURDLEtBQUtBLENBQTVELEVBQStEQyxNQUF4RjtBQUNBLE9BQUtQLEdBQUwsQ0FBU0UsY0FBVCxHQUEwQlAsV0FBV1EsR0FBWCxDQUFlSyxhQUFhO0FBQ3BEZCxRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RZLFNBQXRELEVBQWlFVixPQUFqRTtBQUNBLFdBQU8sTUFBTUosSUFBSUEsSUFBSWUsbUJBQUosR0FBMEIscUJBQTFCLEdBQWtELEtBQXRELEVBQTZERCxTQUE3RCxFQUF3RVYsT0FBeEUsQ0FBYjtBQUNELEdBSHlCLENBQTFCO0FBSUEsU0FBTyxJQUFQO0FBQ0QsQ0FYTSIsImZpbGUiOiJldmVudHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGUElucHV0RXJyb3IgfSBmcm9tICcuL21vZHVsZXMvZXJyb3JzJ1xuXG5leHBvcnQgY29uc3QgbGlzdGVuID0gZnVuY3Rpb24ob2JqLCAuLi5ldmVudE5hbWVzKSB7XG4gIGlmICh0eXBlb2YgZXZlbnROYW1lcyA9PT0gJ3N0cmluZycpIGV2ZW50TmFtZXMgPSBbZXZlbnROYW1lc11cbiAgaWYgKCFvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignVmFsaWQgRXZlbnRFbWl0dGVyIHJlcXVpcmVkLicpXG4gIC8vIEdldHMgY2FsbGJhY2sgdG8gYXR0YWNoIHRvIHRoZSBldmVudCBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIHRoaXMuX0ZQLmRlc3Ryb3kgPSAoKSA9PiB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcy5tYXAoZm4gPT4gZm4oKSB8fCB0cnVlKS5maWx0ZXIodiA9PiB2KS5sZW5ndGhcbiAgdGhpcy5fRlAuZGVzdHJveUhhbmRsZXMgPSBldmVudE5hbWVzLm1hcChldmVudE5hbWUgPT4ge1xuICAgIG9ialtvYmouYWRkRXZlbnRMaXN0ZW5lciA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdvbiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgICByZXR1cm4gKCkgPT4gb2JqW29iai5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ29mZiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgfSlcbiAgcmV0dXJuIHRoaXNcbn0iXX0=

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._thenIf = exports.tapIf = exports.thenIf = undefined;

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

exports.thenIf = thenIf;
exports.tapIf = tapIf;
exports._thenIf = _thenIf;


function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if ((0, _utils.isPromiseLike)(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if ((0, _utils.isPromiseLike)(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse, true)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf(cond = x => x, ifTrue = x => x, ifFalse = () => null, returnValue = false) {
  const FP = __webpack_require__(/*! ./index */ 0);
  return value => FP.resolve(cond(value)).then(ans => ans ? ifTrue(value) : ifFalse(value)).then(v => returnValue ? value : v);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVxdWlyZSIsInJlc29sdmUiLCJhbnMiLCJ2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O1FBRVFBLE0sR0FBQUEsTTtRQUFRQyxLLEdBQUFBLEs7UUFBT0MsTyxHQUFBQSxPOzs7QUFFdkIsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYixFQUF1QixDQUFDLEdBQUdDLFNBQUosQ0FBdkIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUksMEJBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS0MsSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFTSixLQUFULENBQWVFLElBQWYsRUFBcUJDLE1BQXJCLEVBQTZCQyxPQUE3QixFQUFzQztBQUNwQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsT0FBYixFQUFzQixDQUFDLEdBQUdDLFNBQUosQ0FBdEIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUksMEJBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS0MsSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLEVBQXFDTyxLQUFyQyxDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLENBQVA7QUFDRDs7QUFFRCxTQUFTSCxPQUFULENBQWlCQyxPQUFPTyxLQUFLQSxDQUE3QixFQUFnQ04sU0FBU00sS0FBS0EsQ0FBOUMsRUFBaURMLFVBQVUsTUFBTSxJQUFqRSxFQUF1RVEsY0FBYyxLQUFyRixFQUE0RjtBQUMxRixRQUFNQyxLQUFLQyxRQUFRLFNBQVIsQ0FBWDtBQUNBLFNBQU9ILFNBQ0xFLEdBQUdFLE9BQUgsQ0FBV2IsS0FBS1MsS0FBTCxDQUFYLEVBQ0dELElBREgsQ0FDUU0sT0FBUUEsTUFBTWIsT0FBT1EsS0FBUCxDQUFOLEdBQXNCUCxRQUFRTyxLQUFSLENBRHRDLEVBRUdELElBRkgsQ0FFUU8sS0FBTUwsY0FBY0QsS0FBZCxHQUFzQk0sQ0FGcEMsQ0FERjtBQUlEIiwiZmlsZSI6ImNvbmRpdGlvbmFsLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQcm9taXNlTGlrZSB9IGZyb20gJy4vbW9kdWxlcy91dGlscydcblxuZXhwb3J0IHt0aGVuSWYsIHRhcElmLCBfdGhlbklmfVxuXG5mdW5jdGlvbiB0aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0aGVuSWYnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZlRydWUgPSBjb25kXG4gICAgY29uZCA9IHggPT4geFxuICB9XG4gIGlmIChpc1Byb21pc2VMaWtlKHRoaXMpKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2YWx1ZSA9PiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSkodmFsdWUpKVxuICB9XG4gIHJldHVybiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSlcbn1cblxuZnVuY3Rpb24gdGFwSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0YXBJZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBfdGhlbklmKGNvbmQgPSB4ID0+IHgsIGlmVHJ1ZSA9IHggPT4geCwgaWZGYWxzZSA9ICgpID0+IG51bGwsIHJldHVyblZhbHVlID0gZmFsc2UpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgcmV0dXJuIHZhbHVlID0+XG4gICAgRlAucmVzb2x2ZShjb25kKHZhbHVlKSlcbiAgICAgIC50aGVuKGFucyA9PiAoYW5zID8gaWZUcnVlKHZhbHVlKSA6IGlmRmFsc2UodmFsdWUpKSlcbiAgICAgIC50aGVuKHYgPT4gKHJldHVyblZhbHVlID8gdmFsdWUgOiB2KSlcbn1cbiJdfQ==

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = all;
exports.promiseAllObject = promiseAllObject;
exports.reject = reject;
exports._delay = _delay;
exports.delay = delay;

var _errors = __webpack_require__(/*! ./modules/errors */ 1);

function all(promises) {
  const FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  const keys = Object.getOwnPropertyNames(obj);
  const values = keys.map(key => obj[key]);
  return Promise.all(values).then(results => results.reduce((obj, val, index) => {
    var _Object$assign;

    const key = keys[index];
    return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
  }, {}));
}

function reject(err) {
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error(`Reject only accepts a new instance of Error!`);
}

function _delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new _errors.FPInputError('FP.delay(millisec) requires a numeric arg.');
  return value => new FP(resolve => {
    setTimeout(() => resolve(value), msec);
  });
}

function delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [...arguments]);
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbImFsbCIsInByb21pc2VBbGxPYmplY3QiLCJyZWplY3QiLCJfZGVsYXkiLCJkZWxheSIsInByb21pc2VzIiwiRlAiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIkFycmF5IiwiaXNBcnJheSIsIlByb21pc2UiLCJvYmoiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInZhbHVlcyIsIm1hcCIsImtleSIsInRoZW4iLCJyZXN1bHRzIiwicmVkdWNlIiwidmFsIiwiaW5kZXgiLCJhc3NpZ24iLCJlcnIiLCJFcnJvciIsIl9lcnJvciIsIm1zZWMiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJGUElucHV0RXJyb3IiLCJ2YWx1ZSIsInNldFRpbWVvdXQiLCJzdGVwcyIsImFkZFN0ZXAiLCJhcmd1bWVudHMiLCJfRlAiXSwibWFwcGluZ3MiOiI7Ozs7O1FBSWdCQSxHLEdBQUFBLEc7UUFLQUMsZ0IsR0FBQUEsZ0I7UUFTQUMsTSxHQUFBQSxNO1FBUUFDLE0sR0FBQUEsTTtRQU1BQyxLLEdBQUFBLEs7O0FBaENoQjs7QUFJTyxTQUFTSixHQUFULENBQWFLLFFBQWIsRUFBdUI7QUFDNUIsUUFBTUMsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxTQUFPRCxHQUFHRSxPQUFILENBQVdDLE1BQU1DLE9BQU4sQ0FBY0wsUUFBZCxJQUEwQk0sUUFBUVgsR0FBUixDQUFZSyxRQUFaLENBQTFCLEdBQWtESixpQkFBaUJJLFFBQWpCLENBQTdELENBQVA7QUFDRDs7QUFFTSxTQUFTSixnQkFBVCxDQUEwQlcsR0FBMUIsRUFBK0I7QUFDcEMsUUFBTUMsT0FBT0MsT0FBT0MsbUJBQVAsQ0FBMkJILEdBQTNCLENBQWI7QUFDQSxRQUFNSSxTQUFTSCxLQUFLSSxHQUFMLENBQVNDLE9BQU9OLElBQUlNLEdBQUosQ0FBaEIsQ0FBZjtBQUNBLFNBQU9QLFFBQVFYLEdBQVIsQ0FBWWdCLE1BQVosRUFBb0JHLElBQXBCLENBQXlCQyxXQUFXQSxRQUFRQyxNQUFSLENBQWUsQ0FBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsS0FBcUI7QUFBQTs7QUFDN0UsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsV0FBT1QsT0FBT1UsTUFBUCxzQ0FBaUJOLEdBQWpCLElBQXVCSSxHQUF2QixtQkFBOEJWLEdBQTlCLENBQVA7QUFDRCxHQUgwQyxFQUd4QyxFQUh3QyxDQUFwQyxDQUFQO0FBSUQ7O0FBRU0sU0FBU1YsTUFBVCxDQUFnQnVCLEdBQWhCLEVBQXFCO0FBQzFCLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9kLFFBQVFULE1BQVIsQ0FBZXVCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLENBQVcsOENBQVgsQ0FBTjtBQUNEOztBQUVNLFNBQVN2QixNQUFULENBQWdCeUIsSUFBaEIsRUFBc0I7QUFDM0IsUUFBTXRCLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBSSxDQUFDc0IsT0FBT0MsU0FBUCxDQUFpQkYsSUFBakIsQ0FBTCxFQUE2QixNQUFNLElBQUlHLG9CQUFKLENBQWlCLDRDQUFqQixDQUFOO0FBQzdCLFNBQU9DLFNBQVMsSUFBSTFCLEVBQUosQ0FBT0UsV0FBVztBQUFFeUIsZUFBVyxNQUFNekIsUUFBUXdCLEtBQVIsQ0FBakIsRUFBaUNKLElBQWpDO0FBQXdDLEdBQTVELENBQWhCO0FBQ0Q7O0FBRU0sU0FBU3hCLEtBQVQsQ0FBZXdCLElBQWYsRUFBcUI7QUFDMUIsUUFBTXRCLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBSSxLQUFLMkIsS0FBVCxFQUFnQixPQUFPLEtBQUtDLE9BQUwsQ0FBYSxPQUFiLEVBQXNCLENBQUMsR0FBR0MsU0FBSixDQUF0QixDQUFQO0FBQ2hCLFNBQU8sUUFBUSxLQUFLQyxHQUFiLEdBQW1CL0IsR0FBR0UsT0FBSCxDQUFXLEtBQUtXLElBQUwsQ0FBVWhCLE9BQU95QixJQUFQLENBQVYsQ0FBWCxDQUFuQixHQUF5RHpCLE9BQU95QixJQUFQLEdBQWhFO0FBQ0QiLCJmaWxlIjoicHJvbWlzZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZQSW5wdXRFcnJvciB9IGZyb20gJy4vbW9kdWxlcy9lcnJvcnMnXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICByZXR1cm4gRlAucmVzb2x2ZShBcnJheS5pc0FycmF5KHByb21pc2VzKSA/IFByb21pc2UuYWxsKHByb21pc2VzKSA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzZUFsbE9iamVjdChvYmopIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iailcbiAgY29uc3QgdmFsdWVzID0ga2V5cy5tYXAoa2V5ID0+IG9ialtrZXldKVxuICByZXR1cm4gUHJvbWlzZS5hbGwodmFsdWVzKS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0cy5yZWR1Y2UoKG9iaiwgdmFsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBba2V5XTogdmFsIH0sIG9iailcbiAgfSwge30pKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVqZWN0KGVycikge1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2RlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihtc2VjKSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignRlAuZGVsYXkobWlsbGlzZWMpIHJlcXVpcmVzIGEgbnVtZXJpYyBhcmcuJylcbiAgcmV0dXJuIHZhbHVlID0+IG5ldyBGUChyZXNvbHZlID0+IHsgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHZhbHVlKSwgbXNlYykgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdkZWxheScsIFsuLi5hcmd1bWVudHNdKVxuICByZXR1cm4gdGhpcyAmJiB0aGlzLl9GUCA/IEZQLnJlc29sdmUodGhpcy50aGVuKF9kZWxheShtc2VjKSkpIDogX2RlbGF5KG1zZWMpKClcbn1cbiJdfQ==

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9mdW5jdGlvbmFsLXByb21pc2UuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBjOTMwOTQ1ZmM3M2EzZWQwNDY5ZiIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9tb25hZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9kaXN0L2Z1bmN0aW9uYWwtcHJvbWlzZS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZGl0aW9uYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb21pc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiRlBcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiRlBcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGM5MzA5NDVmYzczYTNlZDA0NjlmIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gRlA7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi9tb2R1bGVzL3V0aWxzJyk7XG5cbnZhciBfbW9uYWRzID0gcmVxdWlyZSgnLi9tb25hZHMnKTtcblxudmFyIF9hcnJheXMgPSByZXF1aXJlKCcuL2FycmF5cycpO1xuXG52YXIgX2V2ZW50cyA9IHJlcXVpcmUoJy4vZXZlbnRzJyk7XG5cbnZhciBfY29uZGl0aW9uYWwgPSByZXF1aXJlKCcuL2NvbmRpdGlvbmFsJyk7XG5cbnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJy4vcHJvbWlzZScpO1xuXG4vLyBGUC5wcm90b3R5cGUucmVzbyA9IHJlc29sdmVcbkZQLnByb3RvdHlwZS5hbGwgPSBfcHJvbWlzZS5hbGw7XG5GUC5wcm90b3R5cGUubWFwID0gX2FycmF5cy5tYXA7XG5GUC5wcm90b3R5cGUuZmluZCA9IF9hcnJheXMuZmluZDtcbkZQLnByb3RvdHlwZS5maW5kSW5kZXggPSBfYXJyYXlzLmZpbmRJbmRleDtcbkZQLnByb3RvdHlwZS5maWx0ZXIgPSBfYXJyYXlzLmZpbHRlcjtcbkZQLnByb3RvdHlwZS5yZWR1Y2UgPSBfYXJyYXlzLnJlZHVjZTtcbkZQLnByb3RvdHlwZS5saXN0ZW4gPSBfZXZlbnRzLmxpc3RlbjtcbkZQLnByb3RvdHlwZS50YXBJZiA9IF9jb25kaXRpb25hbC50YXBJZjtcbkZQLnByb3RvdHlwZS50aGVuSWYgPSBfY29uZGl0aW9uYWwudGhlbklmO1xuRlAucHJvdG90eXBlLl90aGVuSWYgPSBfY29uZGl0aW9uYWwuX3RoZW5JZjtcbkZQLnByb3RvdHlwZS5kZWxheSA9IF9wcm9taXNlLmRlbGF5O1xuRlAucHJvdG90eXBlLl9kZWxheSA9IF9wcm9taXNlLl9kZWxheTtcbkZQLnByb3RvdHlwZS5yZWplY3QgPSBfcHJvbWlzZS5yZWplY3Q7XG5cbkZQLmRlZmF1bHQgPSBGUDtcbi8vIGV4cG9ydCBjb25zdCBhbGwgPSBhbGxQcm9taXNlc1xuXG5GUC5hbGwgPSBGUC5wcm90b3R5cGUuYWxsO1xuRlAudGhlbklmID0gRlAucHJvdG90eXBlLl90aGVuSWY7XG5GUC5kZWxheSA9IG1zZWMgPT4gRlAucmVzb2x2ZSgpLmRlbGF5KG1zZWMpO1xuRlAuc2lsZW50ID0gbGltaXQgPT4gRlAucmVzb2x2ZSgpLnNpbGVudChsaW1pdCk7XG5cbi8vIE1vbmFkaWMgTWV0aG9kc1xuRlAuY2hhaW4gPSBfbW9uYWRzLmNoYWluO1xuRlAucHJvdG90eXBlLmNoYWluRW5kID0gX21vbmFkcy5jaGFpbkVuZDtcbkZQLnJlamVjdCA9IEZQLnByb3RvdHlwZS5yZWplY3Q7XG5GUC5yZXNvbHZlID0gcmVzb2x2ZTtcblxuRlAucHJvbWlzaWZ5ID0gcHJvbWlzaWZ5O1xuRlAucHJvbWlzaWZ5QWxsID0gcHJvbWlzaWZ5QWxsO1xuRlAudW5wYWNrID0gdW5wYWNrO1xuXG5GUC5wcm90b3R5cGUuYWRkU3RlcCA9IGZ1bmN0aW9uIGFkZFN0ZXAobmFtZSwgYXJncykge1xuICBpZiAodGhpcy5zdGVwcykgdGhpcy5zdGVwcy5wdXNoKFtuYW1lLCB0aGlzLCBhcmdzXSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRlAucHJvdG90eXBlLmNvbmN1cnJlbmN5ID0gZnVuY3Rpb24gY29uY3VycmVuY3kobGltaXQgPSBJbmZpbml0eSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY29uY3VycmVuY3knLCBbLi4uYXJndW1lbnRzXSk7XG4gIHRoaXMuX0ZQLmNvbmN1cnJlbmN5TGltaXQgPSBsaW1pdDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5GUC5wcm90b3R5cGUucXVpZXQgPSBmdW5jdGlvbiBxdWlldChlcnJvckxpbWl0ID0gSW5maW5pdHkpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3F1aWV0JywgWy4uLmFyZ3VtZW50c10pO1xuICB0aGlzLl9GUC5lcnJvcnMgPSB7IGNvdW50OiAwLCBsaW1pdDogZXJyb3JMaW1pdCB9O1xuICByZXR1cm4gdGhpcztcbn07XG5GUC5wcm90b3R5cGUuc2lsZW50ID0gRlAucHJvdG90eXBlLnF1aWV0O1xuXG5GUC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KC4uLmtleU5hbWVzKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdnZXQnLCBbLi4uYXJndW1lbnRzXSk7XG4gIGtleU5hbWVzID0gKDAsIF91dGlscy5mbGF0dGVuKShrZXlOYW1lcyk7XG4gIHJldHVybiB0aGlzLnRoZW4ob2JqID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChrZXlOYW1lcy5sZW5ndGggPT09IDEpIHJldHVybiBvYmpba2V5TmFtZXNbMF1dO1xuICAgICAgcmV0dXJuIGtleU5hbWVzLnJlZHVjZSgoZXh0cmFjdGVkLCBrZXkpID0+IHtcbiAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSk7XG59O1xuXG5GUC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KGtleU5hbWUsIHZhbHVlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdzZXQnLCBbLi4uYXJndW1lbnRzXSk7XG4gIHJldHVybiB0aGlzLnRoZW4ob2JqID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIG9ialtrZXlOYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiBvYmo7XG4gIH0pO1xufTtcblxuRlAucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdjYXRjaCcsIFsuLi5hcmd1bWVudHNdKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHJldHVybiB0aGlzLmNhdGNoSWYoLi4uYXJndW1lbnRzKTtcbiAgaWYgKCEoMCwgX3V0aWxzLmlzRnVuY3Rpb24pKGZuKSkgdGhyb3cgbmV3IF9lcnJvcnMuRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLmNhdGNoKGZuKWAuIE11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudGx5OiAnICsgdHlwZW9mIGZuKTtcbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS5jYXRjaChlcnIgPT4gZm4oZXJyKSkpO1xufTtcblxuRlAucHJvdG90eXBlLmNhdGNoSWYgPSBmdW5jdGlvbiBjYXRjaElmKGNvbmRpdGlvbiwgZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2NhdGNoSWYnLCBbLi4uYXJndW1lbnRzXSk7XG4gIGlmICghKDAsIF91dGlscy5pc0Z1bmN0aW9uKShmbikpIHRocm93IG5ldyBfZXJyb3JzLkZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC5jYXRjaElmKGNvbmRpdGlvbiwgZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyB0eXBlb2YgZm4pO1xuXG4gIHJldHVybiBGUC5yZXNvbHZlKHRoaXMuX0ZQLnByb21pc2UuY2F0Y2goZXJyID0+IHtcbiAgICBpZiAoY29uZGl0aW9uICYmIGVyciBpbnN0YW5jZW9mIGNvbmRpdGlvbikgcmV0dXJuIGZuKGVycik7IC8vIHRyeSByZS10aHJvdywgbWlnaHQgYmUgcmVhbGx5IHNsb3cuLi5cbiAgICB0aHJvdyBlcnI7XG4gIH0pKTtcbn07XG5cbkZQLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gdGhlbihmbikge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgndGhlbicsIFsuLi5hcmd1bWVudHNdKTtcbiAgaWYgKCEoMCwgX3V0aWxzLmlzRnVuY3Rpb24pKGZuKSkgdGhyb3cgbmV3IF9lcnJvcnMuRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLnRoZW4oZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyB0eXBlb2YgZm4pO1xuICByZXR1cm4gRlAucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLnRoZW4oZm4pKTtcbn07XG5cbkZQLnByb3RvdHlwZS50YXAgPSBmdW5jdGlvbiB0YXAoZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcCcsIFsuLi5hcmd1bWVudHNdKTtcbiAgaWYgKCEoMCwgX3V0aWxzLmlzRnVuY3Rpb24pKGZuKSkgdGhyb3cgbmV3IF9lcnJvcnMuRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLnRhcChmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArIHR5cGVvZiBmbik7XG4gIHJldHVybiBGUC5yZXNvbHZlKHRoaXMuX0ZQLnByb21pc2UudGhlbih2YWx1ZSA9PiBmbih2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlKSk7XG59O1xuXG5mdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgRlAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICh2YWx1ZSAmJiAoMCwgX3V0aWxzLmlzRnVuY3Rpb24pKHZhbHVlLnRoZW4pKSByZXR1cm4gdmFsdWUudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpO1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJvbWlzaWZ5KGNiKSB7XG4gIHJldHVybiAoLi4uYXJncykgPT4gbmV3IEZQKCh5YWgsIG5haCkgPT4gY2IuY2FsbCh0aGlzLCAuLi5hcmdzLCAoZXJyLCByZXMpID0+IGVyciA/IG5haChlcnIpIDogeWFoKHJlcykpKTtcbn1cblxuZnVuY3Rpb24gcHJvbWlzaWZ5QWxsKG9iaikge1xuICBpZiAoIW9iaiB8fCAhT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQXJndW1lbnQgb2JqIGluIHByb21pc2lmeUFsbChvYmopJyk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuZmlsdGVyKGtleSA9PiB0eXBlb2Ygb2JqW2tleV0gPT09ICdmdW5jdGlvbicpLnJlZHVjZSgob2JqLCBmbk5hbWUpID0+IHtcbiAgICBpZiAoIS9TeW5jLy50ZXN0KGZuTmFtZSkgJiYgIW9ialtgJHtmbk5hbWV9QXN5bmNgXSkgb2JqW2Ake2ZuTmFtZX1Bc3luY2BdID0gRlAucHJvbWlzaWZ5KG9ialtgJHtmbk5hbWV9YF0pO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIG9iaik7XG59XG5cbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgbGV0IHJlc29sdmUsXG4gICAgICByZWplY3QsXG4gICAgICBwcm9taXNlID0gbmV3IEZQKCh5YWgsIG5haCkgPT4ge1xuICAgIHJlc29sdmUgPSB5YWg7cmVqZWN0ID0gbmFoO1xuICB9KTtcbiAgcmV0dXJuIHsgcHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0IH07XG59XG5cbmZ1bmN0aW9uIEZQKHJlc29sdmVSZWplY3RDQikge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRlApKSB7XG4gICAgcmV0dXJuIG5ldyBGUChyZXNvbHZlUmVqZWN0Q0IpO1xuICB9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uYWxQcm9taXNlcyBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgMSBjYWxsYmFjayBhcmd1bWVudCcpO1xuICB0aGlzLl9GUCA9IHtcbiAgICBlcnJvcnM6IHsgbGltaXQ6IDAsIGNvdW50OiAwIH0sXG4gICAgcHJvbWlzZTogbmV3IFByb21pc2UocmVzb2x2ZVJlamVjdENCKSxcbiAgICBjb25jdXJyZW5jeUxpbWl0OiA0XG4gIH07XG59XG4vLyBpZiAocHJvY2VzcyAmJiBwcm9jZXNzLm9uKSB7XG4vLyAgIC8vIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgZSA9PiBjb25zb2xlLmVycm9yKCdGUHJvbWlzZXM6IEZBVEFMIEVYQ0VQVElPTjogdW5jYXVnaHRFeGNlcHRpb24nLCBlKSlcbi8vICAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgZSA9PiBjb25zb2xlLmVycm9yKCdGUHJvbWlzZXM6IEZBVEFMIEVSUk9SOiB1bmhhbmRsZWRSZWplY3Rpb24nLCBlKSlcbi8vIH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKR1VDSXNJbkJ5YjNSdmRIbHdaU0lzSW1Gc2JDSXNJbUZzYkZCeWIyMXBjMlZ6SWl3aWJXRndJaXdpWm1sdVpDSXNJbVpwYm1SSmJtUmxlQ0lzSW1acGJIUmxjaUlzSW5KbFpIVmpaU0lzSW14cGMzUmxiaUlzSW5SaGNFbG1JaXdpZEdobGJrbG1JaXdpWDNSb1pXNUpaaUlzSW1SbGJHRjVJaXdpWDJSbGJHRjVJaXdpY21WcVpXTjBJaXdpWkdWbVlYVnNkQ0lzSW0xelpXTWlMQ0p5WlhOdmJIWmxJaXdpYzJsc1pXNTBJaXdpYkdsdGFYUWlMQ0pqYUdGcGJpSXNJbU5vWVdsdVJXNWtJaXdpY0hKdmJXbHphV1o1SWl3aWNISnZiV2x6YVdaNVFXeHNJaXdpZFc1d1lXTnJJaXdpWVdSa1UzUmxjQ0lzSW01aGJXVWlMQ0poY21keklpd2ljM1JsY0hNaUxDSndkWE5vSWl3aVkyOXVZM1Z5Y21WdVkza2lMQ0pKYm1acGJtbDBlU0lzSW1GeVozVnRaVzUwY3lJc0lsOUdVQ0lzSW1OdmJtTjFjbkpsYm1ONVRHbHRhWFFpTENKeGRXbGxkQ0lzSW1WeWNtOXlUR2x0YVhRaUxDSmxjbkp2Y25NaUxDSmpiM1Z1ZENJc0ltZGxkQ0lzSW10bGVVNWhiV1Z6SWl3aWRHaGxiaUlzSW05aWFpSXNJbXhsYm1kMGFDSXNJbVY0ZEhKaFkzUmxaQ0lzSW10bGVTSXNJbk5sZENJc0ltdGxlVTVoYldVaUxDSjJZV3gxWlNJc0ltTmhkR05vSWl3aVptNGlMQ0pqWVhSamFFbG1JaXdpUm5WdVkzUnBiMjVoYkVWeWNtOXlJaXdpY0hKdmJXbHpaU0lzSW1WeWNpSXNJbU52Ym1ScGRHbHZiaUlzSW5SaGNDSXNJbU5pSWl3aWVXRm9JaXdpYm1Gb0lpd2lZMkZzYkNJc0luSmxjeUlzSWs5aWFtVmpkQ0lzSW1kbGRGQnliM1J2ZEhsd1pVOW1JaXdpUlhKeWIzSWlMQ0puWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SWl3aVptNU9ZVzFsSWl3aWRHVnpkQ0lzSW5KbGMyOXNkbVZTWldwbFkzUkRRaUlzSWxCeWIyMXBjMlVpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzJ0Q1FUSkpkMEpCTEVVN08wRkJNMGw0UWpzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdRVUZEUVRzN1FVRkZRVHRCUVVOQlFTeEhRVUZIUXl4VFFVRklMRU5CUVdGRExFZEJRV0lzUjBGQmJVSkRMRmxCUVc1Q08wRkJRMEZJTEVkQlFVZERMRk5CUVVnc1EwRkJZVWNzUjBGQllpeEhRVUZ0UWtFc1YwRkJia0k3UVVGRFFVb3NSMEZCUjBNc1UwRkJTQ3hEUVVGaFNTeEpRVUZpTEVkQlFXOUNRU3haUVVGd1FqdEJRVU5CVEN4SFFVRkhReXhUUVVGSUxFTkJRV0ZMTEZOQlFXSXNSMEZCZVVKQkxHbENRVUY2UWp0QlFVTkJUaXhIUVVGSFF5eFRRVUZJTEVOQlFXRk5MRTFCUVdJc1IwRkJjMEpCTEdOQlFYUkNPMEZCUTBGUUxFZEJRVWRETEZOQlFVZ3NRMEZCWVU4c1RVRkJZaXhIUVVGelFrRXNZMEZCZEVJN1FVRkRRVklzUjBGQlIwTXNVMEZCU0N4RFFVRmhVU3hOUVVGaUxFZEJRWE5DUVN4alFVRjBRanRCUVVOQlZDeEhRVUZIUXl4VFFVRklMRU5CUVdGVExFdEJRV0lzUjBGQmNVSkJMR3RDUVVGeVFqdEJRVU5CVml4SFFVRkhReXhUUVVGSUxFTkJRV0ZWTEUxQlFXSXNSMEZCYzBKQkxHMUNRVUYwUWp0QlFVTkJXQ3hIUVVGSFF5eFRRVUZJTEVOQlFXRlhMRTlCUVdJc1IwRkJkVUpCTEc5Q1FVRjJRanRCUVVOQldpeEhRVUZIUXl4VFFVRklMRU5CUVdGWkxFdEJRV0lzUjBGQmNVSkJMR05CUVhKQ08wRkJRMEZpTEVkQlFVZERMRk5CUVVnc1EwRkJZV0VzVFVGQllpeEhRVUZ6UWtFc1pVRkJkRUk3UVVGRFFXUXNSMEZCUjBNc1UwRkJTQ3hEUVVGaFl5eE5RVUZpTEVkQlFYTkNRU3hsUVVGMFFqczdRVUZGUVdZc1IwRkJSMmRDTEU5QlFVZ3NSMEZCWVdoQ0xFVkJRV0k3UVVGRFFUczdRVUZGUVVFc1IwRkJSMFVzUjBGQlNDeEhRVUZUUml4SFFVRkhReXhUUVVGSUxFTkJRV0ZETEVkQlFYUkNPMEZCUTBGR0xFZEJRVWRYTEUxQlFVZ3NSMEZCV1Znc1IwRkJSME1zVTBGQlNDeERRVUZoVnl4UFFVRjZRanRCUVVOQldpeEhRVUZIWVN4TFFVRklMRWRCUVZkSkxGRkJRVkZxUWl4SFFVRkhhMElzVDBGQlNDeEhRVUZoVEN4TFFVRmlMRU5CUVcxQ1NTeEpRVUZ1UWl4RFFVRnVRanRCUVVOQmFrSXNSMEZCUjIxQ0xFMUJRVWdzUjBGQldVTXNVMEZCVTNCQ0xFZEJRVWRyUWl4UFFVRklMRWRCUVdGRExFMUJRV0lzUTBGQmIwSkRMRXRCUVhCQ0xFTkJRWEpDT3p0QlFVVkJPMEZCUTBGd1FpeEhRVUZIY1VJc1MwRkJTQ3hIUVVGWFFTeGhRVUZZTzBGQlEwRnlRaXhIUVVGSFF5eFRRVUZJTEVOQlFXRnhRaXhSUVVGaUxFZEJRWGRDUVN4blFrRkJlRUk3UVVGRFFYUkNMRWRCUVVkbExFMUJRVWdzUjBGQldXWXNSMEZCUjBNc1UwRkJTQ3hEUVVGaFl5eE5RVUY2UWp0QlFVTkJaaXhIUVVGSGEwSXNUMEZCU0N4SFFVRmhRU3hQUVVGaU96dEJRVVZCYkVJc1IwRkJSM1ZDTEZOQlFVZ3NSMEZCWlVFc1UwRkJaanRCUVVOQmRrSXNSMEZCUjNkQ0xGbEJRVWdzUjBGQmEwSkJMRmxCUVd4Q08wRkJRMEY0UWl4SFFVRkhlVUlzVFVGQlNDeEhRVUZaUVN4TlFVRmFPenRCUVVWQmVrSXNSMEZCUjBNc1UwRkJTQ3hEUVVGaGVVSXNUMEZCWWl4SFFVRjFRaXhUUVVGVFFTeFBRVUZVTEVOQlFXbENReXhKUVVGcVFpeEZRVUYxUWtNc1NVRkJka0lzUlVGQk5rSTdRVUZEYkVRc1RVRkJTU3hMUVVGTFF5eExRVUZVTEVWQlFXZENMRXRCUVV0QkxFdEJRVXdzUTBGQlYwTXNTVUZCV0N4RFFVRm5RaXhEUVVGRFNDeEpRVUZFTEVWQlFVOHNTVUZCVUN4RlFVRmhReXhKUVVGaUxFTkJRV2hDTzBGQlEyaENMRk5CUVU4c1NVRkJVRHRCUVVORUxFTkJTRVE3TzBGQlMwRTFRaXhIUVVGSFF5eFRRVUZJTEVOQlFXRTRRaXhYUVVGaUxFZEJRVEpDTEZOQlFWTkJMRmRCUVZRc1EwRkJjVUpZTEZGQlFWRlpMRkZCUVRkQ0xFVkJRWFZETzBGQlEyaEZMRTFCUVVrc1MwRkJTMGdzUzBGQlZDeEZRVUZuUWl4UFFVRlBMRXRCUVV0SUxFOUJRVXdzUTBGQllTeGhRVUZpTEVWQlFUUkNMRU5CUVVNc1IwRkJSMDhzVTBGQlNpeERRVUUxUWl4RFFVRlFPMEZCUTJoQ0xFOUJRVXRETEVkQlFVd3NRMEZCVTBNc1owSkJRVlFzUjBGQk5FSm1MRXRCUVRWQ08wRkJRMEVzVTBGQlR5eEpRVUZRTzBGQlEwUXNRMEZLUkRzN1FVRk5RWEJDTEVkQlFVZERMRk5CUVVnc1EwRkJZVzFETEV0QlFXSXNSMEZCY1VJc1UwRkJVMEVzUzBGQlZDeERRVUZsUXl4aFFVRmhUQ3hSUVVFMVFpeEZRVUZ6UXp0QlFVTjZSQ3hOUVVGSkxFdEJRVXRJTEV0QlFWUXNSVUZCWjBJc1QwRkJUeXhMUVVGTFNDeFBRVUZNTEVOQlFXRXNUMEZCWWl4RlFVRnpRaXhEUVVGRExFZEJRVWRQTEZOQlFVb3NRMEZCZEVJc1EwRkJVRHRCUVVOb1FpeFBRVUZMUXl4SFFVRk1MRU5CUVZOSkxFMUJRVlFzUjBGQmEwSXNSVUZCUlVNc1QwRkJUeXhEUVVGVUxFVkJRVmx1UWl4UFFVRlBhVUlzVlVGQmJrSXNSVUZCYkVJN1FVRkRRU3hUUVVGUExFbEJRVkE3UVVGRFJDeERRVXBFTzBGQlMwRnlReXhIUVVGSFF5eFRRVUZJTEVOQlFXRnJRaXhOUVVGaUxFZEJRWE5DYmtJc1IwRkJSME1zVTBGQlNDeERRVUZoYlVNc1MwRkJia003TzBGQlJVRndReXhIUVVGSFF5eFRRVUZJTEVOQlFXRjFReXhIUVVGaUxFZEJRVzFDTEZOQlFWTkJMRWRCUVZRc1EwRkJZU3hIUVVGSFF5eFJRVUZvUWl4RlFVRXdRanRCUVVNelF5eE5RVUZKTEV0QlFVdGFMRXRCUVZRc1JVRkJaMElzVDBGQlR5eExRVUZMU0N4UFFVRk1MRU5CUVdFc1MwRkJZaXhGUVVGdlFpeERRVUZETEVkQlFVZFBMRk5CUVVvc1EwRkJjRUlzUTBGQlVEdEJRVU5vUWxFc1lVRkJWeXh2UWtGQlVVRXNVVUZCVWl4RFFVRllPMEZCUTBFc1UwRkJUeXhMUVVGTFF5eEpRVUZNTEVOQlFWZERMRWRCUVVRc1NVRkJVenRCUVVONFFpeFJRVUZKTEU5QlFVOUJMRWRCUVZBc1MwRkJaU3hSUVVGdVFpeEZRVUUyUWp0QlFVTXpRaXhWUVVGSlJpeFRRVUZUUnl4TlFVRlVMRXRCUVc5Q0xFTkJRWGhDTEVWQlFUSkNMRTlCUVU5RUxFbEJRVWxHTEZOQlFWTXNRMEZCVkN4RFFVRktMRU5CUVZBN1FVRkRNMElzWVVGQlQwRXNVMEZCVTJwRExFMUJRVlFzUTBGQlowSXNRMEZCUTNGRExGTkJRVVFzUlVGQldVTXNSMEZCV2l4TFFVRnZRanRCUVVONlEwUXNhMEpCUVZWRExFZEJRVllzU1VGQmFVSklMRWxCUVVsSExFZEJRVW9zUTBGQmFrSTdRVUZEUVN4bFFVRlBSQ3hUUVVGUU8wRkJRMFFzVDBGSVRTeEZRVWRLTEVWQlNFa3NRMEZCVUR0QlFVbEVPMEZCUTBRc1YwRkJUMFlzUjBGQlVEdEJRVU5FTEVkQlZFMHNRMEZCVUR0QlFWVkVMRU5CWWtRN08wRkJaVUV6UXl4SFFVRkhReXhUUVVGSUxFTkJRV0U0UXl4SFFVRmlMRWRCUVcxQ0xGTkJRVk5CTEVkQlFWUXNRMEZCWVVNc1QwRkJZaXhGUVVGelFrTXNTMEZCZEVJc1JVRkJOa0k3UVVGRE9VTXNUVUZCU1N4TFFVRkxjRUlzUzBGQlZDeEZRVUZuUWl4UFFVRlBMRXRCUVV0SUxFOUJRVXdzUTBGQllTeExRVUZpTEVWQlFXOUNMRU5CUVVNc1IwRkJSMDhzVTBGQlNpeERRVUZ3UWl4RFFVRlFPMEZCUTJoQ0xGTkJRVThzUzBGQlMxTXNTVUZCVEN4RFFVRlZReXhQUVVGUE8wRkJRM1JDTEZGQlFVa3NUMEZCVDBFc1IwRkJVQ3hMUVVGbExGRkJRVzVDTEVWQlFUWkNRU3hKUVVGSlN5eFBRVUZLTEVsQlFXVkRMRXRCUVdZN1FVRkROMElzVjBGQlQwNHNSMEZCVUR0QlFVTkVMRWRCU0Uwc1EwRkJVRHRCUVVsRUxFTkJUa1E3TzBGQlVVRXpReXhIUVVGSFF5eFRRVUZJTEVOQlFXRnBSQ3hMUVVGaUxFZEJRWEZDTEZWQlFWVkRMRVZCUVZZc1JVRkJZenRCUVVOcVF5eE5RVUZKTEV0QlFVdDBRaXhMUVVGVUxFVkJRV2RDTEU5QlFVOHNTMEZCUzBnc1QwRkJUQ3hEUVVGaExFOUJRV0lzUlVGQmMwSXNRMEZCUXl4SFFVRkhUeXhUUVVGS0xFTkJRWFJDTEVOQlFWQTdRVUZEYUVJc1RVRkJTVUVzVlVGQlZWY3NUVUZCVml4TFFVRnhRaXhEUVVGNlFpeEZRVUUwUWl4UFFVRlBMRXRCUVV0UkxFOUJRVXdzUTBGQllTeEhRVUZIYmtJc1UwRkJhRUlzUTBGQlVEdEJRVU0xUWl4TlFVRkpMRU5CUVVNc2RVSkJRVmRyUWl4RlFVRllMRU5CUVV3c1JVRkJjVUlzVFVGQlRTeEpRVUZKUlN4MVFrRkJTaXhEUVVGdlFpd3dSVUZCTUVVc1QwRkJUMFlzUlVGQmNrY3NRMEZCVGp0QlFVTnlRaXhUUVVGUGJrUXNSMEZCUjJ0Q0xFOUJRVWdzUTBGQlZ5eExRVUZMWjBJc1IwRkJUQ3hEUVVGVGIwSXNUMEZCVkN4RFFVRnBRa29zUzBGQmFrSXNRMEZCZFVKTExFOUJRVTlLTEVkQlFVZEpMRWRCUVVnc1EwRkJPVUlzUTBGQldDeERRVUZRTzBGQlEwUXNRMEZNUkRzN1FVRlBRWFpFTEVkQlFVZERMRk5CUVVnc1EwRkJZVzFFTEU5QlFXSXNSMEZCZFVJc1UwRkJVMEVzVDBGQlZDeERRVUZwUWtrc1UwRkJha0lzUlVGQk5FSk1MRVZCUVRWQ0xFVkJRV2RETzBGQlEzSkVMRTFCUVVrc1MwRkJTM1JDTEV0QlFWUXNSVUZCWjBJc1QwRkJUeXhMUVVGTFNDeFBRVUZNTEVOQlFXRXNVMEZCWWl4RlFVRjNRaXhEUVVGRExFZEJRVWRQTEZOQlFVb3NRMEZCZUVJc1EwRkJVRHRCUVVOb1FpeE5RVUZKTEVOQlFVTXNkVUpCUVZkclFpeEZRVUZZTEVOQlFVd3NSVUZCY1VJc1RVRkJUU3hKUVVGSlJTeDFRa0ZCU2l4RFFVRnZRaXgxUmtGQmRVWXNUMEZCVDBZc1JVRkJiRWdzUTBGQlRqczdRVUZGY2tJc1UwRkJUMjVFTEVkQlFVZHJRaXhQUVVGSUxFTkJRVmNzUzBGQlMyZENMRWRCUVV3c1EwRkJVMjlDTEU5QlFWUXNRMEZCYVVKS0xFdEJRV3BDTEVOQlFYVkNTeXhQUVVGUE8wRkJRemxETEZGQlFVbERMR0ZCUVdGRUxHVkJRV1ZETEZOQlFXaERMRVZCUVRKRExFOUJRVTlNTEVkQlFVZEpMRWRCUVVnc1EwRkJVQ3hEUVVSSExFTkJRMWs3UVVGRE1VUXNWVUZCVFVFc1IwRkJUanRCUVVORUxFZEJTR2xDTEVOQlFWZ3NRMEZCVUR0QlFVbEVMRU5CVWtRN08wRkJWVUYyUkN4SFFVRkhReXhUUVVGSUxFTkJRV0Y1UXl4SlFVRmlMRWRCUVc5Q0xGTkJRVk5CTEVsQlFWUXNRMEZCWTFNc1JVRkJaQ3hGUVVGclFqdEJRVU53UXl4TlFVRkpMRXRCUVV0MFFpeExRVUZVTEVWQlFXZENMRTlCUVU4c1MwRkJTMGdzVDBGQlRDeERRVUZoTEUxQlFXSXNSVUZCY1VJc1EwRkJReXhIUVVGSFR5eFRRVUZLTEVOQlFYSkNMRU5CUVZBN1FVRkRhRUlzVFVGQlNTeERRVUZETEhWQ1FVRlhhMElzUlVGQldDeERRVUZNTEVWQlFYRkNMRTFCUVUwc1NVRkJTVVVzZFVKQlFVb3NRMEZCYjBJc2VVVkJRWGxGTEU5QlFVOUdMRVZCUVhCSExFTkJRVTQ3UVVGRGNrSXNVMEZCVDI1RUxFZEJRVWRyUWl4UFFVRklMRU5CUVZjc1MwRkJTMmRDTEVkQlFVd3NRMEZCVTI5Q0xFOUJRVlFzUTBGQmFVSmFMRWxCUVdwQ0xFTkJRWE5DVXl4RlFVRjBRaXhEUVVGWUxFTkJRVkE3UVVGRFJDeERRVXBFT3p0QlFVMUJia1FzUjBGQlIwTXNVMEZCU0N4RFFVRmhkMFFzUjBGQllpeEhRVUZ0UWl4VFFVRlRRU3hIUVVGVUxFTkJRV0ZPTEVWQlFXSXNSVUZCYVVJN1FVRkRiRU1zVFVGQlNTeExRVUZMZEVJc1MwRkJWQ3hGUVVGblFpeFBRVUZQTEV0QlFVdElMRTlCUVV3c1EwRkJZU3hMUVVGaUxFVkJRVzlDTEVOQlFVTXNSMEZCUjA4c1UwRkJTaXhEUVVGd1FpeERRVUZRTzBGQlEyaENMRTFCUVVrc1EwRkJReXgxUWtGQlYydENMRVZCUVZnc1EwRkJUQ3hGUVVGeFFpeE5RVUZOTEVsQlFVbEZMSFZDUVVGS0xFTkJRVzlDTEhkRlFVRjNSU3hQUVVGUFJpeEZRVUZ1Unl4RFFVRk9PMEZCUTNKQ0xGTkJRVTl1UkN4SFFVRkhhMElzVDBGQlNDeERRVUZYTEV0QlFVdG5RaXhIUVVGTUxFTkJRVk52UWl4UFFVRlVMRU5CUVdsQ1dpeEpRVUZxUWl4RFFVRnpRazhzVTBGQlUwVXNSMEZCUjBZc1MwRkJTQ3hKUVVGWlFTeExRVUZhTEVkQlFXOUNRU3hMUVVGdVJDeERRVUZZTEVOQlFWQTdRVUZEUkN4RFFVcEVPenRCUVUxQkxGTkJRVk12UWl4UFFVRlVMRU5CUVdsQ0swSXNTMEZCYWtJc1JVRkJkMEk3UVVGRGRFSXNVMEZCVHl4SlFVRkpha1FzUlVGQlNpeERRVUZQTEVOQlFVTnJRaXhQUVVGRUxFVkJRVlZJTEUxQlFWWXNTMEZCY1VJN1FVRkRha01zVVVGQlNXdERMRk5CUVZNc2RVSkJRVmRCTEUxQlFVMVFMRWxCUVdwQ0xFTkJRV0lzUlVGQmNVTXNUMEZCVDA4c1RVRkJUVkFzU1VGQlRpeERRVUZYZUVJc1QwRkJXQ3hGUVVGdlFtZERMRXRCUVhCQ0xFTkJRVEJDYmtNc1RVRkJNVUlzUTBGQlVEdEJRVU55UTBjc1dVRkJVU3RDTEV0QlFWSTdRVUZEUkN4SFFVaE5MRU5CUVZBN1FVRkpSRHM3UVVGRlJDeFRRVUZUTVVJc1UwRkJWQ3hEUVVGdFFtMURMRVZCUVc1Q0xFVkJRWFZDTzBGQlEzSkNMRk5CUVU4c1EwRkJReXhIUVVGSE9VSXNTVUZCU2l4TFFVRmhMRWxCUVVrMVFpeEZRVUZLTEVOQlFVOHNRMEZCUXpKRUxFZEJRVVFzUlVGQlRVTXNSMEZCVGl4TFFVTjZRa1lzUjBGQlIwY3NTVUZCU0N4RFFVRlJMRWxCUVZJc1JVRkJZeXhIUVVGSGFrTXNTVUZCYWtJc1JVRkJkVUlzUTBGQlF6SkNMRWRCUVVRc1JVRkJUVThzUjBGQlRpeExRVUZqVUN4TlFVRk5TeXhKUVVGSlRDeEhRVUZLTEVOQlFVNHNSMEZCYVVKSkxFbEJRVWxITEVkQlFVb3NRMEZCZEVRc1EwRkVhMElzUTBGQmNFSTdRVUZGUkRzN1FVRkZSQ3hUUVVGVGRFTXNXVUZCVkN4RFFVRnpRbTFDTEVkQlFYUkNMRVZCUVRKQ08wRkJRM3BDTEUxQlFVa3NRMEZCUTBFc1IwRkJSQ3hKUVVGUkxFTkJRVU52UWl4UFFVRlBReXhqUVVGUUxFTkJRWE5DY2tJc1IwRkJkRUlzUTBGQllpeEZRVUY1UXp0QlFVRkZMRlZCUVUwc1NVRkJTWE5DTEV0QlFVb3NRMEZCVlN3eVEwRkJWaXhEUVVGT08wRkJRVGhFTzBGQlEzcEhMRk5CUVU5R0xFOUJRVTlITEcxQ1FVRlFMRU5CUVRKQ2RrSXNSMEZCTTBJc1JVRkRTbkJETEUxQlJFa3NRMEZEUjNWRExFOUJRVThzVDBGQlQwZ3NTVUZCU1Vjc1IwRkJTaXhEUVVGUUxFdEJRVzlDTEZWQlJEbENMRVZCUlVwMFF5eE5RVVpKTEVOQlJVY3NRMEZCUTIxRExFZEJRVVFzUlVGQlRYZENMRTFCUVU0c1MwRkJhVUk3UVVGRGRrSXNVVUZCU1N4RFFVRkRMRTlCUVU5RExFbEJRVkFzUTBGQldVUXNUVUZCV2l4RFFVRkVMRWxCUVhkQ0xFTkJRVU40UWl4SlFVRkxMRWRCUVVWM1FpeE5RVUZQTEU5QlFXUXNRMEZCTjBJc1JVRkJiMFI0UWl4SlFVRkxMRWRCUVVWM1FpeE5RVUZQTEU5QlFXUXNTVUZCZDBKdVJTeEhRVUZIZFVJc1UwRkJTQ3hEUVVGaGIwSXNTVUZCU3l4SFFVRkZkMElzVFVGQlR5eEZRVUZrTEVOQlFXSXNRMEZCZUVJN1FVRkRjRVFzVjBGQlQzaENMRWRCUVZBN1FVRkRSQ3hIUVV4SkxFVkJTMFpCTEVkQlRFVXNRMEZCVUR0QlFVMUVPenRCUVVWRUxGTkJRVk5zUWl4TlFVRlVMRWRCUVd0Q08wRkJRMmhDTEUxQlFVbFFMRTlCUVVvN1FVRkJRU3hOUVVGaFNDeE5RVUZpTzBGQlFVRXNUVUZCY1VKMVF5eFZRVUZWTEVsQlFVbDBSQ3hGUVVGS0xFTkJRVThzUTBGQlF6SkVMRWRCUVVRc1JVRkJUVU1zUjBGQlRpeExRVUZqTzBGQlFVVXhReXhqUVVGVmVVTXNSMEZCVml4RFFVRmxOVU1zVTBGQlV6WkRMRWRCUVZRN1FVRkJZeXhIUVVGd1JDeERRVUV2UWp0QlFVTkJMRk5CUVU4c1JVRkJSVTRzVDBGQlJpeEZRVUZYY0VNc1QwRkJXQ3hGUVVGdlFrZ3NUVUZCY0VJc1JVRkJVRHRCUVVORU96dEJRVWRqTEZOQlFWTm1MRVZCUVZRc1EwRkJXWEZGTEdWQlFWb3NSVUZCTmtJN1FVRkRNVU1zVFVGQlNTeEZRVUZGTEdkQ1FVRm5RbkpGTEVWQlFXeENMRU5CUVVvc1JVRkJNa0k3UVVGQlJTeFhRVUZQTEVsQlFVbEJMRVZCUVVvc1EwRkJUM0ZGTEdWQlFWQXNRMEZCVUR0QlFVRm5RenRCUVVNM1JDeE5RVUZKY0VNc1ZVRkJWVmNzVFVGQlZpeExRVUZ4UWl4RFFVRjZRaXhGUVVFMFFpeE5RVUZOTEVsQlFVbHhRaXhMUVVGS0xFTkJRVlVzYVVWQlFWWXNRMEZCVGp0QlFVTTFRaXhQUVVGTEwwSXNSMEZCVEN4SFFVRlhPMEZCUTFSSkxGbEJRV3RDTEVWQlFVVnNRaXhQUVVGUExFTkJRVlFzUlVGQldXMUNMRTlCUVU4c1EwRkJia0lzUlVGRVZEdEJRVVZVWlN4aFFVRnJRaXhKUVVGSlowSXNUMEZCU2l4RFFVRlpSQ3hsUVVGYUxFTkJSbFE3UVVGSFZHeERMSE5DUVVGclFqdEJRVWhVTEVkQlFWZzdRVUZMUkR0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQklpd2labWxzWlNJNkltbHVaR1Y0TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTlrYkdWMmVTOWpiMlJsTDI5emN5OW1kVzVqZEdsdmJtRnNMWEpwZG1WeUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dSblZ1WTNScGIyNWhiRVZ5Y205eUlIMGdabkp2YlNBbkxpOXRiMlIxYkdWekwyVnljbTl5Y3lkY2JtbHRjRzl5ZENCN0lHbHpSblZ1WTNScGIyNHNJR1pzWVhSMFpXNGdmU0JtY205dElDY3VMMjF2WkhWc1pYTXZkWFJwYkhNblhHNXBiWEJ2Y25RZ2V5QmphR0ZwYml3Z1kyaGhhVzVGYm1RZ2ZTQm1jbTl0SUNjdUwyMXZibUZrY3lkY2JtbHRjRzl5ZENCN0lHMWhjQ3dnWm1sdVpDd2dabWx1WkVsdVpHVjRMQ0JtYVd4MFpYSXNJSEpsWkhWalpTQjlJR1p5YjIwZ0p5NHZZWEp5WVhsekoxeHVhVzF3YjNKMElIc2diR2x6ZEdWdUlIMGdabkp2YlNBbkxpOWxkbVZ1ZEhNblhHNXBiWEJ2Y25RZ2V5QmZkR2hsYmtsbUxDQjBZWEJKWml3Z2RHaGxia2xtSUgwZ1puSnZiU0FuTGk5amIyNWthWFJwYjI1aGJDZGNibWx0Y0c5eWRDQjdJRjlrWld4aGVTd2daR1ZzWVhrc0lISmxhbVZqZEN3Z1lXeHNJR0Z6SUdGc2JGQnliMjFwYzJWeklIMGdabkp2YlNBbkxpOXdjbTl0YVhObEoxeHVYRzR2THlCR1VDNXdjbTkwYjNSNWNHVXVjbVZ6YnlBOUlISmxjMjlzZG1WY2JrWlFMbkJ5YjNSdmRIbHdaUzVoYkd3Z1BTQmhiR3hRY205dGFYTmxjMXh1UmxBdWNISnZkRzkwZVhCbExtMWhjQ0E5SUcxaGNGeHVSbEF1Y0hKdmRHOTBlWEJsTG1acGJtUWdQU0JtYVc1a1hHNUdVQzV3Y205MGIzUjVjR1V1Wm1sdVpFbHVaR1Y0SUQwZ1ptbHVaRWx1WkdWNFhHNUdVQzV3Y205MGIzUjVjR1V1Wm1sc2RHVnlJRDBnWm1sc2RHVnlYRzVHVUM1d2NtOTBiM1I1Y0dVdWNtVmtkV05sSUQwZ2NtVmtkV05sWEc1R1VDNXdjbTkwYjNSNWNHVXViR2x6ZEdWdUlEMGdiR2x6ZEdWdVhHNUdVQzV3Y205MGIzUjVjR1V1ZEdGd1NXWWdQU0IwWVhCSlpseHVSbEF1Y0hKdmRHOTBlWEJsTG5Sb1pXNUpaaUE5SUhSb1pXNUpabHh1UmxBdWNISnZkRzkwZVhCbExsOTBhR1Z1U1dZZ1BTQmZkR2hsYmtsbVhHNUdVQzV3Y205MGIzUjVjR1V1WkdWc1lYa2dQU0JrWld4aGVWeHVSbEF1Y0hKdmRHOTBlWEJsTGw5a1pXeGhlU0E5SUY5a1pXeGhlVnh1UmxBdWNISnZkRzkwZVhCbExuSmxhbVZqZENBOUlISmxhbVZqZEZ4dVhHNUdVQzVrWldaaGRXeDBJRDBnUmxCY2JpOHZJR1Y0Y0c5eWRDQmpiMjV6ZENCaGJHd2dQU0JoYkd4UWNtOXRhWE5sYzF4dVhHNUdVQzVoYkd3Z1BTQkdVQzV3Y205MGIzUjVjR1V1WVd4c1hHNUdVQzUwYUdWdVNXWWdQU0JHVUM1d2NtOTBiM1I1Y0dVdVgzUm9aVzVKWmx4dVJsQXVaR1ZzWVhrZ1BTQnRjMlZqSUQwK0lFWlFMbkpsYzI5c2RtVW9LUzVrWld4aGVTaHRjMlZqS1Z4dVJsQXVjMmxzWlc1MElEMGdiR2x0YVhRZ1BUNGdSbEF1Y21WemIyeDJaU2dwTG5OcGJHVnVkQ2hzYVcxcGRDbGNibHh1THk4Z1RXOXVZV1JwWXlCTlpYUm9iMlJ6WEc1R1VDNWphR0ZwYmlBOUlHTm9ZV2x1WEc1R1VDNXdjbTkwYjNSNWNHVXVZMmhoYVc1RmJtUWdQU0JqYUdGcGJrVnVaRnh1UmxBdWNtVnFaV04wSUQwZ1JsQXVjSEp2ZEc5MGVYQmxMbkpsYW1WamRGeHVSbEF1Y21WemIyeDJaU0E5SUhKbGMyOXNkbVZjYmx4dVJsQXVjSEp2YldsemFXWjVJRDBnY0hKdmJXbHphV1o1WEc1R1VDNXdjbTl0YVhOcFpubEJiR3dnUFNCd2NtOXRhWE5wWm5sQmJHeGNia1pRTG5WdWNHRmpheUE5SUhWdWNHRmphMXh1WEc1R1VDNXdjbTkwYjNSNWNHVXVZV1JrVTNSbGNDQTlJR1oxYm1OMGFXOXVJR0ZrWkZOMFpYQW9ibUZ0WlN3Z1lYSm5jeWtnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2RHaHBjeTV6ZEdWd2N5NXdkWE5vS0Z0dVlXMWxMQ0IwYUdsekxDQmhjbWR6WFNsY2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVSbEF1Y0hKdmRHOTBlWEJsTG1OdmJtTjFjbkpsYm1ONUlEMGdablZ1WTNScGIyNGdZMjl1WTNWeWNtVnVZM2tvYkdsdGFYUWdQU0JKYm1acGJtbDBlU2tnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25ZMjl1WTNWeWNtVnVZM2tuTENCYkxpNHVZWEpuZFcxbGJuUnpYU2xjYmlBZ2RHaHBjeTVmUmxBdVkyOXVZM1Z5Y21WdVkzbE1hVzFwZENBOUlHeHBiV2wwWEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JrWlFMbkJ5YjNSdmRIbHdaUzV4ZFdsbGRDQTlJR1oxYm1OMGFXOXVJSEYxYVdWMEtHVnljbTl5VEdsdGFYUWdQU0JKYm1acGJtbDBlU2tnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25jWFZwWlhRbkxDQmJMaTR1WVhKbmRXMWxiblJ6WFNsY2JpQWdkR2hwY3k1ZlJsQXVaWEp5YjNKeklEMGdleUJqYjNWdWREb2dNQ3dnYkdsdGFYUTZJR1Z5Y205eVRHbHRhWFFnZlZ4dUlDQnlaWFIxY200Z2RHaHBjMXh1ZlZ4dVJsQXVjSEp2ZEc5MGVYQmxMbk5wYkdWdWRDQTlJRVpRTG5CeWIzUnZkSGx3WlM1eGRXbGxkRnh1WEc1R1VDNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0Z1oyVjBLQzR1TG10bGVVNWhiV1Z6S1NCN1hHNGdJR2xtSUNoMGFHbHpMbk4wWlhCektTQnlaWFIxY200Z2RHaHBjeTVoWkdSVGRHVndLQ2RuWlhRbkxDQmJMaTR1WVhKbmRXMWxiblJ6WFNsY2JpQWdhMlY1VG1GdFpYTWdQU0JtYkdGMGRHVnVLR3RsZVU1aGJXVnpLVnh1SUNCeVpYUjFjbTRnZEdocGN5NTBhR1Z1S0Nodlltb3BJRDArSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5aWFpQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUdsbUlDaHJaWGxPWVcxbGN5NXNaVzVuZEdnZ1BUMDlJREVwSUhKbGRIVnliaUJ2WW1wYmEyVjVUbUZ0WlhOYk1GMWRYRzRnSUNBZ0lDQnlaWFIxY200Z2EyVjVUbUZ0WlhNdWNtVmtkV05sS0NobGVIUnlZV04wWldRc0lHdGxlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmxlSFJ5WVdOMFpXUmJhMlY1WFNBOUlHOWlhbHRyWlhsZFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGVIUnlZV04wWldSY2JpQWdJQ0FnSUgwc0lIdDlLVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYjJKcVhHNGdJSDBwWEc1OVhHNWNia1pRTG5CeWIzUnZkSGx3WlM1elpYUWdQU0JtZFc1amRHbHZiaUJ6WlhRb2EyVjVUbUZ0WlN3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0hSb2FYTXVjM1JsY0hNcElISmxkSFZ5YmlCMGFHbHpMbUZrWkZOMFpYQW9KM05sZENjc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnlaWFIxY200Z2RHaHBjeTUwYUdWdUtHOWlhaUE5UGlCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlltb2dQVDA5SUNkdlltcGxZM1FuS1NCdlltcGJhMlY1VG1GdFpWMGdQU0IyWVd4MVpWeHVJQ0FnSUhKbGRIVnliaUJ2WW1wY2JpQWdmU2xjYm4xY2JseHVSbEF1Y0hKdmRHOTBlWEJsTG1OaGRHTm9JRDBnWm5WdVkzUnBiMjRnS0dadUtTQjdYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkallYUmphQ2NzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTWlrZ2NtVjBkWEp1SUhSb2FYTXVZMkYwWTJoSlppZ3VMaTVoY21kMWJXVnVkSE1wWEc0Z0lHbG1JQ2doYVhOR2RXNWpkR2x2YmlobWJpa3BJSFJvY205M0lHNWxkeUJHZFc1amRHbHZibUZzUlhKeWIzSW9KMGx1ZG1Gc2FXUWdabTRnWVhKbmRXMWxiblFnWm05eUlHQXVZMkYwWTJnb1ptNHBZQzRnVFhWemRDQmlaU0JoSUdaMWJtTjBhVzl1TGlCRGRYSnlaVzUwYkhrNklDY2dLeUIwZVhCbGIyWWdabTRwWEc0Z0lISmxkSFZ5YmlCR1VDNXlaWE52YkhabEtIUm9hWE11WDBaUUxuQnliMjFwYzJVdVkyRjBZMmdvWlhKeUlEMCtJR1p1S0dWeWNpa3BLVnh1ZlZ4dVhHNUdVQzV3Y205MGIzUjVjR1V1WTJGMFkyaEpaaUE5SUdaMWJtTjBhVzl1SUdOaGRHTm9TV1lvWTI5dVpHbDBhVzl1TENCbWJpa2dlMXh1SUNCcFppQW9kR2hwY3k1emRHVndjeWtnY21WMGRYSnVJSFJvYVhNdVlXUmtVM1JsY0NnblkyRjBZMmhKWmljc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnBaaUFvSVdselJuVnVZM1JwYjI0b1ptNHBLU0IwYUhKdmR5QnVaWGNnUm5WdVkzUnBiMjVoYkVWeWNtOXlLQ2RKYm5aaGJHbGtJR1p1SUdGeVozVnRaVzUwSUdadmNpQmdMbU5oZEdOb1NXWW9ZMjl1WkdsMGFXOXVMQ0JtYmlsZ0xpQk5kWE4wSUdKbElHRWdablZ1WTNScGIyNHVJRU4xY25KbGJuUnNlVG9nSnlBcklIUjVjR1Z2WmlCbWJpbGNibHh1SUNCeVpYUjFjbTRnUmxBdWNtVnpiMngyWlNoMGFHbHpMbDlHVUM1d2NtOXRhWE5sTG1OaGRHTm9LR1Z5Y2lBOVBpQjdYRzRnSUNBZ2FXWWdLR052Ym1ScGRHbHZiaUFtSmlCbGNuSWdhVzV6ZEdGdVkyVnZaaUJqYjI1a2FYUnBiMjRwSUhKbGRIVnliaUJtYmlobGNuSXBJQzh2SUhSeWVTQnlaUzEwYUhKdmR5d2diV2xuYUhRZ1ltVWdjbVZoYkd4NUlITnNiM2N1TGk1Y2JpQWdJQ0IwYUhKdmR5QmxjbkpjYmlBZ2ZTa3BYRzU5WEc1Y2JrWlFMbkJ5YjNSdmRIbHdaUzUwYUdWdUlEMGdablZ1WTNScGIyNGdkR2hsYmlobWJpa2dlMXh1SUNCcFppQW9kR2hwY3k1emRHVndjeWtnY21WMGRYSnVJSFJvYVhNdVlXUmtVM1JsY0NnbmRHaGxiaWNzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9JV2x6Um5WdVkzUnBiMjRvWm00cEtTQjBhSEp2ZHlCdVpYY2dSblZ1WTNScGIyNWhiRVZ5Y205eUtDZEpiblpoYkdsa0lHWnVJR0Z5WjNWdFpXNTBJR1p2Y2lCZ0xuUm9aVzRvWm00cFlDNGdUWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVMaUJEZFhKeVpXNTBiSGs2SUNjZ0t5QjBlWEJsYjJZZ1ptNHBYRzRnSUhKbGRIVnliaUJHVUM1eVpYTnZiSFpsS0hSb2FYTXVYMFpRTG5CeWIyMXBjMlV1ZEdobGJpaG1iaWtwWEc1OVhHNWNia1pRTG5CeWIzUnZkSGx3WlM1MFlYQWdQU0JtZFc1amRHbHZiaUIwWVhBb1ptNHBJSHRjYmlBZ2FXWWdLSFJvYVhNdWMzUmxjSE1wSUhKbGRIVnliaUIwYUdsekxtRmtaRk4wWlhBb0ozUmhjQ2NzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9JV2x6Um5WdVkzUnBiMjRvWm00cEtTQjBhSEp2ZHlCdVpYY2dSblZ1WTNScGIyNWhiRVZ5Y205eUtDZEpiblpoYkdsa0lHWnVJR0Z5WjNWdFpXNTBJR1p2Y2lCZ0xuUmhjQ2htYmlsZ0xpQk5kWE4wSUdKbElHRWdablZ1WTNScGIyNHVJRU4xY25KbGJuUnNlVG9nSnlBcklIUjVjR1Z2WmlCbWJpbGNiaUFnY21WMGRYSnVJRVpRTG5KbGMyOXNkbVVvZEdocGN5NWZSbEF1Y0hKdmJXbHpaUzUwYUdWdUtIWmhiSFZsSUQwK0lHWnVLSFpoYkhWbEtTQS9JSFpoYkhWbElEb2dkbUZzZFdVcEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpYTnZiSFpsS0haaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlCdVpYY2dSbEFvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDJZV3gxWlNBbUppQnBjMFoxYm1OMGFXOXVLSFpoYkhWbExuUm9aVzRwS1NCeVpYUjFjbTRnZG1Gc2RXVXVkR2hsYmloeVpYTnZiSFpsS1M1allYUmphQ2h5WldwbFkzUXBYRzRnSUNBZ2NtVnpiMngyWlNoMllXeDFaU2xjYmlBZ2ZTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NISnZiV2x6YVdaNUtHTmlLU0I3WEc0Z0lISmxkSFZ5YmlBb0xpNHVZWEpuY3lrZ1BUNGdibVYzSUVaUUtDaDVZV2dzSUc1aGFDa2dQVDVjYmlBZ0lDQmpZaTVqWVd4c0tIUm9hWE1zSUM0dUxtRnlaM01zSUNobGNuSXNJSEpsY3lrZ1BUNGdaWEp5SUQ4Z2JtRm9LR1Z5Y2lrZ09pQjVZV2dvY21WektTa3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQnliMjFwYzJsbWVVRnNiQ2h2WW1vcElIdGNiaUFnYVdZZ0tDRnZZbW9nZkh3Z0lVOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaaWh2WW1vcEtTQjdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25TVzUyWVd4cFpDQkJjbWQxYldWdWRDQnZZbW9nYVc0Z2NISnZiV2x6YVdaNVFXeHNLRzlpYWlrbktTQjlYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWh2WW1vcFhHNGdJQ0FnTG1acGJIUmxjaWhyWlhrZ1BUNGdkSGx3Wlc5bUlHOWlhbHRyWlhsZElEMDlQU0FuWm5WdVkzUnBiMjRuS1Z4dUlDQWdJQzV5WldSMVkyVW9LRzlpYWl3Z1ptNU9ZVzFsS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvSVM5VGVXNWpMeTUwWlhOMEtHWnVUbUZ0WlNrZ0ppWWdJVzlpYWx0Z0pIdG1iazVoYldWOVFYTjVibU5nWFNrZ2IySnFXMkFrZTJadVRtRnRaWDFCYzNsdVkyQmRJRDBnUmxBdWNISnZiV2x6YVdaNUtHOWlhbHRnSkh0bWJrNWhiV1Y5WUYwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnYjJKcVhHNGdJQ0FnZlN3Z2IySnFLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFibkJoWTJzb0tTQjdYRzRnSUd4bGRDQnlaWE52YkhabExDQnlaV3BsWTNRc0lIQnliMjFwYzJVZ1BTQnVaWGNnUmxBb0tIbGhhQ3dnYm1Gb0tTQTlQaUI3SUhKbGMyOXNkbVVnUFNCNVlXZzdJSEpsYW1WamRDQTlJRzVoYUNCOUtWeHVJQ0J5WlhSMWNtNGdleUJ3Y205dGFYTmxMQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUWdmVnh1ZlZ4dVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlFWlFLSEpsYzI5c2RtVlNaV3BsWTNSRFFpa2dlMXh1SUNCcFppQW9JU2gwYUdseklHbHVjM1JoYm1ObGIyWWdSbEFwS1NCN0lISmxkSFZ5YmlCdVpYY2dSbEFvY21WemIyeDJaVkpsYW1WamRFTkNLU0I5WEc0Z0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JQ0U5UFNBeEtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owWjFibU4wYVc5dVlXeFFjbTl0YVhObGN5QmpiMjV6ZEhKMVkzUnZjaUJ2Ym14NUlHRmpZMlZ3ZEhNZ01TQmpZV3hzWW1GamF5QmhjbWQxYldWdWRDY3BYRzRnSUhSb2FYTXVYMFpRSUQwZ2UxeHVJQ0FnSUdWeWNtOXljem9nSUNBZ0lDQWdJQ0FnSUhzZ2JHbHRhWFE2SURBc0lHTnZkVzUwT2lBd0lIMHNYRzRnSUNBZ2NISnZiV2x6WlRvZ0lDQWdJQ0FnSUNBZ2JtVjNJRkJ5YjIxcGMyVW9jbVZ6YjJ4MlpWSmxhbVZqZEVOQ0tTeGNiaUFnSUNCamIyNWpkWEp5Wlc1amVVeHBiV2wwT2lBMExGeHVJQ0I5WEc1OVhHNHZMeUJwWmlBb2NISnZZMlZ6Y3lBbUppQndjbTlqWlhOekxtOXVLU0I3WEc0dkx5QWdJQzh2SUhCeWIyTmxjM011YjI0b0ozVnVZMkYxWjJoMFJYaGpaWEIwYVc5dUp5d2daU0E5UGlCamIyNXpiMnhsTG1WeWNtOXlLQ2RHVUhKdmJXbHpaWE02SUVaQlZFRk1JRVZZUTBWUVZFbFBUam9nZFc1allYVm5hSFJGZUdObGNIUnBiMjRuTENCbEtTbGNiaTh2SUNBZ2NISnZZMlZ6Y3k1dmJpZ25kVzVvWVc1a2JHVmtVbVZxWldOMGFXOXVKeXdnWlNBOVBpQmpiMjV6YjJ4bExtVnljbTl5S0NkR1VISnZiV2x6WlhNNklFWkJWRUZNSUVWU1VrOVNPaUIxYm1oaGJtUnNaV1JTWldwbFkzUnBiMjRuTENCbEtTbGNiaTh2SUgxY2JpSmRmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuY2xhc3MgRnVuY3Rpb25hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihtc2csIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBtc2c7XG4gICAgICBpZiAobXNnLm1lc3NhZ2UpIG1zZyA9IG1zZy5tZXNzYWdlO1xuICAgIH1cbiAgICBzdXBlcihtc2cpO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAvLyBDYXB0dXJpbmcgc3RhY2sgdHJhY2UsIGV4Y2x1ZGluZyBjb25zdHJ1Y3RvciBjYWxsIGZyb20gaXQuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cbn1cbmV4cG9ydHMuRnVuY3Rpb25hbEVycm9yID0gRnVuY3Rpb25hbEVycm9yO1xuY2xhc3MgRnVuY3Rpb25hbFVzZXJFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0cy5GdW5jdGlvbmFsVXNlckVycm9yID0gRnVuY3Rpb25hbFVzZXJFcnJvcjtcbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5leHBvcnRzLkZQVW5leHBlY3RlZEVycm9yID0gRlBVbmV4cGVjdGVkRXJyb3I7XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmV4cG9ydHMuRlBJbnB1dEVycm9yID0gRlBJbnB1dEVycm9yO1xuY2xhc3MgRlBTb2Z0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmV4cG9ydHMuRlBTb2Z0RXJyb3IgPSBGUFNvZnRFcnJvcjtcbmNsYXNzIEZQVGltZW91dCBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0cy5GUFRpbWVvdXQgPSBGUFRpbWVvdXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5dGIyUjFiR1Z6TDJWeWNtOXljeTVxY3lKZExDSnVZVzFsY3lJNld5SkdkVzVqZEdsdmJtRnNSWEp5YjNJaUxDSkZjbkp2Y2lJc0ltTnZibk4wY25WamRHOXlJaXdpYlhObklpd2liM0IwYVc5dWN5SXNJbTFsYzNOaFoyVWlMQ0pQWW1wbFkzUWlMQ0puWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SWl3aVptOXlSV0ZqYUNJc0ltdGxlU0lzSW01aGJXVWlMQ0pqWVhCMGRYSmxVM1JoWTJ0VWNtRmpaU0lzSWtaMWJtTjBhVzl1WVd4VmMyVnlSWEp5YjNJaUxDSkdVRlZ1Wlhod1pXTjBaV1JGY25KdmNpSXNJa1pRU1c1d2RYUkZjbkp2Y2lJc0lrWlFVMjltZEVWeWNtOXlJaXdpUmxCVWFXMWxiM1YwSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRlBMRTFCUVUxQkxHVkJRVTRzVTBGQk9FSkRMRXRCUVRsQ0xFTkJRVzlETzBGQlEzcERReXhqUVVGWlF5eEhRVUZhTEVWQlFXbENReXhQUVVGcVFpeEZRVUV3UWp0QlFVTjRRaXhSUVVGSkxFOUJRVTlFTEVkQlFWQXNTMEZCWlN4UlFVRnVRaXhGUVVFMlFqdEJRVU16UWtNc1owSkJRVlZFTEVkQlFWWTdRVUZEUVN4VlFVRkxRU3hKUVVGSlJTeFBRVUZVTEVWQlFXMUNSaXhOUVVGTlFTeEpRVUZKUlN4UFFVRldPMEZCUTNCQ08wRkJRMFFzVlVGQlRVWXNSMEZCVGp0QlFVTkJMRkZCUVVrc1QwRkJUME1zVDBGQlVDeExRVUZ0UWl4UlFVRjJRaXhGUVVGcFF6dEJRVU12UWtVc1lVRkJUME1zYlVKQlFWQXNRMEZCTWtKSUxFOUJRVE5DTEVWQlEwZEpMRTlCUkVnc1EwRkRWME1zVDBGQlR6dEJRVU5rTEdGQlFVdEJMRWRCUVV3c1NVRkJXVXdzVVVGQlVVc3NSMEZCVWl4RFFVRmFPMEZCUTBRc1QwRklTRHRCUVVsRU8wRkJRMFFzVTBGQlMwTXNTVUZCVEN4SFFVRlpMRXRCUVV0U0xGZEJRVXdzUTBGQmFVSlJMRWxCUVRkQ08wRkJRMEU3UVVGRFFWUXNWVUZCVFZVc2FVSkJRVTRzUTBGQmQwSXNTVUZCZUVJc1JVRkJPRUlzUzBGQlMxUXNWMEZCYmtNN1FVRkRSRHRCUVdoQ2QwTTdVVUZCT1VKR0xHVXNSMEZCUVVFc1pUdEJRV3RDVGl4TlFVRk5XU3h0UWtGQlRpeFRRVUZyUTFvc1pVRkJiRU1zUTBGQmEwUTdVVUZCTlVOWkxHMUNMRWRCUVVGQkxHMUNPMEZCUTA0c1RVRkJUVU1zYVVKQlFVNHNVMEZCWjBOaUxHVkJRV2hETEVOQlFXZEVPMUZCUVRGRFlTeHBRaXhIUVVGQlFTeHBRanRCUVVOT0xFMUJRVTFETEZsQlFVNHNVMEZCTWtKa0xHVkJRVE5DTEVOQlFUSkRPMUZCUVhKRFl5eFpMRWRCUVVGQkxGazdRVUZEVGl4TlFVRk5ReXhYUVVGT0xGTkJRVEJDWml4bFFVRXhRaXhEUVVFd1F6dFJRVUZ3UTJVc1Z5eEhRVUZCUVN4WE8wRkJRMDRzVFVGQlRVTXNVMEZCVGl4VFFVRjNRbWhDTEdWQlFYaENMRU5CUVhkRE8xRkJRV3hEWjBJc1V5eEhRVUZCUVN4VElpd2labWxzWlNJNkltVnljbTl5Y3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJdlZYTmxjbk12Wkd4bGRua3ZZMjlrWlM5dmMzTXZablZ1WTNScGIyNWhiQzF5YVhabGNpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmpiR0Z6Y3lCR2RXNWpkR2x2Ym1Gc1JYSnliM0lnWlhoMFpXNWtjeUJGY25KdmNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHMXpaeXdnYjNCMGFXOXVjeWtnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYlhObklEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnYjNCMGFXOXVjeUE5SUcxeloxeHVJQ0FnSUNBZ2FXWWdLQ0J0YzJjdWJXVnpjMkZuWlNBcElHMXpaeUE5SUcxelp5NXRaWE56WVdkbFhHNGdJQ0FnZlZ4dUlDQWdJSE4xY0dWeUtHMXpaeWxjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3lodmNIUnBiMjV6S1Z4dUlDQWdJQ0FnSUNBdVptOXlSV0ZqYUNoclpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE5iYTJWNVhTQTlJRzl3ZEdsdmJuTmJhMlY1WFZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCMGFHbHpMbU52Ym5OMGNuVmpkRzl5TG01aGJXVmNiaUFnSUNBdkx5QkRZWEIwZFhKcGJtY2djM1JoWTJzZ2RISmhZMlVzSUdWNFkyeDFaR2x1WnlCamIyNXpkSEoxWTNSdmNpQmpZV3hzSUdaeWIyMGdhWFF1WEc0Z0lDQWdSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVb2RHaHBjeXdnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaWxjYmlBZ2ZWeHVmVnh1Wlhod2IzSjBJR05zWVhOeklFWjFibU4wYVc5dVlXeFZjMlZ5UlhKeWIzSWdaWGgwWlc1a2N5QkdkVzVqZEdsdmJtRnNSWEp5YjNJZ2UzMWNibVY0Y0c5eWRDQmpiR0Z6Y3lCR1VGVnVaWGh3WldOMFpXUkZjbkp2Y2lCbGVIUmxibVJ6SUVaMWJtTjBhVzl1WVd4RmNuSnZjaUI3ZlZ4dVpYaHdiM0owSUdOc1lYTnpJRVpRU1c1d2RYUkZjbkp2Y2lCbGVIUmxibVJ6SUVaMWJtTjBhVzl1WVd4RmNuSnZjaUI3ZlZ4dVpYaHdiM0owSUdOc1lYTnpJRVpRVTI5bWRFVnljbTl5SUdWNGRHVnVaSE1nUm5WdVkzUnBiMjVoYkVWeWNtOXlJSHQ5WEc1bGVIQnZjblFnWTJ4aGMzTWdSbEJVYVcxbGIzVjBJR1Y0ZEdWdVpITWdSblZ1WTNScGIyNWhiRVZ5Y205eUlIdDlYRzRpWFgwPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL21vZHVsZXMvZXJyb3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmNvbnN0IHV0aWxzID0ge1xuICBpc1Byb21pc2VMaWtlKHApIHtcbiAgICByZXR1cm4gcCAmJiB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBpc0Z1bmN0aW9uKGZuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgaXNFbnVtZXJhYmxlKGxpc3QpIHtcbiAgICByZXR1cm4gbGlzdCAmJiBBcnJheS5pc0FycmF5KGxpc3QpIHx8IHR5cGVvZiBsaXN0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG4gIH0sXG5cbiAgZmxhdHRlbihhcnIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgYGZsYXR0ZW5gIHJlcXVpcmVzIHZhbGlkIGFycmF5IHBhcmFtZXRlcicpO1xuICAgIHJldHVybiBhcnIucmVkdWNlKChyZXN1bHRzLCBpdGVtKSA9PiByZXN1bHRzLmNvbmNhdChBcnJheS5pc0FycmF5KGl0ZW0pID8gdXRpbHMuZmxhdHRlbihpdGVtKSA6IFtpdGVtXSksIFtdKTtcbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gdXRpbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5dGIyUjFiR1Z6TDNWMGFXeHpMbXB6SWwwc0ltNWhiV1Z6SWpwYkluVjBhV3h6SWl3aWFYTlFjbTl0YVhObFRHbHJaU0lzSW5BaUxDSjBhR1Z1SWl3aWFYTkdkVzVqZEdsdmJpSXNJbVp1SWl3aWFYTkZiblZ0WlhKaFlteGxJaXdpYkdsemRDSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbE41YldKdmJDSXNJbWwwWlhKaGRHOXlJaXdpWm14aGRIUmxiaUlzSW1GeWNpSXNJa1Z5Y205eUlpd2ljbVZrZFdObElpd2ljbVZ6ZFd4MGN5SXNJbWwwWlcwaUxDSmpiMjVqWVhRaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08wRkJRVUVzVFVGQlRVRXNVVUZCVVR0QlFVTmFReXhuUWtGQlkwTXNRMEZCWkN4RlFVRnBRanRCUVVGRkxGZEJRVTlCTEV0QlFVc3NUMEZCVDBFc1JVRkJSVU1zU1VGQlZDeExRVUZyUWl4VlFVRTVRanRCUVVFd1F5eEhRVVJxUkR0QlFVVmFReXhoUVVGWFF5eEZRVUZZTEVWQlFXVTdRVUZCUlN4WFFVRlBMRTlCUVU5QkxFVkJRVkFzUzBGQll5eFZRVUZ5UWp0QlFVRnBReXhIUVVaMFF6dEJRVWRhUXl4bFFVRmhReXhKUVVGaUxFVkJRVzFDTzBGQlFVVXNWMEZCVDBFc1VVRkJVVU1zVFVGQlRVTXNUMEZCVGl4RFFVRmpSaXhKUVVGa0xFTkJRVklzU1VGQkswSXNUMEZCVDBFc1MwRkJTMGNzVDBGQlQwTXNVVUZCV2l4RFFVRlFMRXRCUVdsRExGVkJRWFpGTzBGQlFXMUdMRWRCU0RWR096dEJRVXRhUXl4VlFVRlJReXhIUVVGU0xFVkJRV0U3UVVGRFdDeFJRVUZKTEVOQlFVTk1MRTFCUVUxRExFOUJRVTRzUTBGQlkwa3NSMEZCWkN4RFFVRk1MRVZCUVhsQ0xFMUJRVTBzU1VGQlNVTXNTMEZCU2l4RFFVRlZMR2xFUVVGV0xFTkJRVTQ3UVVGRGVrSXNWMEZCVDBRc1NVRkJTVVVzVFVGQlNpeERRVUZYTEVOQlFVTkRMRTlCUVVRc1JVRkJWVU1zU1VGQlZpeExRVUZ0UWtRc1VVRkJVVVVzVFVGQlVpeERRVUZsVml4TlFVRk5ReXhQUVVGT0xFTkJRV05STEVsQlFXUXNTVUZCYzBKcVFpeE5RVUZOV1N4UFFVRk9MRU5CUVdOTExFbEJRV1FzUTBGQmRFSXNSMEZCTkVNc1EwRkJRMEVzU1VGQlJDeERRVUV6UkN4RFFVRTVRaXhGUVVGclJ5eEZRVUZzUnl4RFFVRlFPMEZCUTBRN1FVRlNWeXhEUVVGa096dHJRa0ZYWldwQ0xFc2lMQ0ptYVd4bElqb2lkWFJwYkhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUwxVnpaWEp6TDJSc1pYWjVMMk52WkdVdmIzTnpMMloxYm1OMGFXOXVZV3d0Y21sMlpYSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpqYjI1emRDQjFkR2xzY3lBOUlIdGNiaUFnYVhOUWNtOXRhWE5sVEdsclpTaHdLU0I3SUhKbGRIVnliaUJ3SUNZbUlIUjVjR1Z2WmlCd0xuUm9aVzRnUFQwOUlDZG1kVzVqZEdsdmJpY2dmU3hjYmlBZ2FYTkdkVzVqZEdsdmJpaG1iaWtnZXlCeVpYUjFjbTRnZEhsd1pXOW1JR1p1SUQwOVBTQW5ablZ1WTNScGIyNG5JSDBzWEc0Z0lHbHpSVzUxYldWeVlXSnNaU2hzYVhOMEtTQjdJSEpsZEhWeWJpQnNhWE4wSUNZbUlFRnljbUY1TG1selFYSnlZWGtvYkdsemRDa2dmSHdnZEhsd1pXOW1JR3hwYzNSYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNBOVBUMGdKMloxYm1OMGFXOXVKeUI5TEZ4dVhHNGdJR1pzWVhSMFpXNG9ZWEp5S1NCN1hHNGdJQ0FnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dGeWNpa3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25UV1YwYUc5a0lHQm1iR0YwZEdWdVlDQnlaWEYxYVhKbGN5QjJZV3hwWkNCaGNuSmhlU0J3WVhKaGJXVjBaWEluS1Z4dUlDQWdJSEpsZEhWeWJpQmhjbkl1Y21Wa2RXTmxLQ2h5WlhOMWJIUnpMQ0JwZEdWdEtTQTlQaUJ5WlhOMWJIUnpMbU52Ym1OaGRDaEJjbkpoZVM1cGMwRnljbUY1S0dsMFpXMHBJRDhnZFhScGJITXVabXhoZEhSbGJpaHBkR1Z0S1NBNklGdHBkR1Z0WFNrc0lGdGRLVnh1SUNCOUxGeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0IxZEdsc2MxeHVJbDE5XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbW9kdWxlcy91dGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNoYWluID0gY2hhaW47XG5leHBvcnRzLmNoYWluRW5kID0gY2hhaW5FbmQ7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpO1xuXG4vKipcbiAqIFN0YXJ0ICdyZWNvcmRpbmcnIGEgY2hhaW4gb2YgY29tbWFuZHMsIGFmdGVyIHN0ZXBzIGRlZmluZWQgY2FsbCBgLmNoYWluRW5kKClgXG4gKiBAcmV0dXJucyBGdW5jdGlvbmFsUHJvbWlzZVxuICovXG5mdW5jdGlvbiBjaGFpbigpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG4gIC8vIGNyZWF0ZSBhIHBsYWNlaG9sZGVyL2luaXRpYWwgcHJvbWlzZSB0byBob2xkIHRoZSBzdGVwcy9jaGFpbiBkYXRhXG4gIGNvbnN0IHByb21pc2UgPSBGUC5yZXNvbHZlKCk7XG4gIHByb21pc2Uuc3RlcHMgPSBbXTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8qKlxuICogQ2FsbCBhZnRlciBzdGFydGluZyBhIGAuY2hhaW4oKWAuXG4gKlxuICogT25lIG9mIHRoZSBmZXcgbm9uLWNoYWluYWJsZSBtZXRob2RzIGluIHRoZSBBUEkuXG4gKiBAcmV0dXJucyBhIEZ1bmN0aW9uLiBJdCBydW5zIHlvdXIgZnVuY3Rpb25hbCBjaGFpbiFcbiAqL1xuZnVuY3Rpb24gY2hhaW5FbmQoKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgaWYgKCF0aGlzLnN0ZXBzIHx8IHRoaXMuc3RlcHMubGVuZ3RoIDw9IDApIHRocm93IG5ldyBfZXJyb3JzLkZQSW5wdXRFcnJvcignTm8gc3RlcHMgZGVmaW5lZCBiZXR3ZWVuIC5jaGFpbigpICYgLmNoYWluRW5kKCknKTtcbiAgICBsZXQgc3RlcENvdW50ID0gMDtcbiAgICBsZXQgeyBwcm9taXNlLCByZXNvbHZlLCByZWplY3QgfSA9IEZQLnVucGFjaygpO1xuICAgIHdoaWxlIChzdGVwQ291bnQgPCB0aGlzLnN0ZXBzLmxlbmd0aCkge1xuICAgICAgY29uc3QgW2ZuTmFtZSwsIGFyZ3NdID0gdGhpcy5zdGVwc1tzdGVwQ291bnRdO1xuICAgICAgcHJvbWlzZSA9IHByb21pc2VbZm5OYW1lXSguLi5hcmdzKTtcbiAgICAgIHN0ZXBDb3VudCsrO1xuICAgIH1cbiAgICByZXNvbHZlKGlucHV0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTl0YjI1aFpITXVhbk1pWFN3aWJtRnRaWE1pT2xzaVkyaGhhVzRpTENKamFHRnBia1Z1WkNJc0lrWlFJaXdpY21WeGRXbHlaU0lzSW5CeWIyMXBjMlVpTENKeVpYTnZiSFpsSWl3aWMzUmxjSE1pTENKcGJuQjFkQ0lzSW14bGJtZDBhQ0lzSWtaUVNXNXdkWFJGY25KdmNpSXNJbk4wWlhCRGIzVnVkQ0lzSW5KbGFtVmpkQ0lzSW5WdWNHRmpheUlzSW1adVRtRnRaU0lzSW1GeVozTWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPMUZCVFdkQ1FTeExMRWRCUVVGQkxFczdVVUZqUVVNc1VTeEhRVUZCUVN4Uk96dEJRWEJDYUVJN08wRkJSVUU3T3pzN1FVRkpUeXhUUVVGVFJDeExRVUZVTEVkQlFXbENPMEZCUTNSQ0xGRkJRVTFGTEV0QlFVdERMRkZCUVZFc1UwRkJVaXhEUVVGWU8wRkJRMEU3UVVGRFFTeFJRVUZOUXl4VlFVRlZSaXhIUVVGSFJ5eFBRVUZJTEVWQlFXaENPMEZCUTBGRUxGVkJRVkZGTEV0QlFWSXNSMEZCWjBJc1JVRkJhRUk3UVVGRFFTeFRRVUZQUml4UFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096dEJRVTFQTEZOQlFWTklMRkZCUVZRc1IwRkJiMEk3UVVGRGVrSXNVVUZCVFVNc1MwRkJTME1zVVVGQlVTeFRRVUZTTEVOQlFWZzdPMEZCUlVFc1UwRkJUMGtzVTBGQlV6dEJRVU5rTEZGQlFVa3NRMEZCUXl4TFFVRkxSQ3hMUVVGT0xFbEJRV1VzUzBGQlMwRXNTMEZCVEN4RFFVRlhSU3hOUVVGWUxFbEJRWEZDTEVOQlFYaERMRVZCUVRKRExFMUJRVTBzU1VGQlNVTXNiMEpCUVVvc1EwRkJhVUlzYVVSQlFXcENMRU5CUVU0N1FVRkRNME1zVVVGQlNVTXNXVUZCV1N4RFFVRm9RanRCUVVOQkxGRkJRVWtzUlVGQlEwNHNUMEZCUkN4RlFVRlZReXhQUVVGV0xFVkJRVzFDVFN4TlFVRnVRaXhMUVVFMlFsUXNSMEZCUjFVc1RVRkJTQ3hGUVVGcVF6dEJRVU5CTEZkQlFVOUdMRmxCUVZrc1MwRkJTMG9zUzBGQlRDeERRVUZYUlN4TlFVRTVRaXhGUVVGelF6dEJRVU53UXl4WlFVRk5MRU5CUVVOTExFMUJRVVFzUjBGQlYwTXNTVUZCV0N4SlFVRnRRaXhMUVVGTFVpeExRVUZNTEVOQlFWZEpMRk5CUVZnc1EwRkJla0k3UVVGRFFVNHNaMEpCUVZWQkxGRkJRVkZUTEUxQlFWSXNSVUZCWjBJc1IwRkJSME1zU1VGQmJrSXNRMEZCVmp0QlFVTkJTanRCUVVORU8wRkJRMFJNTEZsQlFWRkZMRXRCUVZJN1FVRkRRU3hYUVVGUFNDeFBRVUZRTzBGQlEwUXNSMEZZUkR0QlFWbEVJaXdpWm1sc1pTSTZJbTF2Ym1Ga2N5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSXZWWE5sY25NdlpHeGxkbmt2WTI5a1pTOXZjM012Wm5WdVkzUnBiMjVoYkMxeWFYWmxjaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUVaUVNXNXdkWFJGY25KdmNpQjlJR1p5YjIwZ0p5NHZiVzlrZFd4bGN5OWxjbkp2Y25NblhHNWNiaThxS2x4dUlDb2dVM1JoY25RZ0ozSmxZMjl5WkdsdVp5Y2dZU0JqYUdGcGJpQnZaaUJqYjIxdFlXNWtjeXdnWVdaMFpYSWdjM1JsY0hNZ1pHVm1hVzVsWkNCallXeHNJR0F1WTJoaGFXNUZibVFvS1dCY2JpQXFJRUJ5WlhSMWNtNXpJRVoxYm1OMGFXOXVZV3hRY205dGFYTmxYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamFHRnBiaWdwSUh0Y2JpQWdZMjl1YzNRZ1JsQWdQU0J5WlhGMWFYSmxLQ2N1TDJsdVpHVjRKeWxjYmlBZ0x5OGdZM0psWVhSbElHRWdjR3hoWTJWb2IyeGtaWEl2YVc1cGRHbGhiQ0J3Y205dGFYTmxJSFJ2SUdodmJHUWdkR2hsSUhOMFpYQnpMMk5vWVdsdUlHUmhkR0ZjYmlBZ1kyOXVjM1FnY0hKdmJXbHpaU0E5SUVaUUxuSmxjMjlzZG1Vb0tWeHVJQ0J3Y205dGFYTmxMbk4wWlhCeklEMGdXMTFjYmlBZ2NtVjBkWEp1SUhCeWIyMXBjMlZjYm4xY2JseHVMeW9xWEc0Z0tpQkRZV3hzSUdGbWRHVnlJSE4wWVhKMGFXNW5JR0VnWUM1amFHRnBiaWdwWUM1Y2JpQXFYRzRnS2lCUGJtVWdiMllnZEdobElHWmxkeUJ1YjI0dFkyaGhhVzVoWW14bElHMWxkR2h2WkhNZ2FXNGdkR2hsSUVGUVNTNWNiaUFxSUVCeVpYUjFjbTV6SUdFZ1JuVnVZM1JwYjI0dUlFbDBJSEoxYm5NZ2VXOTFjaUJtZFc1amRHbHZibUZzSUdOb1lXbHVJVnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kyaGhhVzVGYm1Rb0tTQjdYRzRnSUdOdmJuTjBJRVpRSUQwZ2NtVnhkV2x5WlNnbkxpOXBibVJsZUNjcFhHNWNiaUFnY21WMGRYSnVJR2x1Y0hWMElEMCtJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVjM1JsY0hNZ2ZId2dkR2hwY3k1emRHVndjeTVzWlc1bmRHZ2dQRDBnTUNrZ2RHaHliM2NnYm1WM0lFWlFTVzV3ZFhSRmNuSnZjaWduVG04Z2MzUmxjSE1nWkdWbWFXNWxaQ0JpWlhSM1pXVnVJQzVqYUdGcGJpZ3BJQ1lnTG1Ob1lXbHVSVzVrS0NrbktWeHVJQ0FnSUd4bGRDQnpkR1Z3UTI5MWJuUWdQU0F3WEc0Z0lDQWdiR1YwSUh0d2NtOXRhWE5sTENCeVpYTnZiSFpsTENCeVpXcGxZM1I5SUQwZ1JsQXVkVzV3WVdOcktDbGNiaUFnSUNCM2FHbHNaU0FvYzNSbGNFTnZkVzUwSUR3Z2RHaHBjeTV6ZEdWd2N5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lHTnZibk4wSUZ0bWJrNWhiV1VzSUN3Z1lYSm5jMTBnUFNCMGFHbHpMbk4wWlhCelczTjBaWEJEYjNWdWRGMWNiaUFnSUNBZ0lIQnliMjFwYzJVZ1BTQndjbTl0YVhObFcyWnVUbUZ0WlYwb0xpNHVZWEpuY3lsY2JpQWdJQ0FnSUhOMFpYQkRiM1Z1ZENzclhHNGdJQ0FnZlZ4dUlDQWdJSEpsYzI5c2RtVW9hVzV3ZFhRcFhHNGdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVmNiaUFnZlZ4dWZWeHVJbDE5XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbW9uYWRzLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucmVkdWNlID0gZXhwb3J0cy5maWx0ZXIgPSBleHBvcnRzLmZpbmRJbmRleCA9IGV4cG9ydHMuZmluZCA9IGV4cG9ydHMubWFwID0gdW5kZWZpbmVkO1xuXG52YXIgXyA9IHJlcXVpcmUoJy4uLycpO1xuXG52YXIgXzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF8pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi9tb2R1bGVzL3V0aWxzJyk7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLm1hcCA9IG1hcDtcbmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5leHBvcnRzLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuZXhwb3J0cy5yZWR1Y2UgPSByZWR1Y2U7XG5cblxuZnVuY3Rpb24gZmluZChjYWxsYmFjaykge1xuICByZXR1cm4gX2ZpbmQuY2FsbCh0aGlzLCBjYWxsYmFjaykudGhlbigoeyBpdGVtIH0pID0+IGl0ZW0pO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrKSB7XG4gIHJldHVybiBfZmluZC5jYWxsKHRoaXMsIGNhbGxiYWNrKS50aGVuKCh7IGluZGV4IH0pID0+IGluZGV4KTtcbn1cblxuZnVuY3Rpb24gX2ZpbmQoaXRlcmFibGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdfZmluZCcsIFsuLi5hcmd1bWVudHNdKTtcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gaXRlcmFibGU7XG4gICAgaXRlcmFibGUgPSB0aGlzLl9GUC5wcm9taXNlO1xuICB9XG5cbiAgcmV0dXJuIF8yLmRlZmF1bHQucmVzb2x2ZShpdGVyYWJsZSkuZmlsdGVyKGNhbGxiYWNrKS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0c1swXSAhPSB1bmRlZmluZWQgPyB7IGl0ZW06IHJlc3VsdHNbMF0sIGluZGV4OiByZXN1bHRzLmluZGV4T2YocmVzdWx0c1swXSkgfSA6IHsgaXRlbTogdW5kZWZpbmVkLCBpbmRleDogLTEgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihpdGVyYWJsZSwgY2FsbGJhY2spIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2ZpbHRlcicsIFsuLi5hcmd1bWVudHNdKTtcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gaXRlcmFibGU7XG4gICAgaXRlcmFibGUgPSB0aGlzLl9GUC5wcm9taXNlO1xuICB9XG5cbiAgcmV0dXJuIHJlZHVjZShpdGVyYWJsZSwgKGFjYywgaXRlbSkgPT4gUHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrKGl0ZW0pKS50aGVuKHggPT4geCA/IGFjYy5jb25jYXQoW2l0ZW1dKSA6IGFjYyksIFtdKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlKGl0ZXJhYmxlLCByZWR1Y2VyLCBpbml0VmFsKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdyZWR1Y2UnLCBbLi4uYXJndW1lbnRzXSk7XG4gIGlmICh0eXBlb2YgaXRlcmFibGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpbml0VmFsID0gcmVkdWNlcjtcbiAgICByZWR1Y2VyID0gaXRlcmFibGU7XG4gICAgaXRlcmFibGUgPSB0aGlzLl9GUCA/IHRoaXMuX0ZQLnByb21pc2UgOiB0aGlzO1xuICB9IGVsc2UgaXRlcmFibGUgPSBfMi5kZWZhdWx0LnJlc29sdmUoaXRlcmFibGUsIHRoaXMpO1xuXG4gIHJldHVybiBuZXcgXzIuZGVmYXVsdCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmV0dXJuIGl0ZXJhYmxlLnRoZW4oaXRlcmFibGUgPT4ge1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSBpdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICBsZXQgaSA9IDA7XG5cbiAgICAgIGNvbnN0IG5leHQgPSB0b3RhbCA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChjdXJyZW50LmRvbmUpIHJldHVybiByZXNvbHZlKHRvdGFsKTtcblxuICAgICAgICBQcm9taXNlLmFsbChbdG90YWwsIGN1cnJlbnQudmFsdWVdKS50aGVuKChbdG90YWwsIGl0ZW1dKSA9PiBuZXh0KHJlZHVjZXIodG90YWwsIGl0ZW0sIGkrKykpKS5jYXRjaChyZWplY3QpO1xuICAgICAgfTtcblxuICAgICAgbmV4dChpbml0VmFsKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qZXNsaW50IG1heC1zdGF0ZW1lbnRzOiBbXCJlcnJvclwiLCA2MF0qL1xuZnVuY3Rpb24gbWFwKGFyZ3MsIGZuLCBvcHRpb25zKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdtYXAnLCBbLi4uYXJndW1lbnRzXSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHRoaXMgJiYgdGhpcy5fRlApIHtcbiAgICBmbiA9IGFyZ3M7XG4gICAgYXJncyA9IHRoaXMgJiYgdGhpcy5fRlAgJiYgdGhpcy5fRlAucHJvbWlzZTtcbiAgfVxuICBsZXQgcmVzb2x2ZWRPclJlamVjdGVkID0gZmFsc2U7XG4gIGNvbnN0IHRocmVhZExpbWl0ID0gTWF0aC5tYXgoMSwgTWF0aC5taW4odGhpcyAmJiB0aGlzLl9GUCAmJiB0aGlzLl9GUC5jb25jdXJyZW5jeUxpbWl0IHx8IDEsIDQpKTtcbiAgY29uc3QgaW5uZXJWYWx1ZXMgPSB0aGlzICYmIHRoaXMuX0ZQICYmIHRoaXMuX0ZQLnByb21pc2UgPyB0aGlzLl9GUC5wcm9taXNlIDogUHJvbWlzZS5yZXNvbHZlKGFyZ3MpO1xuICBsZXQgaW5pdGlhbFRocmVhZCA9IDA7XG4gIGxldCBlcnJvcnMgPSBbXTtcbiAgbGV0IGNvdW50ID0gMDtcbiAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICBjb25zdCB0aHJlYWRQb29sID0gbmV3IFNldCgpO1xuICBjb25zdCB0aHJlYWRQb29sRnVsbCA9ICgpID0+IHRocmVhZFBvb2wuc2l6ZSA+PSB0aHJlYWRMaW1pdDtcbiAgY29uc3QgaXNEb25lID0gKCkgPT4gZXJyb3JzLmxlbmd0aCA+IHRoaXMuX0ZQLmVycm9ycy5saW1pdCB8fCBjb3VudCA+PSBhcmdzLmxlbmd0aCB8fCByZXNvbHZlZE9yUmVqZWN0ZWQ7XG4gIGNvbnN0IHNldFJlc3VsdCA9IGluZGV4ID0+IHZhbHVlID0+IHtcbiAgICB0aHJlYWRQb29sLmRlbGV0ZShpbmRleCk7XG4gICAgcmVzdWx0c1tpbmRleF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG4gIHJldHVybiBfMi5kZWZhdWx0LnJlc29sdmUobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlc29sdmVJdCA9IHggPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2coJ0FjdGlvbi5yZXNvbHZlOicsIHJlc29sdmVkT3JSZWplY3RlZCwgeClcbiAgICAgIGlmIChyZXNvbHZlZE9yUmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlZE9yUmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSh4KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlamVjdEl0ID0geCA9PiB7XG4gICAgICBpZiAocmVzb2x2ZWRPclJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZWRPclJlamVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIGNvbnNvbGUubG9nKCdBY3Rpb24ucmVqZWN0OicsIHJlc29sdmVkT3JSZWplY3RlZCwgeClcbiAgICAgIHJlamVjdCh4KTtcbiAgICB9O1xuICAgIGlubmVyVmFsdWVzLnRoZW4oaXRlbXMgPT4ge1xuICAgICAgYXJncyA9IFsuLi5pdGVtc107XG4gICAgICBpZiAoISgwLCBfdXRpbHMuaXNFbnVtZXJhYmxlKShpdGVtcykpIHJldHVybiByZWplY3QobmV3IF9lcnJvcnMuRlBJbnB1dEVycm9yKCdJbnZhbGlkIGlucHV0IGRhdGEgcGFzc2VkIGludG8gRlAubWFwKCknKSk7XG4gICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgbGV0IGFjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gdGhpcy5fRlAuZXJyb3JzLmxpbWl0KSBhY3Rpb24gPSByZWplY3RJdDtcbiAgICAgICAgaWYgKGlzRG9uZSgpKSBhY3Rpb24gPSByZXNvbHZlSXQ7XG4gICAgICAgIGlmIChhY3Rpb24pIHJldHVybiBQcm9taXNlLmFsbChyZXN1bHRzKS50aGVuKGRhdGEgPT4gYWN0aW9uKHJlc3VsdHMpKSA/IHRydWUgOiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9O1xuICAgICAgY29uc3QgY2hlY2tBbmRSdW4gPSB2YWwgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnY2hlY2tBbmRSdW4nLCBjb3VudCwgcmVzb2x2ZWRPclJlamVjdGVkLCB2YWwpXG4gICAgICAgIGlmIChyZXNvbHZlZE9yUmVqZWN0ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFjb21wbGV0ZSgpICYmICFyZXN1bHRzW2NvdW50XSkgcnVuSXRlbShjb3VudCk7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBydW5JdGVtID0gYyA9PiB7XG4gICAgICAgIGlmIChyZXNvbHZlZE9yUmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aHJlYWRQb29sRnVsbCgpKSByZXR1cm4gc2V0VGltZW91dCgoKSA9PiBydW5JdGVtKGMpLCAwKTtcbiAgICAgICAgaWYgKHJlc3VsdHNbY10pIHJldHVybiByZXN1bHRzW2NdO1xuICAgICAgICB0aHJlYWRQb29sLmFkZChjKTtcbiAgICAgICAgLy8gZWl0aGVyIGdldCB2YWx1ZSB3aXRoIGBmbihpdGVtKWAgb3IgYGl0ZW0udGhlbihmbilgXG4gICAgICAgIHJlc3VsdHNbY10gPSBQcm9taXNlLnJlc29sdmUoYXJnc1tjXSkudGhlbih2YWwgPT4gZm4odmFsLCBjLCBhcmdzKSkudGhlbih2YWwgPT4gc2V0UmVzdWx0KGMpKHZhbCkpLnRoZW4oY2hlY2tBbmRSdW4pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgdGhpcy5fRlAuZXJyb3JzLmNvdW50Kys7XG4gICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZygnRVJSIEhBTkRMRVIhJywgZXJyb3JzLmxlbmd0aCwgdGhpcy5fRlAuZXJyb3JzLmxpbWl0KVxuICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gdGhpcy5fRlAuZXJyb3JzLmxpbWl0KSB7XG4gICAgICAgICAgICBjb25zdCBmcEVyciA9IGVycm9ycy5sZW5ndGggPT09IDEgPyBlcnIgOiBuZXcgX2Vycm9ycy5GdW5jdGlvbmFsRXJyb3IoYEVycm9yIExpbWl0ICR7dGhpcy5fRlAuZXJyb3JzLmxpbWl0fSBFeGNlZWRlZC5cbiAgICAgICAgICAgICAgaWR4PSR7Y30gZXJyQ250PSR7dGhpcy5fRlAuZXJyb3JzLmNvdW50fWAsIHsgZXJyb3JzLCByZXN1bHRzLCBjdHg6IHRoaXMgfSk7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoc2V0UmVzdWx0KGMpKGVycikpLnRoZW4oKCkgPT4gcmVqZWN0SXQoZnBFcnIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdFcnJvciBPSzonLCBKU09OLnN0cmluZ2lmeSh0aGlzLl9GUC5lcnJvcnMpKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gc2V0UmVzdWx0KGMpKGVycikpLnRoZW4oY2hlY2tBbmRSdW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdHNbY107XG4gICAgICB9O1xuXG4gICAgICAvLyBLaWNrIG9mZiB4IG51bWJlciBvZiBpbml0aWFsIHRocmVhZHNcbiAgICAgIHdoaWxlIChpbml0aWFsVGhyZWFkIDwgdGhyZWFkTGltaXQgJiYgaW5pdGlhbFRocmVhZCA8IGFyZ3MubGVuZ3RoKSBydW5JdGVtKGluaXRpYWxUaHJlYWQrKyk7XG4gICAgfSk7XG4gIH0pKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTloY25KaGVYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaWJXRndJaXdpWm1sdVpDSXNJbVpwYm1SSmJtUmxlQ0lzSW1acGJIUmxjaUlzSW5KbFpIVmpaU0lzSW1OaGJHeGlZV05ySWl3aVgyWnBibVFpTENKallXeHNJaXdpZEdobGJpSXNJbWwwWlcwaUxDSnBibVJsZUNJc0ltbDBaWEpoWW14bElpd2ljM1JsY0hNaUxDSmhaR1JUZEdWd0lpd2lZWEpuZFcxbGJuUnpJaXdpWDBaUUlpd2ljSEp2YldselpTSXNJa1pRSWl3aWNtVnpiMngyWlNJc0luSmxjM1ZzZEhNaUxDSjFibVJsWm1sdVpXUWlMQ0pwYm1SbGVFOW1JaXdpWVdOaklpd2lVSEp2YldselpTSXNJbmdpTENKamIyNWpZWFFpTENKeVpXUjFZMlZ5SWl3aWFXNXBkRlpoYkNJc0luSmxhbVZqZENJc0ltbDBaWEpoZEc5eUlpd2lVM2x0WW05c0lpd2lhU0lzSW01bGVIUWlMQ0owYjNSaGJDSXNJbU4xY25KbGJuUWlMQ0prYjI1bElpd2lZV3hzSWl3aWRtRnNkV1VpTENKallYUmphQ0lzSW1GeVozTWlMQ0ptYmlJc0ltOXdkR2x2Ym5NaUxDSnNaVzVuZEdnaUxDSnlaWE52YkhabFpFOXlVbVZxWldOMFpXUWlMQ0owYUhKbFlXUk1hVzFwZENJc0lrMWhkR2dpTENKdFlYZ2lMQ0p0YVc0aUxDSmpiMjVqZFhKeVpXNWplVXhwYldsMElpd2lhVzV1WlhKV1lXeDFaWE1pTENKcGJtbDBhV0ZzVkdoeVpXRmtJaXdpWlhKeWIzSnpJaXdpWTI5MWJuUWlMQ0owYUhKbFlXUlFiMjlzSWl3aVUyVjBJaXdpZEdoeVpXRmtVRzl2YkVaMWJHd2lMQ0p6YVhwbElpd2lhWE5FYjI1bElpd2liR2x0YVhRaUxDSnpaWFJTWlhOMWJIUWlMQ0prWld4bGRHVWlMQ0p5WlhOdmJIWmxTWFFpTENKeVpXcGxZM1JKZENJc0ltbDBaVzF6SWl3aVJsQkpibkIxZEVWeWNtOXlJaXdpWTI5dGNHeGxkR1VpTENKaFkzUnBiMjRpTENKa1lYUmhJaXdpWTJobFkydEJibVJTZFc0aUxDSjJZV3dpTENKeWRXNUpkR1Z0SWl3aVl5SXNJbk5sZEZScGJXVnZkWFFpTENKaFpHUWlMQ0psY25JaUxDSndkWE5vSWl3aVpuQkZjbklpTENKR2RXNWpkR2x2Ym1Gc1JYSnliM0lpTENKamRIZ2lYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3UVVGQlFUczdPenRCUVVOQk96dEJRVU5CT3pzN08xRkJSVk5CTEVjc1IwRkJRVUVzUnp0UlFVRkxReXhKTEVkQlFVRkJMRWs3VVVGQlRVTXNVeXhIUVVGQlFTeFRPMUZCUVZkRExFMHNSMEZCUVVFc1RUdFJRVUZSUXl4TkxFZEJRVUZCTEUwN096dEJRVVYyUXl4VFFVRlRTQ3hKUVVGVUxFTkJRV05KTEZGQlFXUXNSVUZCZDBJN1FVRkJSU3hUUVVGUFF5eE5RVUZOUXl4SlFVRk9MRU5CUVZjc1NVRkJXQ3hGUVVGcFFrWXNVVUZCYWtJc1JVRkJNa0pITEVsQlFUTkNMRU5CUVdkRExFTkJRVU1zUlVGQlJVTXNTVUZCUml4RlFVRkVMRXRCUVdOQkxFbEJRVGxETEVOQlFWQTdRVUZCTkVRN1FVRkRkRVlzVTBGQlUxQXNVMEZCVkN4RFFVRnRRa2NzVVVGQmJrSXNSVUZCTmtJN1FVRkJSU3hUUVVGUFF5eE5RVUZOUXl4SlFVRk9MRU5CUVZjc1NVRkJXQ3hGUVVGcFFrWXNVVUZCYWtJc1JVRkJNa0pITEVsQlFUTkNMRU5CUVdkRExFTkJRVU1zUlVGQlJVVXNTMEZCUml4RlFVRkVMRXRCUVdWQkxFdEJRUzlETEVOQlFWQTdRVUZCT0VRN08wRkJSVGRHTEZOQlFWTktMRXRCUVZRc1EwRkJaVXNzVVVGQlppeEZRVUY1UWs0c1VVRkJla0lzUlVGQmJVTTdRVUZEYWtNc1RVRkJTU3hMUVVGTFR5eExRVUZVTEVWQlFXZENMRTlCUVU4c1MwRkJTME1zVDBGQlRDeERRVUZoTEU5QlFXSXNSVUZCYzBJc1EwRkJReXhIUVVGSFF5eFRRVUZLTEVOQlFYUkNMRU5CUVZBN1FVRkRhRUlzVFVGQlNTeFBRVUZQU0N4UlFVRlFMRXRCUVc5Q0xGVkJRWGhDTEVWQlFXOURPMEZCUTJ4RFRpeGxRVUZYVFN4UlFVRllPMEZCUTBGQkxHVkJRVmNzUzBGQlMwa3NSMEZCVEN4RFFVRlRReXhQUVVGd1FqdEJRVU5FT3p0QlFVVkVMRk5CUVU5RExGZEJRVWRETEU5QlFVZ3NRMEZCVjFBc1VVRkJXQ3hGUVVOS1VpeE5RVVJKTEVOQlEwZEZMRkZCUkVnc1JVRkZTa2NzU1VGR1NTeERRVVZGVnl4UFFVRkVMRWxCUVdGQkxGRkJRVkVzUTBGQlVpeExRVUZqUXl4VFFVRmtMRWRCUVRCQ0xFVkJRVVZZTEUxQlFVMVZMRkZCUVZFc1EwRkJVaXhEUVVGU0xFVkJRVzlDVkN4UFFVRlBVeXhSUVVGUlJTeFBRVUZTTEVOQlFXZENSaXhSUVVGUkxFTkJRVklzUTBGQmFFSXNRMEZCTTBJc1JVRkJNVUlzUjBGQmNVWXNSVUZCUlZZc1RVRkJUVmNzVTBGQlVpeEZRVUZ0UWxZc1QwRkJUeXhEUVVGRExFTkJRVE5DTEVWQlJtNUhMRU5CUVZBN1FVRkhSRHM3UVVGRlJDeFRRVUZUVUN4TlFVRlVMRU5CUVdkQ1VTeFJRVUZvUWl4RlFVRXdRazRzVVVGQk1VSXNSVUZCYjBNN1FVRkRiRU1zVFVGQlNTeExRVUZMVHl4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwTXNUMEZCVEN4RFFVRmhMRkZCUVdJc1JVRkJkVUlzUTBGQlF5eEhRVUZIUXl4VFFVRktMRU5CUVhaQ0xFTkJRVkE3UVVGRGFFSXNUVUZCU1N4UFFVRlBTQ3hSUVVGUUxFdEJRVzlDTEZWQlFYaENMRVZCUVc5RE8wRkJRMnhEVGl4bFFVRlhUU3hSUVVGWU8wRkJRMEZCTEdWQlFWY3NTMEZCUzBrc1IwRkJUQ3hEUVVGVFF5eFBRVUZ3UWp0QlFVTkVPenRCUVVWRUxGTkJRVTlhTEU5QlFVOVBMRkZCUVZBc1JVRkJhVUlzUTBGQlExY3NSMEZCUkN4RlFVRk5ZaXhKUVVGT0xFdEJRV1ZqTEZGQlFWRk1MRTlCUVZJc1EwRkJaMEppTEZOQlFWTkpMRWxCUVZRc1EwRkJhRUlzUlVGQlowTkVMRWxCUVdoRExFTkJRWEZEWjBJc1MwRkJUVUVzU1VGQlNVWXNTVUZCU1Vjc1RVRkJTaXhEUVVGWExFTkJRVU5vUWl4SlFVRkVMRU5CUVZnc1EwRkJTaXhIUVVGNVFtRXNSMEZCY0VVc1EwRkJhRU1zUlVGQk1rY3NSVUZCTTBjc1EwRkJVRHRCUVVORU96dEJRVVZFTEZOQlFWTnNRaXhOUVVGVUxFTkJRV2RDVHl4UlFVRm9RaXhGUVVFd1FtVXNUMEZCTVVJc1JVRkJiVU5ETEU5QlFXNURMRVZCUVRSRE8wRkJRekZETEUxQlFVa3NTMEZCUzJZc1MwRkJWQ3hGUVVGblFpeFBRVUZQTEV0QlFVdERMRTlCUVV3c1EwRkJZU3hSUVVGaUxFVkJRWFZDTEVOQlFVTXNSMEZCUjBNc1UwRkJTaXhEUVVGMlFpeERRVUZRTzBGQlEyaENMRTFCUVVrc1QwRkJUMGdzVVVGQlVDeExRVUZ2UWl4VlFVRjRRaXhGUVVGdlF6dEJRVU5zUTJkQ0xHTkJRVlZFTEU5QlFWWTdRVUZEUVVFc1kwRkJWV1lzVVVGQlZqdEJRVU5CUVN4bFFVRlhMRXRCUVV0SkxFZEJRVXdzUjBGQlZ5eExRVUZMUVN4SFFVRk1MRU5CUVZORExFOUJRWEJDTEVkQlFUaENMRWxCUVhwRE8wRkJRMFFzUjBGS1JDeE5RVWxQVEN4WFFVRlhUU3hYUVVGSFF5eFBRVUZJTEVOQlFWZFFMRkZCUVZnc1JVRkJjVUlzU1VGQmNrSXNRMEZCV0RzN1FVRkZVQ3hUUVVGUExFbEJRVWxOTEZWQlFVb3NRMEZCVHl4RFFVRkRReXhQUVVGRUxFVkJRVlZWTEUxQlFWWXNTMEZCY1VJN1FVRkRha01zVjBGQlQycENMRk5CUVZOSUxFbEJRVlFzUTBGQlkwY3NXVUZCV1R0QlFVTXZRaXhaUVVGTmEwSXNWMEZCVjJ4Q0xGTkJRVk50UWl4UFFVRlBSQ3hSUVVGb1FpeEhRVUZxUWp0QlFVTkJMRlZCUVVsRkxFbEJRVWtzUTBGQlVqczdRVUZGUVN4WlFVRk5ReXhQUVVGUFF5eFRRVUZUTzBGQlEzQkNMR05CUVUxRExGVkJRVlZNTEZOQlFWTkhMRWxCUVZRc1JVRkJhRUk3UVVGRFFTeFpRVUZKUlN4UlFVRlJReXhKUVVGYUxFVkJRV3RDTEU5QlFVOXFRaXhSUVVGUlpTeExRVUZTTEVOQlFWQTdPMEZCUld4Q1ZpeG5Ra0ZCVVdFc1IwRkJVaXhEUVVGWkxFTkJRVU5JTEV0QlFVUXNSVUZCVVVNc1VVRkJVVWNzUzBGQmFFSXNRMEZCV2l4RlFVTkhOMElzU1VGRVNDeERRVU5STEVOQlFVTXNRMEZCUTNsQ0xFdEJRVVFzUlVGQlVYaENMRWxCUVZJc1EwRkJSQ3hMUVVGdFFuVkNMRXRCUVV0T0xGRkJRVkZQTEV0QlFWSXNSVUZCWlhoQ0xFbEJRV1lzUlVGQmNVSnpRaXhIUVVGeVFpeERRVUZNTEVOQlJETkNMRVZCUXpSRVR5eExRVVExUkN4RFFVTnJSVllzVFVGRWJFVTdRVUZGUkN4UFFVNUVPenRCUVZGQlNTeFhRVUZMVEN4UFFVRk1PMEZCUTBRc1MwRmlUU3hEUVVGUU8wRkJZMFFzUjBGbVRTeERRVUZRTzBGQlowSkVPenRCUVVWRU8wRkJRMEVzVTBGQlV6TkNMRWRCUVZRc1EwRkJZWFZETEVsQlFXSXNSVUZCYlVKRExFVkJRVzVDTEVWQlFYVkNReXhQUVVGMlFpeEZRVUZuUXp0QlFVTTVRaXhOUVVGSkxFdEJRVXMzUWl4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwTXNUMEZCVEN4RFFVRmhMRXRCUVdJc1JVRkJiMElzUTBGQlF5eEhRVUZIUXl4VFFVRktMRU5CUVhCQ0xFTkJRVkE3UVVGRGFFSXNUVUZCU1VFc1ZVRkJWVFJDTEUxQlFWWXNTMEZCY1VJc1EwRkJja0lzU1VGQk1FSXNTVUZCTVVJc1NVRkJhME1zUzBGQlN6TkNMRWRCUVRORExFVkJRV2RFTzBGQlF6bERlVUlzVTBGQlMwUXNTVUZCVER0QlFVTkJRU3hYUVVGUExGRkJRVkVzUzBGQlMzaENMRWRCUVdJc1NVRkJiMElzUzBGQlMwRXNSMEZCVEN4RFFVRlRReXhQUVVGd1F6dEJRVU5FTzBGQlEwUXNUVUZCU1RKQ0xIRkNRVUZ4UWl4TFFVRjZRanRCUVVOQkxGRkJRVTFETEdOQlFXTkRMRXRCUVV0RExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWbEVMRXRCUVV0RkxFZEJRVXdzUTBGQlZTeFJRVUZSTEV0QlFVdG9ReXhIUVVGaUxFbEJRVzlDTEV0QlFVdEJMRWRCUVV3c1EwRkJVMmxETEdkQ1FVRTVRaXhKUVVGdFJDeERRVUUxUkN4RlFVRXJSQ3hEUVVFdlJDeERRVUZhTEVOQlFYQkNPMEZCUTBFc1VVRkJUVU1zWTBGQll5eFJRVUZSTEV0QlFVdHNReXhIUVVGaUxFbEJRVzlDTEV0QlFVdEJMRWRCUVV3c1EwRkJVME1zVDBGQk4wSXNSMEZCZFVNc1MwRkJTMFFzUjBGQlRDeERRVUZUUXl4UFFVRm9SQ3hIUVVFd1JFOHNVVUZCVVV3c1QwRkJVaXhEUVVGblFuRkNMRWxCUVdoQ0xFTkJRVGxGTzBGQlEwRXNUVUZCU1Zjc1owSkJRV2RDTEVOQlFYQkNPMEZCUTBFc1RVRkJTVU1zVTBGQlV5eEZRVUZpTzBGQlEwRXNUVUZCU1VNc1VVRkJVU3hEUVVGYU8wRkJRMEVzVVVGQlRXcERMRlZCUVZVc1JVRkJhRUk3UVVGRFFTeFJRVUZOYTBNc1lVRkJZU3hKUVVGSlF5eEhRVUZLTEVWQlFXNUNPMEZCUTBFc1VVRkJUVU1zYVVKQlFXbENMRTFCUVUxR0xGZEJRVmRITEVsQlFWZ3NTVUZCYlVKYUxGZEJRV2hFTzBGQlEwRXNVVUZCVFdFc1UwRkJVeXhOUVVGTlRpeFBRVUZQVkN4TlFVRlFMRWRCUVdkQ0xFdEJRVXN6UWl4SFFVRk1MRU5CUVZOdlF5eE5RVUZVTEVOQlFXZENUeXhMUVVGb1F5eEpRVUY1UTA0c1UwRkJVMklzUzBGQlMwY3NUVUZCZGtRc1NVRkJhVVZETEd0Q1FVRjBSanRCUVVOQkxGRkJRVTFuUWl4WlFVRlpha1FzVTBGQlV6SkNMRk5CUVZNN1FVRkRiRU5uUWl4bFFVRlhUeXhOUVVGWUxFTkJRV3RDYkVRc1MwRkJiRUk3UVVGRFFWTXNXVUZCVVZRc1MwRkJVaXhKUVVGcFFqSkNMRXRCUVdwQ08wRkJRMEVzVjBGQlQwRXNTMEZCVUR0QlFVTkVMRWRCU2tRN1FVRkxRU3hUUVVGUGNFSXNWMEZCUjBNc1QwRkJTQ3hEUVVGWExFbEJRVWxMTEU5QlFVb3NRMEZCV1N4RFFVRkRUQ3hQUVVGRUxFVkJRVlZWTEUxQlFWWXNTMEZCY1VJN1FVRkRha1FzVlVGQlRXbERMRmxCUVZseVF5eExRVUZMTzBGQlEzSkNPMEZCUTBFc1ZVRkJTVzFDTEd0Q1FVRktMRVZCUVhkQ08wRkJRVVVzWlVGQlR5eEpRVUZRTzBGQlFXRXNUMEZCZGtNc1RVRkJOa003UVVGQlJVRXNOa0pCUVhGQ0xFbEJRWEpDTzBGQlFUSkNPMEZCUXpGRmVrSXNZMEZCVVUwc1EwRkJVanRCUVVORUxFdEJTa1E3UVVGTFFTeFZRVUZOYzBNc1YwRkJWM1JETEV0QlFVczdRVUZEY0VJc1ZVRkJTVzFDTEd0Q1FVRktMRVZCUVhkQ08wRkJRVVVzWlVGQlR5eEpRVUZRTzBGQlFXRXNUMEZCZGtNc1RVRkJOa003UVVGQlJVRXNOa0pCUVhGQ0xFbEJRWEpDTzBGQlFUSkNPMEZCUXpGRk8wRkJRMEZtTEdGQlFVOUtMRU5CUVZBN1FVRkRSQ3hMUVVwRU8wRkJTMEY1UWl4blFrRkJXWHBETEVsQlFWb3NRMEZCYVVKMVJDeFRRVUZUTzBGQlEzaENlRUlzWVVGQlR5eERRVUZETEVkQlFVZDNRaXhMUVVGS0xFTkJRVkE3UVVGRFFTeFZRVUZKTEVOQlFVTXNlVUpCUVdGQkxFdEJRV0lzUTBGQlRDeEZRVUV3UWl4UFFVRlBia01zVDBGQlR5eEpRVUZKYjBNc2IwSkJRVW9zUTBGQmFVSXNlVU5CUVdwQ0xFTkJRVkFzUTBGQlVEdEJRVU14UWl4WlFVRk5ReXhYUVVGWExFMUJRVTA3UVVGRGNrSXNXVUZCU1VNc1UwRkJVeXhKUVVGaU8wRkJRMEVzV1VGQlNXWXNUMEZCVDFRc1RVRkJVQ3hIUVVGblFpeExRVUZMTTBJc1IwRkJUQ3hEUVVGVGIwTXNUVUZCVkN4RFFVRm5RazhzUzBGQmNFTXNSVUZCTWtOUkxGTkJRVk5LTEZGQlFWUTdRVUZETTBNc1dVRkJTVXdzVVVGQlNpeEZRVUZqVXl4VFFVRlRUQ3hUUVVGVU8wRkJRMlFzV1VGQlNVc3NUVUZCU2l4RlFVRlpMRTlCUVU4elF5eFJRVUZSWVN4SFFVRlNMRU5CUVZscVFpeFBRVUZhTEVWQlFYRkNXQ3hKUVVGeVFpeERRVUV3UWpKRUxGRkJRVkZFTEU5QlFVOHZReXhQUVVGUUxFTkJRV3hETEVsQlFYRkVMRWxCUVhKRUxFZEJRVFJFTEVsQlFXNUZPMEZCUTFvc1pVRkJUeXhMUVVGUU8wRkJRMFFzVDBGT1JEdEJRVTlCTEZsQlFVMXBSQ3hqUVVGalF5eFBRVUZQTzBGQlEzcENPMEZCUTBFc1dVRkJTVEZDTEd0Q1FVRktMRVZCUVhkQ08wRkJRM2hDTEZsQlFVa3NRMEZCUTNOQ0xGVkJRVVFzU1VGQlpTeERRVUZET1VNc1VVRkJVV2xETEV0QlFWSXNRMEZCY0VJc1JVRkJiME5yUWl4UlFVRlJiRUlzUzBGQlVqdEJRVU53UXl4bFFVRlBhVUlzUjBGQlVEdEJRVU5FTEU5QlRFUTdPMEZCVDBFc1dVRkJUVU1zVlVGQlZVTXNTMEZCU3p0QlFVTnVRaXhaUVVGSk5VSXNhMEpCUVVvc1JVRkJkMEk3UVVGQlF5eHBRa0ZCVHl4SlFVRlFPMEZCUVZrc1UwRkJja01zVFVGQk1rTTdRVUZCUTFNN1FVRkJVVHRCUVVOd1JDeFpRVUZKUnl4blFrRkJTaXhGUVVGelFpeFBRVUZQYVVJc1YwRkJWeXhOUVVGTlJpeFJRVUZSUXl4RFFVRlNMRU5CUVdwQ0xFVkJRVFpDTEVOQlFUZENMRU5CUVZBN1FVRkRkRUlzV1VGQlNYQkVMRkZCUVZGdlJDeERRVUZTTEVOQlFVb3NSVUZCWjBJc1QwRkJUM0JFTEZGQlFWRnZSQ3hEUVVGU0xFTkJRVkE3UVVGRGFFSnNRaXh0UWtGQlYyOUNMRWRCUVZnc1EwRkJaVVlzUTBGQlpqdEJRVU5CTzBGQlEwRndSQ3huUWtGQlVXOUVMRU5CUVZJc1NVRkJZV2hFTEZGQlFWRk1MRTlCUVZJc1EwRkJaMEp4UWl4TFFVRkxaME1zUTBGQlRDeERRVUZvUWl4RlFVTldMMFFzU1VGRVZTeERRVU5NTmtRc1QwRkJUemRDTEVkQlFVYzJRaXhIUVVGSUxFVkJRVkZGTEVOQlFWSXNSVUZCVjJoRExFbEJRVmdzUTBGRVJpeEZRVVZXTDBJc1NVRkdWU3hEUVVWTU5rUXNUMEZCVDFZc1ZVRkJWVmtzUTBGQlZpeEZRVUZoUml4SFFVRmlMRU5CUmtZc1JVRkhWamRFTEVsQlNGVXNRMEZIVERSRUxGZEJTRXNzUlVGSlZqbENMRXRCU2xVc1EwRkpTbTlETEU5QlFVODdRVUZEV2l4bFFVRkxNMFFzUjBGQlRDeERRVUZUYjBNc1RVRkJWQ3hEUVVGblFrTXNTMEZCYUVJN1FVRkRRVVFzYVVKQlFVOTNRaXhKUVVGUUxFTkJRVmxFTEVkQlFWbzdRVUZEUVR0QlFVTkJMR05CUVVsMlFpeFBRVUZQVkN4TlFVRlFMRWRCUVdkQ0xFdEJRVXN6UWl4SFFVRk1MRU5CUVZOdlF5eE5RVUZVTEVOQlFXZENUeXhMUVVGd1F5eEZRVUV5UXp0QlFVTjZReXhyUWtGQlRXdENMRkZCUVZGNlFpeFBRVUZQVkN4TlFVRlFMRXRCUVd0Q0xFTkJRV3hDTEVkQlFYTkNaME1zUjBGQmRFSXNSMEZCTkVJc1NVRkJTVWNzZFVKQlFVb3NRMEZCY1VJc1pVRkJZeXhMUVVGTE9VUXNSMEZCVEN4RFFVRlRiME1zVFVGQlZDeERRVUZuUWs4c1MwRkJUVHR2UWtGRE4wWmhMRU5CUVVVc1YwRkJWU3hMUVVGTGVFUXNSMEZCVEN4RFFVRlRiME1zVFVGQlZDeERRVUZuUWtNc1MwRkJUU3hGUVVSRkxFVkJRME1zUlVGQlJVUXNUVUZCUml4RlFVRlZhRU1zVDBGQlZpeEZRVUZ0UWpKRUxFdEJRVXNzU1VGQmVFSXNSVUZFUkN4RFFVRXhRenRCUVVWQmRrUXNiMEpCUVZGTUxFOUJRVklzUTBGQlowSjVReXhWUVVGVldTeERRVUZXTEVWQlFXRkhMRWRCUVdJc1EwRkJhRUlzUlVGQmJVTnNSU3hKUVVGdVF5eERRVUYzUXl4TlFVRk5jMFFzVTBGQlUyTXNTMEZCVkN4RFFVRTVRenRCUVVORUxGZEJTa1FzVFVGSlR6dEJRVUZGTzBGQlExQXNiVUpCUVU5eVJDeFJRVUZSVEN4UFFVRlNMRWRCUVd0Q1ZpeEpRVUZzUWl4RFFVRjFRaXhOUVVGTmJVUXNWVUZCVlZrc1EwRkJWaXhGUVVGaFJ5eEhRVUZpTEVOQlFUZENMRVZCUVdkRWJFVXNTVUZCYUVRc1EwRkJjVVEwUkN4WFFVRnlSQ3hEUVVGUU8wRkJRMFE3UVVGRFJpeFRRV1pWTEVOQlFXSTdPMEZCYVVKQkxHVkJRVTlxUkN4UlFVRlJiMFFzUTBGQlVpeERRVUZRTzBGQlEwUXNUMEY0UWtRN08wRkJNRUpCTzBGQlEwRXNZVUZCVDNKQ0xHZENRVUZuUWs0c1YwRkJhRUlzU1VGQkswSk5MR2RDUVVGblFsZ3NTMEZCUzBjc1RVRkJNMFFzUlVGQmJVVTBRaXhSUVVGUmNFSXNaVUZCVWp0QlFVTndSU3hMUVRkRFJEdEJRVGhEUkN4SFFYcEVhVUlzUTBGQldDeERRVUZRTzBGQk1FUkVJaXdpWm1sc1pTSTZJbUZ5Y21GNWN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSXZWWE5sY25NdlpHeGxkbmt2WTI5a1pTOXZjM012Wm5WdVkzUnBiMjVoYkMxeWFYWmxjaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JHVUNCbWNtOXRJQ2N1TGk4blhHNXBiWEJ2Y25RZ2V5QnBjMFZ1ZFcxbGNtRmliR1VnZlNCbWNtOXRJQ2N1TDIxdlpIVnNaWE12ZFhScGJITW5YRzVwYlhCdmNuUWdleUJHVUVsdWNIVjBSWEp5YjNJc0lFWjFibU4wYVc5dVlXeEZjbkp2Y2lCOUlHWnliMjBnSnk0dmJXOWtkV3hsY3k5bGNuSnZjbk1uWEc1Y2JtVjRjRzl5ZENCN0lHMWhjQ3dnWm1sdVpDd2dabWx1WkVsdVpHVjRMQ0JtYVd4MFpYSXNJSEpsWkhWalpTQjlYRzVjYm1aMWJtTjBhVzl1SUdacGJtUW9ZMkZzYkdKaFkyc3BJSHNnY21WMGRYSnVJRjltYVc1a0xtTmhiR3dvZEdocGN5d2dZMkZzYkdKaFkyc3BMblJvWlc0b0tIc2dhWFJsYlNCOUtTQTlQaUJwZEdWdEtTQjlYRzVtZFc1amRHbHZiaUJtYVc1a1NXNWtaWGdvWTJGc2JHSmhZMnNwSUhzZ2NtVjBkWEp1SUY5bWFXNWtMbU5oYkd3b2RHaHBjeXdnWTJGc2JHSmhZMnNwTG5Sb1pXNG9LSHNnYVc1a1pYZ2dmU2tnUFQ0Z2FXNWtaWGdwSUgxY2JseHVablZ1WTNScGIyNGdYMlpwYm1Rb2FYUmxjbUZpYkdVc0lHTmhiR3hpWVdOcktTQjdYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkZlptbHVaQ2NzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9kSGx3Wlc5bUlHbDBaWEpoWW14bElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnWTJGc2JHSmhZMnNnUFNCcGRHVnlZV0pzWlZ4dUlDQWdJR2wwWlhKaFlteGxJRDBnZEdocGN5NWZSbEF1Y0hKdmJXbHpaVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRVpRTG5KbGMyOXNkbVVvYVhSbGNtRmliR1VwWEc0Z0lDQWdMbVpwYkhSbGNpaGpZV3hzWW1GamF5bGNiaUFnSUNBdWRHaGxiaWdvY21WemRXeDBjeWtnUFQ0Z2NtVnpkV3gwYzFzd1hTQWhQU0IxYm1SbFptbHVaV1FnUHlCN0lHbDBaVzA2SUhKbGMzVnNkSE5iTUYwc0lHbHVaR1Y0T2lCeVpYTjFiSFJ6TG1sdVpHVjRUMllvY21WemRXeDBjMXN3WFNrZ2ZTQTZJSHNnYVhSbGJUb2dkVzVrWldacGJtVmtMQ0JwYm1SbGVEb2dMVEVnZlNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWm1sc2RHVnlLR2wwWlhKaFlteGxMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25abWxzZEdWeUp5d2dXeTR1TG1GeVozVnRaVzUwYzEwcFhHNGdJR2xtSUNoMGVYQmxiMllnYVhSbGNtRmliR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQmpZV3hzWW1GamF5QTlJR2wwWlhKaFlteGxYRzRnSUNBZ2FYUmxjbUZpYkdVZ1BTQjBhR2x6TGw5R1VDNXdjbTl0YVhObFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVmtkV05sS0dsMFpYSmhZbXhsTENBb1lXTmpMQ0JwZEdWdEtTQTlQaUJRY205dGFYTmxMbkpsYzI5c2RtVW9ZMkZzYkdKaFkyc29hWFJsYlNrcExuUm9aVzRvZUNBOVBpQW9lQ0EvSUdGall5NWpiMjVqWVhRb1cybDBaVzFkS1NBNklHRmpZeWtwTENCYlhTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVmtkV05sS0dsMFpYSmhZbXhsTENCeVpXUjFZMlZ5TENCcGJtbDBWbUZzS1NCN1hHNGdJR2xtSUNoMGFHbHpMbk4wWlhCektTQnlaWFIxY200Z2RHaHBjeTVoWkdSVGRHVndLQ2R5WldSMVkyVW5MQ0JiTGk0dVlYSm5kVzFsYm5SelhTbGNiaUFnYVdZZ0tIUjVjR1Z2WmlCcGRHVnlZV0pzWlNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJR2x1YVhSV1lXd2dQU0J5WldSMVkyVnlYRzRnSUNBZ2NtVmtkV05sY2lBOUlHbDBaWEpoWW14bFhHNGdJQ0FnYVhSbGNtRmliR1VnUFNCMGFHbHpMbDlHVUNBL0lIUm9hWE11WDBaUUxuQnliMjFwYzJVZ09pQjBhR2x6WEc0Z0lIMGdaV3h6WlNCcGRHVnlZV0pzWlNBOUlFWlFMbkpsYzI5c2RtVW9hWFJsY21GaWJHVXNJSFJvYVhNcFhHNWNiaUFnY21WMGRYSnVJRzVsZHlCR1VDZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdjbVYwZFhKdUlHbDBaWEpoWW14bExuUm9aVzRvYVhSbGNtRmliR1VnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYVhSbGNtRjBiM0lnUFNCcGRHVnlZV0pzWlZ0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0NsY2JpQWdJQ0FnSUd4bGRDQnBJRDBnTUZ4dVhHNGdJQ0FnSUNCamIyNXpkQ0J1WlhoMElEMGdkRzkwWVd3Z1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpkWEp5Wlc1MElEMGdhWFJsY21GMGIzSXVibVY0ZENncFhHNGdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBMbVJ2Ym1VcElISmxkSFZ5YmlCeVpYTnZiSFpsS0hSdmRHRnNLVnh1WEc0Z0lDQWdJQ0FnSUZCeWIyMXBjMlV1WVd4c0tGdDBiM1JoYkN3Z1kzVnljbVZ1ZEM1MllXeDFaVjBwWEc0Z0lDQWdJQ0FnSUNBZ0xuUm9aVzRvS0Z0MGIzUmhiQ3dnYVhSbGJWMHBJRDArSUc1bGVIUW9jbVZrZFdObGNpaDBiM1JoYkN3Z2FYUmxiU3dnYVNzcktTa3BMbU5oZEdOb0tISmxhbVZqZENsY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2JtVjRkQ2hwYm1sMFZtRnNLVnh1SUNBZ0lIMHBYRzRnSUgwcFhHNTlYRzVjYmk4cVpYTnNhVzUwSUcxaGVDMXpkR0YwWlcxbGJuUnpPaUJiWENKbGNuSnZjbHdpTENBMk1GMHFMMXh1Wm5WdVkzUnBiMjRnYldGd0tHRnlaM01zSUdadUxDQnZjSFJwYjI1ektTQjdYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkdFlYQW5MQ0JiTGk0dVlYSm5kVzFsYm5SelhTbGNiaUFnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJREVnSmlZZ2RHaHBjeUFtSmlCMGFHbHpMbDlHVUNrZ2UxeHVJQ0FnSUdadUlEMGdZWEpuYzF4dUlDQWdJR0Z5WjNNZ1BTQjBhR2x6SUNZbUlIUm9hWE11WDBaUUlDWW1JSFJvYVhNdVgwWlFMbkJ5YjIxcGMyVmNiaUFnZlZ4dUlDQnNaWFFnY21WemIyeDJaV1JQY2xKbGFtVmpkR1ZrSUQwZ1ptRnNjMlZjYmlBZ1kyOXVjM1FnZEdoeVpXRmtUR2x0YVhRZ1BTQk5ZWFJvTG0xaGVDZ3hMQ0JOWVhSb0xtMXBiaWdvZEdocGN5QW1KaUIwYUdsekxsOUdVQ0FtSmlCMGFHbHpMbDlHVUM1amIyNWpkWEp5Wlc1amVVeHBiV2wwS1NCOGZDQXhMQ0EwS1NsY2JpQWdZMjl1YzNRZ2FXNXVaWEpXWVd4MVpYTWdQU0IwYUdseklDWW1JSFJvYVhNdVgwWlFJQ1ltSUhSb2FYTXVYMFpRTG5CeWIyMXBjMlVnUHlCMGFHbHpMbDlHVUM1d2NtOXRhWE5sSURvZ1VISnZiV2x6WlM1eVpYTnZiSFpsS0dGeVozTXBYRzRnSUd4bGRDQnBibWwwYVdGc1ZHaHlaV0ZrSUQwZ01GeHVJQ0JzWlhRZ1pYSnliM0p6SUQwZ1cxMWNiaUFnYkdWMElHTnZkVzUwSUQwZ01GeHVJQ0JqYjI1emRDQnlaWE4xYkhSeklEMGdXMTFjYmlBZ1kyOXVjM1FnZEdoeVpXRmtVRzl2YkNBOUlHNWxkeUJUWlhRb0tWeHVJQ0JqYjI1emRDQjBhSEpsWVdSUWIyOXNSblZzYkNBOUlDZ3BJRDArSUhSb2NtVmhaRkJ2YjJ3dWMybDZaU0ErUFNCMGFISmxZV1JNYVcxcGRGeHVJQ0JqYjI1emRDQnBjMFJ2Ym1VZ1BTQW9LU0E5UGlCbGNuSnZjbk11YkdWdVozUm9JRDRnZEdocGN5NWZSbEF1WlhKeWIzSnpMbXhwYldsMElIeDhJR052ZFc1MElENDlJR0Z5WjNNdWJHVnVaM1JvSUh4OElISmxjMjlzZG1Wa1QzSlNaV3BsWTNSbFpGeHVJQ0JqYjI1emRDQnpaWFJTWlhOMWJIUWdQU0JwYm1SbGVDQTlQaUIyWVd4MVpTQTlQaUI3WEc0Z0lDQWdkR2h5WldGa1VHOXZiQzVrWld4bGRHVW9hVzVrWlhncFhHNGdJQ0FnY21WemRXeDBjMXRwYm1SbGVGMGdQU0IyWVd4MVpWeHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCR1VDNXlaWE52YkhabEtHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnlaWE52YkhabFNYUWdQU0I0SUQwK0lIdGNiaUFnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0NkQlkzUnBiMjR1Y21WemIyeDJaVG9uTENCeVpYTnZiSFpsWkU5eVVtVnFaV04wWldRc0lIZ3BYRzRnSUNBZ0lDQnBaaUFvY21WemIyeDJaV1JQY2xKbGFtVmpkR1ZrS1NCN0lISmxkSFZ5YmlCdWRXeHNJSDBnWld4elpTQjdJSEpsYzI5c2RtVmtUM0pTWldwbFkzUmxaQ0E5SUhSeWRXVWdmVnh1SUNBZ0lDQWdjbVZ6YjJ4MlpTaDRLVnh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J5WldwbFkzUkpkQ0E5SUhnZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0hKbGMyOXNkbVZrVDNKU1pXcGxZM1JsWkNrZ2V5QnlaWFIxY200Z2JuVnNiQ0I5SUdWc2MyVWdleUJ5WlhOdmJIWmxaRTl5VW1WcVpXTjBaV1FnUFNCMGNuVmxJSDFjYmlBZ0lDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktDZEJZM1JwYjI0dWNtVnFaV04wT2ljc0lISmxjMjlzZG1Wa1QzSlNaV3BsWTNSbFpDd2dlQ2xjYmlBZ0lDQWdJSEpsYW1WamRDaDRLVnh1SUNBZ0lIMWNiaUFnSUNCcGJtNWxjbFpoYkhWbGN5NTBhR1Z1S0dsMFpXMXpJRDArSUh0Y2JpQWdJQ0FnSUdGeVozTWdQU0JiTGk0dWFYUmxiWE5kWEc0Z0lDQWdJQ0JwWmlBb0lXbHpSVzUxYldWeVlXSnNaU2hwZEdWdGN5a3BJSEpsZEhWeWJpQnlaV3BsWTNRb2JtVjNJRVpRU1c1d2RYUkZjbkp2Y2lnblNXNTJZV3hwWkNCcGJuQjFkQ0JrWVhSaElIQmhjM05sWkNCcGJuUnZJRVpRTG0xaGNDZ3BKeWtwWEc0Z0lDQWdJQ0JqYjI1emRDQmpiMjF3YkdWMFpTQTlJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdiR1YwSUdGamRHbHZiaUE5SUc1MWJHeGNiaUFnSUNBZ0lDQWdhV1lnS0dWeWNtOXljeTVzWlc1bmRHZ2dQaUIwYUdsekxsOUdVQzVsY25KdmNuTXViR2x0YVhRcElHRmpkR2x2YmlBOUlISmxhbVZqZEVsMFhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYzBSdmJtVW9LU2tnWVdOMGFXOXVJRDBnY21WemIyeDJaVWwwWEc0Z0lDQWdJQ0FnSUdsbUlDaGhZM1JwYjI0cElISmxkSFZ5YmlCUWNtOXRhWE5sTG1Gc2JDaHlaWE4xYkhSektTNTBhR1Z1S0dSaGRHRWdQVDRnWVdOMGFXOXVLSEpsYzNWc2RITXBLU0EvSUhSeWRXVWdPaUIwY25WbFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMjl1YzNRZ1kyaGxZMnRCYm1SU2RXNGdQU0IyWVd3Z1BUNGdlMXh1SUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5Z25ZMmhsWTJ0QmJtUlNkVzRuTENCamIzVnVkQ3dnY21WemIyeDJaV1JQY2xKbGFtVmpkR1ZrTENCMllXd3BYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTnZiSFpsWkU5eVVtVnFaV04wWldRcElISmxkSFZ5Ymx4dUlDQWdJQ0FnSUNCcFppQW9JV052YlhCc1pYUmxLQ2tnSmlZZ0lYSmxjM1ZzZEhOYlkyOTFiblJkS1NCeWRXNUpkR1Z0S0dOdmRXNTBLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbUZzWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJSEoxYmtsMFpXMGdQU0JqSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMyOXNkbVZrVDNKU1pXcGxZM1JsWkNrZ2UzSmxkSFZ5YmlCdWRXeHNmU0JsYkhObElIdGpiM1Z1ZENzcmZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEdoeVpXRmtVRzl2YkVaMWJHd29LU2tnY21WMGRYSnVJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdjblZ1U1hSbGJTaGpLU3dnTUNsY2JpQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RITmJZMTBwSUhKbGRIVnliaUJ5WlhOMWJIUnpXMk5kWEc0Z0lDQWdJQ0FnSUhSb2NtVmhaRkJ2YjJ3dVlXUmtLR01wWEc0Z0lDQWdJQ0FnSUM4dklHVnBkR2hsY2lCblpYUWdkbUZzZFdVZ2QybDBhQ0JnWm00b2FYUmxiU2xnSUc5eUlHQnBkR1Z0TG5Sb1pXNG9abTRwWUZ4dUlDQWdJQ0FnSUNCeVpYTjFiSFJ6VzJOZElEMGdVSEp2YldselpTNXlaWE52YkhabEtHRnlaM05iWTEwcFhHNGdJQ0FnSUNBZ0lDQWdMblJvWlc0b2RtRnNJRDArSUdadUtIWmhiQ3dnWXl3Z1lYSm5jeWtwWEc0Z0lDQWdJQ0FnSUNBZ0xuUm9aVzRvZG1Gc0lEMCtJSE5sZEZKbGMzVnNkQ2hqS1NoMllXd3BLVnh1SUNBZ0lDQWdJQ0FnSUM1MGFHVnVLR05vWldOclFXNWtVblZ1S1Z4dUlDQWdJQ0FnSUNBZ0lDNWpZWFJqYUNobGNuSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlJsQXVaWEp5YjNKekxtTnZkVzUwS3l0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eWN5NXdkWE5vS0dWeWNpbGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTnZibk52YkdVdWJHOW5LQ2RGVWxJZ1NFRk9SRXhGVWlFbkxDQmxjbkp2Y25NdWJHVnVaM1JvTENCMGFHbHpMbDlHVUM1bGNuSnZjbk11YkdsdGFYUXBYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWEp5YjNKekxteGxibWQwYUNBK0lIUm9hWE11WDBaUUxtVnljbTl5Y3k1c2FXMXBkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm1jRVZ5Y2lBOUlHVnljbTl5Y3k1c1pXNW5kR2dnUFQwOUlERWdQeUJsY25JZ09pQnVaWGNnUm5WdVkzUnBiMjVoYkVWeWNtOXlLR0JGY25KdmNpQk1hVzFwZENBa2UzUm9hWE11WDBaUUxtVnljbTl5Y3k1c2FXMXBkSDBnUlhoalpXVmtaV1F1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xrZUQwa2UyTjlJR1Z5Y2tOdWREMGtlM1JvYVhNdVgwWlFMbVZ5Y205eWN5NWpiM1Z1ZEgxZ0xDQjdJR1Z5Y205eWN5d2djbVZ6ZFd4MGN5d2dZM1I0T2lCMGFHbHpJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaHpaWFJTWlhOMWJIUW9ZeWtvWlhKeUtTa3VkR2hsYmlnb0tTQTlQaUJ5WldwbFkzUkpkQ2htY0VWeWNpa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZXlBdkx5QmpiMjV6YjJ4bExuZGhjbTRvSjBWeWNtOXlJRTlMT2ljc0lFcFRUMDR1YzNSeWFXNW5hV1o1S0hSb2FYTXVYMFpRTG1WeWNtOXljeWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tTNTBhR1Z1S0NncElEMCtJSE5sZEZKbGMzVnNkQ2hqS1NobGNuSXBLUzUwYUdWdUtHTm9aV05yUVc1a1VuVnVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBwWEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkSE5iWTExY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdTMmxqYXlCdlptWWdlQ0J1ZFcxaVpYSWdiMllnYVc1cGRHbGhiQ0IwYUhKbFlXUnpYRzRnSUNBZ0lDQjNhR2xzWlNBb2FXNXBkR2xoYkZSb2NtVmhaQ0E4SUhSb2NtVmhaRXhwYldsMElDWW1JR2x1YVhScFlXeFVhSEpsWVdRZ1BDQmhjbWR6TG14bGJtZDBhQ2tnY25WdVNYUmxiU2hwYm1sMGFXRnNWR2h5WldGa0t5c3BYRzRnSUNBZ2ZTbGNiaUFnZlNrcFhHNTlYRzRpWFgwPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2FycmF5cy5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgbW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgPSBiKCkgOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFtdLCBiKSA6IFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgPyBleHBvcnRzLkZQID0gYigpIDogYS5GUCA9IGIoKTtcbn0pKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHNlbGYgPyB1bmRlZmluZWQgOiBzZWxmLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGIoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNbZF0pIHJldHVybiBjW2RdLmV4cG9ydHM7dmFyIGUgPSBjW2RdID0geyBpOiBkLCBsOiAhMSwgZXhwb3J0czoge30gfTtyZXR1cm4gYVtkXS5jYWxsKGUuZXhwb3J0cywgZSwgZS5leHBvcnRzLCBiKSwgZS5sID0gITAsIGUuZXhwb3J0cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9dmFyIGMgPSB7fTtyZXR1cm4gYi5tID0gYSwgYi5jID0gYywgYi5kID0gZnVuY3Rpb24gKGEsIGMsIGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIubyhhLCBjKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSwgYywgeyBjb25maWd1cmFibGU6ICExLCBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBkIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGIubiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGEgJiYgYS5fX2VzTW9kdWxlID8gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVtcImRlZmF1bHRcIl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07cmV0dXJuIGIuZChjLCBcImFcIiwgYyksIGM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYi5vID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYi5wID0gXCJcIiwgYihiLnMgPSAwKTtcbiAgICAgICAgICAgICAgfShbZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkKGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBkKSkgcmV0dXJuIG5ldyBkKGIpO2lmICgxICE9PSBhcmd1bWVudHMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJGdW5jdGlvbmFsUHJvbWlzZXMgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIDEgY2FsbGJhY2sgYXJndW1lbnRcIik7dGhpcy5fRlAgPSB7IGVycm9yczogeyBsaW1pdDogMCwgY291bnQ6IDAgfSwgcHJvbWlzZTogbmV3IFByb21pc2UoYiksIGNvbmN1cnJlbmN5TGltaXQ6IDQgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9T2JqZWN0LmRlZmluZVByb3BlcnR5KGIsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgYi5kZWZhdWx0ID0gZDt2YXIgZSA9IGMoMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBjKDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gYygzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGMoNCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBjKDUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gYyg2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IGMoNyk7ZC5wcm90b3R5cGUuYWxsID0gay5hbGwsIGQucHJvdG90eXBlLm1hcCA9IGgubWFwLCBkLnByb3RvdHlwZS5maW5kID0gaC5maW5kLCBkLnByb3RvdHlwZS5maW5kSW5kZXggPSBoLmZpbmRJbmRleCwgZC5wcm90b3R5cGUuZmlsdGVyID0gaC5maWx0ZXIsIGQucHJvdG90eXBlLnJlZHVjZSA9IGgucmVkdWNlLCBkLnByb3RvdHlwZS5saXN0ZW4gPSBpLmxpc3RlbiwgZC5wcm90b3R5cGUudGFwSWYgPSBqLnRhcElmLCBkLnByb3RvdHlwZS50aGVuSWYgPSBqLnRoZW5JZiwgZC5wcm90b3R5cGUuX3RoZW5JZiA9IGouX3RoZW5JZiwgZC5wcm90b3R5cGUuZGVsYXkgPSBrLmRlbGF5LCBkLnByb3RvdHlwZS5fZGVsYXkgPSBrLl9kZWxheSwgZC5wcm90b3R5cGUucmVqZWN0ID0gay5yZWplY3QsIGQuZGVmYXVsdCA9IGQsIGQuYWxsID0gZC5wcm90b3R5cGUuYWxsLCBkLnRoZW5JZiA9IGQucHJvdG90eXBlLl90aGVuSWYsIGQuZGVsYXkgPSBiID0+IGQucmVzb2x2ZSgpLmRlbGF5KGIpLCBkLnNpbGVudCA9IGIgPT4gZC5yZXNvbHZlKCkuc2lsZW50KGIpLCBkLmNoYWluID0gZy5jaGFpbiwgZC5wcm90b3R5cGUuY2hhaW5FbmQgPSBnLmNoYWluRW5kLCBkLnJlamVjdCA9IGQucHJvdG90eXBlLnJlamVjdCwgZC5yZXNvbHZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZCgoYSwgYikgPT4gZSAmJiAoMCwgZi5pc0Z1bmN0aW9uKShlLnRoZW4pID8gZS50aGVuKGEpLmNhdGNoKGIpIDogdm9pZCBhKGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkLnByb21pc2lmeSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKC4uLmEpID0+IG5ldyBkKChmLCBjKSA9PiBlLmNhbGwodGhpcywgLi4uYSwgKGQsIGEpID0+IGQgPyBjKGQpIDogZihhKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGQucHJvbWlzaWZ5QWxsID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYyB8fCAhT2JqZWN0LmdldFByb3RvdHlwZU9mKGMpKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEFyZ3VtZW50IG9iaiBpbiBwcm9taXNpZnlBbGwob2JqKVwiKTtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYykuZmlsdGVyKGEgPT4gXCJmdW5jdGlvblwiID09IHR5cGVvZiBjW2FdKS5yZWR1Y2UoKGMsIGEpID0+ICgvU3luYy8udGVzdChhKSB8fCBjW2Ake2F9QXN5bmNgXSB8fCAoY1tgJHthfUFzeW5jYF0gPSBkLnByb21pc2lmeShjW2Ake2F9YF0pKSwgYyksIGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGQudW5wYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gbmV3IGQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGEsIGYgPSBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7cmV0dXJuIHsgcHJvbWlzZTogZywgcmVzb2x2ZTogZSwgcmVqZWN0OiBmIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZC5wcm90b3R5cGUuYWRkU3RlcCA9IGZ1bmN0aW9uIChjLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGVwcyAmJiB0aGlzLnN0ZXBzLnB1c2goW2MsIHRoaXMsIGFdKSwgdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkLnByb3RvdHlwZS5jb25jdXJyZW5jeSA9IGZ1bmN0aW9uIChiID0gMSAvIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0ZXBzID8gdGhpcy5hZGRTdGVwKFwiY29uY3VycmVuY3lcIiwgWy4uLmFyZ3VtZW50c10pIDogKHRoaXMuX0ZQLmNvbmN1cnJlbmN5TGltaXQgPSBiLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkLnByb3RvdHlwZS5xdWlldCA9IGZ1bmN0aW9uIChiID0gMSAvIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0ZXBzID8gdGhpcy5hZGRTdGVwKFwicXVpZXRcIiwgWy4uLmFyZ3VtZW50c10pIDogKHRoaXMuX0ZQLmVycm9ycyA9IHsgY291bnQ6IDAsIGxpbWl0OiBiIH0sIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGQucHJvdG90eXBlLnNpbGVudCA9IGQucHJvdG90eXBlLnF1aWV0LCBkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoLi4uYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHMgPyB0aGlzLmFkZFN0ZXAoXCJnZXRcIiwgWy4uLmFyZ3VtZW50c10pIDogKGMgPSAoMCwgZi5mbGF0dGVuKShjKSwgdGhpcy50aGVuKGQgPT4gXCJvYmplY3RcIiA9PSB0eXBlb2YgZCA/IDEgPT09IGMubGVuZ3RoID8gZFtjWzBdXSA6IGMucmVkdWNlKChiLCBhKSA9PiAoYlthXSA9IGRbYV0sIGIpLCB7fSkgOiBkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGQsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0ZXBzID8gdGhpcy5hZGRTdGVwKFwic2V0XCIsIFsuLi5hcmd1bWVudHNdKSA6IHRoaXMudGhlbihiID0+IChcIm9iamVjdFwiID09IHR5cGVvZiBiICYmIChiW2RdID0gYSksIGIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcChcImNhdGNoXCIsIFsuLi5hcmd1bWVudHNdKTtpZiAoMiA9PT0gYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2F0Y2hJZiguLi5hcmd1bWVudHMpO2lmICghKDAsIGYuaXNGdW5jdGlvbikoYykpIHRocm93IG5ldyBlLkZ1bmN0aW9uYWxFcnJvcihcIkludmFsaWQgZm4gYXJndW1lbnQgZm9yIGAuY2F0Y2goZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6IFwiICsgdHlwZW9mIGMpO3JldHVybiBkLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS5jYXRjaChhID0+IGMoYSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBkLnByb3RvdHlwZS5jYXRjaElmID0gZnVuY3Rpb24gKGcsIGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKFwiY2F0Y2hJZlwiLCBbLi4uYXJndW1lbnRzXSk7aWYgKCEoMCwgZi5pc0Z1bmN0aW9uKShhKSkgdGhyb3cgbmV3IGUuRnVuY3Rpb25hbEVycm9yKFwiSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC5jYXRjaElmKGNvbmRpdGlvbiwgZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6IFwiICsgdHlwZW9mIGEpO3JldHVybiBkLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS5jYXRjaChiID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGcgJiYgYiBpbnN0YW5jZW9mIGcpIHJldHVybiBhKGIpO3Rocm93IGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcChcInRoZW5cIiwgWy4uLmFyZ3VtZW50c10pO2lmICghKDAsIGYuaXNGdW5jdGlvbikoYikpIHRocm93IG5ldyBlLkZ1bmN0aW9uYWxFcnJvcihcIkludmFsaWQgZm4gYXJndW1lbnQgZm9yIGAudGhlbihmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogXCIgKyB0eXBlb2YgYik7cmV0dXJuIGQucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLnRoZW4oYikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGQucHJvdG90eXBlLnRhcCA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcChcInRhcFwiLCBbLi4uYXJndW1lbnRzXSk7aWYgKCEoMCwgZi5pc0Z1bmN0aW9uKShjKSkgdGhyb3cgbmV3IGUuRnVuY3Rpb25hbEVycm9yKFwiSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC50YXAoZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6IFwiICsgdHlwZW9mIGMpO3JldHVybiBkLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS50aGVuKGEgPT4gYyhhKSA/IGEgOiBhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYiwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO2NsYXNzIGMgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcihjLCBkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT0gdHlwZW9mIGMgJiYgKGQgPSBjLCBjLm1lc3NhZ2UgJiYgKGMgPSBjLm1lc3NhZ2UpKSwgc3VwZXIoYyksIFwib2JqZWN0XCIgPT0gdHlwZW9mIGQgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZCkuZm9yRWFjaChiID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2JdID0gZFtiXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZSwgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWIuRnVuY3Rpb25hbEVycm9yID0gYztiLkZ1bmN0aW9uYWxVc2VyRXJyb3IgPSBjbGFzcyBleHRlbmRzIGMge307Yi5GUFVuZXhwZWN0ZWRFcnJvciA9IGNsYXNzIGV4dGVuZHMgYyB7fTtiLkZQSW5wdXRFcnJvciA9IGNsYXNzIGV4dGVuZHMgYyB7fTtiLkZQU29mdEVycm9yID0gY2xhc3MgZXh0ZW5kcyBjIHt9O2IuRlBUaW1lb3V0ID0gY2xhc3MgZXh0ZW5kcyBjIHt9O1xuICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7Y29uc3QgYyA9IHsgaXNQcm9taXNlTGlrZShiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYi50aGVuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgaXNGdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBpc0VudW1lcmFibGUoYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYiAmJiBBcnJheS5pc0FycmF5KGIpIHx8IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgYltTeW1ib2wuaXRlcmF0b3JdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmxhdHRlbihiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShiKSkgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIGBmbGF0dGVuYCByZXF1aXJlcyB2YWxpZCBhcnJheSBwYXJhbWV0ZXJcIik7cmV0dXJuIGIucmVkdWNlKChkLCBhKSA9PiBkLmNvbmNhdChBcnJheS5pc0FycmF5KGEpID8gYy5mbGF0dGVuKGEpIDogW2FdKSwgW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9O2IuZGVmYXVsdCA9IGM7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGIsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgYi5jaGFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBjKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGQucmVzb2x2ZSgpO3JldHVybiBhLnN0ZXBzID0gW10sIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYi5jaGFpbkVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBjKDApO3JldHVybiBhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0ZXBzIHx8IDAgPj0gdGhpcy5zdGVwcy5sZW5ndGgpIHRocm93IG5ldyBnLkZQSW5wdXRFcnJvcihcIk5vIHN0ZXBzIGRlZmluZWQgYmV0d2VlbiAuY2hhaW4oKSAmIC5jaGFpbkVuZCgpXCIpO2xldCBpID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcHJvbWlzZTogaiwgcmVzb2x2ZTogYiwgcmVqZWN0OiBlIH0gPSBoLnVucGFjaygpO2ZvciAoOyBpIDwgdGhpcy5zdGVwcy5sZW5ndGg7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW2MsLCBhXSA9IHRoaXMuc3RlcHNbaV07aiA9IGpbY10oLi4uYSksIGkrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfXJldHVybiBiKGEpLCBqO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O3ZhciBnID0gYygxKTtcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGEsIGIsIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjKGQsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGYgPSBvKDApO3JldHVybiB0aGlzLnN0ZXBzID8gdGhpcy5hZGRTdGVwKFwiX2ZpbmRcIiwgWy4uLmFyZ3VtZW50c10pIDogKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZCAmJiAoZSA9IGQsIGQgPSB0aGlzLl9GUC5wcm9taXNlKSwgZi5yZXNvbHZlKGQpLmZpbHRlcihlKS50aGVuKGIgPT4gbnVsbCA9PSBiWzBdID8geyBpdGVtOiB2b2lkIDAsIGluZGV4OiAtMSB9IDogeyBpdGVtOiBiWzBdLCBpbmRleDogYi5pbmRleE9mKGJbMF0pIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZnVuY3Rpb24gZChmLCBlLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnID0gbygwKTtyZXR1cm4gdGhpcy5zdGVwcyA/IHRoaXMuYWRkU3RlcChcInJlZHVjZVwiLCBbLi4uYXJndW1lbnRzXSkgOiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBmID8gKGkgPSBlLCBlID0gZiwgZiA9IHRoaXMuX0ZQID8gdGhpcy5fRlAucHJvbWlzZSA6IHRoaXMpIDogZiA9IGcucmVzb2x2ZShmLCB0aGlzKSwgbmV3IGcoKGIsIGQpID0+IGYudGhlbihjID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaiA9IGNbU3ltYm9sLml0ZXJhdG9yXSgpO2xldCBmID0gMDtjb25zdCBrID0gZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGoubmV4dCgpO3JldHVybiBhLmRvbmUgPyBiKGcpIDogdm9pZCBQcm9taXNlLmFsbChbZywgYS52YWx1ZV0pLnRoZW4oKFtiLCBhXSkgPT4gayhlKGIsIGEsIGYrKykpKS5jYXRjaChkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtrKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9T2JqZWN0LmRlZmluZVByb3BlcnR5KGIsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgYi5yZWR1Y2UgPSBiLmZpbHRlciA9IGIuZmluZEluZGV4ID0gYi5maW5kID0gYi5tYXAgPSB2b2lkIDA7dmFyIHQgPSBvKDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gbygxKTtiLm1hcCA9IGZ1bmN0aW9uICh2LCBwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxID0gbygwKTtpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcChcIm1hcFwiLCBbLi4uYXJndW1lbnRzXSk7MSA9PT0gYXJndW1lbnRzLmxlbmd0aCAmJiB0aGlzICYmIHRoaXMuX0ZQICYmIChwID0gdiwgdiA9IHRoaXMgJiYgdGhpcy5fRlAgJiYgdGhpcy5fRlAucHJvbWlzZSk7bGV0IHcgPSAhMTtjb25zdCBjID0gTWF0aC5tYXgoMSwgTWF0aC5taW4odGhpcyAmJiB0aGlzLl9GUCAmJiB0aGlzLl9GUC5jb25jdXJyZW5jeUxpbWl0IHx8IDEsIDQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzICYmIHRoaXMuX0ZQICYmIHRoaXMuX0ZQLnByb21pc2UgPyB0aGlzLl9GUC5wcm9taXNlIDogUHJvbWlzZS5yZXNvbHZlKHYpO2xldCBmID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IDA7Y29uc3QgeCA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IG5ldyBTZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSAoKSA9PiBqLnNpemUgPj0gYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAoKSA9PiBzLmxlbmd0aCA+IHRoaXMuX0ZQLmVycm9ycy5saW1pdCB8fCBoID49IHYubGVuZ3RoIHx8IHcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gYyA9PiBhID0+IChqLmRlbGV0ZShjKSwgeFtjXSA9IGEsIGEpO3JldHVybiBxLnJlc29sdmUobmV3IFByb21pc2UoKGIsIGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZyA9IGMgPT4gdyA/IG51bGwgOiB2b2lkICh3ID0gITAsIGIoYykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gYiA9PiB3ID8gbnVsbCA6IHZvaWQgKHcgPSAhMCwgZChiKSk7ZS50aGVuKGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ID0gWy4uLmFdLCAhKDAsIHQuaXNFbnVtZXJhYmxlKShhKSkgcmV0dXJuIGQobmV3IHUuRlBJbnB1dEVycm9yKFwiSW52YWxpZCBpbnB1dCBkYXRhIHBhc3NlZCBpbnRvIEZQLm1hcCgpXCIpKTtjb25zdCBiID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGIgPSBudWxsO3JldHVybiBzLmxlbmd0aCA+IHRoaXMuX0ZQLmVycm9ycy5saW1pdCAmJiAoYiA9IGkpLCBsKCkgJiYgKGIgPSBnKSwgISFiICYmICghIVByb21pc2UuYWxsKHgpLnRoZW4oKCkgPT4gYih4KSkgfHwgITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGMgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3KSByZXR1cm4gYigpIHx8IHhbaF0gfHwgbyhoKSwgYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBkID0+IHcgPyBudWxsIDogKGgrKywgaygpKSA/IHNldFRpbWVvdXQoKCkgPT4gbyhkKSwgMCkgOiB4W2RdID8geFtkXSA6IChqLmFkZChkKSwgeFtkXSA9IFByb21pc2UucmVzb2x2ZSh2W2RdKS50aGVuKGEgPT4gcChhLCBkLCB2KSkudGhlbihiID0+IG0oZCkoYikpLnRoZW4obikuY2F0Y2goYyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fRlAuZXJyb3JzLmNvdW50KyssIHMucHVzaChjKSwgcy5sZW5ndGggPiB0aGlzLl9GUC5lcnJvcnMubGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IDEgPT09IHMubGVuZ3RoID8gYyA6IG5ldyB1LkZ1bmN0aW9uYWxFcnJvcihgRXJyb3IgTGltaXQgJHt0aGlzLl9GUC5lcnJvcnMubGltaXR9IEV4Y2VlZGVkLlxuICAgICAgICAgICAgICBpZHg9JHtkfSBlcnJDbnQ9JHt0aGlzLl9GUC5lcnJvcnMuY291bnR9YCwgeyBlcnJvcnM6IHMsIHJlc3VsdHM6IHgsIGN0eDogdGhpcyB9KTtQcm9taXNlLnJlc29sdmUobShkKShjKSkudGhlbigoKSA9PiBpKGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBtKGQpKGMpKS50aGVuKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB4W2RdKTtmb3IgKDsgZiA8IGMgJiYgZiA8IHYubGVuZ3RoOykgbyhmKyspO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBiLmZpbmQgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuY2FsbCh0aGlzLCBiKS50aGVuKCh7IGl0ZW06IGIgfSkgPT4gYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYi5maW5kSW5kZXggPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuY2FsbCh0aGlzLCBiKS50aGVuKCh7IGluZGV4OiBiIH0pID0+IGIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGIuZmlsdGVyID0gZnVuY3Rpb24gKGMsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0ZXBzID8gdGhpcy5hZGRTdGVwKFwiZmlsdGVyXCIsIFsuLi5hcmd1bWVudHNdKSA6IChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGMgJiYgKGUgPSBjLCBjID0gdGhpcy5fRlAucHJvbWlzZSksIGQoYywgKGQsIGEpID0+IFByb21pc2UucmVzb2x2ZShlKGEpKS50aGVuKGMgPT4gYyA/IGQuY29uY2F0KFthXSkgOiBkKSwgW10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBiLnJlZHVjZSA9IGQ7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGIsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgYi5saXN0ZW4gPSB2b2lkIDA7dmFyIGQgPSBjKDEpO2IubGlzdGVuID0gZnVuY3Rpb24gKGUsIC4uLmEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBhICYmIChhID0gW2FdKSwgIWVbZS5hZGRFdmVudExpc3RlbmVyID8gXCJhZGRFdmVudExpc3RlbmVyXCIgOiBcIm9uXCJdKSB0aHJvdyBuZXcgZC5GUElucHV0RXJyb3IoXCJWYWxpZCBFdmVudEVtaXR0ZXIgcmVxdWlyZWQuXCIpO2NvbnN0IGYgPSB0aGlzLmNoYWluRW5kKCk7cmV0dXJuIHRoaXMuX0ZQLmRlc3Ryb3kgPSAoKSA9PiB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcy5tYXAoYiA9PiBiKCkgfHwgITApLmZpbHRlcihiID0+IGIpLmxlbmd0aCwgdGhpcy5fRlAuZGVzdHJveUhhbmRsZXMgPSBhLm1hcChhID0+IChlW2UuYWRkRXZlbnRMaXN0ZW5lciA/IFwiYWRkRXZlbnRMaXN0ZW5lclwiIDogXCJvblwiXShhLCBmKSwgKCkgPT4gZVtlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBcInJlbW92ZUV2ZW50TGlzdGVuZXJcIiA6IFwib2ZmXCJdKGEsIGYpKSksIHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGEsIGIsIGYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKGcgPSBiID0+IGIsIGggPSBiID0+IGIsIGIgPSAoKSA9PiBudWxsLCBjID0gITEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBmKDApO3JldHVybiBkID0+IGEucmVzb2x2ZShnKGQpKS50aGVuKGMgPT4gYyA/IGgoZCkgOiBiKGQpKS50aGVuKGIgPT4gYyA/IGQgOiBiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9T2JqZWN0LmRlZmluZVByb3BlcnR5KGIsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KSwgYi5fdGhlbklmID0gYi50YXBJZiA9IGIudGhlbklmID0gdm9pZCAwO3ZhciBkID0gZigyKTtiLnRoZW5JZiA9IGZ1bmN0aW9uIChmLCBnLCBoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGVwcyA/IHRoaXMuYWRkU3RlcChcInRoZW5JZlwiLCBbLi4uYXJndW1lbnRzXSkgOiAoMSA9PT0gYXJndW1lbnRzLmxlbmd0aCAmJiAoZyA9IGYsIGYgPSBiID0+IGIpLCAoMCwgZC5pc1Byb21pc2VMaWtlKSh0aGlzKSA/IHRoaXMudGhlbihhID0+IGUoZiwgZywgaCkoYSkpIDogZShmLCBnLCBoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYi50YXBJZiA9IGZ1bmN0aW9uIChmLCBnLCBoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGVwcyA/IHRoaXMuYWRkU3RlcChcInRhcElmXCIsIFsuLi5hcmd1bWVudHNdKSA6ICgxID09PSBhcmd1bWVudHMubGVuZ3RoICYmIChnID0gZiwgZiA9IGIgPT4gYiksICgwLCBkLmlzUHJvbWlzZUxpa2UpKHRoaXMpID8gdGhpcy50aGVuKGEgPT4gZShmLCBnLCBoLCAhMCkoYSkpIDogZShmLCBnLCBoLCAhMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGIuX3RoZW5JZiA9IGU7XG4gICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gZy5tYXAoYSA9PiBkW2FdKTtyZXR1cm4gUHJvbWlzZS5hbGwoYSkudGhlbihiID0+IGIucmVkdWNlKChiLCBhLCBjKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkO2NvbnN0IGggPSBnW2NdO3JldHVybiBPYmplY3QuYXNzaWduKChkID0ge30sIGRbaF0gPSBhLCBkKSwgYik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7fSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1mdW5jdGlvbiBlKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBjKDApO2lmICghTnVtYmVyLmlzSW50ZWdlcihkKSkgdGhyb3cgbmV3IGYuRlBJbnB1dEVycm9yKFwiRlAuZGVsYXkobWlsbGlzZWMpIHJlcXVpcmVzIGEgbnVtZXJpYyBhcmcuXCIpO3JldHVybiBlID0+IG5ldyBhKGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGEoZSksIGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSksIGIuYWxsID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBjKDApO3JldHVybiBhLnJlc29sdmUoQXJyYXkuaXNBcnJheShlKSA/IFByb21pc2UuYWxsKGUpIDogZChlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYi5wcm9taXNlQWxsT2JqZWN0ID0gZCwgYi5yZWplY3QgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGIgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHRoaXMgJiYgKHRoaXMuX2Vycm9yID0gYiksIFByb21pc2UucmVqZWN0KGIpO3Rocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBiLl9kZWxheSA9IGUsIGIuZGVsYXkgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGMoMCk7cmV0dXJuIHRoaXMuc3RlcHMgPyB0aGlzLmFkZFN0ZXAoXCJkZWxheVwiLCBbLi4uYXJndW1lbnRzXSkgOiB0aGlzICYmIHRoaXMuX0ZQID8gYS5yZXNvbHZlKHRoaXMudGhlbihlKGQpKSkgOiBlKGQpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTt2YXIgZiA9IGMoMSk7XG4gICAgICAgICAgICAgIH1dKTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1ScGMzUXZablZ1WTNScGIyNWhiQzF3Y205dGFYTmxMbTFwYmk1cWN5SmRMQ0p1WVcxbGN5STZXeUpoSWl3aVlpSXNJbVY0Y0c5eWRITWlMQ0p0YjJSMWJHVWlMQ0prWldacGJtVWlMQ0poYldRaUxDSkdVQ0lzSW5ObGJHWWlMQ0prSWl3aVl5SXNJbVVpTENKcElpd2liQ0lzSW1OaGJHd2lMQ0p0SWl3aWJ5SXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2lZMjl1Wm1sbmRYSmhZbXhsSWl3aVpXNTFiV1Z5WVdKc1pTSXNJbWRsZENJc0ltNGlMQ0pmWDJWelRXOWtkV3hsSWl3aWNISnZkRzkwZVhCbElpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSndJaXdpY3lJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJa1Z5Y205eUlpd2lYMFpRSWl3aVpYSnliM0p6SWl3aWJHbHRhWFFpTENKamIzVnVkQ0lzSW5CeWIyMXBjMlVpTENKUWNtOXRhWE5sSWl3aVkyOXVZM1Z5Y21WdVkzbE1hVzFwZENJc0luWmhiSFZsSWl3aVpHVm1ZWFZzZENJc0ltWWlMQ0puSWl3aWFDSXNJbW9pTENKcklpd2lZV3hzSWl3aWJXRndJaXdpWm1sdVpDSXNJbVpwYm1SSmJtUmxlQ0lzSW1acGJIUmxjaUlzSW5KbFpIVmpaU0lzSW14cGMzUmxiaUlzSW5SaGNFbG1JaXdpZEdobGJrbG1JaXdpWDNSb1pXNUpaaUlzSW1SbGJHRjVJaXdpWDJSbGJHRjVJaXdpY21WcVpXTjBJaXdpY21WemIyeDJaU0lzSW5OcGJHVnVkQ0lzSW1Ob1lXbHVJaXdpWTJoaGFXNUZibVFpTENKcGMwWjFibU4wYVc5dUlpd2lkR2hsYmlJc0ltTmhkR05vSWl3aWNISnZiV2x6YVdaNUlpd2ljSEp2YldsemFXWjVRV3hzSWl3aVoyVjBVSEp2ZEc5MGVYQmxUMllpTENKblpYUlBkMjVRY205d1pYSjBlVTVoYldWeklpd2lkR1Z6ZENJc0luVnVjR0ZqYXlJc0ltRmtaRk4wWlhBaUxDSnpkR1Z3Y3lJc0luQjFjMmdpTENKamIyNWpkWEp5Wlc1amVTSXNJbkYxYVdWMElpd2labXhoZEhSbGJpSXNJbk5sZENJc0ltTmhkR05vU1dZaUxDSkdkVzVqZEdsdmJtRnNSWEp5YjNJaUxDSjBZWEFpTENKamIyNXpkSEoxWTNSdmNpSXNJbTFsYzNOaFoyVWlMQ0ptYjNKRllXTm9JaXdpYm1GdFpTSXNJbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxJaXdpUm5WdVkzUnBiMjVoYkZWelpYSkZjbkp2Y2lJc0lrWlFWVzVsZUhCbFkzUmxaRVZ5Y205eUlpd2lSbEJKYm5CMWRFVnljbTl5SWl3aVJsQlRiMlowUlhKeWIzSWlMQ0pHVUZScGJXVnZkWFFpTENKcGMxQnliMjFwYzJWTWFXdGxJaXdpYVhORmJuVnRaWEpoWW14bElpd2lRWEp5WVhraUxDSnBjMEZ5Y21GNUlpd2lVM2x0WW05c0lpd2lhWFJsY21GMGIzSWlMQ0pqYjI1allYUWlMQ0pwZEdWdElpd2lhVzVrWlhnaUxDSnBibVJsZUU5bUlpd2libVY0ZENJc0ltUnZibVVpTENKMElpd2lkU0lzSW5ZaUxDSnhJaXdpZHlJc0lrMWhkR2dpTENKdFlYZ2lMQ0p0YVc0aUxDSjRJaXdpVTJWMElpd2ljMmw2WlNJc0ltUmxiR1YwWlNJc0luTmxkRlJwYldWdmRYUWlMQ0poWkdRaUxDSnlaWE4xYkhSeklpd2lZM1I0SWl3aVlXUmtSWFpsYm5STWFYTjBaVzVsY2lJc0ltUmxjM1J5YjNraUxDSmtaWE4wY205NVNHRnVaR3hsY3lJc0luSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0poYzNOcFoyNGlMQ0pPZFcxaVpYSWlMQ0pwYzBsdWRHVm5aWElpTENKd2NtOXRhWE5sUVd4c1QySnFaV04wSWl3aVgyVnljbTl5SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxFTkJRVU1zVlVGQlUwRXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5d3dRa0ZCVlN4UFFVRlBReXhQUVVGcVFpeEpRVUV3UWl4WlFVRlZMRTlCUVU5RExFMUJRVE5ETEVkQlFXdEVRU3hQUVVGUFJDeFBRVUZRTEVkQlFXVkVMRWRCUVdwRkxFZEJRWEZGTEdOQlFWa3NUMEZCVDBjc1RVRkJia0lzU1VGQk1rSkJMRTlCUVU5RExFZEJRV3hETEVkQlFYTkRSQ3hQUVVGUExFVkJRVkFzUlVGQlZVZ3NRMEZCVml4RFFVRjBReXhIUVVGdFJDeFpRVUZWTEU5QlFVOURMRTlCUVdwQ0xFZEJRWGxDUVN4UlFVRlJTU3hGUVVGU0xFZEJRVmRNTEVkQlFYQkRMRWRCUVhkRFJDeEZRVUZGVFN4RlFVRkdMRWRCUVV0TUxFZEJRWEpMTzBGQlFYbExMRU5CUVhoTUxFVkJRVEJNTEdWQlFXRXNUMEZCVDAwc1NVRkJjRUlzWlVGQk9FSkJMRWxCUVhoT0xFVkJRVFpPTEZsQlFWVTdRVUZCUXl4eFFrRkJUeXhWUVVGVFVDeERRVUZVTEVWQlFWYzdRVUZCUXl4eFEwRkJVME1zUTBGQlZDeERRVUZYVHl4RFFVRllMRVZCUVdFN1FVRkJReXc0UTBGQlIwTXNSVUZCUlVRc1EwRkJSaXhEUVVGSUxFVkJRVkVzVDBGQlQwTXNSVUZCUlVRc1EwRkJSaXhGUVVGTFRpeFBRVUZhTEVOQlFXOUNMRWxCUVVsUkxFbEJRVVZFTEVWQlFVVkVMRU5CUVVZc1NVRkJTeXhGUVVGRFJ5eEhRVUZGU0N4RFFVRklMRVZCUVV0SkxFZEJRVVVzUTBGQlF5eERRVUZTTEVWQlFWVldMRk5CUVZFc1JVRkJiRUlzUlVGQldDeERRVUZwUXl4UFFVRlBSaXhGUVVGRlVTeERRVUZHTEVWQlFVdExMRWxCUVV3c1EwRkJWVWdzUlVGQlJWSXNUMEZCV2l4RlFVRnZRbEVzUTBGQmNFSXNSVUZCYzBKQkxFVkJRVVZTTEU5QlFYaENMRVZCUVdkRFJDeERRVUZvUXl4SFFVRnRRMU1zUlVGQlJVVXNRMEZCUml4SFFVRkpMRU5CUVVNc1EwRkJlRU1zUlVGQk1FTkdMRVZCUVVWU0xFOUJRVzVFTzBGQlFUSkVMR2xEUVVGSlR5eEpRVUZGTEVWQlFVNHNRMEZCVXl4UFFVRlBVaXhGUVVGRllTeERRVUZHTEVkQlFVbGtMRU5CUVVvc1JVRkJUVU1zUlVGQlJWRXNRMEZCUml4SFFVRkpRU3hEUVVGV0xFVkJRVmxTTEVWQlFVVlBMRU5CUVVZc1IwRkJTU3hWUVVGVFVpeERRVUZVTEVWQlFWZFRMRU5CUVZnc1JVRkJZVVFzUTBGQllpeEZRVUZsTzBGQlFVTlFMRFJEUVVGRll5eERRVUZHTEVOQlFVbG1MRU5CUVVvc1JVRkJUVk1zUTBGQlRpeExRVUZWVHl4UFFVRlBReXhqUVVGUUxFTkJRWE5DYWtJc1EwRkJkRUlzUlVGQmQwSlRMRU5CUVhoQ0xFVkJRVEJDTEVWQlFVTlRMR05CUVdFc1EwRkJReXhEUVVGbUxFVkJRV2xDUXl4WlFVRlhMRU5CUVVNc1EwRkJOMElzUlVGQkswSkRMRXRCUVVsYUxFTkJRVzVETEVWQlFURkNMRU5CUVZZN1FVRkJNa1VzTmtKQlFUTkhMRVZCUVRSSFVDeEZRVUZGYjBJc1EwRkJSaXhIUVVGSkxGVkJRVk55UWl4RFFVRlVMRVZCUVZjN1FVRkJReXc0UTBGQlNWTXNTVUZCUlZRc1MwRkJSMEVzUlVGQlJYTkNMRlZCUVV3c1IwRkJaMElzV1VGQlZUdEJRVUZETEN0RVFVRlBkRUlzUlVGQlJTeFRRVUZHTEVOQlFWQTdRVUZCYjBJc01rTkJRUzlETEVkQlFXZEVMRmxCUVZVN1FVRkJReXdyUkVGQlQwRXNRMEZCVUR0QlFVRlRMREpEUVVFeFJTeERRVUV5UlN4UFFVRlBReXhGUVVGRlR5eERRVUZHTEVOQlFVbERMRU5CUVVvc1JVRkJUU3hIUVVGT0xFVkJRVlZCTEVOQlFWWXNSMEZCWVVFc1EwRkJjRUk3UVVGQmMwSXNOa0pCUVRkT0xFVkJRVGhPVWl4RlFVRkZZeXhEUVVGR0xFZEJRVWtzVlVGQlUyWXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0U3UVVGQlF5eHBSRUZCVDJVc1QwRkJUMDhzVTBGQlVDeERRVUZwUWtNc1kwRkJha0lzUTBGQlowTllMRWxCUVdoRExFTkJRWEZEWWl4RFFVRnlReXhGUVVGMVEwTXNRMEZCZGtNc1EwRkJVRHRCUVVGcFJDdzJRa0ZCYWxNc1JVRkJhMU5CTEVWQlFVVjNRaXhEUVVGR0xFZEJRVWtzUlVGQmRGTXNSVUZCZVZONFFpeEZRVUZGUVN4RlFVRkZlVUlzUTBGQlJpeEhRVUZKTEVOQlFVNHNRMEZCYUZRN1FVRkJlVlFzWlVGQmNHUXNRMEZCY1dRc1EwRkJReXhWUVVGVE1VSXNRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZSTEVOQlFXSXNSVUZCWlR0QlFVRkRPMEZCUVdFc2NVTkJRVk5FTEVOQlFWUXNRMEZCVjFBc1EwRkJXQ3hGUVVGaE8wRkJRVU1zT0VOQlFVY3NSVUZCUlN4blFrRkJaMEpQTEVOQlFXeENMRU5CUVVnc1JVRkJkMElzVDBGQlR5eEpRVUZKUVN4RFFVRktMRU5CUVUxUUxFTkJRVTRzUTBGQlVDeERRVUZuUWl4SlFVRkhMRTFCUVVrd1FpeFZRVUZWUXl4TlFVRnFRaXhGUVVGM1FpeE5RVUZOTEVsQlFVbERMRXRCUVVvc1EwRkJWU3hwUlVGQlZpeERRVUZPTEVOQlFXMUdMRXRCUVV0RExFZEJRVXdzUjBGQlV5eEZRVUZEUXl4UlFVRlBMRVZCUVVORExFOUJRVTBzUTBGQlVDeEZRVUZUUXl4UFFVRk5MRU5CUVdZc1JVRkJVaXhGUVVFd1FrTXNVMEZCVVN4SlFVRkpReXhQUVVGS0xFTkJRVmxzUXl4RFFVRmFMRU5CUVd4RExFVkJRV2xFYlVNc2EwSkJRV2xDTEVOQlFXeEZMRVZCUVZRN1FVRkJPRVVzYjBOQlFVOXVRaXhqUVVGUUxFTkJRWE5DYUVJc1EwRkJkRUlzUlVGQmQwSXNXVUZCZUVJc1JVRkJjVU1zUlVGQlEyOURMRTlCUVUwc1EwRkJReXhEUVVGU0xFVkJRWEpETEVkQlFXbEVjRU1zUlVGQlJYRkRMRTlCUVVZc1IwRkJWVGxDTEVOQlFUTkVMRU5CUVRaRUxFbEJRVWxGTEVsQlFVVkVMRVZCUVVVc1EwRkJSaXhEUVVGT08wRkJRVUVzWjBOQlFWYzRRaXhKUVVGRk9VSXNSVUZCUlN4RFFVRkdMRU5CUVdJN1FVRkJRU3huUTBGQmEwSXJRaXhKUVVGRkwwSXNSVUZCUlN4RFFVRkdMRU5CUVhCQ08wRkJRVUVzWjBOQlFYbENaME1zU1VGQlJXaERMRVZCUVVVc1EwRkJSaXhEUVVFelFqdEJRVUZCTEdkRFFVRm5RMFVzU1VGQlJVWXNSVUZCUlN4RFFVRkdMRU5CUVd4RE8wRkJRVUVzWjBOQlFYVkRhVU1zU1VGQlJXcERMRVZCUVVVc1EwRkJSaXhEUVVGNlF6dEJRVUZCTEdkRFFVRTRRMnRETEVsQlFVVnNReXhGUVVGRkxFTkJRVVlzUTBGQmFFUXNRMEZCY1VSRUxFVkJRVVZsTEZOQlFVWXNRMEZCV1hGQ0xFZEJRVm9zUjBGQlowSkVMRVZCUVVWRExFZEJRV3hDTEVWQlFYTkNjRU1zUlVGQlJXVXNVMEZCUml4RFFVRlpjMElzUjBGQldpeEhRVUZuUWtvc1JVRkJSVWtzUjBGQmVFTXNSVUZCTkVOeVF5eEZRVUZGWlN4VFFVRkdMRU5CUVZsMVFpeEpRVUZhTEVkQlFXbENUQ3hGUVVGRlN5eEpRVUV2UkN4RlFVRnZSWFJETEVWQlFVVmxMRk5CUVVZc1EwRkJXWGRDTEZOQlFWb3NSMEZCYzBKT0xFVkJRVVZOTEZOQlFUVkdMRVZCUVhOSGRrTXNSVUZCUldVc1UwRkJSaXhEUVVGWmVVSXNUVUZCV2l4SFFVRnRRbEFzUlVGQlJVOHNUVUZCTTBnc1JVRkJhMGw0UXl4RlFVRkZaU3hUUVVGR0xFTkJRVmt3UWl4TlFVRmFMRWRCUVcxQ1VpeEZRVUZGVVN4TlFVRjJTaXhGUVVFNFNucERMRVZCUVVWbExGTkJRVVlzUTBGQldUSkNMRTFCUVZvc1IwRkJiVUoyUXl4RlFVRkZkVU1zVFVGQmJrd3NSVUZCTUV3eFF5eEZRVUZGWlN4VFFVRkdMRU5CUVZrMFFpeExRVUZhTEVkQlFXdENWQ3hGUVVGRlV5eExRVUU1VFN4RlFVRnZUak5ETEVWQlFVVmxMRk5CUVVZc1EwRkJXVFpDTEUxQlFWb3NSMEZCYlVKV0xFVkJRVVZWTEUxQlFYcFBMRVZCUVdkUU5VTXNSVUZCUldVc1UwRkJSaXhEUVVGWk9FSXNUMEZCV2l4SFFVRnZRbGdzUlVGQlJWY3NUMEZCZEZFc1JVRkJPRkUzUXl4RlFVRkZaU3hUUVVGR0xFTkJRVmtyUWl4TFFVRmFMRWRCUVd0Q1dDeEZRVUZGVnl4TFFVRnNVeXhGUVVGM1V6bERMRVZCUVVWbExGTkJRVVlzUTBGQldXZERMRTFCUVZvc1IwRkJiVUphTEVWQlFVVlpMRTFCUVRkVUxFVkJRVzlWTDBNc1JVRkJSV1VzVTBGQlJpeERRVUZaYVVNc1RVRkJXaXhIUVVGdFFtSXNSVUZCUldFc1RVRkJlbFlzUlVGQloxZG9SQ3hGUVVGRk9FSXNUMEZCUml4SFFVRlZPVUlzUTBGQk1WY3NSVUZCTkZkQkxFVkJRVVZ2UXl4SFFVRkdMRWRCUVUxd1F5eEZRVUZGWlN4VFFVRkdMRU5CUVZseFFpeEhRVUU1V0N4RlFVRnJXWEJETEVWQlFVVTBReXhOUVVGR0xFZEJRVk0xUXl4RlFVRkZaU3hUUVVGR0xFTkJRVms0UWl4UFFVRjJXaXhGUVVFcldqZERMRVZCUVVVNFF5eExRVUZHTEVkQlFWRnlSQ3hMUVVGSFR5eEZRVUZGYVVRc1QwRkJSaXhIUVVGWlNDeExRVUZhTEVOQlFXdENja1FzUTBGQmJFSXNRMEZCTVdFc1JVRkJLMkpQTEVWQlFVVnJSQ3hOUVVGR0xFZEJRVk42UkN4TFFVRkhUeXhGUVVGRmFVUXNUMEZCUml4SFFVRlpReXhOUVVGYUxFTkJRVzFDZWtRc1EwRkJia0lzUTBGQk0yTXNSVUZCYVdWUExFVkJRVVZ0UkN4TFFVRkdMRWRCUVZGdVFpeEZRVUZGYlVJc1MwRkJNMlVzUlVGQmFXWnVSQ3hGUVVGRlpTeFRRVUZHTEVOQlFWbHhReXhSUVVGYUxFZEJRWEZDY0VJc1JVRkJSVzlDTEZGQlFYaG5RaXhGUVVGcGFFSndSQ3hGUVVGRlowUXNUVUZCUml4SFFVRlRhRVFzUlVGQlJXVXNVMEZCUml4RFFVRlphVU1zVFVGQmRHbENMRVZCUVRacFFtaEVMRVZCUVVWcFJDeFBRVUZHTEVkQlFWVXNWVUZCVXk5RExFTkJRVlFzUlVGQlZ6dEJRVUZETEdsRVFVRlBMRWxCUVVsR0xFTkJRVW9zUTBGQlRTeERRVUZEVWl4RFFVRkVMRVZCUVVkRExFTkJRVWdzUzBGQlQxTXNTMEZCUnl4RFFVRkRMRWRCUVVVMlFpeEZRVUZGYzBJc1ZVRkJUQ3hGUVVGcFFtNUVMRVZCUVVWdlJDeEpRVUZ1UWl4RFFVRklMRWRCUVRSQ2NFUXNSVUZCUlc5RUxFbEJRVVlzUTBGQlR6bEVMRU5CUVZBc1JVRkJWU3RFTEV0QlFWWXNRMEZCWjBJNVJDeERRVUZvUWl4RFFVRTFRaXhIUVVFclF5eExRVUZMUkN4RlFVRkZWU3hEUVVGR0xFTkJRV3BGTEVOQlFWQTdRVUZCT0VVc05rSkJRV3B3UWl4RlFVRnJjRUpHTEVWQlFVVjNSQ3hUUVVGR0xFZEJRVmtzVlVGQlUzUkVMRU5CUVZRc1JVRkJWenRCUVVGRExHbEVRVUZOTEVOQlFVTXNSMEZCUjFZc1EwRkJTaXhMUVVGUkxFbEJRVWxSTEVOQlFVb3NRMEZCVFN4RFFVRkRLMElzUTBGQlJDeEZRVUZIT1VJc1EwRkJTQ3hMUVVGUFF5eEZRVUZGUnl4SlFVRkdMRU5CUVU4c1NVRkJVQ3hGUVVGWkxFZEJRVWRpTEVOQlFXWXNSVUZCYVVJc1EwRkJRMUVzUTBGQlJDeEZRVUZIVWl4RFFVRklMRXRCUVU5UkxFbEJRVVZETEVWQlFVVkVMRU5CUVVZc1EwRkJSaXhIUVVGUEswSXNSVUZCUlhaRExFTkJRVVlzUTBGQkwwSXNRMEZCWWl4RFFVRmtPMEZCUVdsRkxEWkNRVUV6ZFVJc1JVRkJOSFZDVVN4RlFVRkZlVVFzV1VGQlJpeEhRVUZsTEZWQlFWTjRSQ3hEUVVGVUxFVkJRVmM3UVVGQlF5dzRRMEZCUnl4RFFVRkRRU3hEUVVGRUxFbEJRVWtzUTBGQlEwOHNUMEZCVDJ0RUxHTkJRVkFzUTBGQmMwSjZSQ3hEUVVGMFFpeERRVUZTTEVWQlFXbERMRTFCUVUwc1NVRkJTVzlDTEV0QlFVb3NRMEZCVlN3eVEwRkJWaXhEUVVGT0xFTkJRVFpFTEU5QlFVOWlMRTlCUVU5dFJDeHRRa0ZCVUN4RFFVRXlRakZFTEVOQlFUTkNMRVZCUVRoQ2RVTXNUVUZCT1VJc1EwRkJjVU5vUkN4TFFVRkhMR05CUVZrc1QwRkJUMU1zUlVGQlJWUXNRMEZCUml4RFFVRXpSQ3hGUVVGcFJXbEVMRTFCUVdwRkxFTkJRWGRGTEVOQlFVTjRReXhEUVVGRUxFVkJRVWRVTEVOQlFVZ3NUVUZCVVN4UFFVRlBiMFVzU1VGQlVDeERRVUZaY0VVc1EwRkJXaXhMUVVGblFsTXNSVUZCUnl4SFFVRkZWQ3hEUVVGRkxFOUJRVkFzUTBGQmFFSXNTMEZCYVVOVExFVkJRVWNzUjBGQlJWUXNRMEZCUlN4UFFVRlFMRWxCUVdWUkxFVkJRVVYzUkN4VFFVRkdMRU5CUVZsMlJDeEZRVUZITEVkQlFVVlVMRU5CUVVVc1JVRkJVQ3hEUVVGYUxFTkJRV2hFTEVkQlFYZEZVeXhEUVVGb1JpeERRVUY0UlN4RlFVRXlTa0VzUTBGQk0wb3NRMEZCVUR0QlFVRnhTeXcyUWtGQk1XZERMRVZCUVRKblEwUXNSVUZCUlRaRUxFMUJRVVlzUjBGQlV5eFpRVUZWTzBGQlFVTXNPRU5CUVVrelJDeERRVUZLTzBGQlFVRXNPRU5CUVUwMlFpeERRVUZPTzBGQlFVRXNPRU5CUVZGRExFbEJRVVVzU1VGQlNXaERMRU5CUVVvc1EwRkJUU3hEUVVGRFVpeERRVUZFTEVWQlFVZERMRU5CUVVnc1MwRkJUenRCUVVGRFV5dzBSRUZCUlZZc1EwRkJSaXhGUVVGSmRVTXNTVUZCUlhSRExFTkJRVTQ3UVVGQlVTd3lRMEZCZEVJc1EwRkJWaXhEUVVGclF5eFBRVUZOTEVWQlFVTnBReXhUUVVGUlRTeERRVUZVTEVWQlFWZHBRaXhUUVVGUkwwTXNRMEZCYmtJc1JVRkJjVUk0UXl4UlFVRlBha0lzUTBGQk5VSXNSVUZCVGp0QlFVRnhReXcyUWtGQmRHMURMRVZCUVhWdFF5OUNMRVZCUVVWbExGTkJRVVlzUTBGQldTdERMRTlCUVZvc1IwRkJiMElzVlVGQlV6ZEVMRU5CUVZRc1JVRkJWMVFzUTBGQldDeEZRVUZoTzBGQlFVTXNhVVJCUVU4c1MwRkJTM1ZGTEV0QlFVd3NTVUZCV1N4TFFVRkxRU3hMUVVGTUxFTkJRVmRETEVsQlFWZ3NRMEZCWjBJc1EwRkJReTlFTEVOQlFVUXNSVUZCUnl4SlFVRklMRVZCUVZGVUxFTkJRVklzUTBGQmFFSXNRMEZCV2l4RlFVRjNReXhKUVVFdlF6dEJRVUZ2UkN3MlFrRkJOM0pETEVWQlFUaHlRMUVzUlVGQlJXVXNVMEZCUml4RFFVRlphMFFzVjBGQldpeEhRVUYzUWl4VlFVRlRlRVVzU1VGQlJTeEpRVUZGTEVOQlFXSXNSVUZCWlR0QlFVRkRMR2xFUVVGUExFdEJRVXR6UlN4TFFVRk1MRWRCUVZjc1MwRkJTMFFzVDBGQlRDeERRVUZoTEdGQlFXSXNSVUZCTWtJc1EwRkJReXhIUVVGSE0wTXNVMEZCU2l4RFFVRXpRaXhEUVVGWUxFbEJRWFZFTEV0QlFVdEhMRWRCUVV3c1EwRkJVMDBzWjBKQlFWUXNSMEZCTUVKdVF5eERRVUV4UWl4RlFVRTBRaXhKUVVGdVJpeERRVUZRTzBGQlFXZEhMRFpDUVVGME1FTXNSVUZCZFRCRFR5eEZRVUZGWlN4VFFVRkdMRU5CUVZsdFJDeExRVUZhTEVkQlFXdENMRlZCUVZONlJTeEpRVUZGTEVsQlFVVXNRMEZCWWl4RlFVRmxPMEZCUVVNc2FVUkJRVThzUzBGQlMzTkZMRXRCUVV3c1IwRkJWeXhMUVVGTFJDeFBRVUZNTEVOQlFXRXNUMEZCWWl4RlFVRnhRaXhEUVVGRExFZEJRVWN6UXl4VFFVRktMRU5CUVhKQ0xFTkJRVmdzU1VGQmFVUXNTMEZCUzBjc1IwRkJUQ3hEUVVGVFF5eE5RVUZVTEVkQlFXZENMRVZCUVVORkxFOUJRVTBzUTBGQlVDeEZRVUZUUkN4UFFVRk5MMElzUTBGQlppeEZRVUZvUWl4RlFVRnJReXhKUVVGdVJpeERRVUZRTzBGQlFXZEhMRFpDUVVGNk9FTXNSVUZCTURoRFR5eEZRVUZGWlN4VFFVRkdMRU5CUVZsdFF5eE5RVUZhTEVkQlFXMUNiRVFzUlVGQlJXVXNVMEZCUml4RFFVRlpiVVFzUzBGQmVpdERMRVZCUVNzclEyeEZMRVZCUVVWbExGTkJRVVlzUTBGQldVZ3NSMEZCV2l4SFFVRm5RaXhWUVVGVExFZEJRVWRZTEVOQlFWb3NSVUZCWXp0QlFVRkRMR2xFUVVGUExFdEJRVXM0UkN4TFFVRk1MRWRCUVZjc1MwRkJTMFFzVDBGQlRDeERRVUZoTEV0QlFXSXNSVUZCYlVJc1EwRkJReXhIUVVGSE0wTXNVMEZCU2l4RFFVRnVRaXhEUVVGWUxFbEJRU3REYkVJc1NVRkJSU3hEUVVGRExFZEJRVVU0UWl4RlFVRkZiME1zVDBGQlRDeEZRVUZqYkVVc1EwRkJaQ3hEUVVGR0xFVkJRVzFDTEV0QlFVdHhSQ3hKUVVGTUxFTkJRVlYwUkN4TFFVRkhMRmxCUVZVc1QwRkJUMEVzUTBGQmFrSXNSMEZCYlVJc1RVRkJTVU1zUlVGQlJXMUNMRTFCUVU0c1IwRkJZWEJDTEVWQlFVVkRMRVZCUVVVc1EwRkJSaXhEUVVGR0xFTkJRV0lzUjBGQmNVSkJMRVZCUVVWM1F5eE5RVUZHTEVOQlFWTXNRMEZCUTJoRUxFTkJRVVFzUlVGQlIwUXNRMEZCU0N4TlFVRlJReXhGUVVGRlJDeERRVUZHTEVsQlFVdFJMRVZCUVVWU0xFTkJRVVlzUTBGQlRDeEZRVUZWUXl4RFFVRnNRaXhEUVVGVUxFVkJRVGhDTEVWQlFUbENMRU5CUVhoRExFZEJRVEJGVHl4RFFVRjJSaXhEUVVGc1JTeERRVUZRTzBGQlFXOUxMRFpDUVVGc2NrUXNSVUZCYlhKRVFTeEZRVUZGWlN4VFFVRkdMRU5CUVZseFJDeEhRVUZhTEVkQlFXZENMRlZCUVZOd1JTeERRVUZVTEVWQlFWZFNMRU5CUVZnc1JVRkJZVHRCUVVGRExHbEVRVUZQTEV0QlFVdDFSU3hMUVVGTUxFZEJRVmNzUzBGQlMwUXNUMEZCVEN4RFFVRmhMRXRCUVdJc1JVRkJiVUlzUTBGQlF5eEhRVUZITTBNc1UwRkJTaXhEUVVGdVFpeERRVUZZTEVkQlFUaERMRXRCUVV0dFF5eEpRVUZNTEVOQlFWVTNSQ3hOUVVGSkxGbEJRVlVzVDBGQlQwRXNRMEZCYWtJc1MwRkJjVUpCTEVWQlFVVlBMRU5CUVVZc1NVRkJTMUlzUTBGQk1VSXNSMEZCTmtKRExFTkJRV3BETEVOQlFWWXNRMEZCY2tRN1FVRkJiMGNzTmtKQlFYSjZSQ3hGUVVGemVrUlBMRVZCUVVWbExGTkJRVVlzUTBGQldYZERMRXRCUVZvc1IwRkJhMElzVlVGQlUzUkVMRU5CUVZRc1JVRkJWenRCUVVGRExEaERRVUZITEV0QlFVczRSQ3hMUVVGU0xFVkJRV01zVDBGQlR5eExRVUZMUkN4UFFVRk1MRU5CUVdFc1QwRkJZaXhGUVVGeFFpeERRVUZETEVkQlFVY3pReXhUUVVGS0xFTkJRWEpDTEVOQlFWQXNRMEZCTkVNc1NVRkJSeXhOUVVGSlFTeFZRVUZWUXl4TlFVRnFRaXhGUVVGM1FpeFBRVUZQTEV0QlFVdHBSQ3hQUVVGTUxFTkJRV0VzUjBGQlIyeEVMRk5CUVdoQ0xFTkJRVkFzUTBGQmEwTXNTVUZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSVmtzUlVGQlJYTkNMRlZCUVV3c1JVRkJhVUp3UkN4RFFVRnFRaXhEUVVGS0xFVkJRWGRDTEUxQlFVMHNTVUZCU1VNc1JVRkJSVzlGTEdWQlFVNHNRMEZCYzBJc01FVkJRWGRGTEU5QlFVOXlSU3hEUVVGeVJ5eERRVUZPTEVOQlFUaEhMRTlCUVU5RUxFVkJRVVZwUkN4UFFVRkdMRU5CUVZVc1MwRkJTek5DTEVkQlFVd3NRMEZCVTBrc1QwRkJWQ3hEUVVGcFFqWkNMRXRCUVdwQ0xFTkJRWFZDTDBRc1MwRkJSMU1zUlVGQlJWUXNRMEZCUml4RFFVRXhRaXhEUVVGV0xFTkJRVkE3UVVGQmEwUXNOa0pCUVdodlJTeEZRVUZwYjBWUkxFVkJRVVZsTEZOQlFVWXNRMEZCV1hORUxFOUJRVm9zUjBGQmIwSXNWVUZCVTNKRExFTkJRVlFzUlVGQlYzaERMRU5CUVZnc1JVRkJZVHRCUVVGRExEaERRVUZITEV0QlFVdDFSU3hMUVVGU0xFVkJRV01zVDBGQlR5eExRVUZMUkN4UFFVRk1MRU5CUVdFc1UwRkJZaXhGUVVGMVFpeERRVUZETEVkQlFVY3pReXhUUVVGS0xFTkJRWFpDTEVOQlFWQXNRMEZCT0VNc1NVRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJWa3NSVUZCUlhOQ0xGVkJRVXdzUlVGQmFVSTNSQ3hEUVVGcVFpeERRVUZLTEVWQlFYZENMRTFCUVUwc1NVRkJTVlVzUlVGQlJXOUZMR1ZCUVU0c1EwRkJjMElzZFVaQlFYRkdMRTlCUVU4NVJTeERRVUZzU0N4RFFVRk9MRU5CUVRKSUxFOUJRVTlSTEVWQlFVVnBSQ3hQUVVGR0xFTkJRVlVzUzBGQlN6TkNMRWRCUVV3c1EwRkJVMGtzVDBGQlZDeERRVUZwUWpaQ0xFdEJRV3BDTEVOQlFYVkNPVVFzUzBGQlJ6dEJRVUZETERSRVFVRkhkVU1zUzBGQlIzWkRMR0ZCUVdGMVF5eERRVUZ1UWl4RlFVRnhRaXhQUVVGUGVFTXNSVUZCUlVNc1EwRkJSaXhEUVVGUUxFTkJRVmtzVFVGQlRVRXNRMEZCVGp0QlFVRlJMREpEUVVGd1JTeERRVUZXTEVOQlFWQTdRVUZCZDBZc05rSkJRVEU0UlN4RlFVRXlPRVZQTEVWQlFVVmxMRk5CUVVZc1EwRkJXWFZETEVsQlFWb3NSMEZCYVVJc1ZVRkJVemRFTEVOQlFWUXNSVUZCVnp0QlFVRkRMRGhEUVVGSExFdEJRVXR6UlN4TFFVRlNMRVZCUVdNc1QwRkJUeXhMUVVGTFJDeFBRVUZNTEVOQlFXRXNUVUZCWWl4RlFVRnZRaXhEUVVGRExFZEJRVWN6UXl4VFFVRktMRU5CUVhCQ0xFTkJRVkFzUTBGQk1rTXNTVUZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSVmtzUlVGQlJYTkNMRlZCUVV3c1JVRkJhVUkxUkN4RFFVRnFRaXhEUVVGS0xFVkJRWGRDTEUxQlFVMHNTVUZCU1ZNc1JVRkJSVzlGTEdWQlFVNHNRMEZCYzBJc2VVVkJRWFZGTEU5QlFVODNSU3hEUVVGd1J5eERRVUZPTEVOQlFUWkhMRTlCUVU5UExFVkJRVVZwUkN4UFFVRkdMRU5CUVZVc1MwRkJTek5DTEVkQlFVd3NRMEZCVTBrc1QwRkJWQ3hEUVVGcFFqUkNMRWxCUVdwQ0xFTkJRWE5DTjBRc1EwRkJkRUlzUTBGQlZpeERRVUZRTzBGQlFUSkRMRFpDUVVGcWRFWXNSVUZCYTNSR1R5eEZRVUZGWlN4VFFVRkdMRU5CUVZsM1JDeEhRVUZhTEVkQlFXZENMRlZCUVZOMFJTeERRVUZVTEVWQlFWYzdRVUZCUXl3NFEwRkJSeXhMUVVGTE9FUXNTMEZCVWl4RlFVRmpMRTlCUVU4c1MwRkJTMFFzVDBGQlRDeERRVUZoTEV0QlFXSXNSVUZCYlVJc1EwRkJReXhIUVVGSE0wTXNVMEZCU2l4RFFVRnVRaXhEUVVGUUxFTkJRVEJETEVsQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVWWkxFVkJRVVZ6UWl4VlFVRk1MRVZCUVdsQ2NFUXNRMEZCYWtJc1EwRkJTaXhGUVVGM1FpeE5RVUZOTEVsQlFVbERMRVZCUVVWdlJTeGxRVUZPTEVOQlFYTkNMSGRGUVVGelJTeFBRVUZQY2tVc1EwRkJia2NzUTBGQlRpeERRVUUwUnl4UFFVRlBSQ3hGUVVGRmFVUXNUMEZCUml4RFFVRlZMRXRCUVVzelFpeEhRVUZNTEVOQlFWTkpMRTlCUVZRc1EwRkJhVUkwUWl4SlFVRnFRaXhEUVVGelFqbEVMRXRCUVVkVExFVkJRVVZVTEVOQlFVWXNTVUZCUzBFc1EwRkJUQ3hIUVVGUFFTeERRVUZvUXl4RFFVRldMRU5CUVZBN1FVRkJjVVFzTmtKQlFTODVSanRCUVVGbkswWXNaVUZCTHpGSExFVkJRV2N5Unl4VlFVRlRRU3hEUVVGVUxFVkJRVmRETEVOQlFWZ3NSVUZCWVR0QlFVRkRPMEZCUVdGbExHMURRVUZQUXl4alFVRlFMRU5CUVhOQ2FFSXNRMEZCZEVJc1JVRkJkMElzV1VGQmVFSXNSVUZCY1VNc1JVRkJRMjlETEU5QlFVMHNRMEZCUXl4RFFVRlNMRVZCUVhKRExFVkJRV2xFTEUxQlFVMDFRaXhEUVVGT0xGTkJRV2RDYjBJc1MwRkJhRUlzUTBGQmNVSTdRVUZCUTIxRUxITkVRVUZaZGtVc1EwRkJXaXhGUVVGalJDeERRVUZrTEVWQlFXZENPMEZCUVVNc2IwVkJRVlVzVDBGQlQwTXNRMEZCYWtJc1MwRkJjVUpFTEVsQlFVVkRMRU5CUVVZc1JVRkJTVUVzUlVGQlJYZEZMRTlCUVVZc1MwRkJXWGhGTEVsQlFVVkJMRVZCUVVWM1JTeFBRVUZvUWl4RFFVRjZRaXhIUVVGdFJDeE5RVUZOZUVVc1EwRkJUaXhEUVVGdVJDeEZRVUUwUkN4WlFVRlZMRTlCUVU5RUxFTkJRV3BDTEVsQlFXOUNVU3hQUVVGUGJVUXNiVUpCUVZBc1EwRkJNa0l6UkN4RFFVRXpRaXhGUVVFNFFqQkZMRTlCUVRsQ0xFTkJRWE5EYWtZc1MwRkJSenRCUVVGRExESkZRVUZMUVN4RFFVRk1MRWxCUVZGUExFVkJRVVZRTEVOQlFVWXNRMEZCVWp0QlFVRmhMSGxFUVVGMlJDeERRVUZvUml4RlFVRjVTU3hMUVVGTGEwWXNTVUZCVEN4SFFVRlZMRXRCUVV0SUxGZEJRVXdzUTBGQmFVSkhMRWxCUVhCTExFVkJRWGxMZEVRc1RVRkJUWFZFTEdsQ1FVRk9MRU5CUVhkQ0xFbEJRWGhDTEVWQlFUWkNMRXRCUVV0S0xGZEJRV3hETEVOQlFYcExPMEZCUVhkT08wRkJRVEZQTERaQ1FVRXlUeTlGTEVWQlFVVTJSU3hsUVVGR0xFZEJRV3RDY2tVc1EwRkJiRUlzUTBGQmIwSlNMRVZCUVVWdlJpeHRRa0ZCUml4SFFVRnpRaXhqUVVGak5VVXNRMEZCWkN4RFFVRmxMRVZCUVhKRExFTkJRWGREVWl4RlFVRkZjVVlzYVVKQlFVWXNSMEZCYjBJc1kwRkJZemRGTEVOQlFXUXNRMEZCWlN4RlFVRnVReXhEUVVGelExSXNSVUZCUlhOR0xGbEJRVVlzUjBGQlpTeGpRVUZqT1VVc1EwRkJaQ3hEUVVGbExFVkJRVGxDTEVOQlFXbERVaXhGUVVGRmRVWXNWMEZCUml4SFFVRmpMR05CUVdNdlJTeERRVUZrTEVOQlFXVXNSVUZCTjBJc1EwRkJaME5TTEVWQlFVVjNSaXhUUVVGR0xFZEJRVmtzWTBGQlkyaEdMRU5CUVdRc1EwRkJaU3hGUVVFelFqdEJRVUU0UWl4bFFVRTNNa2dzUlVGQk9ESklMRlZCUVZOVUxFTkJRVlFzUlVGQlYwTXNRMEZCV0N4RlFVRmhPMEZCUVVNN1FVRkJZV1VzYlVOQlFVOURMR05CUVZBc1EwRkJjMEpvUWl4RFFVRjBRaXhGUVVGM1FpeFpRVUY0UWl4RlFVRnhReXhGUVVGRGIwTXNUMEZCVFN4RFFVRkRMRU5CUVZJc1JVRkJja01zUlVGQmFVUXNUVUZCVFRWQ0xFbEJRVVVzUlVGQlEybEdMR05CUVdONlJpeERRVUZrTEVWQlFXZENPMEZCUVVNc0swUkJRVTlCTEV0QlFVY3NZMEZCV1N4UFFVRlBRU3hGUVVGRk5rUXNTVUZCTDBJN1FVRkJiME1zTWtOQlFYUkVMRVZCUVhWRVJDeFhRVUZYTlVRc1EwRkJXQ3hGUVVGaE8wRkJRVU1zSzBSQlFVMHNZMEZCV1N4UFFVRlBRU3hEUVVGNlFqdEJRVUV5UWl3eVEwRkJhRWNzUlVGQmFVY3dSaXhoUVVGaE1VWXNRMEZCWWl4RlFVRmxPMEZCUVVNc0swUkJRVTlCTEV0QlFVY3lSaXhOUVVGTlF5eFBRVUZPTEVOQlFXTTFSaXhEUVVGa0xFTkJRVWdzU1VGQmNVSXNZMEZCV1N4UFFVRlBRU3hGUVVGRk5rWXNUMEZCVDBNc1VVRkJWQ3hEUVVFdlF6dEJRVUZyUlN3eVEwRkJia3dzUlVGQmIweHdRaXhSUVVGUk1VVXNRMEZCVWl4RlFVRlZPMEZCUVVNc05FUkJRVWNzUTBGQlF6SkdMRTFCUVUxRExFOUJRVTRzUTBGQll6VkdMRU5CUVdRc1EwRkJTaXhGUVVGeFFpeE5RVUZOTEVsQlFVazBRaXhMUVVGS0xFTkJRVlVzYVVSQlFWWXNRMEZCVGl4RFFVRnRSU3hQUVVGUE5VSXNSVUZCUldkRUxFMUJRVVlzUTBGQlV5eERRVUZEZWtNc1EwRkJSQ3hGUVVGSFVpeERRVUZJTEV0QlFVOVJMRVZCUVVWM1JpeE5RVUZHTEVOQlFWTktMRTFCUVUxRExFOUJRVTRzUTBGQll6ZEdMRU5CUVdRc1NVRkJhVUpUTEVWQlFVVnJSU3hQUVVGR0xFTkJRVlV6UlN4RFFVRldMRU5CUVdwQ0xFZEJRVGhDTEVOQlFVTkJMRU5CUVVRc1EwRkJka01zUTBGQmFFSXNSVUZCTkVRc1JVRkJOVVFzUTBGQlVEdEJRVUYxUlN3eVEwRkJPVllzUlVGQlVpeERRVUYzVjBNc1JVRkJSWEZETEU5QlFVWXNSMEZCVlRkQ0xFTkJRVlk3UVVGQldTeGxRVUU1ZVVrc1JVRkJLM2xKTEZWQlFWTlVMRU5CUVZRc1JVRkJWME1zUTBGQldDeEZRVUZoVVN4RFFVRmlMRVZCUVdVN1FVRkJRenRCUVVGaFR5eHRRMEZCVDBNc1kwRkJVQ3hEUVVGelFtaENMRU5CUVhSQ0xFVkJRWGRDTEZsQlFYaENMRVZCUVhGRExFVkJRVU52UXl4UFFVRk5MRU5CUVVNc1EwRkJVaXhGUVVGeVF5eEhRVUZwUkhCRExFVkJRVVV3UkN4TFFVRkdMRWRCUVZFc1dVRkJWVHRCUVVGRExHZEVRVUZOYmtRc1NVRkJSVU1zUlVGQlJTeERRVUZHTEVOQlFWSTdRVUZCUVN4blJFRkJZVlFzU1VGQlJWRXNSVUZCUldsRUxFOUJRVVlzUlVGQlppeERRVUV5UWl4UFFVRlBla1FzUlVGQlJYVkZMRXRCUVVZc1IwRkJVU3hGUVVGU0xFVkJRVmQyUlN4RFFVRnNRanRCUVVGdlFpdzJRa0ZCYmtnc1JVRkJiMGhETEVWQlFVVXlSQ3hSUVVGR0xFZEJRVmNzV1VGQlZUdEJRVUZETEdkRVFVRk5ia0lzU1VGQlJXaERMRVZCUVVVc1EwRkJSaXhEUVVGU0xFTkJRV0VzVDBGQlQxUXNTMEZCUnp0QlFVRkRMRFJFUVVGSExFTkJRVU1zUzBGQlMzVkZMRXRCUVU0c1NVRkJZU3hMUVVGSExFdEJRVXRCTEV0QlFVd3NRMEZCVnpORExFMUJRVGxDTEVWQlFYRkRMRTFCUVUwc1NVRkJTVmtzUlVGQlJTdERMRmxCUVU0c1EwRkJiVUlzYVVSQlFXNUNMRU5CUVU0c1EwRkJORVVzU1VGQlNUVkZMRWxCUVVVc1EwRkJUanRCUVVGQkxEUkVRVUZSTEVWQlFVTjFRaXhUUVVGUlVTeERRVUZVTEVWQlFWZGxMRk5CUVZGNFJDeERRVUZ1UWl4RlFVRnhRblZFTEZGQlFVODVReXhEUVVFMVFpeExRVUVyUWl0Q0xFVkJRVVUwUWl4TlFVRkdMRVZCUVhaRExFTkJRV3RFTEU5QlFVc3hSQ3hKUVVGRkxFdEJRVXMwUkN4TFFVRk1MRU5CUVZjelF5eE5RVUZzUWl4SFFVRXdRanRCUVVGRExEUkZRVUZMTEVOQlFVTnVRaXhEUVVGRUxFZEJRVWxVTEVOQlFVb3NTVUZCVHl4TFFVRkxkVVVzUzBGQlRDeERRVUZYTlVRc1EwRkJXQ3hEUVVGYUxFTkJRVEJDSzBJc1NVRkJSVUVzUlVGQlJXcERMRU5CUVVZc1JVRkJTeXhIUVVGSFZDeERRVUZTTEVOQlFVWXNSVUZCWVZjc1IwRkJZanRCUVVGcFFpeG5SVUZCVDFZc1JVRkJSVVFzUTBGQlJpeEhRVUZMTUVNc1EwRkJXanRCUVVGakxESkRRVUZzVVR0QlFVRnRVU3cyUWtGQk1Wb3NRMEZCTWxvc1NVRkJTVVlzU1VGQlJTOUNMRVZCUVVVc1EwRkJSaXhEUVVGT08wRkJRVmNzWlVGQmJIWktMRVZCUVcxMlNpeFZRVUZUVkN4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllXTXNRMEZCWWl4RlFVRmxPMEZCUVVNN1FVRkJZU3h4UTBGQlUwNHNRMEZCVkN4RFFVRlhSQ3hEUVVGWUxFVkJRV0ZGTEVOQlFXSXNSVUZCWlR0QlFVRkRMR2RFUVVGTk5rSXNTVUZCUlhoQ0xFVkJRVVVzUTBGQlJpeERRVUZTTEVOQlFXRXNUMEZCVHl4TFFVRkxkMFFzUzBGQlRDeEhRVUZYTEV0QlFVdEVMRTlCUVV3c1EwRkJZU3hQUVVGaUxFVkJRWEZDTEVOQlFVTXNSMEZCUnpORExGTkJRVW9zUTBGQmNrSXNRMEZCV0N4SlFVRnBSQ3hqUVVGWkxFOUJRVTl1UWl4RFFVRnVRaXhMUVVGMVFrVXNTVUZCUlVZc1EwRkJSaXhGUVVGSlFTeEpRVUZGTEV0QlFVdHpRaXhIUVVGTUxFTkJRVk5KTEU5QlFYUkRMRWRCUVN0RFN5eEZRVUZGYTBJc1QwRkJSaXhEUVVGVmFrUXNRMEZCVml4RlFVRmhkME1zVFVGQllpeERRVUZ2UW5SRExFTkJRWEJDTEVWQlFYVkNiMFFzU1VGQmRrSXNRMEZCTkVJM1JDeExRVUZITEZGQlFVMUJMRVZCUVVVc1EwRkJSaXhEUVVGT0xFZEJRVmNzUlVGQlEyZEhMRTFCUVVzc1MwRkJTeXhEUVVGWUxFVkJRV0ZETEU5QlFVMHNRMEZCUXl4RFFVRndRaXhGUVVGWUxFZEJRV3RETEVWQlFVTkVMRTFCUVV0b1J5eEZRVUZGTEVOQlFVWXNRMEZCVGl4RlFVRlhhVWNzVDBGQlRXcEhMRVZCUVVWclJ5eFBRVUZHTEVOQlFWVnNSeXhGUVVGRkxFTkJRVVlzUTBGQlZpeERRVUZxUWl4RlFVRnFSU3hEUVVGb1J5eERRVUZRTzBGQlFUUk5MSE5EUVVGVFR5eERRVUZVTEVOQlFWY3JRaXhEUVVGWUxFVkJRV0UzUWl4RFFVRmlMRVZCUVdWRExFTkJRV1lzUlVGQmFVSTdRVUZCUXl4blJFRkJUVFpDTEVsQlFVVjZRaXhGUVVGRkxFTkJRVVlzUTBGQlVpeERRVUZoTEU5QlFVOHNTMEZCUzNkRUxFdEJRVXdzUjBGQlZ5eExRVUZMUkN4UFFVRk1MRU5CUVdFc1VVRkJZaXhGUVVGelFpeERRVUZETEVkQlFVY3pReXhUUVVGS0xFTkJRWFJDTEVOQlFWZ3NTVUZCYTBRc1kwRkJXU3hQUVVGUFdTeERRVUZ1UWl4SlFVRnpRalZDTEVsQlFVVkVMRU5CUVVZc1JVRkJTVUVzU1VGQlJUWkNMRU5CUVU0c1JVRkJVVUVzU1VGQlJTeExRVUZMVkN4SFFVRk1MRWRCUVZNc1MwRkJTMEVzUjBGQlRDeERRVUZUU1N4UFFVRnNRaXhIUVVFd1FpeEpRVUV4UkN4SlFVRm5SVXNzU1VGQlJVTXNSVUZCUldsQ0xFOUJRVVlzUTBGQlZXeENMRU5CUVZZc1JVRkJXU3hKUVVGYUxFTkJRV3hGTEVWQlFXOUdMRWxCUVVsRExFTkJRVW9zUTBGQlRTeERRVUZEZGtNc1EwRkJSQ3hGUVVGSFR5eERRVUZJTEV0QlFVOHJRaXhGUVVGRmRVSXNTVUZCUml4RFFVRlBja1FzUzBGQlJ6dEJRVUZETERoRVFVRk5hVU1zU1VGQlJXcERMRVZCUVVWeFJpeFBRVUZQUXl4UlFVRlVMRWRCUVZJc1EwRkJOa0lzU1VGQlNYaEVMRWxCUVVVc1EwRkJUaXhEUVVGUkxFMUJRVTFKTEVsQlFVVklMRXRCUVVjN1FVRkJReXcwUlVGQlRYaERMRWxCUVVVd1F5eEZRVUZGTUVRc1NVRkJSaXhGUVVGU0xFTkJRV2xDTEU5QlFVOXdSeXhGUVVGRmNVY3NTVUZCUml4SFFVRlBjRWNzUlVGQlJYVkRMRU5CUVVZc1EwRkJVQ3hIUVVGWkxFdEJRVXRNTEZGQlFWRlRMRWRCUVZJc1EwRkJXU3hEUVVGRFNpeERRVUZFTEVWQlFVZDRReXhGUVVGRmNVTXNTMEZCVEN4RFFVRmFMRVZCUVhsQ2VVSXNTVUZCZWtJc1EwRkJPRUlzUTBGQlF5eERRVUZETjBRc1EwRkJSQ3hGUVVGSFJDeERRVUZJTEVOQlFVUXNTMEZCVXpKRExFVkJRVVZxUXl4RlFVRkZWQ3hEUVVGR0xFVkJRVWxFTEVOQlFVb3NSVUZCVFhWRExFZEJRVTRzUTBGQlJpeERRVUYyUXl4RlFVRnpSSGRDTEV0QlFYUkVMRU5CUVRSRWRrUXNRMEZCTlVRc1EwRkJlRUk3UVVGQmRVWXNlVVJCUVhCSUxFTkJRWEZJYlVNc1JVRkJSV2hETEVOQlFVWTdRVUZCU3l3eVEwRkJNVXNzUTBGQllpeERRVUYwU1N4RFFVRlFPMEZCUVhkVkxHOURRVUZQVFN4alFVRlFMRU5CUVhOQ2FFSXNRMEZCZEVJc1JVRkJkMElzV1VGQmVFSXNSVUZCY1VNc1JVRkJRMjlETEU5QlFVMHNRMEZCUXl4RFFVRlNMRVZCUVhKRExFZEJRV2xFY0VNc1JVRkJSV2RFTEUxQlFVWXNSMEZCVTJoRUxFVkJRVVVyUXl4TlFVRkdMRWRCUVZNdlF5eEZRVUZGT0VNc1UwRkJSaXhIUVVGWk9VTXNSVUZCUlRaRExFbEJRVVlzUjBGQlR6ZERMRVZCUVVVMFF5eEhRVUZHTEVkQlFVMHNTMEZCU3l4RFFVRnFSeXhEUVVGdFJ5eEpRVUZKZVVRc1NVRkJSWFpHTEVWQlFVVXNRMEZCUml4RFFVRk9PMEZCUVVFc1owTkJRVmQzUml4SlFVRkZlRVlzUlVGQlJTeERRVUZHTEVOQlFXSXNRMEZCYTBKa0xFVkJRVVUwUXl4SFFVRkdMRWRCUVUwc1ZVRkJVekpFTEVOQlFWUXNSVUZCVnk5RkxFTkJRVmdzUlVGQllUdEJRVUZETEdkRVFVRk5aMFlzU1VGQlJURkdMRVZCUVVVc1EwRkJSaXhEUVVGU0xFTkJRV0VzU1VGQlJ5eExRVUZMZDBRc1MwRkJVaXhGUVVGakxFOUJRVThzUzBGQlMwUXNUMEZCVEN4RFFVRmhMRXRCUVdJc1JVRkJiVUlzUTBGQlF5eEhRVUZITTBNc1UwRkJTaXhEUVVGdVFpeERRVUZRTEVOQlFUQkRMRTFCUVVsQkxGVkJRVlZETEUxQlFXUXNTVUZCYzBJc1NVRkJkRUlzU1VGQk5FSXNTMEZCUzBVc1IwRkJha01zUzBGQmRVTk1MRWxCUVVVclJTeERRVUZHTEVWQlFVbEJMRWxCUVVVc1VVRkJUU3hMUVVGTE1VVXNSMEZCV0N4SlFVRm5RaXhMUVVGTFFTeEhRVUZNTEVOQlFWTkpMRTlCUVhSRkxFVkJRU3RGTEVsQlFVbDNSU3hKUVVGRkxFTkJRVU1zUTBGQlVDeERRVUZUTEUxQlFVMXFSeXhKUVVGRmEwY3NTMEZCUzBNc1IwRkJUQ3hEUVVGVExFTkJRVlFzUlVGQlYwUXNTMEZCUzBVc1IwRkJUQ3hEUVVGVExGRkJRVTBzUzBGQlN5OUZMRWRCUVZnc1NVRkJaMElzUzBGQlMwRXNSMEZCVEN4RFFVRlRUU3huUWtGQmVrSXNTVUZCTWtNc1EwRkJjRVFzUlVGQmMwUXNRMEZCZEVRc1EwRkJXQ3hEUVVGU08wRkJRVUVzWjBSQlFUWkZNVUlzU1VGQlJTeFJRVUZOTEV0QlFVdHZRaXhIUVVGWUxFbEJRV2RDTEV0QlFVdEJMRWRCUVV3c1EwRkJVMGtzVDBGQmVrSXNSMEZCYVVNc1MwRkJTMG9zUjBGQlRDeERRVUZUU1N4UFFVRXhReXhIUVVGclJFTXNVVUZCVVhOQ0xFOUJRVklzUTBGQlowSXJReXhEUVVGb1FpeERRVUZxU1N4RFFVRnZTaXhKUVVGSmFrVXNTVUZCUlN4RFFVRk9PMEZCUVVFc09FTkJRVkZpTEVsQlFVVXNSVUZCVmp0QlFVRkJMRGhEUVVGaFpTeEpRVUZGTEVOQlFXWXNRMEZCYVVJc1RVRkJUWEZGTEVsQlFVVXNSVUZCVWp0QlFVRkJMR2RFUVVGWGNFVXNTVUZCUlN4SlFVRkpjVVVzUjBGQlNpeEZRVUZpTzBGQlFVRXNaMFJCUVhGQ2NFVXNTVUZCUlN4TlFVRkpSQ3hGUVVGRmMwVXNTVUZCUml4SlFVRlJka2NzUTBGQmJrTTdRVUZCUVN4blJFRkJjVU5ITEVsQlFVVXNUVUZCU1dNc1JVRkJSVVVzVFVGQlJpeEhRVUZUTEV0QlFVdEZMRWRCUVV3c1EwRkJVME1zVFVGQlZDeERRVUZuUWtNc1MwRkJla0lzU1VGQlowTlRMRXRCUVVjclJDeEZRVUZGTlVVc1RVRkJja01zU1VGQk5rTTRSU3hEUVVGNFJqdEJRVUZCTEdkRVFVRXdSalZHTEVsQlFVVk1MRXRCUVVkVUxFMUJRVWt3UXl4RlFVRkZkVVVzVFVGQlJpeERRVUZUZUVjc1EwRkJWQ3hIUVVGWmNVY3NSVUZCUlhKSExFTkJRVVlzU1VGQlMxUXNRMEZCYWtJc1JVRkJiVUpCTEVOQlFYWkNMRU5CUVM5R0xFTkJRWGxJTEU5QlFVOTVSeXhGUVVGRmFFUXNUMEZCUml4RFFVRlZMRWxCUVVsMFFpeFBRVUZLTEVOQlFWa3NRMEZCUTJ4RExFTkJRVVFzUlVGQlIwOHNRMEZCU0N4TFFVRlBPMEZCUVVNc09FUkJRVTFuUXl4SlFVRkZMMElzUzBGQlIybEhMRWxCUVVVc1NVRkJSaXhIUVVGUExFMUJRVXRCTEVsQlFVVXNRMEZCUXl4RFFVRklMRVZCUVV0NlJ5eEZRVUZGVVN4RFFVRkdMRU5CUVZZc1EwRkJiRUk3UVVGQlFTdzRSRUZCYTBORkxFbEJRVVZXTEV0QlFVZDVSeXhKUVVGRkxFbEJRVVlzUjBGQlR5eE5RVUZMUVN4SlFVRkZMRU5CUVVNc1EwRkJTQ3hGUVVGTGJFY3NSVUZCUlZBc1EwRkJSaXhEUVVGV0xFTkJRVGxETEVOQlFUaEVVeXhGUVVGRmIwUXNTVUZCUml4RFFVRlBPVVFzUzBGQlJ6dEJRVUZETERCRlFVRkhkMGNzU1VGQlJTeERRVUZETEVkQlFVZDRSeXhEUVVGS0xFTkJRVVlzUlVGQlV5eERRVUZETEVOQlFVTXNSMEZCUlhOSExFVkJRVVZZTEZsQlFVd3NSVUZCYlVJelJpeERRVUZ1UWl4RFFVRmlMRVZCUVcxRExFOUJRVTlSTEVWQlFVVXNTVUZCU1N0R0xFVkJRVVZvUWl4WlFVRk9MRU5CUVcxQ0xIbERRVUZ1UWl4RFFVRkdMRU5CUVZBc1EwRkJkMFVzVFVGQlRYUkdMRWxCUVVVc1RVRkJTVHRCUVVGRExIZEdRVUZKUVN4SlFVRkZMRWxCUVU0c1EwRkJWeXhQUVVGUGVVSXNSVUZCUlVVc1RVRkJSaXhIUVVGVExFdEJRVXRGTEVkQlFVd3NRMEZCVTBNc1RVRkJWQ3hEUVVGblFrTXNTMEZCZWtJc1MwRkJhVU12UWl4SlFVRkZWU3hEUVVGdVF5eEhRVUZ6UTBNc1VVRkJUVmdzU1VGQlJYVkRMRU5CUVZJc1EwRkJkRU1zUlVGQmFVUXNRMEZCUXl4RFFVRkRka01zUTBGQlJpeExRVUZOTEVOQlFVTXNRMEZCUTJ0RExGRkJRVkZUTEVkQlFWSXNRMEZCV1d0RkxFTkJRVm9zUlVGQlpXaEVMRWxCUVdZc1EwRkJiMElzVFVGQlNUZEVMRVZCUVVVMlJ5eERRVUZHTEVOQlFYaENMRU5CUVVZc1NVRkJhVU1zUTBGQlF5eERRVUY0UXl4RFFVRjRSRHRCUVVGdFJ5eDFSVUZCTTBnN1FVRkJRU3cwUlVGQk5FaDZSaXhKUVVGRldpeExRVUZITzBGQlFVTXNkMFpCUVVjc1EwRkJRMmxITEVOQlFVb3NSVUZCVFN4UFFVRlBla2NzVDBGQlN6WkhMRVZCUVVWeVJTeERRVUZHTEVOQlFVd3NTVUZCVnpGQ0xFVkJRVVV3UWl4RFFVRkdMRU5CUVZnc1JVRkJaMEpvUXl4RFFVRjJRanRCUVVGNVFpeDFSVUZCYWtzN1FVRkJRU3cwUlVGQmEwdE5MRWxCUVVWUUxFdEJRVWRyUnl4SlFVRkZMRWxCUVVZc1IwRkJUeXhEUVVGRGFrVXNTMEZCU1VVc1IwRkJUQ3hKUVVGVmRVVXNWMEZCVnl4TlFVRkpia2NzUlVGQlJWQXNRMEZCUml4RFFVRm1MRVZCUVc5Q0xFTkJRWEJDTEVOQlFWWXNSMEZCYVVOelJ5eEZRVUZGZEVjc1EwRkJSaXhKUVVGTGMwY3NSVUZCUlhSSExFTkJRVVlzUTBGQlRDeEpRVUZYYTBNc1JVRkJSWGxGTEVkQlFVWXNRMEZCVFROSExFTkJRVTRzUjBGQlUzTkhMRVZCUVVWMFJ5eERRVUZHTEVsQlFVc3lRaXhSUVVGUmMwSXNUMEZCVWl4RFFVRm5RaXRETEVWQlFVVm9SeXhEUVVGR0xFTkJRV2hDTEVWQlFYTkNjMFFzU1VGQmRFSXNRMEZCTWtJNVJDeExRVUZIZVVJc1JVRkJSWHBDTEVOQlFVWXNSVUZCU1ZFc1EwRkJTaXhGUVVGTlowY3NRMEZCVGl4RFFVRTVRaXhGUVVGM1F6RkRMRWxCUVhoRExFTkJRVFpETjBRc1MwRkJSMkVzUlVGQlJVNHNRMEZCUml4RlFVRkxVQ3hEUVVGTUxFTkJRV2hFTEVWQlFYbEVOa1FzU1VGQmVrUXNRMEZCT0VSNlF5eERRVUU1UkN4RlFVRnBSVEJETEV0QlFXcEZMRU5CUVhWRmRFUXNTMEZCUnp0QlFVRkRMSGRHUVVGSExFdEJRVXR4UWl4SFFVRk1MRU5CUVZORExFMUJRVlFzUTBGQlowSkZMRXRCUVdoQ0xFbEJRWGRDVUN4RlFVRkZPRU1zU1VGQlJpeERRVUZQTDBRc1EwRkJVQ3hEUVVGNFFpeEZRVUZyUTJsQ0xFVkJRVVZGTEUxQlFVWXNSMEZCVXl4TFFVRkxSU3hIUVVGTUxFTkJRVk5ETEUxQlFWUXNRMEZCWjBKRExFdEJRVGxFTEVWQlFXOUZPMEZCUVVNc2QwZEJRVTFvUXl4SlFVRkZMRTFCUVVrd1FpeEZRVUZGUlN4TlFVRk9MRWRCUVdGdVFpeERRVUZpTEVkQlFXVXNTVUZCU1RoR0xFVkJRVVY2UWl4bFFVRk9MRU5CUVhWQ0xHVkJRV01zUzBGQlMyaEVMRWRCUVV3c1EwRkJVME1zVFVGQlZDeERRVUZuUWtNc1MwRkJUVHR2UWtGRGRuWlBlRUlzUTBGQlJTeFhRVUZWTEV0QlFVdHpRaXhIUVVGTUxFTkJRVk5ETEUxQlFWUXNRMEZCWjBKRkxFdEJRVTBzUlVGRU1IQlBMRVZCUTNod1R5eEZRVUZEUml4UlFVRlBUQ3hEUVVGU0xFVkJRVlV3Uml4VFFVRlJUaXhEUVVGc1FpeEZRVUZ2UWs4c1MwRkJTU3hKUVVGNFFpeEZRVVIzY0U4c1EwRkJka0lzUTBGRGJHMVBiRVlzVVVGQlVYTkNMRTlCUVZJc1EwRkJaMEl6UXl4RlFVRkZUaXhEUVVGR0xFVkJRVXRETEVOQlFVd3NRMEZCYUVJc1JVRkJlVUp4UkN4SlFVRjZRaXhEUVVFNFFpeE5RVUZKYmtRc1JVRkJSVmdzUTBGQlJpeERRVUZzUXp0QlFVRjNReXh4UmtGRWNTOU9MRTFCUTJndlRpeFBRVUZQYlVNc1VVRkJVWE5DTEU5QlFWSXNSMEZCYTBKTExFbEJRV3hDTEVOQlFYVkNMRTFCUVVsb1JDeEZRVUZGVGl4RFFVRkdMRVZCUVV0RExFTkJRVXdzUTBGQk0wSXNSVUZCYjBOeFJDeEpRVUZ3UXl4RFFVRjVRM3BETEVOQlFYcERMRU5CUVZBN1FVRkJiVVFzZFVWQlJHc3pUaXhEUVVGa0xFVkJRMnd5VG5sR0xFVkJRVVYwUnl4RFFVRkdMRU5CUkhVeFRpeERRVUV2VFN4RFFVTnNiMDRzVDBGQlN5dENMRWxCUVVVNVFpeERRVUZHTEVsQlFVczRRaXhKUVVGRmFVVXNSVUZCUlRWRkxFMUJRV1FzUjBGQmMwSmlMRVZCUVVWM1FpeEhRVUZHTzBGQlFVOHNlVVJCUkNzclRUdEJRVU0zSzAwc01rTkJSREkxVFN4RFFVRldMRU5CUVZBN1FVRkRkalJOTERaQ1FVUjNOMHdzUlVGRGRqZE1kRU1zUlVGQlJUWkRMRWxCUVVZc1IwRkJUeXhWUVVGVE4wTXNRMEZCVkN4RlFVRlhPMEZCUVVNc2FVUkJRVTlSTEVWQlFVVkpMRWxCUVVZc1EwRkJUeXhKUVVGUUxFVkJRVmxhTEVOQlFWb3NSVUZCWlRaRUxFbEJRV1lzUTBGQmIwSXNRMEZCUXl4RlFVRkRiVU1zVFVGQlMyaEhMRU5CUVU0c1JVRkJSQ3hMUVVGWlFTeERRVUZvUXl4RFFVRlFPMEZCUVRCRExEWkNRVVF3TTB3c1JVRkRlak5NUVN4RlFVRkZPRU1zVTBGQlJpeEhRVUZaTEZWQlFWTTVReXhEUVVGVUxFVkJRVmM3UVVGQlF5eHBSRUZCVDFFc1JVRkJSVWtzU1VGQlJpeERRVUZQTEVsQlFWQXNSVUZCV1Zvc1EwRkJXaXhGUVVGbE5rUXNTVUZCWml4RFFVRnZRaXhEUVVGRExFVkJRVU52UXl4UFFVRk5ha2NzUTBGQlVDeEZRVUZFTEV0QlFXRkJMRU5CUVdwRExFTkJRVkE3UVVGQk1rTXNOa0pCUkhONlRDeEZRVU55ZWt4QkxFVkJRVVVyUXl4TlFVRkdMRWRCUVZNc1ZVRkJVM1pETEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaE8wRkJRVU1zYVVSQlFVOHNTMEZCU3paRUxFdEJRVXdzUjBGQlZ5eExRVUZMUkN4UFFVRk1MRU5CUVdFc1VVRkJZaXhGUVVGelFpeERRVUZETEVkQlFVY3pReXhUUVVGS0xFTkJRWFJDTEVOQlFWZ3NTVUZCYTBRc1kwRkJXU3hQUVVGUGJFSXNRMEZCYmtJc1MwRkJkVUpETEVsQlFVVkVMRU5CUVVZc1JVRkJTVUVzU1VGQlJTeExRVUZMY1VJc1IwRkJUQ3hEUVVGVFNTeFBRVUYwUXl4SFFVRXJRekZDTEVWQlFVVkRMRU5CUVVZc1JVRkJTU3hEUVVGRFJDeERRVUZFTEVWQlFVZFNMRU5CUVVnc1MwRkJUMjFETEZGQlFWRnpRaXhQUVVGU0xFTkJRV2RDTDBNc1JVRkJSVllzUTBGQlJpeERRVUZvUWl4RlFVRnpRamhFTEVsQlFYUkNMRU5CUVRKQ2NrUXNTMEZCUjBFc1NVRkJSVVFzUlVGQlJYZEdMRTFCUVVZc1EwRkJVeXhEUVVGRGFFY3NRMEZCUkN4RFFVRlVMRU5CUVVZc1IwRkJaMEpSTEVOQlFUbERMRU5CUVZnc1JVRkJORVFzUlVGQk5VUXNRMEZCYWtjc1EwRkJVRHRCUVVGNVN5dzJRa0ZFY1c1TUxFVkJRM0J1VEZBc1JVRkJSV2RFTEUxQlFVWXNSMEZCVTNwRExFTkJSREp0VER0QlFVTjZiVXdzWlVGRWIwb3NSVUZEYmtvc1ZVRkJVMUlzUTBGQlZDeEZRVUZYUXl4RFFVRllMRVZCUVdGUkxFTkJRV0lzUlVGQlpUdEJRVUZETzBGQlFXRlBMRzFEUVVGUFF5eGpRVUZRTEVOQlFYTkNhRUlzUTBGQmRFSXNSVUZCZDBJc1dVRkJlRUlzUlVGQmNVTXNSVUZCUTI5RExFOUJRVTBzUTBGQlF5eERRVUZTTEVWQlFYSkRMRWRCUVdsRWNFTXNSVUZCUldsRUxFMUJRVVlzUjBGQlV5eExRVUZMTEVOQlFTOUVMRU5CUVdsRkxFbEJRVWt4UXl4SlFVRkZReXhGUVVGRkxFTkJRVVlzUTBGQlRpeERRVUZYVWl4RlFVRkZhVVFzVFVGQlJpeEhRVUZUTEZWQlFWTjRReXhEUVVGVUxFVkJRVmNzUjBGQlIxWXNRMEZCWkN4RlFVRm5RanRCUVVGRExEaERRVUZITEZsQlFWVXNUMEZCVDBFc1EwRkJha0lzUzBGQmNVSkJMRWxCUVVVc1EwRkJRMEVzUTBGQlJDeERRVUYyUWl4SFFVRTBRaXhEUVVGRFZTeEZRVUZGUVN4RlFVRkZORWNzWjBKQlFVWXNSMEZCYlVJc2EwSkJRVzVDTEVkQlFYTkRMRWxCUVhoRExFTkJRV2hETEVWQlFUaEZMRTFCUVUwc1NVRkJTVGxITEVWQlFVVXJSU3haUVVGT0xFTkJRVzFDTERoQ1FVRnVRaXhEUVVGT0xFTkJRWGxFTEUxQlFVMW9SQ3hKUVVGRkxFdEJRVXR4UWl4UlFVRk1MRVZCUVZJc1EwRkJkMElzVDBGQlR5eExRVUZMT1VJc1IwRkJUQ3hEUVVGVGVVWXNUMEZCVkN4SFFVRnBRaXhOUVVGSkxFdEJRVXQ2Uml4SFFVRk1MRU5CUVZNd1JpeGpRVUZVTEVOQlFYZENNMFVzUjBGQmVFSXNRMEZCTkVJMVF5eExRVUZIUVN4UFFVRkxMRU5CUVVNc1EwRkJja01zUlVGQmQwTXJReXhOUVVGNFF5eERRVUVyUXk5RExFdEJRVWRCTEVOQlFXeEVMRVZCUVhGRU1rSXNUVUZCTVVVc1JVRkJhVVlzUzBGQlMwVXNSMEZCVEN4RFFVRlRNRVlzWTBGQlZDeEhRVUYzUW5oSUxFVkJRVVUyUXl4SFFVRkdMRU5CUVUwM1F5eE5RVUZKVlN4RlFVRkZRU3hGUVVGRk5FY3NaMEpCUVVZc1IwRkJiVUlzYTBKQlFXNUNMRWRCUVhORExFbEJRWGhETEVWQlFUaERkRWdzUTBGQk9VTXNSVUZCWjBSMVF5eERRVUZvUkN4SFFVRnRSQ3hOUVVGSk4wSXNSVUZCUlVFc1JVRkJSU3RITEcxQ1FVRkdMRWRCUVhOQ0xIRkNRVUYwUWl4SFFVRTBReXhMUVVFNVF5eEZRVUZ4UkhwSUxFTkJRWEpFTEVWQlFYVkVkVU1zUTBGQmRrUXNRMEZCTTBRc1EwRkJUaXhEUVVGNlJ5eEZRVUZ6VHl4SlFVRTNUenRCUVVGclVDdzJRa0ZCTTJFN1FVRkJOR0VzWlVGRWJGa3NSVUZEYlZrc1ZVRkJVM1pETEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaGMwTXNRMEZCWWl4RlFVRmxPMEZCUVVNN1FVRkJZU3h4UTBGQlV6ZENMRU5CUVZRc1EwRkJWemhDTEVsQlFVVjJReXhMUVVGSFFTeERRVUZvUWl4RlFVRnJRbmRETEVsQlFVVjRReXhMUVVGSFFTeERRVUYyUWl4RlFVRjVRa0VzU1VGQlJTeE5RVUZKTEVsQlFTOUNMRVZCUVc5RFVTeEpRVUZGTEVOQlFVTXNRMEZCZGtNc1JVRkJlVU03UVVGQlF5eG5SRUZCVFZRc1NVRkJSWFZETEVWQlFVVXNRMEZCUml4RFFVRlNMRU5CUVdFc1QwRkJUeTlDTEV0QlFVZFNMRVZCUVVWNVJDeFBRVUZHTEVOQlFWVnFRaXhGUVVGRmFFTXNRMEZCUml4RFFVRldMRVZCUVdkQ2MwUXNTVUZCYUVJc1EwRkJjVUp5UkN4TFFVRkhRU3hKUVVGRlowTXNSVUZCUldwRExFTkJRVVlzUTBGQlJpeEhRVUZQVUN4RlFVRkZUeXhEUVVGR0xFTkJRUzlDTEVWQlFYRkRjMFFzU1VGQmNrTXNRMEZCTUVNM1JDeExRVUZIVVN4SlFVRkZSQ3hEUVVGR0xFZEJRVWxRTEVOQlFXcEVMRU5CUVZZN1FVRkJPRVFzYjBOQlFVOW5RaXhqUVVGUUxFTkJRWE5DYUVJc1EwRkJkRUlzUlVGQmQwSXNXVUZCZUVJc1JVRkJjVU1zUlVGQlEyOURMRTlCUVUwc1EwRkJReXhEUVVGU0xFVkJRWEpETEVkQlFXbEVjRU1zUlVGQlJXOUVMRTlCUVVZc1IwRkJWWEJFTEVWQlFVVnJSQ3hMUVVGR0xFZEJRVkZzUkN4RlFVRkZiVVFzVFVGQlJpeEhRVUZUTEV0QlFVc3NRMEZCYWtZc1EwRkJiVVlzU1VGQlNUVkRMRWxCUVVVclFpeEZRVUZGTEVOQlFVWXNRMEZCVGl4RFFVRlhkRU1zUlVGQlJXMUVMRTFCUVVZc1IwRkJVeXhWUVVGVFlpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVU1zUTBGQllpeEZRVUZsTzBGQlFVTXNhVVJCUVU4c1MwRkJTemhDTEV0QlFVd3NSMEZCVnl4TFFVRkxSQ3hQUVVGTUxFTkJRV0VzVVVGQllpeEZRVUZ6UWl4RFFVRkRMRWRCUVVjelF5eFRRVUZLTEVOQlFYUkNMRU5CUVZnc1NVRkJhMFFzVFVGQlNVRXNWVUZCVlVNc1RVRkJaQ3hMUVVGMVFsa3NTVUZCUlVRc1EwRkJSaXhGUVVGSlFTeEpRVUZGZEVNc1MwRkJSMEVzUTBGQmFFTXNSMEZCYlVNc1EwRkJReXhIUVVGRlR5eEZRVUZGYTBZc1lVRkJUQ3hGUVVGdlFpeEpRVUZ3UWl4SlFVRXdRaXhMUVVGTE5VSXNTVUZCVEN4RFFVRlZPVVFzUzBGQlIxVXNSVUZCUlRaQ0xFTkJRVVlzUlVGQlNVTXNRMEZCU2l4RlFVRk5ReXhEUVVGT0xFVkJRVk42UXl4RFFVRlVMRU5CUVdJc1EwRkJNVUlzUjBGQmIwUlZMRVZCUVVVMlFpeERRVUZHTEVWQlFVbERMRU5CUVVvc1JVRkJUVU1zUTBGQlRpeERRVUY2U1N4RFFVRlFPMEZCUVRCS0xEWkNRVUZ1VEN4RlFVRnZUSGhETEVWQlFVVnJSQ3hMUVVGR0xFZEJRVkVzVlVGQlUxb3NRMEZCVkN4RlFVRlhReXhEUVVGWUxFVkJRV0ZETEVOQlFXSXNSVUZCWlR0QlFVRkRMR2xFUVVGUExFdEJRVXM0UWl4TFFVRk1MRWRCUVZjc1MwRkJTMFFzVDBGQlRDeERRVUZoTEU5QlFXSXNSVUZCY1VJc1EwRkJReXhIUVVGSE0wTXNVMEZCU2l4RFFVRnlRaXhEUVVGWUxFbEJRV2xFTEUxQlFVbEJMRlZCUVZWRExFMUJRV1FzUzBGQmRVSlpMRWxCUVVWRUxFTkJRVVlzUlVGQlNVRXNTVUZCUlhSRExFdEJRVWRCTEVOQlFXaERMRWRCUVcxRExFTkJRVU1zUjBGQlJVOHNSVUZCUld0R0xHRkJRVXdzUlVGQmIwSXNTVUZCY0VJc1NVRkJNRUlzUzBGQlN6VkNMRWxCUVV3c1EwRkJWVGxFTEV0QlFVZFZMRVZCUVVVMlFpeERRVUZHTEVWQlFVbERMRU5CUVVvc1JVRkJUVU1zUTBGQlRpeEZRVUZSTEVOQlFVTXNRMEZCVkN4RlFVRlpla01zUTBGQldpeERRVUZpTEVOQlFURkNMRWRCUVhWRVZTeEZRVUZGTmtJc1EwRkJSaXhGUVVGSlF5eERRVUZLTEVWQlFVMURMRU5CUVU0c1JVRkJVU3hEUVVGRExFTkJRVlFzUTBGQk0wa3NRMEZCVUR0QlFVRXJTaXcyUWtGQk0xY3NSVUZCTkZkNFF5eEZRVUZGYjBRc1QwRkJSaXhIUVVGVk0wTXNRMEZCZEZnN1FVRkJkMWdzWlVGRU15dENMRVZCUXpRclFpeFZRVUZUVml4RFFVRlVMRVZCUVZkRExFTkJRVmdzUlVGQllWRXNRMEZCWWl4RlFVRmxPMEZCUVVNN1FVRkJZU3h4UTBGQlUwUXNRMEZCVkN4RFFVRlhRU3hEUVVGWUxFVkJRV0U3UVVGQlF5eG5SRUZCVFdkRExFbEJRVVY0UWl4UFFVRlBiVVFzYlVKQlFWQXNRMEZCTWtJelJDeERRVUV6UWl4RFFVRlNPMEZCUVVFc1owUkJRWE5EVWl4SlFVRkZkME1zUlVGQlJVc3NSMEZCUml4RFFVRk5OME1zUzBGQlIxRXNSVUZCUlZJc1EwRkJSaXhEUVVGVUxFTkJRWGhETEVOQlFYVkVMRTlCUVU5dFF5eFJRVUZSVXl4SFFVRlNMRU5CUVZrMVF5eERRVUZhTEVWQlFXVTRSQ3hKUVVGbUxFTkJRVzlDTjBRc1MwRkJSMEVzUlVGQlJXZEVMRTFCUVVZc1EwRkJVeXhEUVVGRGFFUXNRMEZCUkN4RlFVRkhSQ3hEUVVGSUxFVkJRVXRUTEVOQlFVd3NTMEZCVXp0QlFVRkRMRFJFUVVGSlJDeERRVUZLTEVOQlFVMHNUVUZCVFdsRExFbEJRVVZFTEVWQlFVVXZRaXhEUVVGR0xFTkJRVklzUTBGQllTeFBRVUZQVHl4UFFVRlBNRWNzVFVGQlVDeEZRVUZsYkVnc1NVRkJSU3hGUVVGR0xFVkJRVXRCTEVWQlFVVnBReXhEUVVGR0xFbEJRVXQ2UXl4RFFVRldMRVZCUVZsUkxFTkJRVE5DTEVkQlFUaENVQ3hEUVVFNVFpeERRVUZRTzBGQlFYZERMREpEUVVFNVJTeEZRVUVyUlN4RlFVRXZSU3hEUVVGMlFpeERRVUZRTzBGQlFXdElMSE5EUVVGVFV5eERRVUZVTEVOQlFWZEdMRU5CUVZnc1JVRkJZVHRCUVVGRExHZEVRVUZOVWl4SlFVRkZVeXhGUVVGRkxFTkJRVVlzUTBGQlVpeERRVUZoTEVsQlFVY3NRMEZCUTJ0SUxFOUJRVTlETEZOQlFWQXNRMEZCYVVKd1NDeERRVUZxUWl4RFFVRktMRVZCUVhkQ0xFMUJRVTBzU1VGQlNTdENMRVZCUVVWblJDeFpRVUZPTEVOQlFXMUNMRFJEUVVGdVFpeERRVUZPTEVOQlFYVkZMRTlCUVU4M1JTeExRVUZITEVsQlFVbFdMRU5CUVVvc1EwRkJUVUVzUzBGQlJ6dEJRVUZEYTBnc2JVVkJRVmNzVFVGQlNXeElMRVZCUVVWVkxFTkJRVVlzUTBGQlppeEZRVUZ2UWtZc1EwRkJjRUk3UVVGQmRVSXNNa05CUVdwRExFTkJRVlk3UVVGQk5rTXNiME5CUVU5VExHTkJRVkFzUTBGQmMwSm9RaXhEUVVGMFFpeEZRVUYzUWl4WlFVRjRRaXhGUVVGeFF5eEZRVUZEYjBNc1QwRkJUU3hEUVVGRExFTkJRVklzUlVGQmNrTXNSMEZCYVVSd1F5eEZRVUZGTWtNc1IwRkJSaXhIUVVGTkxGVkJRVk5zUXl4RFFVRlVMRVZCUVZjN1FVRkJReXhuUkVGQlRWWXNTVUZCUlZNc1JVRkJSU3hEUVVGR0xFTkJRVklzUTBGQllTeFBRVUZQVkN4RlFVRkZlVVFzVDBGQlJpeERRVUZWYlVNc1RVRkJUVU1zVDBGQlRpeERRVUZqYmtZc1EwRkJaQ3hKUVVGcFFubENMRkZCUVZGVExFZEJRVklzUTBGQldXeERMRU5CUVZvc1EwRkJha0lzUjBGQlowTkdMRVZCUVVWRkxFTkJRVVlzUTBGQk1VTXNRMEZCVUR0QlFVRjFSQ3cyUWtGQmRra3NSVUZCZDBsVUxFVkJRVVUwU0N4blFrRkJSaXhIUVVGdFFuSklMRU5CUVROS0xFVkJRVFpLVUN4RlFVRkZkVVFzVFVGQlJpeEhRVUZUTEZWQlFWTjJSQ3hEUVVGVUxFVkJRVmM3UVVGQlF5dzRRMEZCUjBFc1lVRkJZVFJDTEV0QlFXaENMRVZCUVhOQ0xFOUJRVThzVTBGQlR5eExRVUZMYVVjc1RVRkJUQ3hIUVVGWk4wZ3NRMEZCYmtJc1IwRkJjMEpyUXl4UlFVRlJjVUlzVFVGQlVpeERRVUZsZGtRc1EwRkJaaXhEUVVFM1FpeERRVUVyUXl4TlFVRk5MRWxCUVVrMFFpeExRVUZLTEVOQlFWY3NPRU5CUVZnc1EwRkJUanRCUVVGblJTdzJRa0ZCZGxRc1JVRkJkMVExUWl4RlFVRkZjMFFzVFVGQlJpeEhRVUZUTjBNc1EwRkJhbFVzUlVGQmJWVlVMRVZCUVVWeFJDeExRVUZHTEVkQlFWRXNWVUZCVXpsRExFTkJRVlFzUlVGQlZ6dEJRVUZETEdkRVFVRk5VaXhKUVVGRlV5eEZRVUZGTEVOQlFVWXNRMEZCVWl4RFFVRmhMRTlCUVU4c1MwRkJTemhFTEV0QlFVd3NSMEZCVnl4TFFVRkxSQ3hQUVVGTUxFTkJRV0VzVDBGQllpeEZRVUZ4UWl4RFFVRkRMRWRCUVVjelF5eFRRVUZLTEVOQlFYSkNMRU5CUVZnc1IwRkJaMFFzVVVGQlRTeExRVUZMUnl4SFFVRllMRWRCUVdVNVFpeEZRVUZGZVVRc1QwRkJSaXhEUVVGVkxFdEJRVXRMTEVsQlFVd3NRMEZCVlhCRUxFVkJRVVZHTEVOQlFVWXNRMEZCVml4RFFVRldMRU5CUVdZc1IwRkJNRU5GTEVWQlFVVkdMRU5CUVVZc1IwRkJha2M3UVVGQmQwY3NOa0pCUVRWakxFTkJRVFpqTEVsQlFVa3JRaXhKUVVGRk9VSXNSVUZCUlN4RFFVRkdMRU5CUVU0N1FVRkJWeXhsUVVRdmVrUXNRMEZCY21Rc1EwRkJVRHRCUVVNNGVFVXNRMEZFZEdkR0lpd2labWxzWlNJNkltWjFibU4wYVc5dVlXd3RjSEp2YldselpTNXRhVzR1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMMlJzWlhaNUwyTnZaR1V2YjNOekwyWjFibU4wYVc5dVlXd3RjbWwyWlhJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9ZU3hpS1h0Y0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pYaHdiM0owY3lZbVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHMXZaSFZzWlQ5dGIyUjFiR1V1Wlhod2IzSjBjejFpS0NrNlhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdaR1ZtYVc1bEppWmtaV1pwYm1VdVlXMWtQMlJsWm1sdVpTaGJYU3hpS1RwY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pYaHdiM0owY3o5bGVIQnZjblJ6TGtaUVBXSW9LVHBoTGtaUVBXSW9LWDBwS0Z3aWRXNWtaV1pwYm1Wa1hDSTlQWFI1Y0dWdlppQnpaV3htUDNSb2FYTTZjMlZzWml4bWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmloaEtYdG1kVzVqZEdsdmJpQmlLR1FwZTJsbUtHTmJaRjBwY21WMGRYSnVJR05iWkYwdVpYaHdiM0owY3p0MllYSWdaVDFqVzJSZFBYdHBPbVFzYkRvaE1TeGxlSEJ2Y25Sek9udDlmVHR5WlhSMWNtNGdZVnRrWFM1allXeHNLR1V1Wlhod2IzSjBjeXhsTEdVdVpYaHdiM0owY3l4aUtTeGxMbXc5SVRBc1pTNWxlSEJ2Y25SemZYWmhjaUJqUFh0OU8zSmxkSFZ5YmlCaUxtMDlZU3hpTG1NOVl5eGlMbVE5Wm5WdVkzUnBiMjRvWVN4akxHUXBlMkl1YnloaExHTXBmSHhQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1lTeGpMSHRqYjI1bWFXZDFjbUZpYkdVNklURXNaVzUxYldWeVlXSnNaVG9oTUN4blpYUTZaSDBwZlN4aUxtNDlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHTTlZU1ltWVM1ZlgyVnpUVzlrZFd4bFAyWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHRmJYQ0prWldaaGRXeDBYQ0pkZlRwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCaGZUdHlaWFIxY200Z1lpNWtLR01zWENKaFhDSXNZeWtzWTMwc1lpNXZQV1oxYm1OMGFXOXVLR0VzWWlsN2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNoaExHSXBmU3hpTG5BOVhDSmNJaXhpS0dJdWN6MHdLWDBvVzJaMWJtTjBhVzl1S0dFc1lpeGpLWHRjSW5WelpTQnpkSEpwWTNSY0lqdG1kVzVqZEdsdmJpQmtLR0lwZTJsbUtDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlHUXBLWEpsZEhWeWJpQnVaWGNnWkNoaUtUdHBaaWd4SVQwOVlYSm5kVzFsYm5SekxteGxibWQwYUNsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKR2RXNWpkR2x2Ym1Gc1VISnZiV2x6WlhNZ1kyOXVjM1J5ZFdOMGIzSWdiMjVzZVNCaFkyTmxjSFJ6SURFZ1kyRnNiR0poWTJzZ1lYSm5kVzFsYm5SY0lpazdkR2hwY3k1ZlJsQTllMlZ5Y205eWN6cDdiR2x0YVhRNk1DeGpiM1Z1ZERvd2ZTeHdjbTl0YVhObE9tNWxkeUJRY205dGFYTmxLR0lwTEdOdmJtTjFjbkpsYm1ONVRHbHRhWFE2TkgxOVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR0lzWENKZlgyVnpUVzlrZFd4bFhDSXNlM1poYkhWbE9pRXdmU2tzWWk1a1pXWmhkV3gwUFdRN2RtRnlJR1U5WXlneEtTeG1QV01vTWlrc1p6MWpLRE1wTEdnOVl5ZzBLU3hwUFdNb05Ta3NhajFqS0RZcExHczlZeWczS1R0a0xuQnliM1J2ZEhsd1pTNWhiR3c5YXk1aGJHd3NaQzV3Y205MGIzUjVjR1V1YldGd1BXZ3ViV0Z3TEdRdWNISnZkRzkwZVhCbExtWnBibVE5YUM1bWFXNWtMR1F1Y0hKdmRHOTBlWEJsTG1acGJtUkpibVJsZUQxb0xtWnBibVJKYm1SbGVDeGtMbkJ5YjNSdmRIbHdaUzVtYVd4MFpYSTlhQzVtYVd4MFpYSXNaQzV3Y205MGIzUjVjR1V1Y21Wa2RXTmxQV2d1Y21Wa2RXTmxMR1F1Y0hKdmRHOTBlWEJsTG14cGMzUmxiajFwTG14cGMzUmxiaXhrTG5CeWIzUnZkSGx3WlM1MFlYQkpaajFxTG5SaGNFbG1MR1F1Y0hKdmRHOTBlWEJsTG5Sb1pXNUpaajFxTG5Sb1pXNUpaaXhrTG5CeWIzUnZkSGx3WlM1ZmRHaGxia2xtUFdvdVgzUm9aVzVKWml4a0xuQnliM1J2ZEhsd1pTNWtaV3hoZVQxckxtUmxiR0Y1TEdRdWNISnZkRzkwZVhCbExsOWtaV3hoZVQxckxsOWtaV3hoZVN4a0xuQnliM1J2ZEhsd1pTNXlaV3BsWTNROWF5NXlaV3BsWTNRc1pDNWtaV1poZFd4MFBXUXNaQzVoYkd3OVpDNXdjbTkwYjNSNWNHVXVZV3hzTEdRdWRHaGxia2xtUFdRdWNISnZkRzkwZVhCbExsOTBhR1Z1U1dZc1pDNWtaV3hoZVQxaVBUNWtMbkpsYzI5c2RtVW9LUzVrWld4aGVTaGlLU3hrTG5OcGJHVnVkRDFpUFQ1a0xuSmxjMjlzZG1Vb0tTNXphV3hsYm5Rb1lpa3NaQzVqYUdGcGJqMW5MbU5vWVdsdUxHUXVjSEp2ZEc5MGVYQmxMbU5vWVdsdVJXNWtQV2N1WTJoaGFXNUZibVFzWkM1eVpXcGxZM1E5WkM1d2NtOTBiM1I1Y0dVdWNtVnFaV04wTEdRdWNtVnpiMngyWlQxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2JtVjNJR1FvS0dFc1lpazlQbVVtSmlnd0xHWXVhWE5HZFc1amRHbHZiaWtvWlM1MGFHVnVLVDlsTG5Sb1pXNG9ZU2t1WTJGMFkyZ29ZaWs2ZG05cFpDQmhLR1VwS1gwc1pDNXdjbTl0YVhOcFpuazlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVLQzR1TG1FcFBUNXVaWGNnWkNnb1ppeGpLVDArWlM1allXeHNLSFJvYVhNc0xpNHVZU3dvWkN4aEtUMCtaRDlqS0dRcE9tWW9ZU2twS1gwc1pDNXdjbTl0YVhOcFpubEJiR3c5Wm5WdVkzUnBiMjRvWXlsN2FXWW9JV044ZkNGUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9ZeWtwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpU1c1MllXeHBaQ0JCY21kMWJXVnVkQ0J2WW1vZ2FXNGdjSEp2YldsemFXWjVRV3hzS0c5aWFpbGNJaWs3Y21WMGRYSnVJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLR01wTG1acGJIUmxjaWhoUFQ1Y0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmpXMkZkS1M1eVpXUjFZMlVvS0dNc1lTazlQaWd2VTNsdVl5OHVkR1Z6ZENoaEtYeDhZMXRnSkh0aGZVRnplVzVqWUYxOGZDaGpXMkFrZTJGOVFYTjVibU5nWFQxa0xuQnliMjFwYzJsbWVTaGpXMkFrZTJGOVlGMHBLU3hqS1N4aktYMHNaQzUxYm5CaFkyczlablZ1WTNScGIyNG9LWHRzWlhRZ1pTeG1MR2M5Ym1WM0lHUW9LR0VzWWlrOVBudGxQV0VzWmoxaWZTazdjbVYwZFhKdWUzQnliMjFwYzJVNlp5eHlaWE52YkhabE9tVXNjbVZxWldOME9tWjlmU3hrTG5CeWIzUnZkSGx3WlM1aFpHUlRkR1Z3UFdaMWJtTjBhVzl1S0dNc1lTbDdjbVYwZFhKdUlIUm9hWE11YzNSbGNITW1KblJvYVhNdWMzUmxjSE11Y0hWemFDaGJZeXgwYUdsekxHRmRLU3gwYUdsemZTeGtMbkJ5YjNSdmRIbHdaUzVqYjI1amRYSnlaVzVqZVQxbWRXNWpkR2x2YmloaVBURXZNQ2w3Y21WMGRYSnVJSFJvYVhNdWMzUmxjSE0vZEdocGN5NWhaR1JUZEdWd0tGd2lZMjl1WTNWeWNtVnVZM2xjSWl4YkxpNHVZWEpuZFcxbGJuUnpYU2s2S0hSb2FYTXVYMFpRTG1OdmJtTjFjbkpsYm1ONVRHbHRhWFE5WWl4MGFHbHpLWDBzWkM1d2NtOTBiM1I1Y0dVdWNYVnBaWFE5Wm5WdVkzUnBiMjRvWWoweEx6QXBlM0psZEhWeWJpQjBhR2x6TG5OMFpYQnpQM1JvYVhNdVlXUmtVM1JsY0NoY0luRjFhV1YwWENJc1d5NHVMbUZ5WjNWdFpXNTBjMTBwT2loMGFHbHpMbDlHVUM1bGNuSnZjbk05ZTJOdmRXNTBPakFzYkdsdGFYUTZZbjBzZEdocGN5bDlMR1F1Y0hKdmRHOTBlWEJsTG5OcGJHVnVkRDFrTG5CeWIzUnZkSGx3WlM1eGRXbGxkQ3hrTG5CeWIzUnZkSGx3WlM1blpYUTlablZ1WTNScGIyNG9MaTR1WXlsN2NtVjBkWEp1SUhSb2FYTXVjM1JsY0hNL2RHaHBjeTVoWkdSVGRHVndLRndpWjJWMFhDSXNXeTR1TG1GeVozVnRaVzUwYzEwcE9paGpQU2d3TEdZdVpteGhkSFJsYmlrb1l5a3NkR2hwY3k1MGFHVnVLR1E5UGx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCa1B6RTlQVDFqTG14bGJtZDBhRDlrVzJOYk1GMWRPbU11Y21Wa2RXTmxLQ2hpTEdFcFBUNG9ZbHRoWFQxa1cyRmRMR0lwTEh0OUtUcGtLU2w5TEdRdWNISnZkRzkwZVhCbExuTmxkRDFtZFc1amRHbHZiaWhrTEdFcGUzSmxkSFZ5YmlCMGFHbHpMbk4wWlhCelAzUm9hWE11WVdSa1UzUmxjQ2hjSW5ObGRGd2lMRnN1TGk1aGNtZDFiV1Z1ZEhOZEtUcDBhR2x6TG5Sb1pXNG9ZajArS0Z3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCaUppWW9ZbHRrWFQxaEtTeGlLU2w5TEdRdWNISnZkRzkwZVhCbExtTmhkR05vUFdaMWJtTjBhVzl1S0dNcGUybG1LSFJvYVhNdWMzUmxjSE1wY21WMGRYSnVJSFJvYVhNdVlXUmtVM1JsY0NoY0ltTmhkR05vWENJc1d5NHVMbUZ5WjNWdFpXNTBjMTBwTzJsbUtESTlQVDFoY21kMWJXVnVkSE11YkdWdVozUm9LWEpsZEhWeWJpQjBhR2x6TG1OaGRHTm9TV1lvTGk0dVlYSm5kVzFsYm5SektUdHBaaWdoS0RBc1ppNXBjMFoxYm1OMGFXOXVLU2hqS1NsMGFISnZkeUJ1WlhjZ1pTNUdkVzVqZEdsdmJtRnNSWEp5YjNJb1hDSkpiblpoYkdsa0lHWnVJR0Z5WjNWdFpXNTBJR1p2Y2lCZ0xtTmhkR05vS0dadUtXQXVJRTExYzNRZ1ltVWdZU0JtZFc1amRHbHZiaTRnUTNWeWNtVnVkR3g1T2lCY0lpdDBlWEJsYjJZZ1l5azdjbVYwZFhKdUlHUXVjbVZ6YjJ4MlpTaDBhR2x6TGw5R1VDNXdjbTl0YVhObExtTmhkR05vS0dFOVBtTW9ZU2twS1gwc1pDNXdjbTkwYjNSNWNHVXVZMkYwWTJoSlpqMW1kVzVqZEdsdmJpaG5MR0VwZTJsbUtIUm9hWE11YzNSbGNITXBjbVYwZFhKdUlIUm9hWE11WVdSa1UzUmxjQ2hjSW1OaGRHTm9TV1pjSWl4YkxpNHVZWEpuZFcxbGJuUnpYU2s3YVdZb0lTZ3dMR1l1YVhOR2RXNWpkR2x2Ymlrb1lTa3BkR2h5YjNjZ2JtVjNJR1V1Um5WdVkzUnBiMjVoYkVWeWNtOXlLRndpU1c1MllXeHBaQ0JtYmlCaGNtZDFiV1Z1ZENCbWIzSWdZQzVqWVhSamFFbG1LR052Ym1ScGRHbHZiaXdnWm00cFlDNGdUWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVMaUJEZFhKeVpXNTBiSGs2SUZ3aUszUjVjR1Z2WmlCaEtUdHlaWFIxY200Z1pDNXlaWE52YkhabEtIUm9hWE11WDBaUUxuQnliMjFwYzJVdVkyRjBZMmdvWWowK2UybG1LR2NtSm1JZ2FXNXpkR0Z1WTJWdlppQm5LWEpsZEhWeWJpQmhLR0lwTzNSb2NtOTNJR0o5S1NsOUxHUXVjSEp2ZEc5MGVYQmxMblJvWlc0OVpuVnVZM1JwYjI0b1lpbDdhV1lvZEdocGN5NXpkR1Z3Y3lseVpYUjFjbTRnZEdocGN5NWhaR1JUZEdWd0tGd2lkR2hsYmx3aUxGc3VMaTVoY21kMWJXVnVkSE5kS1R0cFppZ2hLREFzWmk1cGMwWjFibU4wYVc5dUtTaGlLU2wwYUhKdmR5QnVaWGNnWlM1R2RXNWpkR2x2Ym1Gc1JYSnliM0lvWENKSmJuWmhiR2xrSUdadUlHRnlaM1Z0Wlc1MElHWnZjaUJnTG5Sb1pXNG9abTRwWUM0Z1RYVnpkQ0JpWlNCaElHWjFibU4wYVc5dUxpQkRkWEp5Wlc1MGJIazZJRndpSzNSNWNHVnZaaUJpS1R0eVpYUjFjbTRnWkM1eVpYTnZiSFpsS0hSb2FYTXVYMFpRTG5CeWIyMXBjMlV1ZEdobGJpaGlLU2w5TEdRdWNISnZkRzkwZVhCbExuUmhjRDFtZFc1amRHbHZiaWhqS1h0cFppaDBhR2x6TG5OMFpYQnpLWEpsZEhWeWJpQjBhR2x6TG1Ga1pGTjBaWEFvWENKMFlYQmNJaXhiTGk0dVlYSm5kVzFsYm5SelhTazdhV1lvSVNnd0xHWXVhWE5HZFc1amRHbHZiaWtvWXlrcGRHaHliM2NnYm1WM0lHVXVSblZ1WTNScGIyNWhiRVZ5Y205eUtGd2lTVzUyWVd4cFpDQm1iaUJoY21kMWJXVnVkQ0JtYjNJZ1lDNTBZWEFvWm00cFlDNGdUWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVMaUJEZFhKeVpXNTBiSGs2SUZ3aUszUjVjR1Z2WmlCaktUdHlaWFIxY200Z1pDNXlaWE52YkhabEtIUm9hWE11WDBaUUxuQnliMjFwYzJVdWRHaGxiaWhoUFQ1aktHRXBQMkU2WVNrcGZYMHNablZ1WTNScGIyNG9ZU3hpS1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1lpeGNJbDlmWlhOTmIyUjFiR1ZjSWl4N2RtRnNkV1U2SVRCOUtUdGpiR0Z6Y3lCaklHVjRkR1Z1WkhNZ1JYSnliM0o3WTI5dWMzUnlkV04wYjNJb1l5eGtLWHRjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWXlZbUtHUTlZeXhqTG0xbGMzTmhaMlVtSmloalBXTXViV1Z6YzJGblpTa3BMSE4xY0dWeUtHTXBMRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJrSmlaUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loa0tTNW1iM0pGWVdOb0tHSTlQbnQwYUdselcySmRQV1JiWWwxOUtTeDBhR2x6TG01aGJXVTlkR2hwY3k1amIyNXpkSEoxWTNSdmNpNXVZVzFsTEVWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLSFJvYVhNc2RHaHBjeTVqYjI1emRISjFZM1J2Y2lsOWZXSXVSblZ1WTNScGIyNWhiRVZ5Y205eVBXTTdZaTVHZFc1amRHbHZibUZzVlhObGNrVnljbTl5UFdOc1lYTnpJR1Y0ZEdWdVpITWdZM3Q5TzJJdVJsQlZibVY0Y0dWamRHVmtSWEp5YjNJOVkyeGhjM01nWlhoMFpXNWtjeUJqZTMwN1lpNUdVRWx1Y0hWMFJYSnliM0k5WTJ4aGMzTWdaWGgwWlc1a2N5QmplMzA3WWk1R1VGTnZablJGY25KdmNqMWpiR0Z6Y3lCbGVIUmxibVJ6SUdON2ZUdGlMa1pRVkdsdFpXOTFkRDFqYkdGemN5QmxlSFJsYm1SeklHTjdmWDBzWm5WdVkzUnBiMjRvWVN4aUtYdGNJblZ6WlNCemRISnBZM1JjSWp0UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ZaXhjSWw5ZlpYTk5iMlIxYkdWY0lpeDdkbUZzZFdVNklUQjlLVHRqYjI1emRDQmpQWHRwYzFCeWIyMXBjMlZNYVd0bEtHSXBlM0psZEhWeWJpQmlKaVpjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCaUxuUm9aVzU5TEdselJuVnVZM1JwYjI0b1lpbDdjbVYwZFhKdVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdZbjBzYVhORmJuVnRaWEpoWW14bEtHSXBlM0psZEhWeWJpQmlKaVpCY25KaGVTNXBjMEZ5Y21GNUtHSXBmSHhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCaVcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wxOUxHWnNZWFIwWlc0b1lpbDdhV1lvSVVGeWNtRjVMbWx6UVhKeVlYa29ZaWtwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVFdWMGFHOWtJR0JtYkdGMGRHVnVZQ0J5WlhGMWFYSmxjeUIyWVd4cFpDQmhjbkpoZVNCd1lYSmhiV1YwWlhKY0lpazdjbVYwZFhKdUlHSXVjbVZrZFdObEtDaGtMR0VwUFQ1a0xtTnZibU5oZENoQmNuSmhlUzVwYzBGeWNtRjVLR0VwUDJNdVpteGhkSFJsYmloaEtUcGJZVjBwTEZ0ZEtYMTlPMkl1WkdWbVlYVnNkRDFqZlN4bWRXNWpkR2x2YmloaExHSXNZeWw3WENKMWMyVWdjM1J5YVdOMFhDSTdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dJc1hDSmZYMlZ6VFc5a2RXeGxYQ0lzZTNaaGJIVmxPaUV3ZlNrc1lpNWphR0ZwYmoxbWRXNWpkR2x2YmlncGUyTnZibk4wSUdROVl5Z3dLU3hoUFdRdWNtVnpiMngyWlNncE8zSmxkSFZ5YmlCaExuTjBaWEJ6UFZ0ZExHRjlMR0l1WTJoaGFXNUZibVE5Wm5WdVkzUnBiMjRvS1h0amIyNXpkQ0JvUFdNb01DazdjbVYwZFhKdUlHRTlQbnRwWmlnaGRHaHBjeTV6ZEdWd2MzeDhNRDQ5ZEdocGN5NXpkR1Z3Y3k1c1pXNW5kR2dwZEdoeWIzY2dibVYzSUdjdVJsQkpibkIxZEVWeWNtOXlLRndpVG04Z2MzUmxjSE1nWkdWbWFXNWxaQ0JpWlhSM1pXVnVJQzVqYUdGcGJpZ3BJQ1lnTG1Ob1lXbHVSVzVrS0NsY0lpazdiR1YwSUdrOU1DeDdjSEp2YldselpUcHFMSEpsYzI5c2RtVTZZaXh5WldwbFkzUTZaWDA5YUM1MWJuQmhZMnNvS1R0bWIzSW9PMms4ZEdocGN5NXpkR1Z3Y3k1c1pXNW5kR2c3S1h0amIyNXpkRnRqTEN4aFhUMTBhR2x6TG5OMFpYQnpXMmxkTzJvOWFsdGpYU2d1TGk1aEtTeHBLeXQ5Y21WMGRYSnVJR0lvWVNrc2FuMTlPM1poY2lCblBXTW9NU2w5TEdaMWJtTjBhVzl1S0dFc1lpeHZLWHRjSW5WelpTQnpkSEpwWTNSY0lqdG1kVzVqZEdsdmJpQmpLR1FzWlNsN1kyOXVjM1FnWmoxdktEQXBPM0psZEhWeWJpQjBhR2x6TG5OMFpYQnpQM1JvYVhNdVlXUmtVM1JsY0NoY0lsOW1hVzVrWENJc1d5NHVMbUZ5WjNWdFpXNTBjMTBwT2loY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmtKaVlvWlQxa0xHUTlkR2hwY3k1ZlJsQXVjSEp2YldselpTa3NaaTV5WlhOdmJIWmxLR1FwTG1acGJIUmxjaWhsS1M1MGFHVnVLR0k5UG01MWJHdzlQV0piTUYwL2UybDBaVzA2ZG05cFpDQXdMR2x1WkdWNE9pMHhmVHA3YVhSbGJUcGlXekJkTEdsdVpHVjRPbUl1YVc1a1pYaFBaaWhpV3pCZEtYMHBLWDFtZFc1amRHbHZiaUJrS0dZc1pTeHBLWHRqYjI1emRDQm5QVzhvTUNrN2NtVjBkWEp1SUhSb2FYTXVjM1JsY0hNL2RHaHBjeTVoWkdSVGRHVndLRndpY21Wa2RXTmxYQ0lzV3k0dUxtRnlaM1Z0Wlc1MGMxMHBPaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbVB5aHBQV1VzWlQxbUxHWTlkR2hwY3k1ZlJsQS9kR2hwY3k1ZlJsQXVjSEp2YldselpUcDBhR2x6S1RwbVBXY3VjbVZ6YjJ4MlpTaG1MSFJvYVhNcExHNWxkeUJuS0NoaUxHUXBQVDVtTG5Sb1pXNG9ZejArZTJOdmJuTjBJR285WTF0VGVXMWliMnd1YVhSbGNtRjBiM0pkS0NrN2JHVjBJR1k5TUR0amIyNXpkQ0JyUFdjOVBudGpiMjV6ZENCaFBXb3VibVY0ZENncE8zSmxkSFZ5YmlCaExtUnZibVUvWWlobktUcDJiMmxrSUZCeWIyMXBjMlV1WVd4c0tGdG5MR0V1ZG1Gc2RXVmRLUzUwYUdWdUtDaGJZaXhoWFNrOVBtc29aU2hpTEdFc1ppc3JLU2twTG1OaGRHTm9LR1FwZlR0cktHa3BmU2twS1gxUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ZaXhjSWw5ZlpYTk5iMlIxYkdWY0lpeDdkbUZzZFdVNklUQjlLU3hpTG5KbFpIVmpaVDFpTG1acGJIUmxjajFpTG1acGJtUkpibVJsZUQxaUxtWnBibVE5WWk1dFlYQTlkbTlwWkNBd08zWmhjaUIwUFc4b01pa3NkVDF2S0RFcE8ySXViV0Z3UFdaMWJtTjBhVzl1S0hZc2NDbDdZMjl1YzNRZ2NUMXZLREFwTzJsbUtIUm9hWE11YzNSbGNITXBjbVYwZFhKdUlIUm9hWE11WVdSa1UzUmxjQ2hjSW0xaGNGd2lMRnN1TGk1aGNtZDFiV1Z1ZEhOZEtUc3hQVDA5WVhKbmRXMWxiblJ6TG14bGJtZDBhQ1ltZEdocGN5WW1kR2hwY3k1ZlJsQW1KaWh3UFhZc2RqMTBhR2x6SmlaMGFHbHpMbDlHVUNZbWRHaHBjeTVmUmxBdWNISnZiV2x6WlNrN2JHVjBJSGM5SVRFN1kyOXVjM1FnWXoxTllYUm9MbTFoZUNneExFMWhkR2d1YldsdUtIUm9hWE1tSm5Sb2FYTXVYMFpRSmlaMGFHbHpMbDlHVUM1amIyNWpkWEp5Wlc1amVVeHBiV2wwZkh3eExEUXBLU3hsUFhSb2FYTW1KblJvYVhNdVgwWlFKaVowYUdsekxsOUdVQzV3Y205dGFYTmxQM1JvYVhNdVgwWlFMbkJ5YjIxcGMyVTZVSEp2YldselpTNXlaWE52YkhabEtIWXBPMnhsZENCbVBUQXNjejFiWFN4b1BUQTdZMjl1YzNRZ2VEMWJYU3hxUFc1bGR5QlRaWFFzYXowb0tUMCthaTV6YVhwbFBqMWpMR3c5S0NrOVBuTXViR1Z1WjNSb1BuUm9hWE11WDBaUUxtVnljbTl5Y3k1c2FXMXBkSHg4YUQ0OWRpNXNaVzVuZEdoOGZIY3NiVDFqUFQ1aFBUNG9haTVrWld4bGRHVW9ZeWtzZUZ0alhUMWhMR0VwTzNKbGRIVnliaUJ4TG5KbGMyOXNkbVVvYm1WM0lGQnliMjFwYzJVb0tHSXNaQ2s5UG50amIyNXpkQ0JuUFdNOVBuYy9iblZzYkRwMmIybGtLSGM5SVRBc1lpaGpLU2tzYVQxaVBUNTNQMjUxYkd3NmRtOXBaQ2gzUFNFd0xHUW9ZaWtwTzJVdWRHaGxiaWhoUFQ1N2FXWW9kajFiTGk0dVlWMHNJU2d3TEhRdWFYTkZiblZ0WlhKaFlteGxLU2hoS1NseVpYUjFjbTRnWkNodVpYY2dkUzVHVUVsdWNIVjBSWEp5YjNJb1hDSkpiblpoYkdsa0lHbHVjSFYwSUdSaGRHRWdjR0Z6YzJWa0lHbHVkRzhnUmxBdWJXRndLQ2xjSWlrcE8yTnZibk4wSUdJOUtDazlQbnRzWlhRZ1lqMXVkV3hzTzNKbGRIVnliaUJ6TG14bGJtZDBhRDUwYUdsekxsOUdVQzVsY25KdmNuTXViR2x0YVhRbUppaGlQV2twTEd3b0tTWW1LR0k5Wnlrc0lTRmlKaVlvSVNGUWNtOXRhWE5sTG1Gc2JDaDRLUzUwYUdWdUtDZ3BQVDVpS0hncEtYeDhJVEFwZlN4dVBXTTlQbnRwWmlnaGR5bHlaWFIxY200Z1lpZ3BmSHg0VzJoZGZIeHZLR2dwTEdOOUxHODlaRDArZHo5dWRXeHNPaWhvS3lzc2F5Z3BLVDl6WlhSVWFXMWxiM1YwS0NncFBUNXZLR1FwTERBcE9uaGJaRjAvZUZ0a1hUb29haTVoWkdRb1pDa3NlRnRrWFQxUWNtOXRhWE5sTG5KbGMyOXNkbVVvZGx0a1hTa3VkR2hsYmloaFBUNXdLR0VzWkN4MktTa3VkR2hsYmloaVBUNXRLR1FwS0dJcEtTNTBhR1Z1S0c0cExtTmhkR05vS0dNOVBudHBaaWgwYUdsekxsOUdVQzVsY25KdmNuTXVZMjkxYm5Rckt5eHpMbkIxYzJnb1l5a3NjeTVzWlc1bmRHZytkR2hwY3k1ZlJsQXVaWEp5YjNKekxteHBiV2wwS1h0amIyNXpkQ0JoUFRFOVBUMXpMbXhsYm1kMGFEOWpPbTVsZHlCMUxrWjFibU4wYVc5dVlXeEZjbkp2Y2loZ1JYSnliM0lnVEdsdGFYUWdKSHQwYUdsekxsOUdVQzVsY25KdmNuTXViR2x0YVhSOUlFVjRZMlZsWkdWa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpIZzlKSHRrZlNCbGNuSkRiblE5Skh0MGFHbHpMbDlHVUM1bGNuSnZjbk11WTI5MWJuUjlZQ3g3WlhKeWIzSnpPbk1zY21WemRXeDBjenA0TEdOMGVEcDBhR2x6ZlNrN1VISnZiV2x6WlM1eVpYTnZiSFpsS0cwb1pDa29ZeWtwTG5Sb1pXNG9LQ2s5UG1rb1lTa3BmV1ZzYzJVZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTG5Sb1pXNG9LQ2s5UG0wb1pDa29ZeWtwTG5Sb1pXNG9iaWw5S1N4NFcyUmRLVHRtYjNJb08yWThZeVltWmp4MkxteGxibWQwYURzcGJ5aG1LeXNwZlNsOUtTbDlMR0l1Wm1sdVpEMW1kVzVqZEdsdmJpaGlLWHR5WlhSMWNtNGdZeTVqWVd4c0tIUm9hWE1zWWlrdWRHaGxiaWdvZTJsMFpXMDZZbjBwUFQ1aUtYMHNZaTVtYVc1a1NXNWtaWGc5Wm5WdVkzUnBiMjRvWWlsN2NtVjBkWEp1SUdNdVkyRnNiQ2gwYUdsekxHSXBMblJvWlc0b0tIdHBibVJsZURwaWZTazlQbUlwZlN4aUxtWnBiSFJsY2oxbWRXNWpkR2x2YmloakxHVXBlM0psZEhWeWJpQjBhR2x6TG5OMFpYQnpQM1JvYVhNdVlXUmtVM1JsY0NoY0ltWnBiSFJsY2x3aUxGc3VMaTVoY21kMWJXVnVkSE5kS1Rvb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdZeVltS0dVOVl5eGpQWFJvYVhNdVgwWlFMbkJ5YjIxcGMyVXBMR1FvWXl3b1pDeGhLVDArVUhKdmJXbHpaUzV5WlhOdmJIWmxLR1VvWVNrcExuUm9aVzRvWXowK1l6OWtMbU52Ym1OaGRDaGJZVjBwT21RcExGdGRLU2w5TEdJdWNtVmtkV05sUFdSOUxHWjFibU4wYVc5dUtHRXNZaXhqS1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1lpeGNJbDlmWlhOTmIyUjFiR1ZjSWl4N2RtRnNkV1U2SVRCOUtTeGlMbXhwYzNSbGJqMTJiMmxrSURBN2RtRnlJR1E5WXlneEtUdGlMbXhwYzNSbGJqMW1kVzVqZEdsdmJpaGxMQzR1TG1FcGUybG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJoSmlZb1lUMWJZVjBwTENGbFcyVXVZV1JrUlhabGJuUk1hWE4wWlc1bGNqOWNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSmNJanBjSW05dVhDSmRLWFJvY205M0lHNWxkeUJrTGtaUVNXNXdkWFJGY25KdmNpaGNJbFpoYkdsa0lFVjJaVzUwUlcxcGRIUmxjaUJ5WlhGMWFYSmxaQzVjSWlrN1kyOXVjM1FnWmoxMGFHbHpMbU5vWVdsdVJXNWtLQ2s3Y21WMGRYSnVJSFJvYVhNdVgwWlFMbVJsYzNSeWIzazlLQ2s5UG5Sb2FYTXVYMFpRTG1SbGMzUnliM2xJWVc1a2JHVnpMbTFoY0NoaVBUNWlLQ2w4ZkNFd0tTNW1hV3gwWlhJb1lqMCtZaWt1YkdWdVozUm9MSFJvYVhNdVgwWlFMbVJsYzNSeWIzbElZVzVrYkdWelBXRXViV0Z3S0dFOVBpaGxXMlV1WVdSa1JYWmxiblJNYVhOMFpXNWxjajljSW1Ga1pFVjJaVzUwVEdsemRHVnVaWEpjSWpwY0ltOXVYQ0pkS0dFc1ppa3NLQ2s5UG1WYlpTNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlQMXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2x3aU9sd2liMlptWENKZEtHRXNaaWtwS1N4MGFHbHpmWDBzWm5WdVkzUnBiMjRvWVN4aUxHWXBlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlHVW9aejFpUFQ1aUxHZzlZajArWWl4aVBTZ3BQVDV1ZFd4c0xHTTlJVEVwZTJOdmJuTjBJR0U5Wmlnd0tUdHlaWFIxY200Z1pEMCtZUzV5WlhOdmJIWmxLR2NvWkNrcExuUm9aVzRvWXowK1l6OW9LR1FwT21Jb1pDa3BMblJvWlc0b1lqMCtZejlrT21JcGZVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hpTEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEdJdVgzUm9aVzVKWmoxaUxuUmhjRWxtUFdJdWRHaGxia2xtUFhadmFXUWdNRHQyWVhJZ1pEMW1LRElwTzJJdWRHaGxia2xtUFdaMWJtTjBhVzl1S0dZc1p5eG9LWHR5WlhSMWNtNGdkR2hwY3k1emRHVndjejkwYUdsekxtRmtaRk4wWlhBb1hDSjBhR1Z1U1daY0lpeGJMaTR1WVhKbmRXMWxiblJ6WFNrNktERTlQVDFoY21kMWJXVnVkSE11YkdWdVozUm9KaVlvWnoxbUxHWTlZajArWWlrc0tEQXNaQzVwYzFCeWIyMXBjMlZNYVd0bEtTaDBhR2x6S1Q5MGFHbHpMblJvWlc0b1lUMCtaU2htTEdjc2FDa29ZU2twT21Vb1ppeG5MR2dwS1gwc1lpNTBZWEJKWmoxbWRXNWpkR2x2YmlobUxHY3NhQ2w3Y21WMGRYSnVJSFJvYVhNdWMzUmxjSE0vZEdocGN5NWhaR1JUZEdWd0tGd2lkR0Z3U1daY0lpeGJMaTR1WVhKbmRXMWxiblJ6WFNrNktERTlQVDFoY21kMWJXVnVkSE11YkdWdVozUm9KaVlvWnoxbUxHWTlZajArWWlrc0tEQXNaQzVwYzFCeWIyMXBjMlZNYVd0bEtTaDBhR2x6S1Q5MGFHbHpMblJvWlc0b1lUMCtaU2htTEdjc2FDd2hNQ2tvWVNrcE9tVW9aaXhuTEdnc0lUQXBLWDBzWWk1ZmRHaGxia2xtUFdWOUxHWjFibU4wYVc5dUtHRXNZaXhqS1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRtZFc1amRHbHZiaUJrS0dRcGUyTnZibk4wSUdjOVQySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb1pDa3NZVDFuTG0xaGNDaGhQVDVrVzJGZEtUdHlaWFIxY200Z1VISnZiV2x6WlM1aGJHd29ZU2t1ZEdobGJpaGlQVDVpTG5KbFpIVmpaU2dvWWl4aExHTXBQVDU3ZG1GeUlHUTdZMjl1YzNRZ2FEMW5XMk5kTzNKbGRIVnliaUJQWW1wbFkzUXVZWE56YVdkdUtDaGtQWHQ5TEdSYmFGMDlZU3hrS1N4aUtYMHNlMzBwS1gxbWRXNWpkR2x2YmlCbEtHUXBlMk52Ym5OMElHRTlZeWd3S1R0cFppZ2hUblZ0WW1WeUxtbHpTVzUwWldkbGNpaGtLU2wwYUhKdmR5QnVaWGNnWmk1R1VFbHVjSFYwUlhKeWIzSW9YQ0pHVUM1a1pXeGhlU2h0YVd4c2FYTmxZeWtnY21WeGRXbHlaWE1nWVNCdWRXMWxjbWxqSUdGeVp5NWNJaWs3Y21WMGRYSnVJR1U5UG01bGR5QmhLR0U5UG50elpYUlVhVzFsYjNWMEtDZ3BQVDVoS0dVcExHUXBmU2w5VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHSXNYQ0pmWDJWelRXOWtkV3hsWENJc2UzWmhiSFZsT2lFd2ZTa3NZaTVoYkd3OVpuVnVZM1JwYjI0b1pTbDdZMjl1YzNRZ1lUMWpLREFwTzNKbGRIVnliaUJoTG5KbGMyOXNkbVVvUVhKeVlYa3VhWE5CY25KaGVTaGxLVDlRY205dGFYTmxMbUZzYkNobEtUcGtLR1VwS1gwc1lpNXdjbTl0YVhObFFXeHNUMkpxWldOMFBXUXNZaTV5WldwbFkzUTlablZ1WTNScGIyNG9ZaWw3YVdZb1lpQnBibk4wWVc1alpXOW1JRVZ5Y205eUtYSmxkSFZ5YmlCMGFHbHpKaVlvZEdocGN5NWZaWEp5YjNJOVlpa3NVSEp2YldselpTNXlaV3BsWTNRb1lpazdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQlNaV3BsWTNRZ2IyNXNlU0JoWTJObGNIUnpJR0VnYm1WM0lHbHVjM1JoYm1ObElHOW1JRVZ5Y205eUlXQXBmU3hpTGw5a1pXeGhlVDFsTEdJdVpHVnNZWGs5Wm5WdVkzUnBiMjRvWkNsN1kyOXVjM1FnWVQxaktEQXBPM0psZEhWeWJpQjBhR2x6TG5OMFpYQnpQM1JvYVhNdVlXUmtVM1JsY0NoY0ltUmxiR0Y1WENJc1d5NHVMbUZ5WjNWdFpXNTBjMTBwT25Sb2FYTW1KblJvYVhNdVgwWlFQMkV1Y21WemIyeDJaU2gwYUdsekxuUm9aVzRvWlNoa0tTa3BPbVVvWkNrb0tYMDdkbUZ5SUdZOVl5Z3hLWDFkS1gwcE95SmRmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9kaXN0L2Z1bmN0aW9uYWwtcHJvbWlzZS5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5saXN0ZW4gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpO1xuXG5jb25zdCBsaXN0ZW4gPSBleHBvcnRzLmxpc3RlbiA9IGZ1bmN0aW9uIChvYmosIC4uLmV2ZW50TmFtZXMpIHtcbiAgaWYgKHR5cGVvZiBldmVudE5hbWVzID09PSAnc3RyaW5nJykgZXZlbnROYW1lcyA9IFtldmVudE5hbWVzXTtcbiAgaWYgKCFvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXSkgdGhyb3cgbmV3IF9lcnJvcnMuRlBJbnB1dEVycm9yKCdWYWxpZCBFdmVudEVtaXR0ZXIgcmVxdWlyZWQuJyk7XG4gIC8vIEdldHMgY2FsbGJhY2sgdG8gYXR0YWNoIHRvIHRoZSBldmVudCBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpO1xuICB0aGlzLl9GUC5kZXN0cm95ID0gKCkgPT4gdGhpcy5fRlAuZGVzdHJveUhhbmRsZXMubWFwKGZuID0+IGZuKCkgfHwgdHJ1ZSkuZmlsdGVyKHYgPT4gdikubGVuZ3RoO1xuICB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcyA9IGV2ZW50TmFtZXMubWFwKGV2ZW50TmFtZSA9PiB7XG4gICAgb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10oZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICByZXR1cm4gKCkgPT4gb2JqW29iai5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ29mZiddKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5bGRtVnVkSE11YW5NaVhTd2libUZ0WlhNaU9sc2liR2x6ZEdWdUlpd2liMkpxSWl3aVpYWmxiblJPWVcxbGN5SXNJbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0pHVUVsdWNIVjBSWEp5YjNJaUxDSm9ZVzVrYkdWeUlpd2lZMmhoYVc1RmJtUWlMQ0pmUmxBaUxDSmtaWE4wY205NUlpd2laR1Z6ZEhKdmVVaGhibVJzWlhNaUxDSnRZWEFpTENKbWJpSXNJbVpwYkhSbGNpSXNJbllpTENKc1pXNW5kR2dpTENKbGRtVnVkRTVoYldVaUxDSnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3TzBGQlFVRTdPMEZCUlU4c1RVRkJUVUVzTUVKQlFWTXNWVUZCVTBNc1IwRkJWQ3hGUVVGakxFZEJRVWRETEZWQlFXcENMRVZCUVRaQ08wRkJRMnBFTEUxQlFVa3NUMEZCVDBFc1ZVRkJVQ3hMUVVGelFpeFJRVUV4UWl4RlFVRnZRMEVzWVVGQllTeERRVUZEUVN4VlFVRkVMRU5CUVdJN1FVRkRjRU1zVFVGQlNTeERRVUZEUkN4SlFVRkpRU3hKUVVGSlJTeG5Ra0ZCU2l4SFFVRjFRaXhyUWtGQmRrSXNSMEZCTkVNc1NVRkJhRVFzUTBGQlRDeEZRVUUwUkN4TlFVRk5MRWxCUVVsRExHOUNRVUZLTEVOQlFXbENMRGhDUVVGcVFpeERRVUZPTzBGQlF6VkVPMEZCUTBFc1VVRkJUVU1zVlVGQlZTeExRVUZMUXl4UlFVRk1MRVZCUVdoQ08wRkJRMEVzVDBGQlMwTXNSMEZCVEN4RFFVRlRReXhQUVVGVUxFZEJRVzFDTEUxQlFVMHNTMEZCUzBRc1IwRkJUQ3hEUVVGVFJTeGpRVUZVTEVOQlFYZENReXhIUVVGNFFpeERRVUUwUWtNc1RVRkJUVUVzVVVGQlVTeEpRVUV4UXl4RlFVRm5SRU1zVFVGQmFFUXNRMEZCZFVSRExFdEJRVXRCTEVOQlFUVkVMRVZCUVN0RVF5eE5RVUY0Ump0QlFVTkJMRTlCUVV0UUxFZEJRVXdzUTBGQlUwVXNZMEZCVkN4SFFVRXdRbEFzVjBGQlYxRXNSMEZCV0N4RFFVRmxTeXhoUVVGaE8wRkJRM0JFWkN4UlFVRkpRU3hKUVVGSlJTeG5Ra0ZCU2l4SFFVRjFRaXhyUWtGQmRrSXNSMEZCTkVNc1NVRkJhRVFzUlVGQmMwUlpMRk5CUVhSRUxFVkJRV2xGVml4UFFVRnFSVHRCUVVOQkxGZEJRVThzVFVGQlRVb3NTVUZCU1VFc1NVRkJTV1VzYlVKQlFVb3NSMEZCTUVJc2NVSkJRVEZDTEVkQlFXdEVMRXRCUVhSRUxFVkJRVFpFUkN4VFFVRTNSQ3hGUVVGM1JWWXNUMEZCZUVVc1EwRkJZanRCUVVORUxFZEJTSGxDTEVOQlFURkNPMEZCU1VFc1UwRkJUeXhKUVVGUU8wRkJRMFFzUTBGWVRTSXNJbVpwYkdVaU9pSmxkbVZ1ZEhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUwxVnpaWEp6TDJSc1pYWjVMMk52WkdVdmIzTnpMMloxYm1OMGFXOXVZV3d0Y21sMlpYSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJHVUVsdWNIVjBSWEp5YjNJZ2ZTQm1jbTl0SUNjdUwyMXZaSFZzWlhNdlpYSnliM0p6SjF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYkdsemRHVnVJRDBnWm5WdVkzUnBiMjRvYjJKcUxDQXVMaTVsZG1WdWRFNWhiV1Z6S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWlhabGJuUk9ZVzFsY3lBOVBUMGdKM04wY21sdVp5Y3BJR1YyWlc1MFRtRnRaWE1nUFNCYlpYWmxiblJPWVcxbGMxMWNiaUFnYVdZZ0tDRnZZbXBiYjJKcUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ1B5QW5ZV1JrUlhabGJuUk1hWE4wWlc1bGNpY2dPaUFuYjI0blhTa2dkR2h5YjNjZ2JtVjNJRVpRU1c1d2RYUkZjbkp2Y2lnblZtRnNhV1FnUlhabGJuUkZiV2wwZEdWeUlISmxjWFZwY21Wa0xpY3BYRzRnSUM4dklFZGxkSE1nWTJGc2JHSmhZMnNnZEc4Z1lYUjBZV05vSUhSdklIUm9aU0JsZG1WdWRDQm9ZVzVrYkdWeWMxeHVJQ0JqYjI1emRDQm9ZVzVrYkdWeUlEMGdkR2hwY3k1amFHRnBia1Z1WkNncFhHNGdJSFJvYVhNdVgwWlFMbVJsYzNSeWIza2dQU0FvS1NBOVBpQjBhR2x6TGw5R1VDNWtaWE4wY205NVNHRnVaR3hsY3k1dFlYQW9abTRnUFQ0Z1ptNG9LU0I4ZkNCMGNuVmxLUzVtYVd4MFpYSW9kaUE5UGlCMktTNXNaVzVuZEdoY2JpQWdkR2hwY3k1ZlJsQXVaR1Z6ZEhKdmVVaGhibVJzWlhNZ1BTQmxkbVZ1ZEU1aGJXVnpMbTFoY0NobGRtVnVkRTVoYldVZ1BUNGdlMXh1SUNBZ0lHOWlhbHR2WW1vdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lBL0lDZGhaR1JGZG1WdWRFeHBjM1JsYm1WeUp5QTZJQ2R2YmlkZEtHVjJaVzUwVG1GdFpTd2dhR0Z1Wkd4bGNpbGNiaUFnSUNCeVpYUjFjbTRnS0NrZ1BUNGdiMkpxVzI5aWFpNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJRDhnSjNKbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJbklEb2dKMjltWmlkZEtHVjJaVzUwVG1GdFpTd2dhR0Z1Wkd4bGNpbGNiaUFnZlNsY2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4waVhYMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9ldmVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5fdGhlbklmID0gZXhwb3J0cy50YXBJZiA9IGV4cG9ydHMudGhlbklmID0gdW5kZWZpbmVkO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi9tb2R1bGVzL3V0aWxzJyk7XG5cbmV4cG9ydHMudGhlbklmID0gdGhlbklmO1xuZXhwb3J0cy50YXBJZiA9IHRhcElmO1xuZXhwb3J0cy5fdGhlbklmID0gX3RoZW5JZjtcblxuXG5mdW5jdGlvbiB0aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0aGVuSWYnLCBbLi4uYXJndW1lbnRzXSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZDtcbiAgICBjb25kID0geCA9PiB4O1xuICB9XG4gIGlmICgoMCwgX3V0aWxzLmlzUHJvbWlzZUxpa2UpKHRoaXMpKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2YWx1ZSA9PiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSkodmFsdWUpKTtcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpO1xufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmQ7XG4gICAgY29uZCA9IHggPT4geDtcbiAgfVxuICBpZiAoKDAsIF91dGlscy5pc1Byb21pc2VMaWtlKSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gX3RoZW5JZihjb25kID0geCA9PiB4LCBpZlRydWUgPSB4ID0+IHgsIGlmRmFsc2UgPSAoKSA9PiBudWxsLCByZXR1cm5WYWx1ZSA9IGZhbHNlKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuICByZXR1cm4gdmFsdWUgPT4gRlAucmVzb2x2ZShjb25kKHZhbHVlKSkudGhlbihhbnMgPT4gYW5zID8gaWZUcnVlKHZhbHVlKSA6IGlmRmFsc2UodmFsdWUpKS50aGVuKHYgPT4gcmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OWpiMjVrYVhScGIyNWhiQzVxY3lKZExDSnVZVzFsY3lJNld5SjBhR1Z1U1dZaUxDSjBZWEJKWmlJc0lsOTBhR1Z1U1dZaUxDSmpiMjVrSWl3aWFXWlVjblZsSWl3aWFXWkdZV3h6WlNJc0luTjBaWEJ6SWl3aVlXUmtVM1JsY0NJc0ltRnlaM1Z0Wlc1MGN5SXNJbXhsYm1kMGFDSXNJbmdpTENKMGFHVnVJaXdpZG1Gc2RXVWlMQ0p5WlhSMWNtNVdZV3gxWlNJc0lrWlFJaXdpY21WeGRXbHlaU0lzSW5KbGMyOXNkbVVpTENKaGJuTWlMQ0oySWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08wRkJRVUU3TzFGQlJWRkJMRTBzUjBGQlFVRXNUVHRSUVVGUlF5eExMRWRCUVVGQkxFczdVVUZCVDBNc1R5eEhRVUZCUVN4UE96czdRVUZGZGtJc1UwRkJVMFlzVFVGQlZDeERRVUZuUWtjc1NVRkJhRUlzUlVGQmMwSkRMRTFCUVhSQ0xFVkJRVGhDUXl4UFFVRTVRaXhGUVVGMVF6dEJRVU55UXl4TlFVRkpMRXRCUVV0RExFdEJRVlFzUlVGQlowSXNUMEZCVHl4TFFVRkxReXhQUVVGTUxFTkJRV0VzVVVGQllpeEZRVUYxUWl4RFFVRkRMRWRCUVVkRExGTkJRVW9zUTBGQmRrSXNRMEZCVUR0QlFVTm9RaXhOUVVGSlFTeFZRVUZWUXl4TlFVRldMRXRCUVhGQ0xFTkJRWHBDTEVWQlFUUkNPMEZCUXpGQ1RDeGhRVUZUUkN4SlFVRlVPMEZCUTBGQkxGZEJRVTlQTEV0QlFVdEJMRU5CUVZvN1FVRkRSRHRCUVVORUxFMUJRVWtzTUVKQlFXTXNTVUZCWkN4RFFVRktMRVZCUVhsQ08wRkJRM1pDTEZkQlFVOHNTMEZCUzBNc1NVRkJUQ3hEUVVGVlF5eFRRVUZUVml4UlFVRlJReXhKUVVGU0xFVkJRV05ETEUxQlFXUXNSVUZCYzBKRExFOUJRWFJDTEVWQlFTdENUeXhMUVVFdlFpeERRVUZ1UWl4RFFVRlFPMEZCUTBRN1FVRkRSQ3hUUVVGUFZpeFJRVUZSUXl4SlFVRlNMRVZCUVdORExFMUJRV1FzUlVGQmMwSkRMRTlCUVhSQ0xFTkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRTaXhMUVVGVUxFTkJRV1ZGTEVsQlFXWXNSVUZCY1VKRExFMUJRWEpDTEVWQlFUWkNReXhQUVVFM1FpeEZRVUZ6UXp0QlFVTndReXhOUVVGSkxFdEJRVXRETEV0QlFWUXNSVUZCWjBJc1QwRkJUeXhMUVVGTFF5eFBRVUZNTEVOQlFXRXNUMEZCWWl4RlFVRnpRaXhEUVVGRExFZEJRVWRETEZOQlFVb3NRMEZCZEVJc1EwRkJVRHRCUVVOb1FpeE5RVUZKUVN4VlFVRlZReXhOUVVGV0xFdEJRWEZDTEVOQlFYcENMRVZCUVRSQ08wRkJRekZDVEN4aFFVRlRSQ3hKUVVGVU8wRkJRMEZCTEZkQlFVOVBMRXRCUVV0QkxFTkJRVm83UVVGRFJEdEJRVU5FTEUxQlFVa3NNRUpCUVdNc1NVRkJaQ3hEUVVGS0xFVkJRWGxDTzBGQlEzWkNMRmRCUVU4c1MwRkJTME1zU1VGQlRDeERRVUZWUXl4VFFVRlRWaXhSUVVGUlF5eEpRVUZTTEVWQlFXTkRMRTFCUVdRc1JVRkJjMEpETEU5QlFYUkNMRVZCUVN0Q0xFbEJRUzlDTEVWQlFYRkRUeXhMUVVGeVF5eERRVUZ1UWl4RFFVRlFPMEZCUTBRN1FVRkRSQ3hUUVVGUFZpeFJRVUZSUXl4SlFVRlNMRVZCUVdORExFMUJRV1FzUlVGQmMwSkRMRTlCUVhSQ0xFVkJRU3RDTEVsQlFTOUNMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeFRRVUZUU0N4UFFVRlVMRU5CUVdsQ1F5eFBRVUZQVHl4TFFVRkxRU3hEUVVFM1FpeEZRVUZuUTA0c1UwRkJVMDBzUzBGQlMwRXNRMEZCT1VNc1JVRkJhVVJNTEZWQlFWVXNUVUZCVFN4SlFVRnFSU3hGUVVGMVJWRXNZMEZCWXl4TFFVRnlSaXhGUVVFMFJqdEJRVU14Uml4UlFVRk5ReXhMUVVGTFF5eFJRVUZSTEZOQlFWSXNRMEZCV0R0QlFVTkJMRk5CUVU5SUxGTkJRMHhGTEVkQlFVZEZMRTlCUVVnc1EwRkJWMklzUzBGQlMxTXNTMEZCVEN4RFFVRllMRVZCUTBkRUxFbEJSRWdzUTBGRFVVMHNUMEZCVVVFc1RVRkJUV0lzVDBGQlQxRXNTMEZCVUN4RFFVRk9MRWRCUVhOQ1VDeFJRVUZSVHl4TFFVRlNMRU5CUkhSRExFVkJSVWRFTEVsQlJrZ3NRMEZGVVU4c1MwRkJUVXdzWTBGQlkwUXNTMEZCWkN4SFFVRnpRazBzUTBGR2NFTXNRMEZFUmp0QlFVbEVJaXdpWm1sc1pTSTZJbU52Ym1ScGRHbHZibUZzTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTlrYkdWMmVTOWpiMlJsTDI5emN5OW1kVzVqZEdsdmJtRnNMWEpwZG1WeUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dhWE5RY205dGFYTmxUR2xyWlNCOUlHWnliMjBnSnk0dmJXOWtkV3hsY3k5MWRHbHNjeWRjYmx4dVpYaHdiM0owSUh0MGFHVnVTV1lzSUhSaGNFbG1MQ0JmZEdobGJrbG1mVnh1WEc1bWRXNWpkR2x2YmlCMGFHVnVTV1lvWTI5dVpDd2dhV1pVY25WbExDQnBaa1poYkhObEtTQjdYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkMGFHVnVTV1luTENCYkxpNHVZWEpuZFcxbGJuUnpYU2xjYmlBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQVDA5SURFcElIdGNiaUFnSUNCcFpsUnlkV1VnUFNCamIyNWtYRzRnSUNBZ1kyOXVaQ0E5SUhnZ1BUNGdlRnh1SUNCOVhHNGdJR2xtSUNocGMxQnliMjFwYzJWTWFXdGxLSFJvYVhNcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR2hsYmloMllXeDFaU0E5UGlCZmRHaGxia2xtS0dOdmJtUXNJR2xtVkhKMVpTd2dhV1pHWVd4elpTa29kbUZzZFdVcEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCZmRHaGxia2xtS0dOdmJtUXNJR2xtVkhKMVpTd2dhV1pHWVd4elpTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHRndTV1lvWTI5dVpDd2dhV1pVY25WbExDQnBaa1poYkhObEtTQjdYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkMFlYQkpaaWNzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUdsbVZISjFaU0E5SUdOdmJtUmNiaUFnSUNCamIyNWtJRDBnZUNBOVBpQjRYRzRnSUgxY2JpQWdhV1lnS0dselVISnZiV2x6WlV4cGEyVW9kR2hwY3lrcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTBhR1Z1S0haaGJIVmxJRDArSUY5MGFHVnVTV1lvWTI5dVpDd2dhV1pVY25WbExDQnBaa1poYkhObExDQjBjblZsS1NoMllXeDFaU2twWEc0Z0lIMWNiaUFnY21WMGRYSnVJRjkwYUdWdVNXWW9ZMjl1WkN3Z2FXWlVjblZsTENCcFprWmhiSE5sTENCMGNuVmxLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmZkR2hsYmtsbUtHTnZibVFnUFNCNElEMCtJSGdzSUdsbVZISjFaU0E5SUhnZ1BUNGdlQ3dnYVdaR1lXeHpaU0E5SUNncElEMCtJRzUxYkd3c0lISmxkSFZ5YmxaaGJIVmxJRDBnWm1Gc2MyVXBJSHRjYmlBZ1kyOXVjM1FnUmxBZ1BTQnlaWEYxYVhKbEtDY3VMMmx1WkdWNEp5bGNiaUFnY21WMGRYSnVJSFpoYkhWbElEMCtYRzRnSUNBZ1JsQXVjbVZ6YjJ4MlpTaGpiMjVrS0haaGJIVmxLU2xjYmlBZ0lDQWdJQzUwYUdWdUtHRnVjeUE5UGlBb1lXNXpJRDhnYVdaVWNuVmxLSFpoYkhWbEtTQTZJR2xtUm1Gc2MyVW9kbUZzZFdVcEtTbGNiaUFnSUNBZ0lDNTBhR1Z1S0hZZ1BUNGdLSEpsZEhWeWJsWmhiSFZsSUQ4Z2RtRnNkV1VnT2lCMktTbGNibjFjYmlKZGZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb25kaXRpb25hbC5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFsbCA9IGFsbDtcbmV4cG9ydHMucHJvbWlzZUFsbE9iamVjdCA9IHByb21pc2VBbGxPYmplY3Q7XG5leHBvcnRzLnJlamVjdCA9IHJlamVjdDtcbmV4cG9ydHMuX2RlbGF5ID0gX2RlbGF5O1xuZXhwb3J0cy5kZWxheSA9IGRlbGF5O1xuXG52YXIgX2Vycm9ycyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKTtcblxuZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKTtcbiAgcmV0dXJuIEZQLnJlc29sdmUoQXJyYXkuaXNBcnJheShwcm9taXNlcykgPyBQcm9taXNlLmFsbChwcm9taXNlcykgOiBwcm9taXNlQWxsT2JqZWN0KHByb21pc2VzKSk7XG59XG5cbmZ1bmN0aW9uIHByb21pc2VBbGxPYmplY3Qob2JqKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopO1xuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gb2JqW2tleV0pO1xuICByZXR1cm4gUHJvbWlzZS5hbGwodmFsdWVzKS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0cy5yZWR1Y2UoKG9iaiwgdmFsLCBpbmRleCkgPT4ge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltrZXldID0gdmFsLCBfT2JqZWN0JGFzc2lnbiksIG9iaik7XG4gIH0sIHt9KSk7XG59XG5cbmZ1bmN0aW9uIHJlamVjdChlcnIpIHtcbiAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgaWYgKHRoaXMpIHRoaXMuX2Vycm9yID0gZXJyO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKTtcbn1cblxuZnVuY3Rpb24gX2RlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpO1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIobXNlYykpIHRocm93IG5ldyBfZXJyb3JzLkZQSW5wdXRFcnJvcignRlAuZGVsYXkobWlsbGlzZWMpIHJlcXVpcmVzIGEgbnVtZXJpYyBhcmcuJyk7XG4gIHJldHVybiB2YWx1ZSA9PiBuZXcgRlAocmVzb2x2ZSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHZhbHVlKSwgbXNlYyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBkZWxheShtc2VjKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKTtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2RlbGF5JywgWy4uLmFyZ3VtZW50c10pO1xuICByZXR1cm4gdGhpcyAmJiB0aGlzLl9GUCA/IEZQLnJlc29sdmUodGhpcy50aGVuKF9kZWxheShtc2VjKSkpIDogX2RlbGF5KG1zZWMpKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5d2NtOXRhWE5sTG1weklsMHNJbTVoYldWeklqcGJJbUZzYkNJc0luQnliMjFwYzJWQmJHeFBZbXBsWTNRaUxDSnlaV3BsWTNRaUxDSmZaR1ZzWVhraUxDSmtaV3hoZVNJc0luQnliMjFwYzJWeklpd2lSbEFpTENKeVpYRjFhWEpsSWl3aWNtVnpiMngyWlNJc0lrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0lsQnliMjFwYzJVaUxDSnZZbW9pTENKclpYbHpJaXdpVDJKcVpXTjBJaXdpWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3lJc0luWmhiSFZsY3lJc0ltMWhjQ0lzSW10bGVTSXNJblJvWlc0aUxDSnlaWE4xYkhSeklpd2ljbVZrZFdObElpd2lkbUZzSWl3aWFXNWtaWGdpTENKaGMzTnBaMjRpTENKbGNuSWlMQ0pGY25KdmNpSXNJbDlsY25KdmNpSXNJbTF6WldNaUxDSk9kVzFpWlhJaUxDSnBjMGx1ZEdWblpYSWlMQ0pHVUVsdWNIVjBSWEp5YjNJaUxDSjJZV3gxWlNJc0luTmxkRlJwYldWdmRYUWlMQ0p6ZEdWd2N5SXNJbUZrWkZOMFpYQWlMQ0poY21kMWJXVnVkSE1pTENKZlJsQWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPMUZCU1dkQ1FTeEhMRWRCUVVGQkxFYzdVVUZMUVVNc1owSXNSMEZCUVVFc1owSTdVVUZUUVVNc1RTeEhRVUZCUVN4Tk8xRkJVVUZETEUwc1IwRkJRVUVzVFR0UlFVMUJReXhMTEVkQlFVRkJMRXM3TzBGQmFFTm9RanM3UVVGSlR5eFRRVUZUU2l4SFFVRlVMRU5CUVdGTExGRkJRV0lzUlVGQmRVSTdRVUZETlVJc1VVRkJUVU1zUzBGQlMwTXNVVUZCVVN4SlFVRlNMRU5CUVZnN1FVRkRRU3hUUVVGUFJDeEhRVUZIUlN4UFFVRklMRU5CUVZkRExFMUJRVTFETEU5QlFVNHNRMEZCWTB3c1VVRkJaQ3hKUVVFd1FrMHNVVUZCVVZnc1IwRkJVaXhEUVVGWlN5eFJRVUZhTEVOQlFURkNMRWRCUVd0RVNpeHBRa0ZCYVVKSkxGRkJRV3BDTEVOQlFUZEVMRU5CUVZBN1FVRkRSRHM3UVVGRlRTeFRRVUZUU2l4blFrRkJWQ3hEUVVFd1FsY3NSMEZCTVVJc1JVRkJLMEk3UVVGRGNFTXNVVUZCVFVNc1QwRkJUME1zVDBGQlQwTXNiVUpCUVZBc1EwRkJNa0pJTEVkQlFUTkNMRU5CUVdJN1FVRkRRU3hSUVVGTlNTeFRRVUZUU0N4TFFVRkxTU3hIUVVGTUxFTkJRVk5ETEU5QlFVOU9MRWxCUVVsTkxFZEJRVW9zUTBGQmFFSXNRMEZCWmp0QlFVTkJMRk5CUVU5UUxGRkJRVkZZTEVkQlFWSXNRMEZCV1dkQ0xFMUJRVm9zUlVGQmIwSkhMRWxCUVhCQ0xFTkJRWGxDUXl4WFFVRlhRU3hSUVVGUlF5eE5RVUZTTEVOQlFXVXNRMEZCUTFRc1IwRkJSQ3hGUVVGTlZTeEhRVUZPTEVWQlFWZERMRXRCUVZnc1MwRkJjVUk3UVVGQlFUczdRVUZETjBVc1ZVRkJUVXdzVFVGQlRVd3NTMEZCUzFVc1MwRkJUQ3hEUVVGYU8wRkJRMEVzVjBGQlQxUXNUMEZCVDFVc1RVRkJVQ3h6UTBGQmFVSk9MRWRCUVdwQ0xFbEJRWFZDU1N4SFFVRjJRaXh0UWtGQk9FSldMRWRCUVRsQ0xFTkJRVkE3UVVGRFJDeEhRVWd3UXl4RlFVZDRReXhGUVVoM1F5eERRVUZ3UXl4RFFVRlFPMEZCU1VRN08wRkJSVTBzVTBGQlUxWXNUVUZCVkN4RFFVRm5RblZDTEVkQlFXaENMRVZCUVhGQ08wRkJRekZDTEUxQlFVbEJMR1ZCUVdWRExFdEJRVzVDTEVWQlFUQkNPMEZCUTNoQ0xGRkJRVWtzU1VGQlNpeEZRVUZWTEV0QlFVdERMRTFCUVV3c1IwRkJZMFlzUjBGQlpEdEJRVU5XTEZkQlFVOWtMRkZCUVZGVUxFMUJRVklzUTBGQlpYVkNMRWRCUVdZc1EwRkJVRHRCUVVORU8wRkJRMFFzVVVGQlRTeEpRVUZKUXl4TFFVRktMRU5CUVZjc09FTkJRVmdzUTBGQlRqdEJRVU5FT3p0QlFVVk5MRk5CUVZOMlFpeE5RVUZVTEVOQlFXZENlVUlzU1VGQmFFSXNSVUZCYzBJN1FVRkRNMElzVVVGQlRYUkNMRXRCUVV0RExGRkJRVkVzU1VGQlVpeERRVUZZTzBGQlEwRXNUVUZCU1N4RFFVRkRjMElzVDBGQlQwTXNVMEZCVUN4RFFVRnBRa1lzU1VGQmFrSXNRMEZCVEN4RlFVRTJRaXhOUVVGTkxFbEJRVWxITEc5Q1FVRktMRU5CUVdsQ0xEUkRRVUZxUWl4RFFVRk9PMEZCUXpkQ0xGTkJRVTlETEZOQlFWTXNTVUZCU1RGQ0xFVkJRVW9zUTBGQlQwVXNWMEZCVnp0QlFVRkZlVUlzWlVGQlZ5eE5RVUZOZWtJc1VVRkJVWGRDTEV0QlFWSXNRMEZCYWtJc1JVRkJhVU5LTEVsQlFXcERPMEZCUVhkRExFZEJRVFZFTEVOQlFXaENPMEZCUTBRN08wRkJSVTBzVTBGQlUzaENMRXRCUVZRc1EwRkJaWGRDTEVsQlFXWXNSVUZCY1VJN1FVRkRNVUlzVVVGQlRYUkNMRXRCUVV0RExGRkJRVkVzU1VGQlVpeERRVUZZTzBGQlEwRXNUVUZCU1N4TFFVRkxNa0lzUzBGQlZDeEZRVUZuUWl4UFFVRlBMRXRCUVV0RExFOUJRVXdzUTBGQllTeFBRVUZpTEVWQlFYTkNMRU5CUVVNc1IwRkJSME1zVTBGQlNpeERRVUYwUWl4RFFVRlFPMEZCUTJoQ0xGTkJRVThzVVVGQlVTeExRVUZMUXl4SFFVRmlMRWRCUVcxQ0wwSXNSMEZCUjBVc1QwRkJTQ3hEUVVGWExFdEJRVXRYTEVsQlFVd3NRMEZCVldoQ0xFOUJRVTk1UWl4SlFVRlFMRU5CUVZZc1EwRkJXQ3hEUVVGdVFpeEhRVUY1UkhwQ0xFOUJRVTk1UWl4SlFVRlFMRWRCUVdoRk8wRkJRMFFpTENKbWFXeGxJam9pY0hKdmJXbHpaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZaR3hsZG5rdlkyOWtaUzl2YzNNdlpuVnVZM1JwYjI1aGJDMXlhWFpsY2lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lFWlFTVzV3ZFhSRmNuSnZjaUI5SUdaeWIyMGdKeTR2Ylc5a2RXeGxjeTlsY25KdmNuTW5YRzVjYmx4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1lXeHNLSEJ5YjIxcGMyVnpLU0I3WEc0Z0lHTnZibk4wSUVaUUlEMGdjbVZ4ZFdseVpTZ25MaThuS1Z4dUlDQnlaWFIxY200Z1JsQXVjbVZ6YjJ4MlpTaEJjbkpoZVM1cGMwRnljbUY1S0hCeWIyMXBjMlZ6S1NBL0lGQnliMjFwYzJVdVlXeHNLSEJ5YjIxcGMyVnpLU0E2SUhCeWIyMXBjMlZCYkd4UFltcGxZM1FvY0hKdmJXbHpaWE1wS1Z4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjSEp2YldselpVRnNiRTlpYW1WamRDaHZZbW9wSUh0Y2JpQWdZMjl1YzNRZ2EyVjVjeUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0c5aWFpbGNiaUFnWTI5dWMzUWdkbUZzZFdWeklEMGdhMlY1Y3k1dFlYQW9hMlY1SUQwK0lHOWlhbHRyWlhsZEtWeHVJQ0J5WlhSMWNtNGdVSEp2YldselpTNWhiR3dvZG1Gc2RXVnpLUzUwYUdWdUtISmxjM1ZzZEhNZ1BUNGdjbVZ6ZFd4MGN5NXlaV1IxWTJVb0tHOWlhaXdnZG1Gc0xDQnBibVJsZUNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUd0bGVTQTlJR3RsZVhOYmFXNWtaWGhkWEc0Z0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1aGMzTnBaMjRvZXlCYmEyVjVYVG9nZG1Gc0lIMHNJRzlpYWlsY2JpQWdmU3dnZTMwcEtWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WcVpXTjBLR1Z5Y2lrZ2UxeHVJQ0JwWmlBb1pYSnlJR2x1YzNSaGJtTmxiMllnUlhKeWIzSXBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5a2dkR2hwY3k1ZlpYSnliM0lnUFNCbGNuSmNiaUFnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WldwbFkzUW9aWEp5S1Z4dUlDQjlYRzRnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnVW1WcVpXTjBJRzl1YkhrZ1lXTmpaWEIwY3lCaElHNWxkeUJwYm5OMFlXNWpaU0J2WmlCRmNuSnZjaUZnS1Z4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMlJsYkdGNUtHMXpaV01wSUh0Y2JpQWdZMjl1YzNRZ1JsQWdQU0J5WlhGMWFYSmxLQ2N1THljcFhHNGdJR2xtSUNnaFRuVnRZbVZ5TG1selNXNTBaV2RsY2lodGMyVmpLU2tnZEdoeWIzY2dibVYzSUVaUVNXNXdkWFJGY25KdmNpZ25SbEF1WkdWc1lYa29iV2xzYkdselpXTXBJSEpsY1hWcGNtVnpJR0VnYm5WdFpYSnBZeUJoY21jdUp5bGNiaUFnY21WMGRYSnVJSFpoYkhWbElEMCtJRzVsZHlCR1VDaHlaWE52YkhabElEMCtJSHNnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUJ5WlhOdmJIWmxLSFpoYkhWbEtTd2diWE5sWXlrZ2ZTbGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdSbGJHRjVLRzF6WldNcElIdGNiaUFnWTI5dWMzUWdSbEFnUFNCeVpYRjFhWEpsS0NjdUx5Y3BYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0Nka1pXeGhlU2NzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCeVpYUjFjbTRnZEdocGN5QW1KaUIwYUdsekxsOUdVQ0EvSUVaUUxuSmxjMjlzZG1Vb2RHaHBjeTUwYUdWdUtGOWtaV3hoZVNodGMyVmpLU2twSURvZ1gyUmxiR0Y1S0cxelpXTXBLQ2xjYm4xY2JpSmRmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDN0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3RLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUM1S0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBIiwic291cmNlUm9vdCI6IiJ9