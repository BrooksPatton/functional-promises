/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _require = __webpack_require__(/*! ./modules/errors */ 1),FunctionalError = _require.FunctionalError;var _require2 =
__webpack_require__(/*! ./modules/utils */ 2),isFunction = _require2.isFunction,flatten = _require2.flatten;var _require3 =
__webpack_require__(/*! ./monads */ 4),chain = _require3.chain,chainEnd = _require3.chainEnd;
var FP = FunctionalPromises;

FP.default = FP;

Object.assign(FP.prototype,
__webpack_require__(/*! ./arrays */ 5),
__webpack_require__(/*! ./events */ 6),
__webpack_require__(/*! ./conditional */ 7),
__webpack_require__(/*! ./promise */ 8));

function FunctionalPromises(resolveRejectCB) {
  if (!(this instanceof FunctionalPromises)) {return new FunctionalPromises(resolveRejectCB);}
  if (arguments.length !== 1) throw new Error('FunctionalPromises constructor only accepts 1 callback argument');
  this._FP = {
    errors: { limit: 0, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4 };

}

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = function (msec) {return FP.resolve().delay(msec);};
FP.silent = function (limit) {return FP.resolve().silent(limit);};

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;
FP.reject = FP.prototype.reject;


FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('concurrency', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet() {var errorLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('quiet', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.errors = { count: 0, limit: errorLimit };
  return this;
};
FP.prototype.silent = FP.prototype.quiet;

FP.prototype.get = function get() {for (var _len = arguments.length, keyNames = Array(_len), _key = 0; _key < _len; _key++) {keyNames[_key] = arguments[_key];}
  if (this.steps) return this.addStep('get', [].concat(Array.prototype.slice.call(arguments)));
  keyNames = flatten(keyNames);
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce(function (extracted, key) {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 2) return this.catchIf.apply(this, arguments);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.catch(function (err) {return fn(err);}));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));

  return FP.resolve(this._FP.promise.catch(function (err) {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(function (value) {return fn(value) ? value : value;}));
};

FP.resolve = FP.prototype.resolve = function resolve(value) {
  return new FP(function (resolve, reject) {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
};

FP.promisify = function promisify(cb) {var _this = this;
  return function () {for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}return new FP(function (yah, nah) {return (
        cb.call.apply(cb, [_this].concat(args, [function (err, res) {return err ? nah(err) : yah(res);}])));});};
};

FP.promisifyAll = function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(function (key) {return typeof obj[key] === 'function';}).
  reduce(function (obj, fnName) {
    if (!/Sync/.test(fnName) && !obj[fnName + 'Async']) obj[fnName + 'Async'] = FP.promisify(obj['' + fnName]);
    return obj;
  }, obj);
};

FP.unpack = function unpack() {
  var resolve = void 0,reject = void 0,promise = new FP(function (yah, nah) {resolve = yah;reject = nah;});
  return { promise: promise, resolve: resolve, reject: reject };
};

module.exports = FunctionalPromises;

if (process && process.on) {
  // process.on('uncaughtException', e => console.error('FPromises: FATAL EXCEPTION: uncaughtException', e))
  process.on('unhandledRejection', function (e) {return console.error('FPromises: FATAL ERROR: unhandledRejection', e);});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 3)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var FunctionalError = function (_Error) {_inherits(FunctionalError, _Error);
  function FunctionalError(msg, options) {_classCallCheck(this, FunctionalError);
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }var _this = _possibleConstructorReturn(this, (FunctionalError.__proto__ || Object.getPrototypeOf(FunctionalError)).call(this,
    msg));
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      Object.getOwnPropertyNames(options).
      forEach(function (key) {
        _this[key] = options[key];
      });
    }
    _this.name = _this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(_this, _this.constructor);return _this;
  }return FunctionalError;}(Error);var

FunctionalUserError = function (_FunctionalError) {_inherits(FunctionalUserError, _FunctionalError);function FunctionalUserError() {_classCallCheck(this, FunctionalUserError);return _possibleConstructorReturn(this, (FunctionalUserError.__proto__ || Object.getPrototypeOf(FunctionalUserError)).apply(this, arguments));}return FunctionalUserError;}(FunctionalError);var
FPUnexpectedError = function (_FunctionalError2) {_inherits(FPUnexpectedError, _FunctionalError2);function FPUnexpectedError() {_classCallCheck(this, FPUnexpectedError);return _possibleConstructorReturn(this, (FPUnexpectedError.__proto__ || Object.getPrototypeOf(FPUnexpectedError)).apply(this, arguments));}return FPUnexpectedError;}(FunctionalError);var
FPInputError = function (_FunctionalError3) {_inherits(FPInputError, _FunctionalError3);function FPInputError() {_classCallCheck(this, FPInputError);return _possibleConstructorReturn(this, (FPInputError.__proto__ || Object.getPrototypeOf(FPInputError)).apply(this, arguments));}return FPInputError;}(FunctionalError);var
FPSoftError = function (_FunctionalError4) {_inherits(FPSoftError, _FunctionalError4);function FPSoftError() {_classCallCheck(this, FPSoftError);return _possibleConstructorReturn(this, (FPSoftError.__proto__ || Object.getPrototypeOf(FPSoftError)).apply(this, arguments));}return FPSoftError;}(FunctionalError);var
FPTimeout = function (_FunctionalError5) {_inherits(FPTimeout, _FunctionalError5);function FPTimeout() {_classCallCheck(this, FPTimeout);return _possibleConstructorReturn(this, (FPTimeout.__proto__ || Object.getPrototypeOf(FPTimeout)).apply(this, arguments));}return FPTimeout;}(FunctionalError);

module.exports = {
  FunctionalError: FunctionalError,
  FunctionalUserError: FunctionalUserError,
  FPUnexpectedError: FPUnexpectedError,
  FPInputError: FPInputError,
  FPSoftError: FPSoftError,
  FPTimeout: FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJtc2ciLCJvcHRpb25zIiwibWVzc2FnZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwia2V5IiwibmFtZSIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InFuQ0FBTUEsZTtBQUNKLDJCQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLFFBQU9ELEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCLEtBSnVCO0FBS2xCRixPQUxrQjtBQU14QixRQUFJLFFBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDL0JFLGFBQU9DLG1CQUFQLENBQTJCSCxPQUEzQjtBQUNHSSxhQURILENBQ1csZUFBTztBQUNkLGNBQUtDLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FISDtBQUlEO0FBQ0QsVUFBS0MsSUFBTCxHQUFZLE1BQUtDLFdBQUwsQ0FBaUJELElBQTdCO0FBQ0E7QUFDQUUsVUFBTUMsaUJBQU4sUUFBOEIsTUFBS0YsV0FBbkMsRUFkd0I7QUFlekIsRyx5QkFoQjJCQyxLOztBQWtCeEJFLG1CLHdVQUE0QlosZTtBQUM1QmEsaUIsOFRBQTBCYixlO0FBQzFCYyxZLGdTQUFxQmQsZTtBQUNyQmUsVywwUkFBb0JmLGU7QUFDcEJnQixTLDhRQUFrQmhCLGU7O0FBRXhCaUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbEIsa0NBRGU7QUFFZlksMENBRmU7QUFHZkMsc0NBSGU7QUFJZkMsNEJBSmU7QUFLZkMsMEJBTGU7QUFNZkMsc0JBTmUsRUFBakIiLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRnVuY3Rpb25hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihtc2csIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBtc2dcbiAgICAgIGlmICggbXNnLm1lc3NhZ2UgKSBtc2cgPSBtc2cubWVzc2FnZVxuICAgIH1cbiAgICBzdXBlcihtc2cpXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucylcbiAgICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICB0aGlzW2tleV0gPSBvcHRpb25zW2tleV1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH1cbn1cbmNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dCxcbn1cbiJdfQ==

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var utils = module.exports = {
  isPromiseLike: function isPromiseLike(p) {return p && typeof p.then === 'function';},

  isFunction: function isFunction(fn) {return typeof fn === 'function';},

  isEnumerable: function isEnumerable(list) {return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';},

  flatten: function flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce(function (results, item) {return results.concat(Array.isArray(item) ? utils.flatten(item) : [item]);}, []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsInJlc3VsdHMiLCJpdGVtIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxlQUQ2Qix5QkFDZkMsQ0FEZSxFQUNaLENBQUUsT0FBT0EsS0FBSyxPQUFPQSxFQUFFQyxJQUFULEtBQWtCLFVBQTlCLENBQTBDLENBRGhDOztBQUc3QkMsWUFINkIsc0JBR2xCQyxFQUhrQixFQUdkLENBQUUsT0FBTyxPQUFPQSxFQUFQLEtBQWMsVUFBckIsQ0FBaUMsQ0FIckI7O0FBSzdCQyxjQUw2Qix3QkFLaEJDLElBTGdCLEVBS1YsQ0FBRSxPQUFPQSxRQUFRQyxNQUFNQyxPQUFOLENBQWNGLElBQWQsQ0FBUixJQUErQixPQUFPQSxLQUFLRyxPQUFPQyxRQUFaLENBQVAsS0FBaUMsVUFBdkUsQ0FBbUYsQ0FMM0U7O0FBTzdCQyxTQVA2QixtQkFPckJDLEdBUHFCLEVBT2hCO0FBQ1gsUUFBSSxDQUFDTCxNQUFNQyxPQUFOLENBQWNJLEdBQWQsQ0FBTCxFQUF5QixNQUFNLElBQUlDLEtBQUosQ0FBVSxpREFBVixDQUFOO0FBQ3pCLFdBQU9ELElBQUlFLE1BQUosQ0FBVyxVQUFDQyxPQUFELEVBQVVDLElBQVYsVUFBbUJELFFBQVFFLE1BQVIsQ0FBZVYsTUFBTUMsT0FBTixDQUFjUSxJQUFkLElBQXNCbkIsTUFBTWMsT0FBTixDQUFjSyxJQUFkLENBQXRCLEdBQTRDLENBQUNBLElBQUQsQ0FBM0QsQ0FBbkIsRUFBWCxFQUFrRyxFQUFsRyxDQUFQO0FBQ0QsR0FWNEIsRUFBL0IiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBpc1Byb21pc2VMaWtlKHApIHsgcmV0dXJuIHAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRnVuY3Rpb24oZm4pIHsgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRW51bWVyYWJsZShsaXN0KSB7IHJldHVybiBsaXN0ICYmIEFycmF5LmlzQXJyYXkobGlzdCkgfHwgdHlwZW9mIGxpc3RbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGZsYXR0ZW4oYXJyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHRocm93IG5ldyBFcnJvcignTWV0aG9kIGBmbGF0dGVuYCByZXF1aXJlcyB2YWxpZCBhcnJheSBwYXJhbWV0ZXInKVxuICAgIHJldHVybiBhcnIucmVkdWNlKChyZXN1bHRzLCBpdGVtKSA9PiByZXN1bHRzLmNvbmNhdChBcnJheS5pc0FycmF5KGl0ZW0pID8gdXRpbHMuZmxhdHRlbihpdGVtKSA6IFtpdGVtXSksIFtdKVxuICB9XG59XG4iXX0=

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { chain: chain, chainEnd: chainEnd


  /**
                                                     * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                                     * @returns FunctionalPromise
                                                     */ };
function chain() {
  var FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  var promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);

  return function (input) {
    if (!_this.steps || _this.steps.length <= 0) throw new FPInputError('No steps defined between .chain() & .chainEnd()');
    var stepCount = 0;var _FP$unpack =
    FP.unpack(),promise = _FP$unpack.promise,resolve = _FP$unpack.resolve,reject = _FP$unpack.reject;
    while (stepCount < _this.steps.length) {var _promise;var _steps$stepCount = _slicedToArray(
      _this.steps[stepCount], 3),fnName = _steps$stepCount[0],args = _steps$stepCount[2];
      promise = (_promise = promise)[fnName].apply(_promise, _toConsumableArray(args));
      stepCount++;
    }
    resolve(input);
    return promise;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwibGVuZ3RoIiwic3RlcENvdW50IiwidW5wYWNrIiwicmVqZWN0IiwiZm5OYW1lIiwiYXJncyIsImlucHV0Il0sIm1hcHBpbmdzIjoiaTBCQUF5QkEsUUFBUSxrQkFBUixDLENBQWpCQyxZLFlBQUFBLFk7O0FBRVJDLE9BQU9DLE9BQVAsR0FBaUIsRUFBRUMsWUFBRixFQUFTQzs7O0FBRzFCOzs7dURBSGlCLEVBQWpCO0FBT0EsU0FBU0QsS0FBVCxHQUFpQjtBQUNmLE1BQU1FLEtBQUtOLFFBQVEsU0FBUixDQUFYO0FBQ0E7QUFDQSxNQUFNTyxVQUFVRCxHQUFHRSxPQUFILEVBQWhCO0FBQ0FELFVBQVFFLEtBQVIsR0FBZ0IsRUFBaEI7QUFDQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1BLFNBQVNGLFFBQVQsR0FBb0I7QUFDbEIsTUFBTUMsS0FBS04sUUFBUSxTQUFSLENBQVg7O0FBRUEsU0FBTyxpQkFBUztBQUNkLFFBQUksQ0FBQyxNQUFLUyxLQUFOLElBQWUsTUFBS0EsS0FBTCxDQUFXQyxNQUFYLElBQXFCLENBQXhDLEVBQTJDLE1BQU0sSUFBSVQsWUFBSixDQUFpQixpREFBakIsQ0FBTjtBQUMzQyxRQUFJVSxZQUFZLENBQWhCLENBRmM7QUFHbUJMLE9BQUdNLE1BQUgsRUFIbkIsQ0FHVEwsT0FIUyxjQUdUQSxPQUhTLENBR0FDLE9BSEEsY0FHQUEsT0FIQSxDQUdTSyxNQUhULGNBR1NBLE1BSFQ7QUFJZCxXQUFPRixZQUFZLE1BQUtGLEtBQUwsQ0FBV0MsTUFBOUIsRUFBc0M7QUFDWCxZQUFLRCxLQUFMLENBQVdFLFNBQVgsQ0FEVyxLQUM3QkcsTUFENkIsdUJBQ25CQyxJQURtQjtBQUVwQ1IsZ0JBQVUscUJBQVFPLE1BQVIscUNBQW1CQyxJQUFuQixFQUFWO0FBQ0FKO0FBQ0Q7QUFDREgsWUFBUVEsS0FBUjtBQUNBLFdBQU9ULE9BQVA7QUFDRCxHQVhEO0FBWUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBGUElucHV0RXJyb3IgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY2hhaW4sIGNoYWluRW5kIH1cblxuXG4vKipcbiAqIFN0YXJ0ICdyZWNvcmRpbmcnIGEgY2hhaW4gb2YgY29tbWFuZHMsIGFmdGVyIHN0ZXBzIGRlZmluZWQgY2FsbCBgLmNoYWluRW5kKClgXG4gKiBAcmV0dXJucyBGdW5jdGlvbmFsUHJvbWlzZVxuICovXG5mdW5jdGlvbiBjaGFpbigpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgLy8gY3JlYXRlIGEgcGxhY2Vob2xkZXIvaW5pdGlhbCBwcm9taXNlIHRvIGhvbGQgdGhlIHN0ZXBzL2NoYWluIGRhdGFcbiAgY29uc3QgcHJvbWlzZSA9IEZQLnJlc29sdmUoKVxuICBwcm9taXNlLnN0ZXBzID0gW11cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuLyoqXG4gKiBDYWxsIGFmdGVyIHN0YXJ0aW5nIGEgYC5jaGFpbigpYC5cbiAqXG4gKiBPbmUgb2YgdGhlIGZldyBub24tY2hhaW5hYmxlIG1ldGhvZHMgaW4gdGhlIEFQSS5cbiAqIEByZXR1cm5zIGEgRnVuY3Rpb24uIEl0IHJ1bnMgeW91ciBmdW5jdGlvbmFsIGNoYWluIVxuICovXG5mdW5jdGlvbiBjaGFpbkVuZCgpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcblxuICByZXR1cm4gaW5wdXQgPT4ge1xuICAgIGlmICghdGhpcy5zdGVwcyB8fCB0aGlzLnN0ZXBzLmxlbmd0aCA8PSAwKSB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdObyBzdGVwcyBkZWZpbmVkIGJldHdlZW4gLmNoYWluKCkgJiAuY2hhaW5FbmQoKScpXG4gICAgbGV0IHN0ZXBDb3VudCA9IDBcbiAgICBsZXQge3Byb21pc2UsIHJlc29sdmUsIHJlamVjdH0gPSBGUC51bnBhY2soKVxuICAgIHdoaWxlIChzdGVwQ291bnQgPCB0aGlzLnN0ZXBzLmxlbmd0aCkge1xuICAgICAgY29uc3QgW2ZuTmFtZSwgLCBhcmdzXSA9IHRoaXMuc3RlcHNbc3RlcENvdW50XVxuICAgICAgcHJvbWlzZSA9IHByb21pc2VbZm5OYW1lXSguLi5hcmdzKVxuICAgICAgc3RlcENvdW50KytcbiAgICB9XG4gICAgcmVzb2x2ZShpbnB1dClcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG59XG4iXX0=

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/utils */ 2),isEnumerable = _require.isEnumerable;var _require2 =
__webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require2.FPInputError,FunctionalError = _require2.FunctionalError;

module.exports = { map: map, find: find, findIndex: findIndex, filter: filter, reduce: reduce };

function find(callback) {return _find.call(this, callback).then(function (_ref) {var item = _ref.item;return item;});}
function findIndex(callback) {return _find.call(this, callback).then(function (_ref2) {var index = _ref2.index;return index;});}

function _find(iterable, callback) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(function (results) {return results[0] != undefined ? { item: results[0], index: results.indexOf(results[0]) } : { item: undefined, index: -1 };});
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, function (acc, item) {return Promise.resolve(callback(item)).then(function (x) {return x ? acc.concat([item]) : acc;});}, []);
}

function reduce(iterable, reducer, initVal) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else iterable = FP.resolve(iterable, this);

  return new FP(function (resolve, reject) {
    return iterable.then(function (iterable) {
      var iterator = iterable[Symbol.iterator]();
      var i = 0;

      var next = function next(total) {
        var current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),total = _ref4[0],item = _ref4[1];return next(reducer(total, item, i++));}).catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }
  var resolvedOrRejected = false;
  var threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  var innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  var initialThread = 0;
  var errors = [];
  var count = 0;
  var results = [];
  var threadPool = new Set();
  var threadPoolFull = function threadPoolFull() {return threadPool.size >= threadLimit;};
  var isDone = function isDone() {return errors.length > _this._FP.errors.limit || count >= args.length || resolvedOrRejected;};
  var setResult = function setResult(index) {return function (value) {
      threadPool.delete(index);
      results[index] = value;
      return value;
    };};
  return FP.resolve(new Promise(function (resolve, reject) {
    var resolveIt = function resolveIt(x) {
      // console.log('Action.resolve:', resolvedOrRejected, x)
      if (resolvedOrRejected) {return null;} else {resolvedOrRejected = true;}
      resolve(x);
    };
    var rejectIt = function rejectIt(x) {
      if (resolvedOrRejected) {return null;} else {resolvedOrRejected = true;}
      // console.log('Action.reject:', resolvedOrRejected, x)
      reject(x);
    };
    innerValues.then(function (items) {
      args = [].concat(_toConsumableArray(items));
      if (!isEnumerable(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      var complete = function complete() {
        var action = null;
        if (errors.length > _this._FP.errors.limit) action = rejectIt;
        if (isDone()) action = resolveIt;
        if (action) return Promise.all(results).then(function (data) {return action(results);}) ? true : true;
        return false;
      };
      var checkAndRun = function checkAndRun(val) {
        // console.log('checkAndRun', count, resolvedOrRejected, val)
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      var runItem = function runItem(c) {
        if (resolvedOrRejected) {return null;} else {count++;}
        if (threadPoolFull()) return setTimeout(function () {return runItem(c);}, 0);
        if (results[c]) return results[c];
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        results[c] = Promise.resolve(args[c]).
        then(function (val) {return fn(val, c, args);}).
        then(function (val) {return setResult(c)(val);}).
        then(checkAndRun).
        catch(function (err) {
          _this._FP.errors.count++;
          errors.push(err);
          // console.log('ERR HANDLER!', errors.length, this._FP.errors.limit)
          if (errors.length > _this._FP.errors.limit) {
            var fpErr = errors.length === 1 ? err : new FunctionalError('Error Limit ' + _this._FP.errors.limit + ' Exceeded.\n              idx=' +
            c + ' errCnt=' + _this._FP.errors.count, { errors: errors, results: results, ctx: _this });
            Promise.resolve(setResult(c)(err)).then(function () {return rejectIt(fpErr);});
          } else {// console.warn('Error OK:', JSON.stringify(this._FP.errors))
            return Promise.resolve().then(function () {return setResult(c)(err);}).then(checkAndRun);
          }
        });

        return results[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) {runItem(initialThread++);}
    });
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = {
  listen: function listen(obj) {var _this = this;for (var _len = arguments.length, eventNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {eventNames[_key - 1] = arguments[_key];}
    if (typeof eventNames === 'string') eventNames = [eventNames];
    if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) throw new FPInputError('Valid EventEmitter required.');
    // Gets callback to attach to the event handlers
    var handler = this.chainEnd();
    this._FP.destroy = function () {return _this._FP.destroyHandles.map(function (fn) {return fn() || true;}).filter(function (v) {return v;}).length;};
    this._FP.destroyHandles = eventNames.map(function (eventName) {
      obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
      return function () {return obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);};
    });
    return this;
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsIl9GUCIsImRlc3Ryb3kiLCJkZXN0cm95SGFuZGxlcyIsIm1hcCIsImZuIiwiZmlsdGVyIiwidiIsImxlbmd0aCIsImV2ZW50TmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJlQUF1QkEsUUFBUSxrQkFBUixDLENBQWhCQyxZLFlBQUFBLFk7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsUUFEZSxrQkFDUkMsR0FEUSxFQUNZLG9EQUFaQyxVQUFZLG1FQUFaQSxVQUFZO0FBQ3pCLFFBQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsUUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RCxNQUFNLElBQUlOLFlBQUosQ0FBaUIsOEJBQWpCLENBQU47QUFDNUQ7QUFDQSxRQUFNTyxVQUFVLEtBQUtDLFFBQUwsRUFBaEI7QUFDQSxTQUFLQyxHQUFMLENBQVNDLE9BQVQsR0FBbUIsb0JBQU0sTUFBS0QsR0FBTCxDQUFTRSxjQUFULENBQXdCQyxHQUF4QixDQUE0QixzQkFBTUMsUUFBUSxJQUFkLEVBQTVCLEVBQWdEQyxNQUFoRCxDQUF1RCxxQkFBS0MsQ0FBTCxFQUF2RCxFQUErREMsTUFBckUsRUFBbkI7QUFDQSxTQUFLUCxHQUFMLENBQVNFLGNBQVQsR0FBMEJOLFdBQVdPLEdBQVgsQ0FBZSxxQkFBYTtBQUNwRFIsVUFBSUEsSUFBSUUsZ0JBQUosR0FBdUIsa0JBQXZCLEdBQTRDLElBQWhELEVBQXNEVyxTQUF0RCxFQUFpRVYsT0FBakU7QUFDQSxhQUFPLG9CQUFNSCxJQUFJQSxJQUFJYyxtQkFBSixHQUEwQixxQkFBMUIsR0FBa0QsS0FBdEQsRUFBNkRELFNBQTdELEVBQXdFVixPQUF4RSxDQUFOLEVBQVA7QUFDRCxLQUh5QixDQUExQjtBQUlBLFdBQU8sSUFBUDtBQUNELEdBWmMsRUFBakIiLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0ZQSW5wdXRFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxpc3RlbihvYmosIC4uLmV2ZW50TmFtZXMpIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdzdHJpbmcnKSBldmVudE5hbWVzID0gW2V2ZW50TmFtZXNdXG4gICAgaWYgKCFvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignVmFsaWQgRXZlbnRFbWl0dGVyIHJlcXVpcmVkLicpXG4gICAgLy8gR2V0cyBjYWxsYmFjayB0byBhdHRhY2ggdG8gdGhlIGV2ZW50IGhhbmRsZXJzXG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2hhaW5FbmQoKVxuICAgIHRoaXMuX0ZQLmRlc3Ryb3kgPSAoKSA9PiB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcy5tYXAoZm4gPT4gZm4oKSB8fCB0cnVlKS5maWx0ZXIodiA9PiB2KS5sZW5ndGhcbiAgICB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcyA9IGV2ZW50TmFtZXMubWFwKGV2ZW50TmFtZSA9PiB7XG4gICAgICBvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgICByZXR1cm4gKCkgPT4gb2JqW29iai5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ29mZiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgICB9KVxuICAgIHJldHVybiB0aGlzXG4gIH0sXG59Il19

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/utils */ 2),isPromiseLike = _require.isPromiseLike;

module.exports = { thenIf: thenIf, tapIf: tapIf, _thenIf: _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse, true)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf() {var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {return x;};var ifTrue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {return x;};var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {return null;};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var FP = __webpack_require__(/*! ./index */ 0);
  return function (value) {return (
      FP.resolve(cond(value)).
      then(function (ans) {return ans ? ifTrue(value) : ifFalse(value);}).
      then(function (v) {return returnValue ? value : v;}));};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNQcm9taXNlTGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJlQUF3QkEsUUFBUSxpQkFBUixDLENBQWpCQyxhLFlBQUFBLGE7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0MsY0FBRCxFQUFTQyxZQUFULEVBQWdCQyxnQkFBaEIsRUFBakI7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYix1Q0FBMkJDLFNBQTNCLEdBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPLHlCQUFLTyxDQUFMLEVBQVA7QUFDRDtBQUNELE1BQUliLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS2MsSUFBTCxDQUFVLHlCQUFTVCxRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFULEVBQVYsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsdUNBQTBCQyxTQUExQixHQUFQO0FBQ2hCLE1BQUlBLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJMLGFBQVNELElBQVQ7QUFDQUEsV0FBTyx5QkFBS08sQ0FBTCxFQUFQO0FBQ0Q7QUFDRCxNQUFJYixjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtjLElBQUwsQ0FBVSx5QkFBU1QsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBVCxFQUFWLENBQVA7QUFDRDtBQUNELFNBQU9WLFFBQVFDLElBQVIsRUFBY0MsTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsR0FBNEYsS0FBM0VDLElBQTJFLHVFQUFwRSxxQkFBS08sQ0FBTCxFQUFvRSxLQUE1RE4sTUFBNEQsdUVBQW5ELHFCQUFLTSxDQUFMLEVBQW1ELEtBQTNDTCxPQUEyQyx1RUFBakMsb0JBQU0sSUFBTixFQUFpQyxLQUFyQlEsV0FBcUIsdUVBQVAsS0FBTztBQUMxRixNQUFNQyxLQUFLbEIsUUFBUSxTQUFSLENBQVg7QUFDQSxTQUFPO0FBQ0xrQixTQUFHQyxPQUFILENBQVdaLEtBQUtTLEtBQUwsQ0FBWDtBQUNHRCxVQURILENBQ1EsdUJBQVFLLE1BQU1aLE9BQU9RLEtBQVAsQ0FBTixHQUFzQlAsUUFBUU8sS0FBUixDQUE5QixFQURSO0FBRUdELFVBRkgsQ0FFUSxxQkFBTUUsY0FBY0QsS0FBZCxHQUFzQkssQ0FBNUIsRUFGUixDQURLLEdBQVA7QUFJRCIsImZpbGUiOiJjb25kaXRpb25hbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtpc1Byb21pc2VMaWtlfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91dGlscycpXG5cbm1vZHVsZS5leHBvcnRzID0ge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { all: all, reject: reject, delay: delay, _delay: _delay };

function all(promises) {
  var FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  var keys = Object.getOwnPropertyNames(obj);
  var values = keys.map(function (key) {return obj[key];});
  return Promise.all(values).then(function (results) {return results.reduce(function (obj, val, index) {var _Object$assign;
      var key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {});});
}

function reject(err) {
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error('Reject only accepts a new instance of Error!');
}

function _delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new FPInputError('FP.delay(millisec) requires a numeric arg.');
  return function (value) {return new FP(function (resolve) {setTimeout(function () {return resolve(value);}, msec);});};
}

function delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [].concat(Array.prototype.slice.call(arguments)));
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJGUElucHV0RXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwicmVqZWN0IiwiZGVsYXkiLCJfZGVsYXkiLCJwcm9taXNlcyIsIkZQIiwicmVzb2x2ZSIsIkFycmF5IiwiaXNBcnJheSIsIlByb21pc2UiLCJwcm9taXNlQWxsT2JqZWN0Iiwib2JqIiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJ2YWx1ZXMiLCJtYXAiLCJrZXkiLCJ0aGVuIiwicmVzdWx0cyIsInJlZHVjZSIsInZhbCIsImluZGV4IiwiYXNzaWduIiwiZXJyIiwiRXJyb3IiLCJfZXJyb3IiLCJtc2VjIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwic2V0VGltZW91dCIsInZhbHVlIiwic3RlcHMiLCJhZGRTdGVwIiwiYXJndW1lbnRzIiwiX0ZQIl0sIm1hcHBpbmdzIjoiZUFBeUJBLFFBQVEsa0JBQVIsQyxDQUFqQkMsWSxZQUFBQSxZOztBQUVSQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUVDLFFBQUYsRUFBT0MsY0FBUCxFQUFlQyxZQUFmLEVBQXNCQyxjQUF0QixFQUFqQjs7QUFFQSxTQUFTSCxHQUFULENBQWFJLFFBQWIsRUFBdUI7QUFDckIsTUFBTUMsS0FBS1QsUUFBUSxJQUFSLENBQVg7QUFDQSxTQUFPUyxHQUFHQyxPQUFILENBQVdDLE1BQU1DLE9BQU4sQ0FBY0osUUFBZCxJQUEwQkssUUFBUVQsR0FBUixDQUFZSSxRQUFaLENBQTFCLEdBQWtETSxpQkFBaUJOLFFBQWpCLENBQTdELENBQVA7QUFDRDs7QUFFRCxTQUFTTSxnQkFBVCxDQUEwQkMsR0FBMUIsRUFBK0I7QUFDN0IsTUFBTUMsT0FBT0MsT0FBT0MsbUJBQVAsQ0FBMkJILEdBQTNCLENBQWI7QUFDQSxNQUFNSSxTQUFTSCxLQUFLSSxHQUFMLENBQVMsdUJBQU9MLElBQUlNLEdBQUosQ0FBUCxFQUFULENBQWY7QUFDQSxTQUFPUixRQUFRVCxHQUFSLENBQVllLE1BQVosRUFBb0JHLElBQXBCLENBQXlCLDJCQUFXQyxRQUFRQyxNQUFSLENBQWUsVUFBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDN0UsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBaUJOLEdBQWpCLElBQXVCSSxHQUF2QixtQkFBOEJWLEdBQTlCLENBQVA7QUFDRCxLQUgwQyxFQUd4QyxFQUh3QyxDQUFYLEVBQXpCLENBQVA7QUFJRDs7QUFFRCxTQUFTVixNQUFULENBQWdCdUIsR0FBaEIsRUFBcUI7QUFDbkIsTUFBSUEsZUFBZUMsS0FBbkIsRUFBMEI7QUFDeEIsUUFBSSxJQUFKLEVBQVUsS0FBS0MsTUFBTCxHQUFjRixHQUFkO0FBQ1YsV0FBT2YsUUFBUVIsTUFBUixDQUFldUIsR0FBZixDQUFQO0FBQ0Q7QUFDRCxRQUFNLElBQUlDLEtBQUosZ0RBQU47QUFDRDs7QUFFRCxTQUFTdEIsTUFBVCxDQUFnQndCLElBQWhCLEVBQXNCO0FBQ3BCLE1BQU10QixLQUFLVCxRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUksQ0FBQ2dDLE9BQU9DLFNBQVAsQ0FBaUJGLElBQWpCLENBQUwsRUFBNkIsTUFBTSxJQUFJOUIsWUFBSixDQUFpQiw0Q0FBakIsQ0FBTjtBQUM3QixTQUFPLHlCQUFTLElBQUlRLEVBQUosQ0FBTyxtQkFBVyxDQUFFeUIsV0FBVyxvQkFBTXhCLFFBQVF5QixLQUFSLENBQU4sRUFBWCxFQUFpQ0osSUFBakMsRUFBd0MsQ0FBNUQsQ0FBVCxFQUFQO0FBQ0Q7O0FBRUQsU0FBU3pCLEtBQVQsQ0FBZXlCLElBQWYsRUFBcUI7QUFDbkIsTUFBTXRCLEtBQUtULFFBQVEsSUFBUixDQUFYO0FBQ0EsTUFBSSxLQUFLb0MsS0FBVCxFQUFnQixPQUFPLEtBQUtDLE9BQUwsQ0FBYSxPQUFiLHVDQUEwQkMsU0FBMUIsR0FBUDtBQUNoQixTQUFPLFFBQVEsS0FBS0MsR0FBYixHQUFtQjlCLEdBQUdDLE9BQUgsQ0FBVyxLQUFLWSxJQUFMLENBQVVmLE9BQU93QixJQUFQLENBQVYsQ0FBWCxDQUFuQixHQUF5RHhCLE9BQU93QixJQUFQLEdBQWhFO0FBQ0QiLCJmaWxlIjoicHJvbWlzZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgRlBJbnB1dEVycm9yIH0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7IGFsbCwgcmVqZWN0LCBkZWxheSwgX2RlbGF5IH1cblxuZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICByZXR1cm4gRlAucmVzb2x2ZShBcnJheS5pc0FycmF5KHByb21pc2VzKSA/IFByb21pc2UuYWxsKHByb21pc2VzKSA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5mdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKVxuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gb2JqW2tleV0pXG4gIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMpLnRoZW4ocmVzdWx0cyA9PiByZXN1bHRzLnJlZHVjZSgob2JqLCB2YWwsIGluZGV4KSA9PiB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpbmRleF1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IFtrZXldOiB2YWwgfSwgb2JqKVxuICB9LCB7fSkpXG59XG5cbmZ1bmN0aW9uIHJlamVjdChlcnIpIHtcbiAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgaWYgKHRoaXMpIHRoaXMuX2Vycm9yID0gZXJyXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycilcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYFJlamVjdCBvbmx5IGFjY2VwdHMgYSBuZXcgaW5zdGFuY2Ugb2YgRXJyb3IhYClcbn1cblxuZnVuY3Rpb24gX2RlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihtc2VjKSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignRlAuZGVsYXkobWlsbGlzZWMpIHJlcXVpcmVzIGEgbnVtZXJpYyBhcmcuJylcbiAgcmV0dXJuIHZhbHVlID0+IG5ldyBGUChyZXNvbHZlID0+IHsgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHZhbHVlKSwgbXNlYykgfSlcbn1cblxuZnVuY3Rpb24gZGVsYXkobXNlYykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2RlbGF5JywgWy4uLmFyZ3VtZW50c10pXG4gIHJldHVybiB0aGlzICYmIHRoaXMuX0ZQID8gRlAucmVzb2x2ZSh0aGlzLnRoZW4oX2RlbGF5KG1zZWMpKSkgOiBfZGVsYXkobXNlYykoKVxufVxuIl19

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9mdW5jdGlvbmFsLXByb21pc2UuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMzRkNjhiMzdjMzA1OWI2NTEwZjEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9tb25hZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25kaXRpb25hbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvbWlzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAzNGQ2OGIzN2MzMDU5YjY1MTBmMSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7cmV0dXJuIHR5cGVvZiBvYmo7fSA6IGZ1bmN0aW9uIChvYmopIHtyZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajt9O3ZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKSxGdW5jdGlvbmFsRXJyb3IgPSBfcmVxdWlyZS5GdW5jdGlvbmFsRXJyb3I7dmFyIF9yZXF1aXJlMiA9XG5yZXF1aXJlKCcuL21vZHVsZXMvdXRpbHMnKSxpc0Z1bmN0aW9uID0gX3JlcXVpcmUyLmlzRnVuY3Rpb24sZmxhdHRlbiA9IF9yZXF1aXJlMi5mbGF0dGVuO3ZhciBfcmVxdWlyZTMgPVxucmVxdWlyZSgnLi9tb25hZHMnKSxjaGFpbiA9IF9yZXF1aXJlMy5jaGFpbixjaGFpbkVuZCA9IF9yZXF1aXJlMy5jaGFpbkVuZDtcbnZhciBGUCA9IEZ1bmN0aW9uYWxQcm9taXNlcztcblxuRlAuZGVmYXVsdCA9IEZQO1xuXG5PYmplY3QuYXNzaWduKEZQLnByb3RvdHlwZSxcbnJlcXVpcmUoJy4vYXJyYXlzJyksXG5yZXF1aXJlKCcuL2V2ZW50cycpLFxucmVxdWlyZSgnLi9jb25kaXRpb25hbCcpLFxucmVxdWlyZSgnLi9wcm9taXNlJykpO1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUHJvbWlzZXMocmVzb2x2ZVJlamVjdENCKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGdW5jdGlvbmFsUHJvbWlzZXMpKSB7cmV0dXJuIG5ldyBGdW5jdGlvbmFsUHJvbWlzZXMocmVzb2x2ZVJlamVjdENCKTt9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uYWxQcm9taXNlcyBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgMSBjYWxsYmFjayBhcmd1bWVudCcpO1xuICB0aGlzLl9GUCA9IHtcbiAgICBlcnJvcnM6IHsgbGltaXQ6IDAsIGNvdW50OiAwIH0sXG4gICAgcHJvbWlzZTogbmV3IFByb21pc2UocmVzb2x2ZVJlamVjdENCKSxcbiAgICBjb25jdXJyZW5jeUxpbWl0OiA0IH07XG5cbn1cblxuRlAuYWxsID0gRlAucHJvdG90eXBlLmFsbDtcbkZQLnRoZW5JZiA9IEZQLnByb3RvdHlwZS5fdGhlbklmO1xuRlAuZGVsYXkgPSBmdW5jdGlvbiAobXNlYykge3JldHVybiBGUC5yZXNvbHZlKCkuZGVsYXkobXNlYyk7fTtcbkZQLnNpbGVudCA9IGZ1bmN0aW9uIChsaW1pdCkge3JldHVybiBGUC5yZXNvbHZlKCkuc2lsZW50KGxpbWl0KTt9O1xuXG4vLyBNb25hZGljIE1ldGhvZHNcbkZQLmNoYWluID0gY2hhaW47XG5GUC5wcm90b3R5cGUuY2hhaW5FbmQgPSBjaGFpbkVuZDtcbkZQLnJlamVjdCA9IEZQLnByb3RvdHlwZS5yZWplY3Q7XG5cblxuRlAucHJvdG90eXBlLmFkZFN0ZXAgPSBmdW5jdGlvbiBhZGRTdGVwKG5hbWUsIGFyZ3MpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHRoaXMuc3RlcHMucHVzaChbbmFtZSwgdGhpcywgYXJnc10pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkZQLnByb3RvdHlwZS5jb25jdXJyZW5jeSA9IGZ1bmN0aW9uIGNvbmN1cnJlbmN5KCkge3ZhciBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogSW5maW5pdHk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdjb25jdXJyZW5jeScsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIHRoaXMuX0ZQLmNvbmN1cnJlbmN5TGltaXQgPSBsaW1pdDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5GUC5wcm90b3R5cGUucXVpZXQgPSBmdW5jdGlvbiBxdWlldCgpIHt2YXIgZXJyb3JMaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogSW5maW5pdHk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdxdWlldCcsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIHRoaXMuX0ZQLmVycm9ycyA9IHsgY291bnQ6IDAsIGxpbWl0OiBlcnJvckxpbWl0IH07XG4gIHJldHVybiB0aGlzO1xufTtcbkZQLnByb3RvdHlwZS5zaWxlbnQgPSBGUC5wcm90b3R5cGUucXVpZXQ7XG5cbkZQLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQoKSB7Zm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGtleU5hbWVzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7a2V5TmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07fVxuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZ2V0JywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAga2V5TmFtZXMgPSBmbGF0dGVuKGtleU5hbWVzKTtcbiAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChrZXlOYW1lcy5sZW5ndGggPT09IDEpIHJldHVybiBvYmpba2V5TmFtZXNbMF1dO1xuICAgICAgcmV0dXJuIGtleU5hbWVzLnJlZHVjZShmdW5jdGlvbiAoZXh0cmFjdGVkLCBrZXkpIHtcbiAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfSk7XG59O1xuXG5GUC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0KGtleU5hbWUsIHZhbHVlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdzZXQnLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpID09PSAnb2JqZWN0Jykgb2JqW2tleU5hbWVdID0gdmFsdWU7XG4gICAgcmV0dXJuIG9iajtcbiAgfSk7XG59O1xuXG5GUC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbiAoZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2NhdGNoJywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHJldHVybiB0aGlzLmNhdGNoSWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC5jYXRjaChmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArICh0eXBlb2YgZm4gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGZuKSkpO1xuICByZXR1cm4gRlAucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtyZXR1cm4gZm4oZXJyKTt9KSk7XG59O1xuXG5GUC5wcm90b3R5cGUuY2F0Y2hJZiA9IGZ1bmN0aW9uIGNhdGNoSWYoY29uZGl0aW9uLCBmbikge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY2F0Y2hJZicsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIGlmICghaXNGdW5jdGlvbihmbikpIHRocm93IG5ldyBGdW5jdGlvbmFsRXJyb3IoJ0ludmFsaWQgZm4gYXJndW1lbnQgZm9yIGAuY2F0Y2hJZihjb25kaXRpb24sIGZuKWAuIE11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudGx5OiAnICsgKHR5cGVvZiBmbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZm4pKSk7XG5cbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGNvbmRpdGlvbiAmJiBlcnIgaW5zdGFuY2VvZiBjb25kaXRpb24pIHJldHVybiBmbihlcnIpOyAvLyB0cnkgcmUtdGhyb3csIG1pZ2h0IGJlIHJlYWxseSBzbG93Li4uXG4gICAgdGhyb3cgZXJyO1xuICB9KSk7XG59O1xuXG5GUC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIHRoZW4oZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW4nLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLnRoZW4oZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyAodHlwZW9mIGZuID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihmbikpKTtcbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS50aGVuKGZuKSk7XG59O1xuXG5GUC5wcm90b3R5cGUudGFwID0gZnVuY3Rpb24gdGFwKGZuKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0YXAnLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLnRhcChmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArICh0eXBlb2YgZm4gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGZuKSkpO1xuICByZXR1cm4gRlAucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7cmV0dXJuIGZuKHZhbHVlKSA/IHZhbHVlIDogdmFsdWU7fSkpO1xufTtcblxuRlAucmVzb2x2ZSA9IEZQLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuICByZXR1cm4gbmV3IEZQKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAodmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS50aGVuKSkgcmV0dXJuIHZhbHVlLnRoZW4ocmVzb2x2ZSkuY2F0Y2gocmVqZWN0KTtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSk7XG59O1xuXG5GUC5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkoY2IpIHt2YXIgX3RoaXMgPSB0aGlzO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge2ZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7YXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO31yZXR1cm4gbmV3IEZQKGZ1bmN0aW9uICh5YWgsIG5haCkge3JldHVybiAoXG4gICAgICAgIGNiLmNhbGwuYXBwbHkoY2IsIFtfdGhpc10uY29uY2F0KGFyZ3MsIFtmdW5jdGlvbiAoZXJyLCByZXMpIHtyZXR1cm4gZXJyID8gbmFoKGVycikgOiB5YWgocmVzKTt9XSkpKTt9KTt9O1xufTtcblxuRlAucHJvbWlzaWZ5QWxsID0gZnVuY3Rpb24gcHJvbWlzaWZ5QWxsKG9iaikge1xuICBpZiAoIW9iaiB8fCAhT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIHt0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQXJndW1lbnQgb2JqIGluIHByb21pc2lmeUFsbChvYmopJyk7fVxuICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5cbiAgZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4gdHlwZW9mIG9ialtrZXldID09PSAnZnVuY3Rpb24nO30pLlxuICByZWR1Y2UoZnVuY3Rpb24gKG9iaiwgZm5OYW1lKSB7XG4gICAgaWYgKCEvU3luYy8udGVzdChmbk5hbWUpICYmICFvYmpbZm5OYW1lICsgJ0FzeW5jJ10pIG9ialtmbk5hbWUgKyAnQXN5bmMnXSA9IEZQLnByb21pc2lmeShvYmpbJycgKyBmbk5hbWVdKTtcbiAgICByZXR1cm4gb2JqO1xuICB9LCBvYmopO1xufTtcblxuRlAudW5wYWNrID0gZnVuY3Rpb24gdW5wYWNrKCkge1xuICB2YXIgcmVzb2x2ZSA9IHZvaWQgMCxyZWplY3QgPSB2b2lkIDAscHJvbWlzZSA9IG5ldyBGUChmdW5jdGlvbiAoeWFoLCBuYWgpIHtyZXNvbHZlID0geWFoO3JlamVjdCA9IG5haDt9KTtcbiAgcmV0dXJuIHsgcHJvbWlzZTogcHJvbWlzZSwgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb25hbFByb21pc2VzO1xuXG5pZiAocHJvY2VzcyAmJiBwcm9jZXNzLm9uKSB7XG4gIC8vIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uJywgZSA9PiBjb25zb2xlLmVycm9yKCdGUHJvbWlzZXM6IEZBVEFMIEVYQ0VQVElPTjogdW5jYXVnaHRFeGNlcHRpb24nLCBlKSlcbiAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgZnVuY3Rpb24gKGUpIHtyZXR1cm4gY29uc29sZS5lcnJvcignRlByb21pc2VzOiBGQVRBTCBFUlJPUjogdW5oYW5kbGVkUmVqZWN0aW9uJywgZSk7fSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2lSblZ1WTNScGIyNWhiRVZ5Y205eUlpd2lhWE5HZFc1amRHbHZiaUlzSW1ac1lYUjBaVzRpTENKamFHRnBiaUlzSW1Ob1lXbHVSVzVrSWl3aVJsQWlMQ0pHZFc1amRHbHZibUZzVUhKdmJXbHpaWE1pTENKa1pXWmhkV3gwSWl3aVQySnFaV04wSWl3aVlYTnphV2R1SWl3aWNISnZkRzkwZVhCbElpd2ljbVZ6YjJ4MlpWSmxhbVZqZEVOQ0lpd2lZWEpuZFcxbGJuUnpJaXdpYkdWdVozUm9JaXdpUlhKeWIzSWlMQ0pmUmxBaUxDSmxjbkp2Y25NaUxDSnNhVzFwZENJc0ltTnZkVzUwSWl3aWNISnZiV2x6WlNJc0lsQnliMjFwYzJVaUxDSmpiMjVqZFhKeVpXNWplVXhwYldsMElpd2lZV3hzSWl3aWRHaGxia2xtSWl3aVgzUm9aVzVKWmlJc0ltUmxiR0Y1SWl3aWNtVnpiMngyWlNJc0ltMXpaV01pTENKemFXeGxiblFpTENKeVpXcGxZM1FpTENKaFpHUlRkR1Z3SWl3aWJtRnRaU0lzSW1GeVozTWlMQ0p6ZEdWd2N5SXNJbkIxYzJnaUxDSmpiMjVqZFhKeVpXNWplU0lzSWtsdVptbHVhWFI1SWl3aWNYVnBaWFFpTENKbGNuSnZja3hwYldsMElpd2laMlYwSWl3aWEyVjVUbUZ0WlhNaUxDSjBhR1Z1SWl3aWIySnFJaXdpY21Wa2RXTmxJaXdpWlhoMGNtRmpkR1ZrSWl3aWEyVjVJaXdpYzJWMElpd2lhMlY1VG1GdFpTSXNJblpoYkhWbElpd2lZMkYwWTJnaUxDSm1iaUlzSW1OaGRHTm9TV1lpTENKbGNuSWlMQ0pqYjI1a2FYUnBiMjRpTENKMFlYQWlMQ0p3Y205dGFYTnBabmtpTENKallpSXNJbmxoYUNJc0ltNWhhQ0lzSW1OaGJHd2lMQ0p5WlhNaUxDSndjbTl0YVhOcFpubEJiR3dpTENKblpYUlFjbTkwYjNSNWNHVlBaaUlzSW1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNaUxDSm1hV3gwWlhJaUxDSm1iazVoYldVaUxDSjBaWE4wSWl3aWRXNXdZV05ySWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lJc0luQnliMk5sYzNNaUxDSnZiaUlzSW1OdmJuTnZiR1VpTENKbGNuSnZjaUlzSW1VaVhTd2liV0Z3Y0dsdVozTWlPaUozVWtGQk5FSkJMRkZCUVZFc2EwSkJRVklzUXl4RFFVRndRa01zWlN4WlFVRkJRU3hsTzBGQlEzZENSQ3hSUVVGUkxHbENRVUZTTEVNc1EwRkJlRUpGTEZVc1lVRkJRVUVzVlN4RFFVRlpReXhQTEdGQlFVRkJMRTg3UVVGRFVVZ3NVVUZCVVN4VlFVRlNMRU1zUTBGQmNFSkpMRXNzWVVGQlFVRXNTeXhEUVVGUFF5eFJMR0ZCUVVGQkxGRTdRVUZEWml4SlFVRk5ReXhMUVVGTFF5eHJRa0ZCV0RzN1FVRkZRVVFzUjBGQlIwVXNUMEZCU0N4SFFVRmhSaXhGUVVGaU96dEJRVVZCUnl4UFFVRlBReXhOUVVGUUxFTkJRV05LTEVkQlFVZExMRk5CUVdwQ08wRkJRMFZZTEZGQlFWRXNWVUZCVWl4RFFVUkdPMEZCUlVWQkxGRkJRVkVzVlVGQlVpeERRVVpHTzBGQlIwVkJMRkZCUVZFc1pVRkJVaXhEUVVoR08wRkJTVVZCTEZGQlFWRXNWMEZCVWl4RFFVcEdPenRCUVUxQkxGTkJRVk5QTEd0Q1FVRlVMRU5CUVRSQ1N5eGxRVUUxUWl4RlFVRTJRenRCUVVNelF5eE5RVUZKTEVWQlFVVXNaMEpCUVdkQ1RDeHJRa0ZCYkVJc1EwRkJTaXhGUVVFeVF5eERRVUZGTEU5QlFVOHNTVUZCU1VFc2EwSkJRVW9zUTBGQmRVSkxMR1ZCUVhaQ0xFTkJRVkFzUTBGQlowUTdRVUZETjBZc1RVRkJTVU1zVlVGQlZVTXNUVUZCVml4TFFVRnhRaXhEUVVGNlFpeEZRVUUwUWl4TlFVRk5MRWxCUVVsRExFdEJRVW9zUTBGQlZTeHBSVUZCVml4RFFVRk9PMEZCUXpWQ0xFOUJRVXRETEVkQlFVd3NSMEZCVnp0QlFVTlVReXhaUVVGclFpeEZRVUZGUXl4UFFVRlBMRU5CUVZRc1JVRkJXVU1zVDBGQlR5eERRVUZ1UWl4RlFVUlVPMEZCUlZSRExHRkJRV3RDTEVsQlFVbERMRTlCUVVvc1EwRkJXVlFzWlVGQldpeERRVVpVTzBGQlIxUlZMSE5DUVVGclFpeERRVWhVTEVWQlFWZzdPMEZCUzBRN08wRkJSVVJvUWl4SFFVRkhhVUlzUjBGQlNDeEhRVUZUYWtJc1IwRkJSMHNzVTBGQlNDeERRVUZoV1N4SFFVRjBRanRCUVVOQmFrSXNSMEZCUjJ0Q0xFMUJRVWdzUjBGQldXeENMRWRCUVVkTExGTkJRVWdzUTBGQllXTXNUMEZCZWtJN1FVRkRRVzVDTEVkQlFVZHZRaXhMUVVGSUxFZEJRVmNzZDBKQlFWRndRaXhIUVVGSGNVSXNUMEZCU0N4SFFVRmhSQ3hMUVVGaUxFTkJRVzFDUlN4SlFVRnVRaXhEUVVGU0xFVkJRVmc3UVVGRFFYUkNMRWRCUVVkMVFpeE5RVUZJTEVkQlFWa3NlVUpCUVZOMlFpeEhRVUZIY1VJc1QwRkJTQ3hIUVVGaFJTeE5RVUZpTEVOQlFXOUNXQ3hMUVVGd1FpeERRVUZVTEVWQlFWbzdPMEZCUlVFN1FVRkRRVm9zUjBGQlIwWXNTMEZCU0N4SFFVRlhRU3hMUVVGWU8wRkJRMEZGTEVkQlFVZExMRk5CUVVnc1EwRkJZVTRzVVVGQllpeEhRVUYzUWtFc1VVRkJlRUk3UVVGRFFVTXNSMEZCUjNkQ0xFMUJRVWdzUjBGQldYaENMRWRCUVVkTExGTkJRVWdzUTBGQllXMUNMRTFCUVhwQ096czdRVUZIUVhoQ0xFZEJRVWRMTEZOQlFVZ3NRMEZCWVc5Q0xFOUJRV0lzUjBGQmRVSXNVMEZCVTBFc1QwRkJWQ3hEUVVGcFFrTXNTVUZCYWtJc1JVRkJkVUpETEVsQlFYWkNMRVZCUVRaQ08wRkJRMnhFTEUxQlFVa3NTMEZCUzBNc1MwRkJWQ3hGUVVGblFpeExRVUZMUVN4TFFVRk1MRU5CUVZkRExFbEJRVmdzUTBGQlowSXNRMEZCUTBnc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllVTXNTVUZCWWl4RFFVRm9RanRCUVVOb1FpeFRRVUZQTEVsQlFWQTdRVUZEUkN4RFFVaEVPenRCUVV0Qk0wSXNSMEZCUjBzc1UwRkJTQ3hEUVVGaGVVSXNWMEZCWWl4SFFVRXlRaXhUUVVGVFFTeFhRVUZVTEVkQlFYVkRMRXRCUVd4Q2JFSXNTMEZCYTBJc2RVVkJRVlp0UWl4UlFVRlZPMEZCUTJoRkxFMUJRVWtzUzBGQlMwZ3NTMEZCVkN4RlFVRm5RaXhQUVVGUExFdEJRVXRJTEU5QlFVd3NRMEZCWVN4aFFVRmlMSFZEUVVGblEyeENMRk5CUVdoRExFZEJRVkE3UVVGRGFFSXNUMEZCUzBjc1IwRkJUQ3hEUVVGVFRTeG5Ra0ZCVkN4SFFVRTBRa29zUzBGQk5VSTdRVUZEUVN4VFFVRlBMRWxCUVZBN1FVRkRSQ3hEUVVwRU96dEJRVTFCV2l4SFFVRkhTeXhUUVVGSUxFTkJRV0V5UWl4TFFVRmlMRWRCUVhGQ0xGTkJRVk5CTEV0QlFWUXNSMEZCYzBNc1MwRkJka0pETEZWQlFYVkNMSFZGUVVGV1JpeFJRVUZWTzBGQlEzcEVMRTFCUVVrc1MwRkJTMGdzUzBGQlZDeEZRVUZuUWl4UFFVRlBMRXRCUVV0SUxFOUJRVXdzUTBGQllTeFBRVUZpTEhWRFFVRXdRbXhDTEZOQlFURkNMRWRCUVZBN1FVRkRhRUlzVDBGQlMwY3NSMEZCVEN4RFFVRlRReXhOUVVGVUxFZEJRV3RDTEVWQlFVVkZMRTlCUVU4c1EwRkJWQ3hGUVVGWlJDeFBRVUZQY1VJc1ZVRkJia0lzUlVGQmJFSTdRVUZEUVN4VFFVRlBMRWxCUVZBN1FVRkRSQ3hEUVVwRU8wRkJTMEZxUXl4SFFVRkhTeXhUUVVGSUxFTkJRV0ZyUWl4TlFVRmlMRWRCUVhOQ2RrSXNSMEZCUjBzc1UwRkJTQ3hEUVVGaE1rSXNTMEZCYmtNN08wRkJSVUZvUXl4SFFVRkhTeXhUUVVGSUxFTkJRV0UyUWl4SFFVRmlMRWRCUVcxQ0xGTkJRVk5CTEVkQlFWUXNSMEZCTUVJc2JVTkJRVlpETEZGQlFWVXNaMFJCUVZaQkxGRkJRVlU3UVVGRE0wTXNUVUZCU1N4TFFVRkxVQ3hMUVVGVUxFVkJRV2RDTEU5QlFVOHNTMEZCUzBnc1QwRkJUQ3hEUVVGaExFdEJRV0lzZFVOQlFYZENiRUlzVTBGQmVFSXNSMEZCVUR0QlFVTm9RalJDTEdGQlFWZDBReXhSUVVGUmMwTXNVVUZCVWl4RFFVRllPMEZCUTBFc1UwRkJUeXhMUVVGTFF5eEpRVUZNTEVOQlFWVXNWVUZCUTBNc1IwRkJSQ3hGUVVGVE8wRkJRM2hDTEZGQlFVa3NVVUZCVDBFc1IwRkJVQ3g1UTBGQlQwRXNSMEZCVUN4UFFVRmxMRkZCUVc1Q0xFVkJRVFpDTzBGQlF6TkNMRlZCUVVsR0xGTkJRVk16UWl4TlFVRlVMRXRCUVc5Q0xFTkJRWGhDTEVWQlFUSkNMRTlCUVU4MlFpeEpRVUZKUml4VFFVRlRMRU5CUVZRc1EwRkJTaXhEUVVGUU8wRkJRek5DTEdGQlFVOUJMRk5CUVZOSExFMUJRVlFzUTBGQlowSXNWVUZCUTBNc1UwRkJSQ3hGUVVGWlF5eEhRVUZhTEVWQlFXOUNPMEZCUTNwRFJDeHJRa0ZCVlVNc1IwRkJWaXhKUVVGcFFrZ3NTVUZCU1Vjc1IwRkJTaXhEUVVGcVFqdEJRVU5CTEdWQlFVOUVMRk5CUVZBN1FVRkRSQ3hQUVVoTkxFVkJSMG9zUlVGSVNTeERRVUZRTzBGQlNVUTdRVUZEUkN4WFFVRlBSaXhIUVVGUU8wRkJRMFFzUjBGVVRTeERRVUZRTzBGQlZVUXNRMEZpUkRzN1FVRmxRWEpETEVkQlFVZExMRk5CUVVnc1EwRkJZVzlETEVkQlFXSXNSMEZCYlVJc1UwRkJVMEVzUjBGQlZDeERRVUZoUXl4UFFVRmlMRVZCUVhOQ1F5eExRVUYwUWl4RlFVRTJRanRCUVVNNVF5eE5RVUZKTEV0QlFVdG1MRXRCUVZRc1JVRkJaMElzVDBGQlR5eExRVUZMU0N4UFFVRk1MRU5CUVdFc1MwRkJZaXgxUTBGQmQwSnNRaXhUUVVGNFFpeEhRVUZRTzBGQlEyaENMRk5CUVU4c1MwRkJTelpDTEVsQlFVd3NRMEZCVlN4bFFVRlBPMEZCUTNSQ0xGRkJRVWtzVVVGQlQwTXNSMEZCVUN4NVEwRkJUMEVzUjBGQlVDeFBRVUZsTEZGQlFXNUNMRVZCUVRaQ1FTeEpRVUZKU3l4UFFVRktMRWxCUVdWRExFdEJRV1k3UVVGRE4wSXNWMEZCVDA0c1IwRkJVRHRCUVVORUxFZEJTRTBzUTBGQlVEdEJRVWxFTEVOQlRrUTdPMEZCVVVGeVF5eEhRVUZIU3l4VFFVRklMRU5CUVdGMVF5eExRVUZpTEVkQlFYRkNMRlZCUVZWRExFVkJRVllzUlVGQll6dEJRVU5xUXl4TlFVRkpMRXRCUVV0cVFpeExRVUZVTEVWQlFXZENMRTlCUVU4c1MwRkJTMGdzVDBGQlRDeERRVUZoTEU5QlFXSXNkVU5CUVRCQ2JFSXNVMEZCTVVJc1IwRkJVRHRCUVVOb1FpeE5RVUZKUVN4VlFVRlZReXhOUVVGV0xFdEJRWEZDTEVOQlFYcENMRVZCUVRSQ0xFOUJRVThzUzBGQlMzTkRMRTlCUVV3c1lVRkJaMEoyUXl4VFFVRm9RaXhEUVVGUU8wRkJRelZDTEUxQlFVa3NRMEZCUTFnc1YwRkJWMmxFTEVWQlFWZ3NRMEZCVEN4RlFVRnhRaXhOUVVGTkxFbEJRVWxzUkN4bFFVRktMRU5CUVc5Q0xHdEdRVUZwUm10RUxFVkJRV3BHTEhsRFFVRnBSa0VzUlVGQmFrWXNSVUZCY0VJc1EwRkJUanRCUVVOeVFpeFRRVUZQTjBNc1IwRkJSM0ZDTEU5QlFVZ3NRMEZCVnl4TFFVRkxXQ3hIUVVGTUxFTkJRVk5KTEU5QlFWUXNRMEZCYVVJNFFpeExRVUZxUWl4RFFVRjFRaXgxUWtGQlQwTXNSMEZCUjBVc1IwRkJTQ3hEUVVGUUxFVkJRWFpDTEVOQlFWZ3NRMEZCVUR0QlFVTkVMRU5CVEVRN08wRkJUMEV2UXl4SFFVRkhTeXhUUVVGSUxFTkJRV0Y1UXl4UFFVRmlMRWRCUVhWQ0xGTkJRVk5CTEU5QlFWUXNRMEZCYVVKRkxGTkJRV3BDTEVWQlFUUkNTQ3hGUVVFMVFpeEZRVUZuUXp0QlFVTnlSQ3hOUVVGSkxFdEJRVXRxUWl4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwZ3NUMEZCVEN4RFFVRmhMRk5CUVdJc2RVTkJRVFJDYkVJc1UwRkJOVUlzUjBGQlVEdEJRVU5vUWl4TlFVRkpMRU5CUVVOWUxGZEJRVmRwUkN4RlFVRllMRU5CUVV3c1JVRkJjVUlzVFVGQlRTeEpRVUZKYkVRc1pVRkJTaXhEUVVGdlFpd3JSa0ZCT0VaclJDeEZRVUU1Uml4NVEwRkJPRVpCTEVWQlFUbEdMRVZCUVhCQ0xFTkJRVTQ3TzBGQlJYSkNMRk5CUVU4M1F5eEhRVUZIY1VJc1QwRkJTQ3hEUVVGWExFdEJRVXRZTEVkQlFVd3NRMEZCVTBrc1QwRkJWQ3hEUVVGcFFqaENMRXRCUVdwQ0xFTkJRWFZDTEdWQlFVODdRVUZET1VNc1VVRkJTVWtzWVVGQllVUXNaVUZCWlVNc1UwRkJhRU1zUlVGQk1rTXNUMEZCVDBnc1IwRkJSMFVzUjBGQlNDeERRVUZRTEVOQlJFY3NRMEZEV1R0QlFVTXhSQ3hWUVVGTlFTeEhRVUZPTzBGQlEwUXNSMEZJYVVJc1EwRkJXQ3hEUVVGUU8wRkJTVVFzUTBGU1JEczdRVUZWUVM5RExFZEJRVWRMTEZOQlFVZ3NRMEZCWVN0Q0xFbEJRV0lzUjBGQmIwSXNVMEZCVTBFc1NVRkJWQ3hEUVVGalV5eEZRVUZrTEVWQlFXdENPMEZCUTNCRExFMUJRVWtzUzBGQlMycENMRXRCUVZRc1JVRkJaMElzVDBGQlR5eExRVUZMU0N4UFFVRk1MRU5CUVdFc1RVRkJZaXgxUTBGQmVVSnNRaXhUUVVGNlFpeEhRVUZRTzBGQlEyaENMRTFCUVVrc1EwRkJRMWdzVjBGQlYybEVMRVZCUVZnc1EwRkJUQ3hGUVVGeFFpeE5RVUZOTEVsQlFVbHNSQ3hsUVVGS0xFTkJRVzlDTEdsR1FVRm5SbXRFTEVWQlFXaEdMSGxEUVVGblJrRXNSVUZCYUVZc1JVRkJjRUlzUTBGQlRqdEJRVU55UWl4VFFVRlBOME1zUjBGQlIzRkNMRTlCUVVnc1EwRkJWeXhMUVVGTFdDeEhRVUZNTEVOQlFWTkpMRTlCUVZRc1EwRkJhVUp6UWl4SlFVRnFRaXhEUVVGelFsTXNSVUZCZEVJc1EwRkJXQ3hEUVVGUU8wRkJRMFFzUTBGS1JEczdRVUZOUVRkRExFZEJRVWRMTEZOQlFVZ3NRMEZCWVRSRExFZEJRV0lzUjBGQmJVSXNVMEZCVTBFc1IwRkJWQ3hEUVVGaFNpeEZRVUZpTEVWQlFXbENPMEZCUTJ4RExFMUJRVWtzUzBGQlMycENMRXRCUVZRc1JVRkJaMElzVDBGQlR5eExRVUZMU0N4UFFVRk1MRU5CUVdFc1MwRkJZaXgxUTBGQmQwSnNRaXhUUVVGNFFpeEhRVUZRTzBGQlEyaENMRTFCUVVrc1EwRkJRMWdzVjBGQlYybEVMRVZCUVZnc1EwRkJUQ3hGUVVGeFFpeE5RVUZOTEVsQlFVbHNSQ3hsUVVGS0xFTkJRVzlDTEdkR1FVRXJSV3RFTEVWQlFTOUZMSGxEUVVFclJVRXNSVUZCTDBVc1JVRkJjRUlzUTBGQlRqdEJRVU55UWl4VFFVRlBOME1zUjBGQlIzRkNMRTlCUVVnc1EwRkJWeXhMUVVGTFdDeEhRVUZNTEVOQlFWTkpMRTlCUVZRc1EwRkJhVUp6UWl4SlFVRnFRaXhEUVVGelFpeDVRa0ZCVTFNc1IwRkJSMFlzUzBGQlNDeEpRVUZaUVN4TFFVRmFMRWRCUVc5Q1FTeExRVUUzUWl4RlFVRjBRaXhEUVVGWUxFTkJRVkE3UVVGRFJDeERRVXBFT3p0QlFVMUJNME1zUjBGQlIzRkNMRTlCUVVnc1IwRkJZWEpDTEVkQlFVZExMRk5CUVVnc1EwRkJZV2RDTEU5QlFXSXNSMEZCZFVJc1UwRkJVMEVzVDBGQlZDeERRVUZwUW5OQ0xFdEJRV3BDTEVWQlFYZENPMEZCUXpGRUxGTkJRVThzU1VGQlNUTkRMRVZCUVVvc1EwRkJUeXhWUVVGRGNVSXNUMEZCUkN4RlFVRlZSeXhOUVVGV0xFVkJRWEZDTzBGQlEycERMRkZCUVVsdFFpeFRRVUZUTDBNc1YwRkJWeXRETEUxQlFVMVFMRWxCUVdwQ0xFTkJRV0lzUlVGQmNVTXNUMEZCVDA4c1RVRkJUVkFzU1VGQlRpeERRVUZYWml4UFFVRllMRVZCUVc5Q2RVSXNTMEZCY0VJc1EwRkJNRUp3UWl4TlFVRXhRaXhEUVVGUU8wRkJRM0pEU0N4WlFVRlJjMElzUzBGQlVqdEJRVU5FTEVkQlNFMHNRMEZCVUR0QlFVbEVMRU5CVEVRN08wRkJUMEV6UXl4SFFVRkhhMFFzVTBGQlNDeEhRVUZsTEZOQlFWTkJMRk5CUVZRc1EwRkJiVUpETEVWQlFXNUNMRVZCUVhWQ08wRkJRM0JETEZOQlFVOHNaMFJCUVVsNFFpeEpRVUZLTEhGRVFVRkpRU3hKUVVGS0xHMURRVUZoTEVsQlFVa3pRaXhGUVVGS0xFTkJRVThzVlVGQlEyOUVMRWRCUVVRc1JVRkJUVU1zUjBGQlRqdEJRVU42UWtZc1YwRkJSMGNzU1VGQlNDeFpRVUZSTEV0QlFWSXNVMEZCYVVJelFpeEpRVUZxUWl4SFFVRjFRaXhWUVVGRGIwSXNSMEZCUkN4RlFVRk5VU3hIUVVGT0xGVkJRV05TTEUxQlFVMU5MRWxCUVVsT0xFZEJRVW9zUTBGQlRpeEhRVUZwUWtzc1NVRkJTVWNzUjBGQlNpeERRVUV2UWl4RlFVRjJRaXhIUVVSNVFpeEhRVUZRTEVOQlFXSXNSVUZCVUR0QlFVVkVMRU5CU0VRN08wRkJTMEYyUkN4SFFVRkhkMFFzV1VGQlNDeEhRVUZyUWl4VFFVRlRRU3haUVVGVUxFTkJRWE5DYmtJc1IwRkJkRUlzUlVGQk1rSTdRVUZETTBNc1RVRkJTU3hEUVVGRFFTeEhRVUZFTEVsQlFWRXNRMEZCUTJ4RExFOUJRVTl6UkN4alFVRlFMRU5CUVhOQ2NFSXNSMEZCZEVJc1EwRkJZaXhGUVVGNVF5eERRVUZGTEUxQlFVMHNTVUZCU1RWQ0xFdEJRVW9zUTBGQlZTd3lRMEZCVml4RFFVRk9MRU5CUVRoRU8wRkJRM3BITEZOQlFVOU9MRTlCUVU5MVJDeHRRa0ZCVUN4RFFVRXlRbkpDTEVkQlFUTkNPMEZCUTBwelFpeFJRVVJKTEVOQlEwY3NkVUpCUVU4c1QwRkJUM1JDTEVsQlFVbEhMRWRCUVVvc1EwRkJVQ3hMUVVGdlFpeFZRVUV6UWl4RlFVUklPMEZCUlVwR0xGRkJSa2tzUTBGRlJ5eFZRVUZEUkN4SFFVRkVMRVZCUVUxMVFpeE5RVUZPTEVWQlFXbENPMEZCUTNaQ0xGRkJRVWtzUTBGQlF5eFBRVUZQUXl4SlFVRlFMRU5CUVZsRUxFMUJRVm9zUTBGQlJDeEpRVUYzUWl4RFFVRkRka0lzU1VGQlQzVkNMRTFCUVZBc1YwRkJOMElzUlVGQmIwUjJRaXhKUVVGUGRVSXNUVUZCVUN4alFVRjNRalZFTEVkQlFVZHJSQ3hUUVVGSUxFTkJRV0ZpTEZOQlFVOTFRaXhOUVVGUUxFTkJRV0lzUTBGQmVFSTdRVUZEY0VRc1YwRkJUM1pDTEVkQlFWQTdRVUZEUkN4SFFVeEpMRVZCUzBaQkxFZEJURVVzUTBGQlVEdEJRVTFFTEVOQlVrUTdPMEZCVlVGeVF5eEhRVUZIT0VRc1RVRkJTQ3hIUVVGWkxGTkJRVk5CTEUxQlFWUXNSMEZCYTBJN1FVRkROVUlzVFVGQlNYcERMR2RDUVVGS0xFTkJRV0ZITEdWQlFXSXNRMEZCY1VKV0xGVkJRVlVzU1VGQlNXUXNSVUZCU2l4RFFVRlBMRlZCUVVOdlJDeEhRVUZFTEVWQlFVMURMRWRCUVU0c1JVRkJZeXhEUVVGRmFFTXNWVUZCVlN0Q0xFZEJRVllzUTBGQlpUVkNMRk5CUVZNMlFpeEhRVUZVTEVOQlFXTXNRMEZCY0VRc1EwRkJMMEk3UVVGRFFTeFRRVUZQTEVWQlFVVjJReXhuUWtGQlJpeEZRVUZYVHl4blFrRkJXQ3hGUVVGdlFrY3NZMEZCY0VJc1JVRkJVRHRCUVVORUxFTkJTRVE3TzBGQlMwRjFReXhQUVVGUFF5eFBRVUZRTEVkQlFXbENMMFFzYTBKQlFXcENPenRCUVVWQkxFbEJRVWxuUlN4WFFVRlhRU3hSUVVGUlF5eEZRVUYyUWl4RlFVRXlRanRCUVVONlFqdEJRVU5CUkN4VlFVRlJReXhGUVVGU0xFTkJRVmNzYjBKQlFWZ3NSVUZCYVVNc2NVSkJRVXRETEZGQlFWRkRMRXRCUVZJc1EwRkJZeXcwUTBGQlpDeEZRVUUwUkVNc1EwRkJOVVFzUTBGQlRDeEZRVUZxUXp0QlFVTkVJaXdpWm1sc1pTSTZJbWx1WkdWNExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpOVZjMlZ5Y3k5a2JHVjJlUzlqYjJSbEwyOXpjeTltZFc1amRHbHZibUZzTFhKcGRtVnlJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWTI5dWMzUWdleUJHZFc1amRHbHZibUZzUlhKeWIzSWdmU0E5SUhKbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGNuSnZjbk1uS1Z4dVkyOXVjM1FnZXlCcGMwWjFibU4wYVc5dUxDQm1iR0YwZEdWdUlIMGdQU0J5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12ZFhScGJITW5LVnh1WTI5dWMzUWdleUJqYUdGcGJpd2dZMmhoYVc1RmJtUWdmU0E5SUhKbGNYVnBjbVVvSnk0dmJXOXVZV1J6SnlsY2JtTnZibk4wSUVaUUlEMGdSblZ1WTNScGIyNWhiRkJ5YjIxcGMyVnpYRzVjYmtaUUxtUmxabUYxYkhRZ1BTQkdVRnh1WEc1UFltcGxZM1F1WVhOemFXZHVLRVpRTG5CeWIzUnZkSGx3WlN4Y2JpQWdjbVZ4ZFdseVpTZ25MaTloY25KaGVYTW5LU3hjYmlBZ2NtVnhkV2x5WlNnbkxpOWxkbVZ1ZEhNbktTeGNiaUFnY21WeGRXbHlaU2duTGk5amIyNWthWFJwYjI1aGJDY3BMRnh1SUNCeVpYRjFhWEpsS0NjdUwzQnliMjFwYzJVbktTbGNibHh1Wm5WdVkzUnBiMjRnUm5WdVkzUnBiMjVoYkZCeWIyMXBjMlZ6S0hKbGMyOXNkbVZTWldwbFkzUkRRaWtnZTF4dUlDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnUm5WdVkzUnBiMjVoYkZCeWIyMXBjMlZ6S1NrZ2V5QnlaWFIxY200Z2JtVjNJRVoxYm1OMGFXOXVZV3hRY205dGFYTmxjeWh5WlhOdmJIWmxVbVZxWldOMFEwSXBJSDFjYmlBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dJVDA5SURFcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblJuVnVZM1JwYjI1aGJGQnliMjFwYzJWeklHTnZibk4wY25WamRHOXlJRzl1YkhrZ1lXTmpaWEIwY3lBeElHTmhiR3hpWVdOcklHRnlaM1Z0Wlc1MEp5bGNiaUFnZEdocGN5NWZSbEFnUFNCN1hHNGdJQ0FnWlhKeWIzSnpPaUFnSUNBZ0lDQWdJQ0FnZXlCc2FXMXBkRG9nTUN3Z1kyOTFiblE2SURBZ2ZTeGNiaUFnSUNCd2NtOXRhWE5sT2lBZ0lDQWdJQ0FnSUNCdVpYY2dVSEp2YldselpTaHlaWE52YkhabFVtVnFaV04wUTBJcExGeHVJQ0FnSUdOdmJtTjFjbkpsYm1ONVRHbHRhWFE2SURRc1hHNGdJSDFjYm4xY2JseHVSbEF1WVd4c0lEMGdSbEF1Y0hKdmRHOTBlWEJsTG1Gc2JGeHVSbEF1ZEdobGJrbG1JRDBnUmxBdWNISnZkRzkwZVhCbExsOTBhR1Z1U1daY2JrWlFMbVJsYkdGNUlEMGdiWE5sWXlBOVBpQkdVQzV5WlhOdmJIWmxLQ2t1WkdWc1lYa29iWE5sWXlsY2JrWlFMbk5wYkdWdWRDQTlJR3hwYldsMElEMCtJRVpRTG5KbGMyOXNkbVVvS1M1emFXeGxiblFvYkdsdGFYUXBYRzVjYmk4dklFMXZibUZrYVdNZ1RXVjBhRzlrYzF4dVJsQXVZMmhoYVc0Z1BTQmphR0ZwYmx4dVJsQXVjSEp2ZEc5MGVYQmxMbU5vWVdsdVJXNWtJRDBnWTJoaGFXNUZibVJjYmtaUUxuSmxhbVZqZENBOUlFWlFMbkJ5YjNSdmRIbHdaUzV5WldwbFkzUmNibHh1WEc1R1VDNXdjbTkwYjNSNWNHVXVZV1JrVTNSbGNDQTlJR1oxYm1OMGFXOXVJR0ZrWkZOMFpYQW9ibUZ0WlN3Z1lYSm5jeWtnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2RHaHBjeTV6ZEdWd2N5NXdkWE5vS0Z0dVlXMWxMQ0IwYUdsekxDQmhjbWR6WFNsY2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVSbEF1Y0hKdmRHOTBlWEJsTG1OdmJtTjFjbkpsYm1ONUlEMGdablZ1WTNScGIyNGdZMjl1WTNWeWNtVnVZM2tvYkdsdGFYUWdQU0JKYm1acGJtbDBlU2tnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25ZMjl1WTNWeWNtVnVZM2tuTENCYkxpNHVZWEpuZFcxbGJuUnpYU2xjYmlBZ2RHaHBjeTVmUmxBdVkyOXVZM1Z5Y21WdVkzbE1hVzFwZENBOUlHeHBiV2wwWEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JrWlFMbkJ5YjNSdmRIbHdaUzV4ZFdsbGRDQTlJR1oxYm1OMGFXOXVJSEYxYVdWMEtHVnljbTl5VEdsdGFYUWdQU0JKYm1acGJtbDBlU2tnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25jWFZwWlhRbkxDQmJMaTR1WVhKbmRXMWxiblJ6WFNsY2JpQWdkR2hwY3k1ZlJsQXVaWEp5YjNKeklEMGdleUJqYjNWdWREb2dNQ3dnYkdsdGFYUTZJR1Z5Y205eVRHbHRhWFFnZlZ4dUlDQnlaWFIxY200Z2RHaHBjMXh1ZlZ4dVJsQXVjSEp2ZEc5MGVYQmxMbk5wYkdWdWRDQTlJRVpRTG5CeWIzUnZkSGx3WlM1eGRXbGxkRnh1WEc1R1VDNXdjbTkwYjNSNWNHVXVaMlYwSUQwZ1puVnVZM1JwYjI0Z1oyVjBLQzR1TG10bGVVNWhiV1Z6S1NCN1hHNGdJR2xtSUNoMGFHbHpMbk4wWlhCektTQnlaWFIxY200Z2RHaHBjeTVoWkdSVGRHVndLQ2RuWlhRbkxDQmJMaTR1WVhKbmRXMWxiblJ6WFNsY2JpQWdhMlY1VG1GdFpYTWdQU0JtYkdGMGRHVnVLR3RsZVU1aGJXVnpLVnh1SUNCeVpYUjFjbTRnZEdocGN5NTBhR1Z1S0Nodlltb3BJRDArSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5aWFpQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUdsbUlDaHJaWGxPWVcxbGN5NXNaVzVuZEdnZ1BUMDlJREVwSUhKbGRIVnliaUJ2WW1wYmEyVjVUbUZ0WlhOYk1GMWRYRzRnSUNBZ0lDQnlaWFIxY200Z2EyVjVUbUZ0WlhNdWNtVmtkV05sS0NobGVIUnlZV04wWldRc0lHdGxlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmxlSFJ5WVdOMFpXUmJhMlY1WFNBOUlHOWlhbHRyWlhsZFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGVIUnlZV04wWldSY2JpQWdJQ0FnSUgwc0lIdDlLVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYjJKcVhHNGdJSDBwWEc1OVhHNWNia1pRTG5CeWIzUnZkSGx3WlM1elpYUWdQU0JtZFc1amRHbHZiaUJ6WlhRb2EyVjVUbUZ0WlN3Z2RtRnNkV1VwSUh0Y2JpQWdhV1lnS0hSb2FYTXVjM1JsY0hNcElISmxkSFZ5YmlCMGFHbHpMbUZrWkZOMFpYQW9KM05sZENjc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnlaWFIxY200Z2RHaHBjeTUwYUdWdUtHOWlhaUE5UGlCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdlltb2dQVDA5SUNkdlltcGxZM1FuS1NCdlltcGJhMlY1VG1GdFpWMGdQU0IyWVd4MVpWeHVJQ0FnSUhKbGRIVnliaUJ2WW1wY2JpQWdmU2xjYm4xY2JseHVSbEF1Y0hKdmRHOTBlWEJsTG1OaGRHTm9JRDBnWm5WdVkzUnBiMjRnS0dadUtTQjdYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkallYUmphQ2NzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTWlrZ2NtVjBkWEp1SUhSb2FYTXVZMkYwWTJoSlppZ3VMaTVoY21kMWJXVnVkSE1wWEc0Z0lHbG1JQ2doYVhOR2RXNWpkR2x2YmlobWJpa3BJSFJvY205M0lHNWxkeUJHZFc1amRHbHZibUZzUlhKeWIzSW9KMGx1ZG1Gc2FXUWdabTRnWVhKbmRXMWxiblFnWm05eUlHQXVZMkYwWTJnb1ptNHBZQzRnVFhWemRDQmlaU0JoSUdaMWJtTjBhVzl1TGlCRGRYSnlaVzUwYkhrNklDY2dLeUIwZVhCbGIyWWdabTRwWEc0Z0lISmxkSFZ5YmlCR1VDNXlaWE52YkhabEtIUm9hWE11WDBaUUxuQnliMjFwYzJVdVkyRjBZMmdvWlhKeUlEMCtJR1p1S0dWeWNpa3BLVnh1ZlZ4dVhHNUdVQzV3Y205MGIzUjVjR1V1WTJGMFkyaEpaaUE5SUdaMWJtTjBhVzl1SUdOaGRHTm9TV1lvWTI5dVpHbDBhVzl1TENCbWJpa2dlMXh1SUNCcFppQW9kR2hwY3k1emRHVndjeWtnY21WMGRYSnVJSFJvYVhNdVlXUmtVM1JsY0NnblkyRjBZMmhKWmljc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnBaaUFvSVdselJuVnVZM1JwYjI0b1ptNHBLU0IwYUhKdmR5QnVaWGNnUm5WdVkzUnBiMjVoYkVWeWNtOXlLQ2RKYm5aaGJHbGtJR1p1SUdGeVozVnRaVzUwSUdadmNpQmdMbU5oZEdOb1NXWW9ZMjl1WkdsMGFXOXVMQ0JtYmlsZ0xpQk5kWE4wSUdKbElHRWdablZ1WTNScGIyNHVJRU4xY25KbGJuUnNlVG9nSnlBcklIUjVjR1Z2WmlCbWJpbGNibHh1SUNCeVpYUjFjbTRnUmxBdWNtVnpiMngyWlNoMGFHbHpMbDlHVUM1d2NtOXRhWE5sTG1OaGRHTm9LR1Z5Y2lBOVBpQjdYRzRnSUNBZ2FXWWdLR052Ym1ScGRHbHZiaUFtSmlCbGNuSWdhVzV6ZEdGdVkyVnZaaUJqYjI1a2FYUnBiMjRwSUhKbGRIVnliaUJtYmlobGNuSXBJQzh2SUhSeWVTQnlaUzEwYUhKdmR5d2diV2xuYUhRZ1ltVWdjbVZoYkd4NUlITnNiM2N1TGk1Y2JpQWdJQ0IwYUhKdmR5QmxjbkpjYmlBZ2ZTa3BYRzU5WEc1Y2JrWlFMbkJ5YjNSdmRIbHdaUzUwYUdWdUlEMGdablZ1WTNScGIyNGdkR2hsYmlobWJpa2dlMXh1SUNCcFppQW9kR2hwY3k1emRHVndjeWtnY21WMGRYSnVJSFJvYVhNdVlXUmtVM1JsY0NnbmRHaGxiaWNzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9JV2x6Um5WdVkzUnBiMjRvWm00cEtTQjBhSEp2ZHlCdVpYY2dSblZ1WTNScGIyNWhiRVZ5Y205eUtDZEpiblpoYkdsa0lHWnVJR0Z5WjNWdFpXNTBJR1p2Y2lCZ0xuUm9aVzRvWm00cFlDNGdUWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVMaUJEZFhKeVpXNTBiSGs2SUNjZ0t5QjBlWEJsYjJZZ1ptNHBYRzRnSUhKbGRIVnliaUJHVUM1eVpYTnZiSFpsS0hSb2FYTXVYMFpRTG5CeWIyMXBjMlV1ZEdobGJpaG1iaWtwWEc1OVhHNWNia1pRTG5CeWIzUnZkSGx3WlM1MFlYQWdQU0JtZFc1amRHbHZiaUIwWVhBb1ptNHBJSHRjYmlBZ2FXWWdLSFJvYVhNdWMzUmxjSE1wSUhKbGRIVnliaUIwYUdsekxtRmtaRk4wWlhBb0ozUmhjQ2NzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9JV2x6Um5WdVkzUnBiMjRvWm00cEtTQjBhSEp2ZHlCdVpYY2dSblZ1WTNScGIyNWhiRVZ5Y205eUtDZEpiblpoYkdsa0lHWnVJR0Z5WjNWdFpXNTBJR1p2Y2lCZ0xuUmhjQ2htYmlsZ0xpQk5kWE4wSUdKbElHRWdablZ1WTNScGIyNHVJRU4xY25KbGJuUnNlVG9nSnlBcklIUjVjR1Z2WmlCbWJpbGNiaUFnY21WMGRYSnVJRVpRTG5KbGMyOXNkbVVvZEdocGN5NWZSbEF1Y0hKdmJXbHpaUzUwYUdWdUtIWmhiSFZsSUQwK0lHWnVLSFpoYkhWbEtTQS9JSFpoYkhWbElEb2dkbUZzZFdVcEtWeHVmVnh1WEc1R1VDNXlaWE52YkhabElEMGdSbEF1Y0hKdmRHOTBlWEJsTG5KbGMyOXNkbVVnUFNCbWRXNWpkR2x2YmlCeVpYTnZiSFpsS0haaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlCdVpYY2dSbEFvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDJZV3gxWlNBbUppQnBjMFoxYm1OMGFXOXVLSFpoYkhWbExuUm9aVzRwS1NCeVpYUjFjbTRnZG1Gc2RXVXVkR2hsYmloeVpYTnZiSFpsS1M1allYUmphQ2h5WldwbFkzUXBYRzRnSUNBZ2NtVnpiMngyWlNoMllXeDFaU2xjYmlBZ2ZTbGNibjFjYmx4dVJsQXVjSEp2YldsemFXWjVJRDBnWm5WdVkzUnBiMjRnY0hKdmJXbHphV1o1S0dOaUtTQjdYRzRnSUhKbGRIVnliaUFvTGk0dVlYSm5jeWtnUFQ0Z2JtVjNJRVpRS0NoNVlXZ3NJRzVoYUNrZ1BUNWNiaUFnSUNCallpNWpZV3hzS0hSb2FYTXNJQzR1TG1GeVozTXNJQ2hsY25Jc0lISmxjeWtnUFQ0Z1pYSnlJRDhnYm1Gb0tHVnljaWtnT2lCNVlXZ29jbVZ6S1NrcFhHNTlYRzVjYmtaUUxuQnliMjFwYzJsbWVVRnNiQ0E5SUdaMWJtTjBhVzl1SUhCeWIyMXBjMmxtZVVGc2JDaHZZbW9wSUh0Y2JpQWdhV1lnS0NGdlltb2dmSHdnSVU5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaHZZbW9wS1NCN0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblNXNTJZV3hwWkNCQmNtZDFiV1Z1ZENCdlltb2dhVzRnY0hKdmJXbHphV1o1UVd4c0tHOWlhaWtuS1NCOVhHNGdJSEpsZEhWeWJpQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aHZZbW9wWEc0Z0lDQWdMbVpwYkhSbGNpaHJaWGtnUFQ0Z2RIbHdaVzltSUc5aWFsdHJaWGxkSUQwOVBTQW5ablZ1WTNScGIyNG5LVnh1SUNBZ0lDNXlaV1IxWTJVb0tHOWlhaXdnWm01T1lXMWxLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9JUzlUZVc1akx5NTBaWE4wS0dadVRtRnRaU2tnSmlZZ0lXOWlhbHRnSkh0bWJrNWhiV1Y5UVhONWJtTmdYU2tnYjJKcVcyQWtlMlp1VG1GdFpYMUJjM2x1WTJCZElEMGdSbEF1Y0hKdmJXbHphV1o1S0c5aWFsdGdKSHRtYms1aGJXVjlZRjBwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdiMkpxWEc0Z0lDQWdmU3dnYjJKcUtWeHVmVnh1WEc1R1VDNTFibkJoWTJzZ1BTQm1kVzVqZEdsdmJpQjFibkJoWTJzb0tTQjdYRzRnSUd4bGRDQnlaWE52YkhabExDQnlaV3BsWTNRc0lIQnliMjFwYzJVZ1BTQnVaWGNnUmxBb0tIbGhhQ3dnYm1Gb0tTQTlQaUI3SUhKbGMyOXNkbVVnUFNCNVlXZzdJSEpsYW1WamRDQTlJRzVoYUNCOUtWeHVJQ0J5WlhSMWNtNGdleUJ3Y205dGFYTmxMQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFWjFibU4wYVc5dVlXeFFjbTl0YVhObGMxeHVYRzVwWmlBb2NISnZZMlZ6Y3lBbUppQndjbTlqWlhOekxtOXVLU0I3WEc0Z0lDOHZJSEJ5YjJObGMzTXViMjRvSjNWdVkyRjFaMmgwUlhoalpYQjBhVzl1Snl3Z1pTQTlQaUJqYjI1emIyeGxMbVZ5Y205eUtDZEdVSEp2YldselpYTTZJRVpCVkVGTUlFVllRMFZRVkVsUFRqb2dkVzVqWVhWbmFIUkZlR05sY0hScGIyNG5MQ0JsS1NsY2JpQWdjSEp2WTJWemN5NXZiaWduZFc1b1lXNWtiR1ZrVW1WcVpXTjBhVzl1Snl3Z1pTQTlQaUJqYjI1emIyeGxMbVZ5Y205eUtDZEdVSEp2YldselpYTTZJRVpCVkVGTUlFVlNVazlTT2lCMWJtaGhibVJzWldSU1pXcGxZM1JwYjI0bkxDQmxLU2xjYm4xY2JpSmRmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtyZXR1cm4gdHlwZW9mIG9iajt9IDogZnVuY3Rpb24gKG9iaikge3JldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO307ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge2lmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTt9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtpZiAoIXNlbGYpIHt0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7fXJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO31mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7dGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7fXN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7aWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO312YXIgRnVuY3Rpb25hbEVycm9yID0gZnVuY3Rpb24gKF9FcnJvcikge19pbmhlcml0cyhGdW5jdGlvbmFsRXJyb3IsIF9FcnJvcik7XG4gIGZ1bmN0aW9uIEZ1bmN0aW9uYWxFcnJvcihtc2csIG9wdGlvbnMpIHtfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnVuY3Rpb25hbEVycm9yKTtcbiAgICBpZiAoKHR5cGVvZiBtc2cgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG1zZykpID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IG1zZztcbiAgICAgIGlmIChtc2cubWVzc2FnZSkgbXNnID0gbXNnLm1lc3NhZ2U7XG4gICAgfXZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGdW5jdGlvbmFsRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGdW5jdGlvbmFsRXJyb3IpKS5jYWxsKHRoaXMsXG4gICAgbXNnKSk7XG4gICAgaWYgKCh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob3B0aW9ucykpID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucykuXG4gICAgICBmb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBfdGhpcy5uYW1lID0gX3RoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAvLyBDYXB0dXJpbmcgc3RhY2sgdHJhY2UsIGV4Y2x1ZGluZyBjb25zdHJ1Y3RvciBjYWxsIGZyb20gaXQuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoX3RoaXMsIF90aGlzLmNvbnN0cnVjdG9yKTtyZXR1cm4gX3RoaXM7XG4gIH1yZXR1cm4gRnVuY3Rpb25hbEVycm9yO30oRXJyb3IpO3ZhclxuXG5GdW5jdGlvbmFsVXNlckVycm9yID0gZnVuY3Rpb24gKF9GdW5jdGlvbmFsRXJyb3IpIHtfaW5oZXJpdHMoRnVuY3Rpb25hbFVzZXJFcnJvciwgX0Z1bmN0aW9uYWxFcnJvcik7ZnVuY3Rpb24gRnVuY3Rpb25hbFVzZXJFcnJvcigpIHtfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnVuY3Rpb25hbFVzZXJFcnJvcik7cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGdW5jdGlvbmFsVXNlckVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRnVuY3Rpb25hbFVzZXJFcnJvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO31yZXR1cm4gRnVuY3Rpb25hbFVzZXJFcnJvcjt9KEZ1bmN0aW9uYWxFcnJvcik7dmFyXG5GUFVuZXhwZWN0ZWRFcnJvciA9IGZ1bmN0aW9uIChfRnVuY3Rpb25hbEVycm9yMikge19pbmhlcml0cyhGUFVuZXhwZWN0ZWRFcnJvciwgX0Z1bmN0aW9uYWxFcnJvcjIpO2Z1bmN0aW9uIEZQVW5leHBlY3RlZEVycm9yKCkge19jbGFzc0NhbGxDaGVjayh0aGlzLCBGUFVuZXhwZWN0ZWRFcnJvcik7cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGUFVuZXhwZWN0ZWRFcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZQVW5leHBlY3RlZEVycm9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7fXJldHVybiBGUFVuZXhwZWN0ZWRFcnJvcjt9KEZ1bmN0aW9uYWxFcnJvcik7dmFyXG5GUElucHV0RXJyb3IgPSBmdW5jdGlvbiAoX0Z1bmN0aW9uYWxFcnJvcjMpIHtfaW5oZXJpdHMoRlBJbnB1dEVycm9yLCBfRnVuY3Rpb25hbEVycm9yMyk7ZnVuY3Rpb24gRlBJbnB1dEVycm9yKCkge19jbGFzc0NhbGxDaGVjayh0aGlzLCBGUElucHV0RXJyb3IpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRlBJbnB1dEVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRlBJbnB1dEVycm9yKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7fXJldHVybiBGUElucHV0RXJyb3I7fShGdW5jdGlvbmFsRXJyb3IpO3ZhclxuRlBTb2Z0RXJyb3IgPSBmdW5jdGlvbiAoX0Z1bmN0aW9uYWxFcnJvcjQpIHtfaW5oZXJpdHMoRlBTb2Z0RXJyb3IsIF9GdW5jdGlvbmFsRXJyb3I0KTtmdW5jdGlvbiBGUFNvZnRFcnJvcigpIHtfY2xhc3NDYWxsQ2hlY2sodGhpcywgRlBTb2Z0RXJyb3IpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRlBTb2Z0RXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGUFNvZnRFcnJvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO31yZXR1cm4gRlBTb2Z0RXJyb3I7fShGdW5jdGlvbmFsRXJyb3IpO3ZhclxuRlBUaW1lb3V0ID0gZnVuY3Rpb24gKF9GdW5jdGlvbmFsRXJyb3I1KSB7X2luaGVyaXRzKEZQVGltZW91dCwgX0Z1bmN0aW9uYWxFcnJvcjUpO2Z1bmN0aW9uIEZQVGltZW91dCgpIHtfY2xhc3NDYWxsQ2hlY2sodGhpcywgRlBUaW1lb3V0KTtyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZQVGltZW91dC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZQVGltZW91dCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO31yZXR1cm4gRlBUaW1lb3V0O30oRnVuY3Rpb25hbEVycm9yKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcjogRnVuY3Rpb25hbEVycm9yLFxuICBGdW5jdGlvbmFsVXNlckVycm9yOiBGdW5jdGlvbmFsVXNlckVycm9yLFxuICBGUFVuZXhwZWN0ZWRFcnJvcjogRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcjogRlBJbnB1dEVycm9yLFxuICBGUFNvZnRFcnJvcjogRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dDogRlBUaW1lb3V0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5dGIyUjFiR1Z6TDJWeWNtOXljeTVxY3lKZExDSnVZVzFsY3lJNld5SkdkVzVqZEdsdmJtRnNSWEp5YjNJaUxDSnRjMmNpTENKdmNIUnBiMjV6SWl3aWJXVnpjMkZuWlNJc0lrOWlhbVZqZENJc0ltZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTWlMQ0ptYjNKRllXTm9JaXdpYTJWNUlpd2libUZ0WlNJc0ltTnZibk4wY25WamRHOXlJaXdpUlhKeWIzSWlMQ0pqWVhCMGRYSmxVM1JoWTJ0VWNtRmpaU0lzSWtaMWJtTjBhVzl1WVd4VmMyVnlSWEp5YjNJaUxDSkdVRlZ1Wlhod1pXTjBaV1JGY25KdmNpSXNJa1pRU1c1d2RYUkZjbkp2Y2lJc0lrWlFVMjltZEVWeWNtOXlJaXdpUmxCVWFXMWxiM1YwSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJbkZ1UTBGQlRVRXNaVHRCUVVOS0xESkNRVUZaUXl4SFFVRmFMRVZCUVdsQ1F5eFBRVUZxUWl4RlFVRXdRanRCUVVONFFpeFJRVUZKTEZGQlFVOUVMRWRCUVZBc2VVTkJRVTlCTEVkQlFWQXNUMEZCWlN4UlFVRnVRaXhGUVVFMlFqdEJRVU16UWtNc1owSkJRVlZFTEVkQlFWWTdRVUZEUVN4VlFVRkxRU3hKUVVGSlJTeFBRVUZVTEVWQlFXMUNSaXhOUVVGTlFTeEpRVUZKUlN4UFFVRldPMEZCUTNCQ0xFdEJTblZDTzBGQlMyeENSaXhQUVV4clFqdEJRVTE0UWl4UlFVRkpMRkZCUVU5RExFOUJRVkFzZVVOQlFVOUJMRTlCUVZBc1QwRkJiVUlzVVVGQmRrSXNSVUZCYVVNN1FVRkRMMEpGTEdGQlFVOURMRzFDUVVGUUxFTkJRVEpDU0N4UFFVRXpRanRCUVVOSFNTeGhRVVJJTEVOQlExY3NaVUZCVHp0QlFVTmtMR05CUVV0RExFZEJRVXdzU1VGQldVd3NVVUZCVVVzc1IwRkJVaXhEUVVGYU8wRkJRMFFzVDBGSVNEdEJRVWxFTzBGQlEwUXNWVUZCUzBNc1NVRkJUQ3hIUVVGWkxFMUJRVXRETEZkQlFVd3NRMEZCYVVKRUxFbEJRVGRDTzBGQlEwRTdRVUZEUVVVc1ZVRkJUVU1zYVVKQlFVNHNVVUZCT0VJc1RVRkJTMFlzVjBGQmJrTXNSVUZrZDBJN1FVRmxla0lzUnl4NVFrRm9RakpDUXl4TE96dEJRV3RDZUVKRkxHMUNMSGRWUVVFMFFsb3NaVHRCUVVNMVFtRXNhVUlzT0ZSQlFUQkNZaXhsTzBGQlF6RkNZeXhaTEdkVFFVRnhRbVFzWlR0QlFVTnlRbVVzVnl3d1VrRkJiMEptTEdVN1FVRkRjRUpuUWl4VExEaFJRVUZyUW1oQ0xHVTdPMEZCUlhoQ2FVSXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFqdEJRVU5tYkVJc2EwTkJSR1U3UVVGRlpsa3NNRU5CUm1VN1FVRkhaa01zYzBOQlNHVTdRVUZKWmtNc05FSkJTbVU3UVVGTFprTXNNRUpCVEdVN1FVRk5aa01zYzBKQlRtVXNSVUZCYWtJaUxDSm1hV3hsSWpvaVpYSnliM0p6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTlrYkdWMmVTOWpiMlJsTDI5emN5OW1kVzVqZEdsdmJtRnNMWEpwZG1WeUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMnhoYzNNZ1JuVnVZM1JwYjI1aGJFVnljbTl5SUdWNGRHVnVaSE1nUlhKeWIzSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHRjMmNzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUcxelp5QTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUc5d2RHbHZibk1nUFNCdGMyZGNiaUFnSUNBZ0lHbG1JQ2dnYlhObkxtMWxjM05oWjJVZ0tTQnRjMmNnUFNCdGMyY3ViV1Z6YzJGblpWeHVJQ0FnSUgxY2JpQWdJQ0J6ZFhCbGNpaHRjMmNwWEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUNBZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb2IzQjBhVzl1Y3lsY2JpQWdJQ0FnSUNBZ0xtWnZja1ZoWTJnb2EyVjVJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6VzJ0bGVWMGdQU0J2Y0hScGIyNXpXMnRsZVYxY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXVZVzFsSUQwZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1dVlXMWxYRzRnSUNBZ0x5OGdRMkZ3ZEhWeWFXNW5JSE4wWVdOcklIUnlZV05sTENCbGVHTnNkV1JwYm1jZ1kyOXVjM1J5ZFdOMGIzSWdZMkZzYkNCbWNtOXRJR2wwTGx4dUlDQWdJRVZ5Y205eUxtTmhjSFIxY21WVGRHRmphMVJ5WVdObEtIUm9hWE1zSUhSb2FYTXVZMjl1YzNSeWRXTjBiM0lwWEc0Z0lIMWNibjFjYm1Oc1lYTnpJRVoxYm1OMGFXOXVZV3hWYzJWeVJYSnliM0lnWlhoMFpXNWtjeUJHZFc1amRHbHZibUZzUlhKeWIzSWdlMzFjYm1Oc1lYTnpJRVpRVlc1bGVIQmxZM1JsWkVWeWNtOXlJR1Y0ZEdWdVpITWdSblZ1WTNScGIyNWhiRVZ5Y205eUlIdDlYRzVqYkdGemN5QkdVRWx1Y0hWMFJYSnliM0lnWlhoMFpXNWtjeUJHZFc1amRHbHZibUZzUlhKeWIzSWdlMzFjYm1Oc1lYTnpJRVpRVTI5bWRFVnljbTl5SUdWNGRHVnVaSE1nUm5WdVkzUnBiMjVoYkVWeWNtOXlJSHQ5WEc1amJHRnpjeUJHVUZScGJXVnZkWFFnWlhoMFpXNWtjeUJHZFc1amRHbHZibUZzUlhKeWIzSWdlMzFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJRVoxYm1OMGFXOXVZV3hGY25KdmNpeGNiaUFnUm5WdVkzUnBiMjVoYkZWelpYSkZjbkp2Y2l4Y2JpQWdSbEJWYm1WNGNHVmpkR1ZrUlhKeWIzSXNYRzRnSUVaUVNXNXdkWFJGY25KdmNpeGNiaUFnUmxCVGIyWjBSWEp5YjNJc1hHNGdJRVpRVkdsdFpXOTFkQ3hjYm4xY2JpSmRmUT09XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbW9kdWxlcy9lcnJvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUHJvbWlzZUxpa2U6IGZ1bmN0aW9uIGlzUHJvbWlzZUxpa2UocCkge3JldHVybiBwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbic7fSxcblxuICBpc0Z1bmN0aW9uOiBmdW5jdGlvbiBpc0Z1bmN0aW9uKGZuKSB7cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJzt9LFxuXG4gIGlzRW51bWVyYWJsZTogZnVuY3Rpb24gaXNFbnVtZXJhYmxlKGxpc3QpIHtyZXR1cm4gbGlzdCAmJiBBcnJheS5pc0FycmF5KGxpc3QpIHx8IHR5cGVvZiBsaXN0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7fSxcblxuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKGFycikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBgZmxhdHRlbmAgcmVxdWlyZXMgdmFsaWQgYXJyYXkgcGFyYW1ldGVyJyk7XG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdHMsIGl0ZW0pIHtyZXR1cm4gcmVzdWx0cy5jb25jYXQoQXJyYXkuaXNBcnJheShpdGVtKSA/IHV0aWxzLmZsYXR0ZW4oaXRlbSkgOiBbaXRlbV0pO30sIFtdKTtcbiAgfSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OXRiMlIxYkdWekwzVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJJblYwYVd4eklpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SXNJbWx6VUhKdmJXbHpaVXhwYTJVaUxDSndJaXdpZEdobGJpSXNJbWx6Um5WdVkzUnBiMjRpTENKbWJpSXNJbWx6Ulc1MWJXVnlZV0pzWlNJc0lteHBjM1FpTENKQmNuSmhlU0lzSW1selFYSnlZWGtpTENKVGVXMWliMndpTENKcGRHVnlZWFJ2Y2lJc0ltWnNZWFIwWlc0aUxDSmhjbklpTENKRmNuSnZjaUlzSW5KbFpIVmpaU0lzSW5KbGMzVnNkSE1pTENKcGRHVnRJaXdpWTI5dVkyRjBJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hKUVVGTlFTeFJRVUZSUXl4UFFVRlBReXhQUVVGUUxFZEJRV2xDTzBGQlF6ZENReXhsUVVRMlFpeDVRa0ZEWmtNc1EwRkVaU3hGUVVOYUxFTkJRVVVzVDBGQlQwRXNTMEZCU3l4UFFVRlBRU3hGUVVGRlF5eEpRVUZVTEV0QlFXdENMRlZCUVRsQ0xFTkJRVEJETEVOQlJHaERPenRCUVVjM1FrTXNXVUZJTmtJc2MwSkJSMnhDUXl4RlFVaHJRaXhGUVVka0xFTkJRVVVzVDBGQlR5eFBRVUZQUVN4RlFVRlFMRXRCUVdNc1ZVRkJja0lzUTBGQmFVTXNRMEZJY2tJN08wRkJTemRDUXl4alFVdzJRaXgzUWtGTGFFSkRMRWxCVEdkQ0xFVkJTMVlzUTBGQlJTeFBRVUZQUVN4UlFVRlJReXhOUVVGTlF5eFBRVUZPTEVOQlFXTkdMRWxCUVdRc1EwRkJVaXhKUVVFclFpeFBRVUZQUVN4TFFVRkxSeXhQUVVGUFF5eFJRVUZhTEVOQlFWQXNTMEZCYVVNc1ZVRkJka1VzUTBGQmJVWXNRMEZNTTBVN08wRkJUemRDUXl4VFFWQTJRaXh0UWtGUGNrSkRMRWRCVUhGQ0xFVkJUMmhDTzBGQlExZ3NVVUZCU1N4RFFVRkRUQ3hOUVVGTlF5eFBRVUZPTEVOQlFXTkpMRWRCUVdRc1EwRkJUQ3hGUVVGNVFpeE5RVUZOTEVsQlFVbERMRXRCUVVvc1EwRkJWU3hwUkVGQlZpeERRVUZPTzBGQlEzcENMRmRCUVU5RUxFbEJRVWxGTEUxQlFVb3NRMEZCVnl4VlFVRkRReXhQUVVGRUxFVkJRVlZETEVsQlFWWXNWVUZCYlVKRUxGRkJRVkZGTEUxQlFWSXNRMEZCWlZZc1RVRkJUVU1zVDBGQlRpeERRVUZqVVN4SlFVRmtMRWxCUVhOQ2JrSXNUVUZCVFdNc1QwRkJUaXhEUVVGalN5eEpRVUZrTEVOQlFYUkNMRWRCUVRSRExFTkJRVU5CTEVsQlFVUXNRMEZCTTBRc1EwRkJia0lzUlVGQldDeEZRVUZyUnl4RlFVRnNSeXhEUVVGUU8wRkJRMFFzUjBGV05FSXNSVUZCTDBJaUxDSm1hV3hsSWpvaWRYUnBiSE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pTDFWelpYSnpMMlJzWlhaNUwyTnZaR1V2YjNOekwyWjFibU4wYVc5dVlXd3RjbWwyWlhJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmpiMjV6ZENCMWRHbHNjeUE5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQnBjMUJ5YjIxcGMyVk1hV3RsS0hBcElIc2djbVYwZFhKdUlIQWdKaVlnZEhsd1pXOW1JSEF1ZEdobGJpQTlQVDBnSjJaMWJtTjBhVzl1SnlCOUxGeHVYRzRnSUdselJuVnVZM1JwYjI0b1ptNHBJSHNnY21WMGRYSnVJSFI1Y0dWdlppQm1iaUE5UFQwZ0oyWjFibU4wYVc5dUp5QjlMRnh1WEc0Z0lHbHpSVzUxYldWeVlXSnNaU2hzYVhOMEtTQjdJSEpsZEhWeWJpQnNhWE4wSUNZbUlFRnljbUY1TG1selFYSnlZWGtvYkdsemRDa2dmSHdnZEhsd1pXOW1JR3hwYzNSYlUzbHRZbTlzTG1sMFpYSmhkRzl5WFNBOVBUMGdKMloxYm1OMGFXOXVKeUI5TEZ4dVhHNGdJR1pzWVhSMFpXNG9ZWEp5S1NCN1hHNGdJQ0FnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dGeWNpa3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25UV1YwYUc5a0lHQm1iR0YwZEdWdVlDQnlaWEYxYVhKbGN5QjJZV3hwWkNCaGNuSmhlU0J3WVhKaGJXVjBaWEluS1Z4dUlDQWdJSEpsZEhWeWJpQmhjbkl1Y21Wa2RXTmxLQ2h5WlhOMWJIUnpMQ0JwZEdWdEtTQTlQaUJ5WlhOMWJIUnpMbU52Ym1OaGRDaEJjbkpoZVM1cGMwRnljbUY1S0dsMFpXMHBJRDhnZFhScGJITXVabXhoZEhSbGJpaHBkR1Z0S1NBNklGdHBkR1Z0WFNrc0lGdGRLVnh1SUNCOVhHNTlYRzRpWFgwPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL21vZHVsZXMvdXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0pKCk7XG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkge3JldHVybiBbXTt9O1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkge3JldHVybiAnLyc7fTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24gKCkge3JldHVybiAwO307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5d2NtOWpaWE56TDJKeWIzZHpaWEl1YW5NaVhTd2libUZ0WlhNaU9sc2ljSEp2WTJWemN5SXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0pqWVdOb1pXUlRaWFJVYVcxbGIzVjBJaXdpWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSWl3aVpHVm1ZWFZzZEZObGRGUnBiVzkxZENJc0lrVnljbTl5SWl3aVpHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWRDSXNJbk5sZEZScGJXVnZkWFFpTENKbElpd2lZMnhsWVhKVWFXMWxiM1YwSWl3aWNuVnVWR2x0Wlc5MWRDSXNJbVoxYmlJc0ltTmhiR3dpTENKeWRXNURiR1ZoY2xScGJXVnZkWFFpTENKdFlYSnJaWElpTENKeGRXVjFaU0lzSW1SeVlXbHVhVzVuSWl3aVkzVnljbVZ1ZEZGMVpYVmxJaXdpY1hWbGRXVkpibVJsZUNJc0ltTnNaV0Z1VlhCT1pYaDBWR2xqYXlJc0lteGxibWQwYUNJc0ltTnZibU5oZENJc0ltUnlZV2x1VVhWbGRXVWlMQ0owYVcxbGIzVjBJaXdpYkdWdUlpd2ljblZ1SWl3aWJtVjRkRlJwWTJzaUxDSmhjbWR6SWl3aVFYSnlZWGtpTENKaGNtZDFiV1Z1ZEhNaUxDSnBJaXdpY0hWemFDSXNJa2wwWlcwaUxDSmhjbkpoZVNJc0luQnliM1J2ZEhsd1pTSXNJbUZ3Y0d4NUlpd2lkR2wwYkdVaUxDSmljbTkzYzJWeUlpd2laVzUySWl3aVlYSm5kaUlzSW5abGNuTnBiMjRpTENKMlpYSnphVzl1Y3lJc0ltNXZiM0FpTENKdmJpSXNJbUZrWkV4cGMzUmxibVZ5SWl3aWIyNWpaU0lzSW05bVppSXNJbkpsYlc5MlpVeHBjM1JsYm1WeUlpd2ljbVZ0YjNabFFXeHNUR2x6ZEdWdVpYSnpJaXdpWlcxcGRDSXNJbkJ5WlhCbGJtUk1hWE4wWlc1bGNpSXNJbkJ5WlhCbGJtUlBibU5sVEdsemRHVnVaWElpTENKc2FYTjBaVzVsY25NaUxDSnVZVzFsSWl3aVltbHVaR2x1WnlJc0ltTjNaQ0lzSW1Ob1pHbHlJaXdpWkdseUlpd2lkVzFoYzJzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEVzU1VGQlNVRXNWVUZCVlVNc1QwRkJUME1zVDBGQlVDeEhRVUZwUWl4RlFVRXZRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hKUVVGSlF5eG5Ra0ZCU2p0QlFVTkJMRWxCUVVsRExHdENRVUZLT3p0QlFVVkJMRk5CUVZORExHZENRVUZVTEVkQlFUUkNPMEZCUTNoQ0xGVkJRVTBzU1VGQlNVTXNTMEZCU2l4RFFVRlZMR2xEUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5FTEZOQlFWTkRMRzFDUVVGVUxFZEJRV2RETzBGQlF6VkNMRlZCUVUwc1NVRkJTVVFzUzBGQlNpeERRVUZWTEcxRFFVRldMRU5CUVU0N1FVRkRTRHRCUVVOQkxHRkJRVms3UVVGRFZDeFJRVUZKTzBGQlEwRXNXVUZCU1N4UFFVRlBSU3hWUVVGUUxFdEJRWE5DTEZWQlFURkNMRVZCUVhORE8wRkJRMnhEVEN3clFrRkJiVUpMTEZWQlFXNUNPMEZCUTBnc1UwRkdSQ3hOUVVWUE8wRkJRMGhNTEN0Q1FVRnRRa1VzWjBKQlFXNUNPMEZCUTBnN1FVRkRTaXhMUVU1RUxFTkJUVVVzVDBGQlQwa3NRMEZCVUN4RlFVRlZPMEZCUTFKT0xESkNRVUZ0UWtVc1owSkJRVzVDTzBGQlEwZzdRVUZEUkN4UlFVRkpPMEZCUTBFc1dVRkJTU3hQUVVGUFN5eFpRVUZRTEV0QlFYZENMRlZCUVRWQ0xFVkJRWGRETzBGQlEzQkRUaXhwUTBGQmNVSk5MRmxCUVhKQ08wRkJRMGdzVTBGR1JDeE5RVVZQTzBGQlEwaE9MR2xEUVVGeFFrY3NiVUpCUVhKQ08wRkJRMGc3UVVGRFNpeExRVTVFTEVOQlRVVXNUMEZCVDBVc1EwRkJVQ3hGUVVGVk8wRkJRMUpNTERaQ1FVRnhRa2NzYlVKQlFYSkNPMEZCUTBnN1FVRkRTaXhEUVc1Q1FTeEhRVUZFTzBGQmIwSkJMRk5CUVZOSkxGVkJRVlFzUTBGQmIwSkRMRWRCUVhCQ0xFVkJRWGxDTzBGQlEzSkNMRkZCUVVsVUxIRkNRVUZ4UWtzc1ZVRkJla0lzUlVGQmNVTTdRVUZEYWtNN1FVRkRRU3hsUVVGUFFTeFhRVUZYU1N4SFFVRllMRVZCUVdkQ0xFTkJRV2hDTEVOQlFWQTdRVUZEU0R0QlFVTkVPMEZCUTBFc1VVRkJTU3hEUVVGRFZDeHhRa0ZCY1VKRkxHZENRVUZ5UWl4SlFVRjVReXhEUVVGRFJpeG5Ra0ZCTTBNc1MwRkJaMFZMTEZWQlFYQkZMRVZCUVdkR08wRkJRelZGVEN3eVFrRkJiVUpMTEZWQlFXNUNPMEZCUTBFc1pVRkJUMEVzVjBGQlYwa3NSMEZCV0N4RlFVRm5RaXhEUVVGb1FpeERRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpPMEZCUTBFN1FVRkRRU3hsUVVGUFZDeHBRa0ZCYVVKVExFZEJRV3BDTEVWQlFYTkNMRU5CUVhSQ0xFTkJRVkE3UVVGRFNDeExRVWhFTEVOQlIwVXNUMEZCVFVnc1EwRkJUaXhGUVVGUk8wRkJRMDRzV1VGQlNUdEJRVU5CTzBGQlEwRXNiVUpCUVU5T0xHbENRVUZwUWxVc1NVRkJha0lzUTBGQmMwSXNTVUZCZEVJc1JVRkJORUpFTEVkQlFUVkNMRVZCUVdsRExFTkJRV3BETEVOQlFWQTdRVUZEU0N4VFFVaEVMRU5CUjBVc1QwRkJUVWdzUTBGQlRpeEZRVUZSTzBGQlEwNDdRVUZEUVN4dFFrRkJUMDRzYVVKQlFXbENWU3hKUVVGcVFpeERRVUZ6UWl4SlFVRjBRaXhGUVVFMFFrUXNSMEZCTlVJc1JVRkJhVU1zUTBGQmFrTXNRMEZCVUR0QlFVTklPMEZCUTBvN096dEJRVWRLTzBGQlEwUXNVMEZCVTBVc1pVRkJWQ3hEUVVGNVFrTXNUVUZCZWtJc1JVRkJhVU03UVVGRE4wSXNVVUZCU1Znc2RVSkJRWFZDVFN4WlFVRXpRaXhGUVVGNVF6dEJRVU55UXp0QlFVTkJMR1ZCUVU5QkxHRkJRV0ZMTEUxQlFXSXNRMEZCVUR0QlFVTklPMEZCUTBRN1FVRkRRU3hSUVVGSkxFTkJRVU5ZTEhWQ1FVRjFRa2NzYlVKQlFYWkNMRWxCUVRoRExFTkJRVU5JTEd0Q1FVRm9SQ3hMUVVGMVJVMHNXVUZCTTBVc1JVRkJlVVk3UVVGRGNrWk9MRFpDUVVGeFFrMHNXVUZCY2tJN1FVRkRRU3hsUVVGUFFTeGhRVUZoU3l4TlFVRmlMRU5CUVZBN1FVRkRTRHRCUVVORUxGRkJRVWs3UVVGRFFUdEJRVU5CTEdWQlFVOVlMRzFDUVVGdFFsY3NUVUZCYmtJc1EwRkJVRHRCUVVOSUxFdEJTRVFzUTBGSFJTeFBRVUZQVGl4RFFVRlFMRVZCUVZNN1FVRkRVQ3haUVVGSk8wRkJRMEU3UVVGRFFTeHRRa0ZCVDB3c2JVSkJRVzFDVXl4SlFVRnVRaXhEUVVGM1FpeEpRVUY0UWl4RlFVRTRRa1VzVFVGQk9VSXNRMEZCVUR0QlFVTklMRk5CU0VRc1EwRkhSU3hQUVVGUFRpeERRVUZRTEVWQlFWTTdRVUZEVUR0QlFVTkJPMEZCUTBFc2JVSkJRVTlNTEcxQ1FVRnRRbE1zU1VGQmJrSXNRMEZCZDBJc1NVRkJlRUlzUlVGQk9FSkZMRTFCUVRsQ0xFTkJRVkE3UVVGRFNEdEJRVU5LT3pzN08wRkJTVW83UVVGRFJDeEpRVUZKUXl4UlFVRlJMRVZCUVZvN1FVRkRRU3hKUVVGSlF5eFhRVUZYTEV0QlFXWTdRVUZEUVN4SlFVRkpReXhaUVVGS08wRkJRMEVzU1VGQlNVTXNZVUZCWVN4RFFVRkRMRU5CUVd4Q096dEJRVVZCTEZOQlFWTkRMR1ZCUVZRc1IwRkJNa0k3UVVGRGRrSXNVVUZCU1N4RFFVRkRTQ3hSUVVGRUxFbEJRV0VzUTBGQlEwTXNXVUZCYkVJc1JVRkJaME03UVVGRE5VSTdRVUZEU0R0QlFVTkVSQ3hsUVVGWExFdEJRVmc3UVVGRFFTeFJRVUZKUXl4aFFVRmhSeXhOUVVGcVFpeEZRVUY1UWp0QlFVTnlRa3dzWjBKQlFWRkZMR0ZCUVdGSkxFMUJRV0lzUTBGQmIwSk9MRXRCUVhCQ0xFTkJRVkk3UVVGRFNDeExRVVpFTEUxQlJVODdRVUZEU0Vjc2NVSkJRV0VzUTBGQlF5eERRVUZrTzBGQlEwZzdRVUZEUkN4UlFVRkpTQ3hOUVVGTlN5eE5RVUZXTEVWQlFXdENPMEZCUTJSRk8wRkJRMGc3UVVGRFNqczdRVUZGUkN4VFFVRlRRU3hWUVVGVUxFZEJRWE5DTzBGQlEyeENMRkZCUVVsT0xGRkJRVW9zUlVGQll6dEJRVU5XTzBGQlEwZzdRVUZEUkN4UlFVRkpUeXhWUVVGVllpeFhRVUZYVXl4bFFVRllMRU5CUVdRN1FVRkRRVWdzWlVGQlZ5eEpRVUZZT3p0QlFVVkJMRkZCUVVsUkxFMUJRVTFVTEUxQlFVMUxMRTFCUVdoQ08wRkJRMEVzVjBGQlRVa3NSMEZCVGl4RlFVRlhPMEZCUTFCUUxIVkNRVUZsUml4TFFVRm1PMEZCUTBGQkxHZENRVUZSTEVWQlFWSTdRVUZEUVN4bFFVRlBMRVZCUVVWSExGVkJRVVlzUjBGQlpVMHNSMEZCZEVJc1JVRkJNa0k3UVVGRGRrSXNaMEpCUVVsUUxGbEJRVW9zUlVGQmEwSTdRVUZEWkVFc05rSkJRV0ZETEZWQlFXSXNSVUZCZVVKUExFZEJRWHBDTzBGQlEwZzdRVUZEU2p0QlFVTkVVQ3h4UWtGQllTeERRVUZETEVOQlFXUTdRVUZEUVUwc1kwRkJUVlFzVFVGQlRVc3NUVUZCV2p0QlFVTklPMEZCUTBSSUxHMUNRVUZsTEVsQlFXWTdRVUZEUVVRc1pVRkJWeXhMUVVGWU8wRkJRMEZJTEc5Q1FVRm5RbFVzVDBGQmFFSTdRVUZEU0RzN1FVRkZSSGhDTEZGQlFWRXlRaXhSUVVGU0xFZEJRVzFDTEZWQlFWVm1MRWRCUVZZc1JVRkJaVHRCUVVNNVFpeFJRVUZKWjBJc1QwRkJUeXhKUVVGSlF5eExRVUZLTEVOQlFWVkRMRlZCUVZWVUxFMUJRVllzUjBGQmJVSXNRMEZCTjBJc1EwRkJXRHRCUVVOQkxGRkJRVWxUTEZWQlFWVlVMRTFCUVZZc1IwRkJiVUlzUTBGQmRrSXNSVUZCTUVJN1FVRkRkRUlzWVVGQlN5eEpRVUZKVlN4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbEVMRlZCUVZWVUxFMUJRVGxDTEVWQlFYTkRWU3hIUVVGMFF5eEZRVUV5UXp0QlFVTjJRMGdzYVVKQlFVdEhMRWxCUVVrc1EwRkJWQ3hKUVVGalJDeFZRVUZWUXl4RFFVRldMRU5CUVdRN1FVRkRTRHRCUVVOS08wRkJRMFJtTEZWQlFVMW5RaXhKUVVGT0xFTkJRVmNzU1VGQlNVTXNTVUZCU2l4RFFVRlRja0lzUjBGQlZDeEZRVUZqWjBJc1NVRkJaQ3hEUVVGWU8wRkJRMEVzVVVGQlNWb3NUVUZCVFVzc1RVRkJUaXhMUVVGcFFpeERRVUZxUWl4SlFVRnpRaXhEUVVGRFNpeFJRVUV6UWl4RlFVRnhRenRCUVVOcVEwNHNiVUpCUVZkWkxGVkJRVmc3UVVGRFNEdEJRVU5LTEVOQldFUTdPMEZCWVVFN1FVRkRRU3hUUVVGVFZTeEpRVUZVTEVOQlFXTnlRaXhIUVVGa0xFVkJRVzFDYzBJc1MwRkJia0lzUlVGQk1FSTdRVUZEZEVJc1UwRkJTM1JDTEVkQlFVd3NSMEZCVjBFc1IwRkJXRHRCUVVOQkxGTkJRVXR6UWl4TFFVRk1MRWRCUVdGQkxFdEJRV0k3UVVGRFNEdEJRVU5FUkN4TFFVRkxSU3hUUVVGTUxFTkJRV1ZVTEVkQlFXWXNSMEZCY1VJc1dVRkJXVHRCUVVNM1FpeFRRVUZMWkN4SFFVRk1MRU5CUVZOM1FpeExRVUZVTEVOQlFXVXNTVUZCWml4RlFVRnhRaXhMUVVGTFJpeExRVUV4UWp0QlFVTklMRU5CUmtRN1FVRkhRV3hETEZGQlFWRnhReXhMUVVGU0xFZEJRV2RDTEZOQlFXaENPMEZCUTBGeVF5eFJRVUZSYzBNc1QwRkJVaXhIUVVGclFpeEpRVUZzUWp0QlFVTkJkRU1zVVVGQlVYVkRMRWRCUVZJc1IwRkJZeXhGUVVGa08wRkJRMEYyUXl4UlFVRlJkME1zU1VGQlVpeEhRVUZsTEVWQlFXWTdRVUZEUVhoRExGRkJRVkY1UXl4UFFVRlNMRWRCUVd0Q0xFVkJRV3hDTEVNc1EwRkJjMEk3UVVGRGRFSjZReXhSUVVGUk1FTXNVVUZCVWl4SFFVRnRRaXhGUVVGdVFqczdRVUZGUVN4VFFVRlRReXhKUVVGVUxFZEJRV2RDTEVOQlFVVTdPMEZCUld4Q00wTXNVVUZCVVRSRExFVkJRVklzUjBGQllVUXNTVUZCWWp0QlFVTkJNME1zVVVGQlVUWkRMRmRCUVZJc1IwRkJjMEpHTEVsQlFYUkNPMEZCUTBFelF5eFJRVUZST0VNc1NVRkJVaXhIUVVGbFNDeEpRVUZtTzBGQlEwRXpReXhSUVVGUkswTXNSMEZCVWl4SFFVRmpTaXhKUVVGa08wRkJRMEV6UXl4UlFVRlJaMFFzWTBGQlVpeEhRVUY1UWt3c1NVRkJla0k3UVVGRFFUTkRMRkZCUVZGcFJDeHJRa0ZCVWl4SFFVRTJRazRzU1VGQk4wSTdRVUZEUVRORExGRkJRVkZyUkN4SlFVRlNMRWRCUVdWUUxFbEJRV1k3UVVGRFFUTkRMRkZCUVZGdFJDeGxRVUZTTEVkQlFUQkNVaXhKUVVFeFFqdEJRVU5CTTBNc1VVRkJVVzlFTEcxQ1FVRlNMRWRCUVRoQ1ZDeEpRVUU1UWpzN1FVRkZRVE5ETEZGQlFWRnhSQ3hUUVVGU0xFZEJRVzlDTEZWQlFWVkRMRWxCUVZZc1JVRkJaMElzUTBGQlJTeFBRVUZQTEVWQlFWQXNRMEZCVnl4RFFVRnFSRHM3UVVGRlFYUkVMRkZCUVZGMVJDeFBRVUZTTEVkQlFXdENMRlZCUVZWRUxFbEJRVllzUlVGQlowSTdRVUZET1VJc1ZVRkJUU3hKUVVGSmFFUXNTMEZCU2l4RFFVRlZMR3REUVVGV0xFTkJRVTQ3UVVGRFNDeERRVVpFT3p0QlFVbEJUaXhSUVVGUmQwUXNSMEZCVWl4SFFVRmpMRmxCUVZrc1EwRkJSU3hQUVVGUExFZEJRVkFzUTBGQldTeERRVUY0UXp0QlFVTkJlRVFzVVVGQlVYbEVMRXRCUVZJc1IwRkJaMElzVlVGQlZVTXNSMEZCVml4RlFVRmxPMEZCUXpOQ0xGVkJRVTBzU1VGQlNYQkVMRXRCUVVvc1EwRkJWU3huUTBGQlZpeERRVUZPTzBGQlEwZ3NRMEZHUkR0QlFVZEJUaXhSUVVGUk1rUXNTMEZCVWl4SFFVRm5RaXhaUVVGWExFTkJRVVVzVDBGQlR5eERRVUZRTEVOQlFWY3NRMEZCZUVNaUxDSm1hV3hsSWpvaVluSnZkM05sY2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJdlZYTmxjbk12Wkd4bGRua3ZZMjlrWlM5dmMzTXZablZ1WTNScGIyNWhiQzF5YVhabGNpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUhOb2FXMGdabTl5SUhWemFXNW5JSEJ5YjJObGMzTWdhVzRnWW5KdmQzTmxjbHh1ZG1GeUlIQnliMk5sYzNNZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdDlPMXh1WEc0dkx5QmpZV05vWldRZ1puSnZiU0IzYUdGMFpYWmxjaUJuYkc5aVlXd2dhWE1nY0hKbGMyVnVkQ0J6YnlCMGFHRjBJSFJsYzNRZ2NuVnVibVZ5Y3lCMGFHRjBJSE4wZFdJZ2FYUmNiaTh2SUdSdmJpZDBJR0p5WldGcklIUm9hVzVuY3k0Z0lFSjFkQ0IzWlNCdVpXVmtJSFJ2SUhkeVlYQWdhWFFnYVc0Z1lTQjBjbmtnWTJGMFkyZ2dhVzRnWTJGelpTQnBkQ0JwYzF4dUx5OGdkM0poY0hCbFpDQnBiaUJ6ZEhKcFkzUWdiVzlrWlNCamIyUmxJSGRvYVdOb0lHUnZaWE51SjNRZ1pHVm1hVzVsSUdGdWVTQm5iRzlpWVd4ekxpQWdTWFFuY3lCcGJuTnBaR1VnWVZ4dUx5OGdablZ1WTNScGIyNGdZbVZqWVhWelpTQjBjbmt2WTJGMFkyaGxjeUJrWlc5d2RHbHRhWHBsSUdsdUlHTmxjblJoYVc0Z1pXNW5hVzVsY3k1Y2JseHVkbUZ5SUdOaFkyaGxaRk5sZEZScGJXVnZkWFE3WEc1MllYSWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBPMXh1WEc1bWRXNWpkR2x2YmlCa1pXWmhkV3gwVTJWMFZHbHRiM1YwS0NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduYzJWMFZHbHRaVzkxZENCb1lYTWdibTkwSUdKbFpXNGdaR1ZtYVc1bFpDY3BPMXh1ZlZ4dVpuVnVZM1JwYjI0Z1pHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWRDQW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGpiR1ZoY2xScGJXVnZkWFFnYUdGeklHNXZkQ0JpWldWdUlHUmxabWx1WldRbktUdGNibjFjYmlobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCelpYUlVhVzFsYjNWMElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pXUlRaWFJVYVcxbGIzVjBJRDBnYzJWMFZHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEZObGRGUnBiVzkxZER0Y2JpQWdJQ0I5WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmpiR1ZoY2xScGJXVnZkWFFnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDQTlJR05zWldGeVZHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdSbFptRjFiSFJEYkdWaGNsUnBiV1Z2ZFhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdSbFptRjFiSFJEYkdWaGNsUnBiV1Z2ZFhRN1hHNGdJQ0FnZlZ4dWZTQW9LU2xjYm1aMWJtTjBhVzl1SUhKMWJsUnBiV1Z2ZFhRb1puVnVLU0I3WEc0Z0lDQWdhV1lnS0dOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFQwOUlITmxkRlJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnTHk5dWIzSnRZV3dnWlc1MmFYSnZiV1Z1ZEhNZ2FXNGdjMkZ1WlNCemFYUjFZWFJwYjI1elhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelpYUlVhVzFsYjNWMEtHWjFiaXdnTUNrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUdsbUlITmxkRlJwYldWdmRYUWdkMkZ6YmlkMElHRjJZV2xzWVdKc1pTQmlkWFFnZDJGeklHeGhkSFJsY2lCa1pXWnBibVZrWEc0Z0lDQWdhV1lnS0NoallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwOVBTQmtaV1poZFd4MFUyVjBWR2x0YjNWMElIeDhJQ0ZqWVdOb1pXUlRaWFJVYVcxbGIzVjBLU0FtSmlCelpYUlVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzJWMFZHbHRaVzkxZENobWRXNHNJREFwTzF4dUlDQWdJSDFjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBdkx5QjNhR1Z1SUhkb1pXNGdjMjl0WldKdlpIa2dhR0Z6SUhOamNtVjNaV1FnZDJsMGFDQnpaWFJVYVcxbGIzVjBJR0oxZENCdWJ5QkpMa1V1SUcxaFpHUnVaWE56WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUlRaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkMlVnWVhKbElHbHVJRWt1UlM0Z1luVjBJSFJvWlNCelkzSnBjSFFnYUdGeklHSmxaVzRnWlhaaGJHVmtJSE52SUVrdVJTNGdaRzlsYzI0bmRDQjBjblZ6ZENCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCM2FHVnVJR05oYkd4bFpDQnViM0p0WVd4c2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpGTmxkRlJwYldWdmRYUXVZMkZzYkNodWRXeHNMQ0JtZFc0c0lEQXBPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzJGdFpTQmhjeUJoWW05MlpTQmlkWFFnZDJobGJpQnBkQ2R6SUdFZ2RtVnljMmx2YmlCdlppQkpMa1V1SUhSb1lYUWdiWFZ6ZENCb1lYWmxJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJR1p2Y2lBbmRHaHBjeWNzSUdodmNHWjFiR3g1SUc5MWNpQmpiMjUwWlhoMElHTnZjbkpsWTNRZ2IzUm9aWEozYVhObElHbDBJSGRwYkd3Z2RHaHliM2NnWVNCbmJHOWlZV3dnWlhKeWIzSmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUlRaWFJVYVcxbGIzVjBMbU5oYkd3b2RHaHBjeXdnWm5WdUxDQXdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dVhHNTlYRzVtZFc1amRHbHZiaUJ5ZFc1RGJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtTQjdYRzRnSUNBZ2FXWWdLR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5UFQwZ1kyeGxZWEpVYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUM4dmJtOXliV0ZzSUdWdWRtbHliMjFsYm5SeklHbHVJSE5oYm1VZ2MybDBkV0YwYVc5dWMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHbG1JR05zWldGeVZHbHRaVzkxZENCM1lYTnVKM1FnWVhaaGFXeGhZbXhsSUdKMWRDQjNZWE1nYkdGMGRHVnlJR1JsWm1sdVpXUmNiaUFnSUNCcFppQW9LR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5UFQwZ1pHVm1ZWFZzZEVOc1pXRnlWR2x0Wlc5MWRDQjhmQ0FoWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwS1NBbUppQmpiR1ZoY2xScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdZMnhsWVhKVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJ4bFlYSlVhVzFsYjNWMEtHMWhjbXRsY2lrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDOHZJSGRvWlc0Z2QyaGxiaUJ6YjIxbFltOWtlU0JvWVhNZ2MyTnlaWGRsWkNCM2FYUm9JSE5sZEZScGJXVnZkWFFnWW5WMElHNXZJRWt1UlM0Z2JXRmtaRzVsYzNOY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENodFlYSnJaWElwTzF4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCM1pTQmhjbVVnYVc0Z1NTNUZMaUJpZFhRZ2RHaGxJSE5qY21sd2RDQm9ZWE1nWW1WbGJpQmxkbUZzWldRZ2MyOGdTUzVGTGlCa2IyVnpiaWQwSUNCMGNuVnpkQ0IwYUdVZ1oyeHZZbUZzSUc5aWFtVmpkQ0IzYUdWdUlHTmhiR3hsWkNCdWIzSnRZV3hzZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDNWpZV3hzS0c1MWJHd3NJRzFoY210bGNpazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzJGdFpTQmhjeUJoWW05MlpTQmlkWFFnZDJobGJpQnBkQ2R6SUdFZ2RtVnljMmx2YmlCdlppQkpMa1V1SUhSb1lYUWdiWFZ6ZENCb1lYWmxJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJR1p2Y2lBbmRHaHBjeWNzSUdodmNHWjFiR3g1SUc5MWNpQmpiMjUwWlhoMElHTnZjbkpsWTNRZ2IzUm9aWEozYVhObElHbDBJSGRwYkd3Z2RHaHliM2NnWVNCbmJHOWlZV3dnWlhKeWIzSXVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRiMjFsSUhabGNuTnBiMjV6SUc5bUlFa3VSUzRnYUdGMlpTQmthV1ptWlhKbGJuUWdjblZzWlhNZ1ptOXlJR05zWldGeVZHbHRaVzkxZENCMmN5QnpaWFJVYVcxbGIzVjBYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTG1OaGJHd29kR2hwY3l3Z2JXRnlhMlZ5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVYRzVjYm4xY2JuWmhjaUJ4ZFdWMVpTQTlJRnRkTzF4dWRtRnlJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzUyWVhJZ1kzVnljbVZ1ZEZGMVpYVmxPMXh1ZG1GeUlIRjFaWFZsU1c1a1pYZ2dQU0F0TVR0Y2JseHVablZ1WTNScGIyNGdZMnhsWVc1VmNFNWxlSFJVYVdOcktDa2dlMXh1SUNBZ0lHbG1JQ2doWkhKaGFXNXBibWNnZkh3Z0lXTjFjbkpsYm5SUmRXVjFaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1SUNBZ0lHUnlZV2x1YVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnYVdZZ0tHTjFjbkpsYm5SUmRXVjFaUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnY1hWbGRXVWdQU0JqZFhKeVpXNTBVWFZsZFdVdVkyOXVZMkYwS0hGMVpYVmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnhkV1YxWlVsdVpHVjRJRDBnTFRFN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoeGRXVjFaUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnWkhKaGFXNVJkV1YxWlNncE8xeHVJQ0FnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWkhKaGFXNVJkV1YxWlNncElIdGNiaUFnSUNCcFppQW9aSEpoYVc1cGJtY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdkR2x0Wlc5MWRDQTlJSEoxYmxScGJXVnZkWFFvWTJ4bFlXNVZjRTVsZUhSVWFXTnJLVHRjYmlBZ0lDQmtjbUZwYm1sdVp5QTlJSFJ5ZFdVN1hHNWNiaUFnSUNCMllYSWdiR1Z1SUQwZ2NYVmxkV1V1YkdWdVozUm9PMXh1SUNBZ0lIZG9hV3hsS0d4bGJpa2dlMXh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBVWFZsZFdVZ1BTQnhkV1YxWlR0Y2JpQWdJQ0FnSUNBZ2NYVmxkV1VnUFNCYlhUdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tDc3JjWFZsZFdWSmJtUmxlQ0E4SUd4bGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR04xY25KbGJuUlJkV1YxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SUmRXVjFaVnR4ZFdWMVpVbHVaR1Y0WFM1eWRXNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzRnSUNBZ0lDQWdJR3hsYmlBOUlIRjFaWFZsTG14bGJtZDBhRHRjYmlBZ0lDQjlYRzRnSUNBZ1kzVnljbVZ1ZEZGMVpYVmxJRDBnYm5Wc2JEdGNiaUFnSUNCa2NtRnBibWx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJSEoxYmtOc1pXRnlWR2x0Wlc5MWRDaDBhVzFsYjNWMEtUdGNibjFjYmx4dWNISnZZMlZ6Y3k1dVpYaDBWR2xqYXlBOUlHWjFibU4wYVc5dUlDaG1kVzRwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUc1bGR5QkJjbkpoZVNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUMwZ01TazdYRzRnSUNBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F4T3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21kelcya2dMU0F4WFNBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnhkV1YxWlM1d2RYTm9LRzVsZHlCSmRHVnRLR1oxYml3Z1lYSm5jeWtwTzF4dUlDQWdJR2xtSUNoeGRXVjFaUzVzWlc1bmRHZ2dQVDA5SURFZ0ppWWdJV1J5WVdsdWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhKMWJsUnBiV1Z2ZFhRb1pISmhhVzVSZFdWMVpTazdYRzRnSUNBZ2ZWeHVmVHRjYmx4dUx5OGdkamdnYkdsclpYTWdjSEpsWkdsamRHbGliR1VnYjJKcVpXTjBjMXh1Wm5WdVkzUnBiMjRnU1hSbGJTaG1kVzRzSUdGeWNtRjVLU0I3WEc0Z0lDQWdkR2hwY3k1bWRXNGdQU0JtZFc0N1hHNGdJQ0FnZEdocGN5NWhjbkpoZVNBOUlHRnljbUY1TzF4dWZWeHVTWFJsYlM1d2NtOTBiM1I1Y0dVdWNuVnVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVablZ1TG1Gd2NHeDVLRzUxYkd3c0lIUm9hWE11WVhKeVlYa3BPMXh1ZlR0Y2JuQnliMk5sYzNNdWRHbDBiR1VnUFNBblluSnZkM05sY2ljN1hHNXdjbTlqWlhOekxtSnliM2R6WlhJZ1BTQjBjblZsTzF4dWNISnZZMlZ6Y3k1bGJuWWdQU0I3ZlR0Y2JuQnliMk5sYzNNdVlYSm5kaUE5SUZ0ZE8xeHVjSEp2WTJWemN5NTJaWEp6YVc5dUlEMGdKeWM3SUM4dklHVnRjSFI1SUhOMGNtbHVaeUIwYnlCaGRtOXBaQ0J5WldkbGVIQWdhWE56ZFdWelhHNXdjbTlqWlhOekxuWmxjbk5wYjI1eklEMGdlMzA3WEc1Y2JtWjFibU4wYVc5dUlHNXZiM0FvS1NCN2ZWeHVYRzV3Y205alpYTnpMbTl1SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011WVdSa1RHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1dmJtTmxJRDBnYm05dmNEdGNibkJ5YjJObGMzTXViMlptSUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y21WdGIzWmxUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NWxiV2wwSUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y0hKbGNHVnVaRXhwYzNSbGJtVnlJRDBnYm05dmNEdGNibkJ5YjJObGMzTXVjSEpsY0dWdVpFOXVZMlZNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzVjYm5CeWIyTmxjM011YkdsemRHVnVaWEp6SUQwZ1puVnVZM1JwYjI0Z0tHNWhiV1VwSUhzZ2NtVjBkWEp1SUZ0ZElIMWNibHh1Y0hKdlkyVnpjeTVpYVc1a2FXNW5JRDBnWm5WdVkzUnBiMjRnS0c1aGJXVXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozQnliMk5sYzNNdVltbHVaR2x1WnlCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSnlrN1hHNTlPMXh1WEc1d2NtOWpaWE56TG1OM1pDQTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUNjdkp5QjlPMXh1Y0hKdlkyVnpjeTVqYUdScGNpQTlJR1oxYm1OMGFXOXVJQ2hrYVhJcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNCeWIyTmxjM011WTJoa2FYSWdhWE1nYm05MElITjFjSEJ2Y25SbFpDY3BPMXh1ZlR0Y2JuQnliMk5sYzNNdWRXMWhjMnNnUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlEQTdJSDA3WEc0aVhYMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkge2Z1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7dmFyIF9hcnIgPSBbXTt2YXIgX24gPSB0cnVlO3ZhciBfZCA9IGZhbHNlO3ZhciBfZSA9IHVuZGVmaW5lZDt0cnkge2ZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtfYXJyLnB1c2goX3MudmFsdWUpO2lmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazt9fSBjYXRjaCAoZXJyKSB7X2QgPSB0cnVlO19lID0gZXJyO30gZmluYWxseSB7dHJ5IHtpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpO30gZmluYWxseSB7aWYgKF9kKSB0aHJvdyBfZTt9fXJldHVybiBfYXJyO31yZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkge2lmIChBcnJheS5pc0FycmF5KGFycikpIHtyZXR1cm4gYXJyO30gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7cmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTt9IGVsc2Uge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO319O30oKTtmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7aWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge2ZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHthcnIyW2ldID0gYXJyW2ldO31yZXR1cm4gYXJyMjt9IGVsc2Uge3JldHVybiBBcnJheS5mcm9tKGFycik7fX12YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJyksRlBJbnB1dEVycm9yID0gX3JlcXVpcmUuRlBJbnB1dEVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY2hhaW46IGNoYWluLCBjaGFpbkVuZDogY2hhaW5FbmRcblxuXG4gIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFN0YXJ0ICdyZWNvcmRpbmcnIGEgY2hhaW4gb2YgY29tbWFuZHMsIGFmdGVyIHN0ZXBzIGRlZmluZWQgY2FsbCBgLmNoYWluRW5kKClgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMgRnVuY3Rpb25hbFByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi8gfTtcbmZ1bmN0aW9uIGNoYWluKCkge1xuICB2YXIgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG4gIC8vIGNyZWF0ZSBhIHBsYWNlaG9sZGVyL2luaXRpYWwgcHJvbWlzZSB0byBob2xkIHRoZSBzdGVwcy9jaGFpbiBkYXRhXG4gIHZhciBwcm9taXNlID0gRlAucmVzb2x2ZSgpO1xuICBwcm9taXNlLnN0ZXBzID0gW107XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG4vKipcbiAgICogQ2FsbCBhZnRlciBzdGFydGluZyBhIGAuY2hhaW4oKWAuXG4gICAqXG4gICAqIE9uZSBvZiB0aGUgZmV3IG5vbi1jaGFpbmFibGUgbWV0aG9kcyBpbiB0aGUgQVBJLlxuICAgKiBAcmV0dXJucyBhIEZ1bmN0aW9uLiBJdCBydW5zIHlvdXIgZnVuY3Rpb25hbCBjaGFpbiFcbiAgICovXG5mdW5jdGlvbiBjaGFpbkVuZCgpIHt2YXIgX3RoaXMgPSB0aGlzO1xuICB2YXIgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIGlmICghX3RoaXMuc3RlcHMgfHwgX3RoaXMuc3RlcHMubGVuZ3RoIDw9IDApIHRocm93IG5ldyBGUElucHV0RXJyb3IoJ05vIHN0ZXBzIGRlZmluZWQgYmV0d2VlbiAuY2hhaW4oKSAmIC5jaGFpbkVuZCgpJyk7XG4gICAgdmFyIHN0ZXBDb3VudCA9IDA7dmFyIF9GUCR1bnBhY2sgPVxuICAgIEZQLnVucGFjaygpLHByb21pc2UgPSBfRlAkdW5wYWNrLnByb21pc2UscmVzb2x2ZSA9IF9GUCR1bnBhY2sucmVzb2x2ZSxyZWplY3QgPSBfRlAkdW5wYWNrLnJlamVjdDtcbiAgICB3aGlsZSAoc3RlcENvdW50IDwgX3RoaXMuc3RlcHMubGVuZ3RoKSB7dmFyIF9wcm9taXNlO3ZhciBfc3RlcHMkc3RlcENvdW50ID0gX3NsaWNlZFRvQXJyYXkoXG4gICAgICBfdGhpcy5zdGVwc1tzdGVwQ291bnRdLCAzKSxmbk5hbWUgPSBfc3RlcHMkc3RlcENvdW50WzBdLGFyZ3MgPSBfc3RlcHMkc3RlcENvdW50WzJdO1xuICAgICAgcHJvbWlzZSA9IChfcHJvbWlzZSA9IHByb21pc2UpW2ZuTmFtZV0uYXBwbHkoX3Byb21pc2UsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7XG4gICAgICBzdGVwQ291bnQrKztcbiAgICB9XG4gICAgcmVzb2x2ZShpbnB1dCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5dGIyNWhaSE11YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJa1pRU1c1d2RYUkZjbkp2Y2lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSmphR0ZwYmlJc0ltTm9ZV2x1Ulc1a0lpd2lSbEFpTENKd2NtOXRhWE5sSWl3aWNtVnpiMngyWlNJc0luTjBaWEJ6SWl3aWJHVnVaM1JvSWl3aWMzUmxjRU52ZFc1MElpd2lkVzV3WVdOcklpd2ljbVZxWldOMElpd2labTVPWVcxbElpd2lZWEpuY3lJc0ltbHVjSFYwSWwwc0ltMWhjSEJwYm1keklqb2lhVEJDUVVGNVFrRXNVVUZCVVN4clFrRkJVaXhETEVOQlFXcENReXhaTEZsQlFVRkJMRms3TzBGQlJWSkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSXNSVUZCUlVNc1dVRkJSaXhGUVVGVFF6czdPMEZCUnpGQ096czdkVVJCU0dsQ0xFVkJRV3BDTzBGQlQwRXNVMEZCVTBRc1MwRkJWQ3hIUVVGcFFqdEJRVU5tTEUxQlFVMUZMRXRCUVV0T0xGRkJRVkVzVTBGQlVpeERRVUZZTzBGQlEwRTdRVUZEUVN4TlFVRk5UeXhWUVVGVlJDeEhRVUZIUlN4UFFVRklMRVZCUVdoQ08wRkJRMEZFTEZWQlFWRkZMRXRCUVZJc1IwRkJaMElzUlVGQmFFSTdRVUZEUVN4VFFVRlBSaXhQUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3p0QlFVMUJMRk5CUVZOR0xGRkJRVlFzUjBGQmIwSTdRVUZEYkVJc1RVRkJUVU1zUzBGQlMwNHNVVUZCVVN4VFFVRlNMRU5CUVZnN08wRkJSVUVzVTBGQlR5eHBRa0ZCVXp0QlFVTmtMRkZCUVVrc1EwRkJReXhOUVVGTFV5eExRVUZPTEVsQlFXVXNUVUZCUzBFc1MwRkJUQ3hEUVVGWFF5eE5RVUZZTEVsQlFYRkNMRU5CUVhoRExFVkJRVEpETEUxQlFVMHNTVUZCU1ZRc1dVRkJTaXhEUVVGcFFpeHBSRUZCYWtJc1EwRkJUanRCUVVNelF5eFJRVUZKVlN4WlFVRlpMRU5CUVdoQ0xFTkJSbU03UVVGSGJVSk1MRTlCUVVkTkxFMUJRVWdzUlVGSWJrSXNRMEZIVkV3c1QwRklVeXhqUVVkVVFTeFBRVWhUTEVOQlIwRkRMRTlCU0VFc1kwRkhRVUVzVDBGSVFTeERRVWRUU3l4TlFVaFVMR05CUjFOQkxFMUJTRlE3UVVGSlpDeFhRVUZQUml4WlFVRlpMRTFCUVV0R0xFdEJRVXdzUTBGQlYwTXNUVUZCT1VJc1JVRkJjME03UVVGRFdDeFpRVUZMUkN4TFFVRk1MRU5CUVZkRkxGTkJRVmdzUTBGRVZ5eExRVU0zUWtjc1RVRkVOa0lzZFVKQlEyNUNReXhKUVVSdFFqdEJRVVZ3UTFJc1owSkJRVlVzY1VKQlFWRlBMRTFCUVZJc2NVTkJRVzFDUXl4SlFVRnVRaXhGUVVGV08wRkJRMEZLTzBGQlEwUTdRVUZEUkVnc1dVRkJVVkVzUzBGQlVqdEJRVU5CTEZkQlFVOVVMRTlCUVZBN1FVRkRSQ3hIUVZoRU8wRkJXVVFpTENKbWFXeGxJam9pYlc5dVlXUnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaTlWYzJWeWN5OWtiR1YyZVM5amIyUmxMMjl6Y3k5bWRXNWpkR2x2Ym1Gc0xYSnBkbVZ5SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVkyOXVjM1FnZXlCR1VFbHVjSFYwUlhKeWIzSWdmU0E5SUhKbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGNuSnZjbk1uS1Z4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dZMmhoYVc0c0lHTm9ZV2x1Ulc1a0lIMWNibHh1WEc0dktpcGNiaUFxSUZOMFlYSjBJQ2R5WldOdmNtUnBibWNuSUdFZ1kyaGhhVzRnYjJZZ1kyOXRiV0Z1WkhNc0lHRm1kR1Z5SUhOMFpYQnpJR1JsWm1sdVpXUWdZMkZzYkNCZ0xtTm9ZV2x1Ulc1a0tDbGdYRzRnS2lCQWNtVjBkWEp1Y3lCR2RXNWpkR2x2Ym1Gc1VISnZiV2x6WlZ4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYUdGcGJpZ3BJSHRjYmlBZ1kyOXVjM1FnUmxBZ1BTQnlaWEYxYVhKbEtDY3VMMmx1WkdWNEp5bGNiaUFnTHk4Z1kzSmxZWFJsSUdFZ2NHeGhZMlZvYjJ4a1pYSXZhVzVwZEdsaGJDQndjbTl0YVhObElIUnZJR2h2YkdRZ2RHaGxJSE4wWlhCekwyTm9ZV2x1SUdSaGRHRmNiaUFnWTI5dWMzUWdjSEp2YldselpTQTlJRVpRTG5KbGMyOXNkbVVvS1Z4dUlDQndjbTl0YVhObExuTjBaWEJ6SUQwZ1cxMWNiaUFnY21WMGRYSnVJSEJ5YjIxcGMyVmNibjFjYmx4dUx5b3FYRzRnS2lCRFlXeHNJR0ZtZEdWeUlITjBZWEowYVc1bklHRWdZQzVqYUdGcGJpZ3BZQzVjYmlBcVhHNGdLaUJQYm1VZ2IyWWdkR2hsSUdabGR5QnViMjR0WTJoaGFXNWhZbXhsSUcxbGRHaHZaSE1nYVc0Z2RHaGxJRUZRU1M1Y2JpQXFJRUJ5WlhSMWNtNXpJR0VnUm5WdVkzUnBiMjR1SUVsMElISjFibk1nZVc5MWNpQm1kVzVqZEdsdmJtRnNJR05vWVdsdUlWeHVJQ292WEc1bWRXNWpkR2x2YmlCamFHRnBia1Z1WkNncElIdGNiaUFnWTI5dWMzUWdSbEFnUFNCeVpYRjFhWEpsS0NjdUwybHVaR1Y0SnlsY2JseHVJQ0J5WlhSMWNtNGdhVzV3ZFhRZ1BUNGdlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NXpkR1Z3Y3lCOGZDQjBhR2x6TG5OMFpYQnpMbXhsYm1kMGFDQThQU0F3S1NCMGFISnZkeUJ1WlhjZ1JsQkpibkIxZEVWeWNtOXlLQ2RPYnlCemRHVndjeUJrWldacGJtVmtJR0psZEhkbFpXNGdMbU5vWVdsdUtDa2dKaUF1WTJoaGFXNUZibVFvS1NjcFhHNGdJQ0FnYkdWMElITjBaWEJEYjNWdWRDQTlJREJjYmlBZ0lDQnNaWFFnZTNCeWIyMXBjMlVzSUhKbGMyOXNkbVVzSUhKbGFtVmpkSDBnUFNCR1VDNTFibkJoWTJzb0tWeHVJQ0FnSUhkb2FXeGxJQ2h6ZEdWd1EyOTFiblFnUENCMGFHbHpMbk4wWlhCekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnVzJadVRtRnRaU3dnTENCaGNtZHpYU0E5SUhSb2FYTXVjM1JsY0hOYmMzUmxjRU52ZFc1MFhWeHVJQ0FnSUNBZ2NISnZiV2x6WlNBOUlIQnliMjFwYzJWYlptNU9ZVzFsWFNndUxpNWhjbWR6S1Z4dUlDQWdJQ0FnYzNSbGNFTnZkVzUwS3l0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVZ6YjJ4MlpTaHBibkIxZENsY2JpQWdJQ0J5WlhSMWNtNGdjSEp2YldselpWeHVJQ0I5WEc1OVhHNGlYWDA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbW9uYWRzLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHtmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge3ZhciBfYXJyID0gW107dmFyIF9uID0gdHJ1ZTt2YXIgX2QgPSBmYWxzZTt2YXIgX2UgPSB1bmRlZmluZWQ7dHJ5IHtmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7X2Fyci5wdXNoKF9zLnZhbHVlKTtpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7fX0gY2F0Y2ggKGVycikge19kID0gdHJ1ZTtfZSA9IGVycjt9IGZpbmFsbHkge3RyeSB7aWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTt9IGZpbmFsbHkge2lmIChfZCkgdGhyb3cgX2U7fX1yZXR1cm4gX2Fycjt9cmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHtpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7cmV0dXJuIGFycjt9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkge3JldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7fSBlbHNlIHt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTt9fTt9KCk7ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge2lmIChBcnJheS5pc0FycmF5KGFycikpIHtmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7YXJyMltpXSA9IGFycltpXTt9cmV0dXJuIGFycjI7fSBlbHNlIHtyZXR1cm4gQXJyYXkuZnJvbShhcnIpO319dmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9tb2R1bGVzL3V0aWxzJyksaXNFbnVtZXJhYmxlID0gX3JlcXVpcmUuaXNFbnVtZXJhYmxlO3ZhciBfcmVxdWlyZTIgPVxucmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpLEZQSW5wdXRFcnJvciA9IF9yZXF1aXJlMi5GUElucHV0RXJyb3IsRnVuY3Rpb25hbEVycm9yID0gX3JlcXVpcmUyLkZ1bmN0aW9uYWxFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7IG1hcDogbWFwLCBmaW5kOiBmaW5kLCBmaW5kSW5kZXg6IGZpbmRJbmRleCwgZmlsdGVyOiBmaWx0ZXIsIHJlZHVjZTogcmVkdWNlIH07XG5cbmZ1bmN0aW9uIGZpbmQoY2FsbGJhY2spIHtyZXR1cm4gX2ZpbmQuY2FsbCh0aGlzLCBjYWxsYmFjaykudGhlbihmdW5jdGlvbiAoX3JlZikge3ZhciBpdGVtID0gX3JlZi5pdGVtO3JldHVybiBpdGVtO30pO31cbmZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFjaykge3JldHVybiBfZmluZC5jYWxsKHRoaXMsIGNhbGxiYWNrKS50aGVuKGZ1bmN0aW9uIChfcmVmMikge3ZhciBpbmRleCA9IF9yZWYyLmluZGV4O3JldHVybiBpbmRleDt9KTt9XG5cbmZ1bmN0aW9uIF9maW5kKGl0ZXJhYmxlLCBjYWxsYmFjaykge1xuICB2YXIgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdfZmluZCcsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIGlmICh0eXBlb2YgaXRlcmFibGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IGl0ZXJhYmxlO1xuICAgIGl0ZXJhYmxlID0gdGhpcy5fRlAucHJvbWlzZTtcbiAgfVxuXG4gIHJldHVybiBGUC5yZXNvbHZlKGl0ZXJhYmxlKS5cbiAgZmlsdGVyKGNhbGxiYWNrKS5cbiAgdGhlbihmdW5jdGlvbiAocmVzdWx0cykge3JldHVybiByZXN1bHRzWzBdICE9IHVuZGVmaW5lZCA/IHsgaXRlbTogcmVzdWx0c1swXSwgaW5kZXg6IHJlc3VsdHMuaW5kZXhPZihyZXN1bHRzWzBdKSB9IDogeyBpdGVtOiB1bmRlZmluZWQsIGluZGV4OiAtMSB9O30pO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoaXRlcmFibGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdmaWx0ZXInLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICBpZiAodHlwZW9mIGl0ZXJhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBpdGVyYWJsZTtcbiAgICBpdGVyYWJsZSA9IHRoaXMuX0ZQLnByb21pc2U7XG4gIH1cblxuICByZXR1cm4gcmVkdWNlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoYWNjLCBpdGVtKSB7cmV0dXJuIFByb21pc2UucmVzb2x2ZShjYWxsYmFjayhpdGVtKSkudGhlbihmdW5jdGlvbiAoeCkge3JldHVybiB4ID8gYWNjLmNvbmNhdChbaXRlbV0pIDogYWNjO30pO30sIFtdKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlKGl0ZXJhYmxlLCByZWR1Y2VyLCBpbml0VmFsKSB7XG4gIHZhciBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKTtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3JlZHVjZScsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIGlmICh0eXBlb2YgaXRlcmFibGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpbml0VmFsID0gcmVkdWNlcjtcbiAgICByZWR1Y2VyID0gaXRlcmFibGU7XG4gICAgaXRlcmFibGUgPSB0aGlzLl9GUCA/IHRoaXMuX0ZQLnByb21pc2UgOiB0aGlzO1xuICB9IGVsc2UgaXRlcmFibGUgPSBGUC5yZXNvbHZlKGl0ZXJhYmxlLCB0aGlzKTtcblxuICByZXR1cm4gbmV3IEZQKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXR1cm4gaXRlcmFibGUudGhlbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KHRvdGFsKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoY3VycmVudC5kb25lKSByZXR1cm4gcmVzb2x2ZSh0b3RhbCk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGwoW3RvdGFsLCBjdXJyZW50LnZhbHVlXSkuXG4gICAgICAgIHRoZW4oZnVuY3Rpb24gKF9yZWYzKSB7dmFyIF9yZWY0ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjMsIDIpLHRvdGFsID0gX3JlZjRbMF0saXRlbSA9IF9yZWY0WzFdO3JldHVybiBuZXh0KHJlZHVjZXIodG90YWwsIGl0ZW0sIGkrKykpO30pLmNhdGNoKHJlamVjdCk7XG4gICAgICB9O1xuXG4gICAgICBuZXh0KGluaXRWYWwpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuLyplc2xpbnQgbWF4LXN0YXRlbWVudHM6IFtcImVycm9yXCIsIDYwXSovXG5mdW5jdGlvbiBtYXAoYXJncywgZm4sIG9wdGlvbnMpIHt2YXIgX3RoaXMgPSB0aGlzO1xuICB2YXIgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdtYXAnLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0aGlzICYmIHRoaXMuX0ZQKSB7XG4gICAgZm4gPSBhcmdzO1xuICAgIGFyZ3MgPSB0aGlzICYmIHRoaXMuX0ZQICYmIHRoaXMuX0ZQLnByb21pc2U7XG4gIH1cbiAgdmFyIHJlc29sdmVkT3JSZWplY3RlZCA9IGZhbHNlO1xuICB2YXIgdGhyZWFkTGltaXQgPSBNYXRoLm1heCgxLCBNYXRoLm1pbih0aGlzICYmIHRoaXMuX0ZQICYmIHRoaXMuX0ZQLmNvbmN1cnJlbmN5TGltaXQgfHwgMSwgNCkpO1xuICB2YXIgaW5uZXJWYWx1ZXMgPSB0aGlzICYmIHRoaXMuX0ZQICYmIHRoaXMuX0ZQLnByb21pc2UgPyB0aGlzLl9GUC5wcm9taXNlIDogUHJvbWlzZS5yZXNvbHZlKGFyZ3MpO1xuICB2YXIgaW5pdGlhbFRocmVhZCA9IDA7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgdmFyIHRocmVhZFBvb2wgPSBuZXcgU2V0KCk7XG4gIHZhciB0aHJlYWRQb29sRnVsbCA9IGZ1bmN0aW9uIHRocmVhZFBvb2xGdWxsKCkge3JldHVybiB0aHJlYWRQb29sLnNpemUgPj0gdGhyZWFkTGltaXQ7fTtcbiAgdmFyIGlzRG9uZSA9IGZ1bmN0aW9uIGlzRG9uZSgpIHtyZXR1cm4gZXJyb3JzLmxlbmd0aCA+IF90aGlzLl9GUC5lcnJvcnMubGltaXQgfHwgY291bnQgPj0gYXJncy5sZW5ndGggfHwgcmVzb2x2ZWRPclJlamVjdGVkO307XG4gIHZhciBzZXRSZXN1bHQgPSBmdW5jdGlvbiBzZXRSZXN1bHQoaW5kZXgpIHtyZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aHJlYWRQb29sLmRlbGV0ZShpbmRleCk7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07fTtcbiAgcmV0dXJuIEZQLnJlc29sdmUobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXNvbHZlSXQgPSBmdW5jdGlvbiByZXNvbHZlSXQoeCkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ0FjdGlvbi5yZXNvbHZlOicsIHJlc29sdmVkT3JSZWplY3RlZCwgeClcbiAgICAgIGlmIChyZXNvbHZlZE9yUmVqZWN0ZWQpIHtyZXR1cm4gbnVsbDt9IGVsc2Uge3Jlc29sdmVkT3JSZWplY3RlZCA9IHRydWU7fVxuICAgICAgcmVzb2x2ZSh4KTtcbiAgICB9O1xuICAgIHZhciByZWplY3RJdCA9IGZ1bmN0aW9uIHJlamVjdEl0KHgpIHtcbiAgICAgIGlmIChyZXNvbHZlZE9yUmVqZWN0ZWQpIHtyZXR1cm4gbnVsbDt9IGVsc2Uge3Jlc29sdmVkT3JSZWplY3RlZCA9IHRydWU7fVxuICAgICAgLy8gY29uc29sZS5sb2coJ0FjdGlvbi5yZWplY3Q6JywgcmVzb2x2ZWRPclJlamVjdGVkLCB4KVxuICAgICAgcmVqZWN0KHgpO1xuICAgIH07XG4gICAgaW5uZXJWYWx1ZXMudGhlbihmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgIGFyZ3MgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGl0ZW1zKSk7XG4gICAgICBpZiAoIWlzRW51bWVyYWJsZShpdGVtcykpIHJldHVybiByZWplY3QobmV3IEZQSW5wdXRFcnJvcignSW52YWxpZCBpbnB1dCBkYXRhIHBhc3NlZCBpbnRvIEZQLm1hcCgpJykpO1xuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBudWxsO1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IF90aGlzLl9GUC5lcnJvcnMubGltaXQpIGFjdGlvbiA9IHJlamVjdEl0O1xuICAgICAgICBpZiAoaXNEb25lKCkpIGFjdGlvbiA9IHJlc29sdmVJdDtcbiAgICAgICAgaWYgKGFjdGlvbikgcmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtyZXR1cm4gYWN0aW9uKHJlc3VsdHMpO30pID8gdHJ1ZSA6IHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgICB2YXIgY2hlY2tBbmRSdW4gPSBmdW5jdGlvbiBjaGVja0FuZFJ1bih2YWwpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2NoZWNrQW5kUnVuJywgY291bnQsIHJlc29sdmVkT3JSZWplY3RlZCwgdmFsKVxuICAgICAgICBpZiAocmVzb2x2ZWRPclJlamVjdGVkKSByZXR1cm47XG4gICAgICAgIGlmICghY29tcGxldGUoKSAmJiAhcmVzdWx0c1tjb3VudF0pIHJ1bkl0ZW0oY291bnQpO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfTtcblxuICAgICAgdmFyIHJ1bkl0ZW0gPSBmdW5jdGlvbiBydW5JdGVtKGMpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkT3JSZWplY3RlZCkge3JldHVybiBudWxsO30gZWxzZSB7Y291bnQrKzt9XG4gICAgICAgIGlmICh0aHJlYWRQb29sRnVsbCgpKSByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7cmV0dXJuIHJ1bkl0ZW0oYyk7fSwgMCk7XG4gICAgICAgIGlmIChyZXN1bHRzW2NdKSByZXR1cm4gcmVzdWx0c1tjXTtcbiAgICAgICAgdGhyZWFkUG9vbC5hZGQoYyk7XG4gICAgICAgIC8vIGVpdGhlciBnZXQgdmFsdWUgd2l0aCBgZm4oaXRlbSlgIG9yIGBpdGVtLnRoZW4oZm4pYFxuICAgICAgICByZXN1bHRzW2NdID0gUHJvbWlzZS5yZXNvbHZlKGFyZ3NbY10pLlxuICAgICAgICB0aGVuKGZ1bmN0aW9uICh2YWwpIHtyZXR1cm4gZm4odmFsLCBjLCBhcmdzKTt9KS5cbiAgICAgICAgdGhlbihmdW5jdGlvbiAodmFsKSB7cmV0dXJuIHNldFJlc3VsdChjKSh2YWwpO30pLlxuICAgICAgICB0aGVuKGNoZWNrQW5kUnVuKS5cbiAgICAgICAgY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIF90aGlzLl9GUC5lcnJvcnMuY291bnQrKztcbiAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdFUlIgSEFORExFUiEnLCBlcnJvcnMubGVuZ3RoLCB0aGlzLl9GUC5lcnJvcnMubGltaXQpXG4gICAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiBfdGhpcy5fRlAuZXJyb3JzLmxpbWl0KSB7XG4gICAgICAgICAgICB2YXIgZnBFcnIgPSBlcnJvcnMubGVuZ3RoID09PSAxID8gZXJyIDogbmV3IEZ1bmN0aW9uYWxFcnJvcignRXJyb3IgTGltaXQgJyArIF90aGlzLl9GUC5lcnJvcnMubGltaXQgKyAnIEV4Y2VlZGVkLlxcbiAgICAgICAgICAgICAgaWR4PScgK1xuICAgICAgICAgICAgYyArICcgZXJyQ250PScgKyBfdGhpcy5fRlAuZXJyb3JzLmNvdW50LCB7IGVycm9yczogZXJyb3JzLCByZXN1bHRzOiByZXN1bHRzLCBjdHg6IF90aGlzIH0pO1xuICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHNldFJlc3VsdChjKShlcnIpKS50aGVuKGZ1bmN0aW9uICgpIHtyZXR1cm4gcmVqZWN0SXQoZnBFcnIpO30pO1xuICAgICAgICAgIH0gZWxzZSB7Ly8gY29uc29sZS53YXJuKCdFcnJvciBPSzonLCBKU09OLnN0cmluZ2lmeSh0aGlzLl9GUC5lcnJvcnMpKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge3JldHVybiBzZXRSZXN1bHQoYykoZXJyKTt9KS50aGVuKGNoZWNrQW5kUnVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHRzW2NdO1xuICAgICAgfTtcblxuICAgICAgLy8gS2ljayBvZmYgeCBudW1iZXIgb2YgaW5pdGlhbCB0aHJlYWRzXG4gICAgICB3aGlsZSAoaW5pdGlhbFRocmVhZCA8IHRocmVhZExpbWl0ICYmIGluaXRpYWxUaHJlYWQgPCBhcmdzLmxlbmd0aCkge3J1bkl0ZW0oaW5pdGlhbFRocmVhZCsrKTt9XG4gICAgfSk7XG4gIH0pKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTloY25KaGVYTXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnhkV2x5WlNJc0ltbHpSVzUxYldWeVlXSnNaU0lzSWtaUVNXNXdkWFJGY25KdmNpSXNJa1oxYm1OMGFXOXVZV3hGY25KdmNpSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0p0WVhBaUxDSm1hVzVrSWl3aVptbHVaRWx1WkdWNElpd2labWxzZEdWeUlpd2ljbVZrZFdObElpd2lZMkZzYkdKaFkyc2lMQ0pmWm1sdVpDSXNJbU5oYkd3aUxDSjBhR1Z1SWl3aWFYUmxiU0lzSW1sdVpHVjRJaXdpYVhSbGNtRmliR1VpTENKR1VDSXNJbk4wWlhCeklpd2lZV1JrVTNSbGNDSXNJbUZ5WjNWdFpXNTBjeUlzSWw5R1VDSXNJbkJ5YjIxcGMyVWlMQ0p5WlhOdmJIWmxJaXdpY21WemRXeDBjeUlzSW5WdVpHVm1hVzVsWkNJc0ltbHVaR1Y0VDJZaUxDSmhZMk1pTENKUWNtOXRhWE5sSWl3aWVDSXNJbU52Ym1OaGRDSXNJbkpsWkhWalpYSWlMQ0pwYm1sMFZtRnNJaXdpY21WcVpXTjBJaXdpYVhSbGNtRjBiM0lpTENKVGVXMWliMndpTENKcElpd2libVY0ZENJc0ltTjFjbkpsYm5RaUxDSmtiMjVsSWl3aWRHOTBZV3dpTENKaGJHd2lMQ0oyWVd4MVpTSXNJbU5oZEdOb0lpd2lZWEpuY3lJc0ltWnVJaXdpYjNCMGFXOXVjeUlzSW14bGJtZDBhQ0lzSW5KbGMyOXNkbVZrVDNKU1pXcGxZM1JsWkNJc0luUm9jbVZoWkV4cGJXbDBJaXdpVFdGMGFDSXNJbTFoZUNJc0ltMXBiaUlzSW1OdmJtTjFjbkpsYm1ONVRHbHRhWFFpTENKcGJtNWxjbFpoYkhWbGN5SXNJbWx1YVhScFlXeFVhSEpsWVdRaUxDSmxjbkp2Y25NaUxDSmpiM1Z1ZENJc0luUm9jbVZoWkZCdmIyd2lMQ0pUWlhRaUxDSjBhSEpsWVdSUWIyOXNSblZzYkNJc0luTnBlbVVpTENKcGMwUnZibVVpTENKc2FXMXBkQ0lzSW5ObGRGSmxjM1ZzZENJc0ltUmxiR1YwWlNJc0luSmxjMjlzZG1WSmRDSXNJbkpsYW1WamRFbDBJaXdpYVhSbGJYTWlMQ0pqYjIxd2JHVjBaU0lzSW1GamRHbHZiaUlzSW1Ob1pXTnJRVzVrVW5WdUlpd2ljblZ1U1hSbGJTSXNJblpoYkNJc0luTmxkRlJwYldWdmRYUWlMQ0pqSWl3aVlXUmtJaXdpY0hWemFDSXNJbVZ5Y2lJc0ltWndSWEp5SWl3aVkzUjRJbDBzSW0xaGNIQnBibWR6SWpvaWFUQkNRVUY1UWtFc1VVRkJVU3hwUWtGQlVpeERMRU5CUVdwQ1F5eFpMRmxCUVVGQkxGazdRVUZEYTBORUxGRkJRVkVzYTBKQlFWSXNReXhEUVVGc1EwVXNXU3hoUVVGQlFTeFpMRU5CUVdORExHVXNZVUZCUVVFc1pUczdRVUZGZEVKRExFOUJRVTlETEU5QlFWQXNSMEZCYVVJc1JVRkJSVU1zVVVGQlJpeEZRVUZQUXl4VlFVRlFMRVZCUVdGRExHOUNRVUZpTEVWQlFYZENReXhqUVVGNFFpeEZRVUZuUTBNc1kwRkJhRU1zUlVGQmFrSTdPMEZCUlVFc1UwRkJVMGdzU1VGQlZDeERRVUZqU1N4UlFVRmtMRVZCUVhkQ0xFTkJRVVVzVDBGQlQwTXNUVUZCVFVNc1NVRkJUaXhEUVVGWExFbEJRVmdzUlVGQmFVSkdMRkZCUVdwQ0xFVkJRVEpDUnl4SlFVRXpRaXhEUVVGblF5eHhRa0ZCUjBNc1NVRkJTQ3hSUVVGSFFTeEpRVUZJTEZGQlFXTkJMRWxCUVdRc1JVRkJhRU1zUTBGQlVDeERRVUUwUkR0QlFVTjBSaXhUUVVGVFVDeFRRVUZVTEVOQlFXMUNSeXhSUVVGdVFpeEZRVUUyUWl4RFFVRkZMRTlCUVU5RExFMUJRVTFETEVsQlFVNHNRMEZCVnl4SlFVRllMRVZCUVdsQ1JpeFJRVUZxUWl4RlFVRXlRa2NzU1VGQk0wSXNRMEZCWjBNc2MwSkJRVWRGTEV0QlFVZ3NVMEZCUjBFc1MwRkJTQ3hSUVVGbFFTeExRVUZtTEVWQlFXaERMRU5CUVZBc1EwRkJPRVE3TzBGQlJUZEdMRk5CUVZOS0xFdEJRVlFzUTBGQlpVc3NVVUZCWml4RlFVRjVRazRzVVVGQmVrSXNSVUZCYlVNN1FVRkRha01zVFVGQlRVOHNTMEZCUzJ4Q0xGRkJRVkVzVTBGQlVpeERRVUZZTzBGQlEwRXNUVUZCU1N4TFFVRkxiVUlzUzBGQlZDeEZRVUZuUWl4UFFVRlBMRXRCUVV0RExFOUJRVXdzUTBGQllTeFBRVUZpTEhWRFFVRXdRa01zVTBGQk1VSXNSMEZCVUR0QlFVTm9RaXhOUVVGSkxFOUJRVTlLTEZGQlFWQXNTMEZCYjBJc1ZVRkJlRUlzUlVGQmIwTTdRVUZEYkVOT0xHVkJRVmROTEZGQlFWZzdRVUZEUVVFc1pVRkJWeXhMUVVGTFN5eEhRVUZNTEVOQlFWTkRMRTlCUVhCQ08wRkJRMFE3TzBGQlJVUXNVMEZCVDB3c1IwRkJSMDBzVDBGQlNDeERRVUZYVUN4UlFVRllPMEZCUTBwU0xGRkJSRWtzUTBGRFIwVXNVVUZFU0R0QlFVVktSeXhOUVVaSkxFTkJSVU1zVlVGQlExY3NUMEZCUkN4VlFVRmhRU3hSUVVGUkxFTkJRVklzUzBGQlkwTXNVMEZCWkN4SFFVRXdRaXhGUVVGRldDeE5RVUZOVlN4UlFVRlJMRU5CUVZJc1EwRkJVaXhGUVVGdlFsUXNUMEZCVDFNc1VVRkJVVVVzVDBGQlVpeERRVUZuUWtZc1VVRkJVU3hEUVVGU0xFTkJRV2hDTEVOQlFUTkNMRVZCUVRGQ0xFZEJRWEZHTEVWQlFVVldMRTFCUVUxWExGTkJRVklzUlVGQmJVSldMRTlCUVU4c1EwRkJReXhEUVVFelFpeEZRVUZzUnl4RlFVWkVMRU5CUVZBN1FVRkhSRHM3UVVGRlJDeFRRVUZUVUN4TlFVRlVMRU5CUVdkQ1VTeFJRVUZvUWl4RlFVRXdRazRzVVVGQk1VSXNSVUZCYjBNN1FVRkRiRU1zVFVGQlNTeExRVUZMVVN4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwTXNUMEZCVEN4RFFVRmhMRkZCUVdJc2RVTkJRVEpDUXl4VFFVRXpRaXhIUVVGUU8wRkJRMmhDTEUxQlFVa3NUMEZCVDBvc1VVRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRenRCUVVOc1EwNHNaVUZCVjAwc1VVRkJXRHRCUVVOQlFTeGxRVUZYTEV0QlFVdExMRWRCUVV3c1EwRkJVME1zVDBGQmNFSTdRVUZEUkRzN1FVRkZSQ3hUUVVGUFlpeFBRVUZQVHl4UlFVRlFMRVZCUVdsQ0xGVkJRVU5YTEVkQlFVUXNSVUZCVFdJc1NVRkJUaXhWUVVGbFl5eFJRVUZSVEN4UFFVRlNMRU5CUVdkQ1lpeFRRVUZUU1N4SlFVRlVMRU5CUVdoQ0xFVkJRV2REUkN4SlFVRm9ReXhEUVVGeFF5eHhRa0ZCVFdkQ0xFbEJRVWxHTEVsQlFVbEhMRTFCUVVvc1EwRkJWeXhEUVVGRGFFSXNTVUZCUkN4RFFVRllMRU5CUVVvc1IwRkJlVUpoTEVkQlFTOUNMRVZCUVhKRExFTkJRV1lzUlVGQmFrSXNSVUZCTWtjc1JVRkJNMGNzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVZOc1FpeE5RVUZVTEVOQlFXZENUeXhSUVVGb1FpeEZRVUV3UW1Vc1QwRkJNVUlzUlVGQmJVTkRMRTlCUVc1RExFVkJRVFJETzBGQlF6RkRMRTFCUVUxbUxFdEJRVXRzUWl4UlFVRlJMRk5CUVZJc1EwRkJXRHRCUVVOQkxFMUJRVWtzUzBGQlMyMUNMRXRCUVZRc1JVRkJaMElzVDBGQlR5eExRVUZMUXl4UFFVRk1MRU5CUVdFc1VVRkJZaXgxUTBGQk1rSkRMRk5CUVROQ0xFZEJRVkE3UVVGRGFFSXNUVUZCU1N4UFFVRlBTaXhSUVVGUUxFdEJRVzlDTEZWQlFYaENMRVZCUVc5RE8wRkJRMnhEWjBJc1kwRkJWVVFzVDBGQlZqdEJRVU5CUVN4alFVRlZaaXhSUVVGV08wRkJRMEZCTEdWQlFWY3NTMEZCUzBzc1IwRkJUQ3hIUVVGWExFdEJRVXRCTEVkQlFVd3NRMEZCVTBNc1QwRkJjRUlzUjBGQk9FSXNTVUZCZWtNN1FVRkRSQ3hIUVVwRUxFMUJTVTlPTEZkQlFWZERMRWRCUVVkTkxFOUJRVWdzUTBGQlYxQXNVVUZCV0N4RlFVRnhRaXhKUVVGeVFpeERRVUZZT3p0QlFVVlFMRk5CUVU4c1NVRkJTVU1zUlVGQlNpeERRVUZQTEZWQlFVTk5MRTlCUVVRc1JVRkJWVlVzVFVGQlZpeEZRVUZ4UWp0QlFVTnFReXhYUVVGUGFrSXNVMEZCVTBnc1NVRkJWQ3hEUVVGakxHOUNRVUZaTzBGQlF5OUNMRlZCUVUxeFFpeFhRVUZYYkVJc1UwRkJVMjFDTEU5QlFVOUVMRkZCUVdoQ0xFZEJRV3BDTzBGQlEwRXNWVUZCU1VVc1NVRkJTU3hEUVVGU096dEJRVVZCTEZWQlFVMURMRTlCUVU4c1UwRkJVRUVzU1VGQlR5eFJRVUZUTzBGQlEzQkNMRmxCUVUxRExGVkJRVlZLTEZOQlFWTkhMRWxCUVZRc1JVRkJhRUk3UVVGRFFTeFpRVUZKUXl4UlFVRlJReXhKUVVGYUxFVkJRV3RDTEU5QlFVOW9RaXhSUVVGUmFVSXNTMEZCVWl4RFFVRlFPenRCUVVWc1Fsb3NaMEpCUVZGaExFZEJRVklzUTBGQldTeERRVUZEUkN4TFFVRkVMRVZCUVZGR0xGRkJRVkZKTEV0QlFXaENMRU5CUVZvN1FVRkRSemRDTEZsQlJFZ3NRMEZEVVN4MVJFRkJSVEpDTEV0QlFVWXNXVUZCVXpGQ0xFbEJRVlFzYlVKQlFXMUNkVUlzUzBGQlMwNHNVVUZCVVZNc1MwRkJVaXhGUVVGbE1VSXNTVUZCWml4RlFVRnhRbk5DTEVkQlFYSkNMRU5CUVV3c1EwRkJia0lzUlVGRVVpeEZRVU0wUkU4c1MwRkVOVVFzUTBGRGEwVldMRTFCUkd4Rk8wRkJSVVFzVDBGT1JEczdRVUZSUVVrc1YwRkJTMHdzVDBGQlREdEJRVU5FTEV0QllrMHNRMEZCVUR0QlFXTkVMRWRCWmswc1EwRkJVRHRCUVdkQ1JEczdRVUZGUkR0QlFVTkJMRk5CUVZNelFpeEhRVUZVTEVOQlFXRjFReXhKUVVGaUxFVkJRVzFDUXl4RlFVRnVRaXhGUVVGMVFrTXNUMEZCZGtJc1JVRkJaME03UVVGRE9VSXNUVUZCVFRkQ0xFdEJRVXRzUWl4UlFVRlJMRk5CUVZJc1EwRkJXRHRCUVVOQkxFMUJRVWtzUzBGQlMyMUNMRXRCUVZRc1JVRkJaMElzVDBGQlR5eExRVUZMUXl4UFFVRk1MRU5CUVdFc1MwRkJZaXgxUTBGQmQwSkRMRk5CUVhoQ0xFZEJRVkE3UVVGRGFFSXNUVUZCU1VFc1ZVRkJWVEpDTEUxQlFWWXNTMEZCY1VJc1EwRkJja0lzU1VGQk1FSXNTVUZCTVVJc1NVRkJhME1zUzBGQlN6RkNMRWRCUVRORExFVkJRV2RFTzBGQlF6bERkMElzVTBGQlMwUXNTVUZCVER0QlFVTkJRU3hYUVVGUExGRkJRVkVzUzBGQlMzWkNMRWRCUVdJc1NVRkJiMElzUzBGQlMwRXNSMEZCVEN4RFFVRlRReXhQUVVGd1F6dEJRVU5FTzBGQlEwUXNUVUZCU1RCQ0xIRkNRVUZ4UWl4TFFVRjZRanRCUVVOQkxFMUJRVTFETEdOQlFXTkRMRXRCUVV0RExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWbEVMRXRCUVV0RkxFZEJRVXdzUTBGQlZTeFJRVUZSTEV0QlFVc3ZRaXhIUVVGaUxFbEJRVzlDTEV0QlFVdEJMRWRCUVV3c1EwRkJVMmRETEdkQ1FVRTVRaXhKUVVGdFJDeERRVUUxUkN4RlFVRXJSQ3hEUVVFdlJDeERRVUZhTEVOQlFYQkNPMEZCUTBFc1RVRkJUVU1zWTBGQll5eFJRVUZSTEV0QlFVdHFReXhIUVVGaUxFbEJRVzlDTEV0QlFVdEJMRWRCUVV3c1EwRkJVME1zVDBGQk4wSXNSMEZCZFVNc1MwRkJTMFFzUjBGQlRDeERRVUZUUXl4UFFVRm9SQ3hIUVVFd1JFMHNVVUZCVVV3c1QwRkJVaXhEUVVGblFuRkNMRWxCUVdoQ0xFTkJRVGxGTzBGQlEwRXNUVUZCU1Zjc1owSkJRV2RDTEVOQlFYQkNPMEZCUTBFc1RVRkJTVU1zVTBGQlV5eEZRVUZpTzBGQlEwRXNUVUZCU1VNc1VVRkJVU3hEUVVGYU8wRkJRMEVzVFVGQlRXcERMRlZCUVZVc1JVRkJhRUk3UVVGRFFTeE5RVUZOYTBNc1lVRkJZU3hKUVVGSlF5eEhRVUZLTEVWQlFXNUNPMEZCUTBFc1RVRkJUVU1zYVVKQlFXbENMRk5CUVdwQ1FTeGpRVUZwUWl4WFFVRk5SaXhYUVVGWFJ5eEpRVUZZTEVsQlFXMUNXaXhYUVVGNlFpeEZRVUYyUWp0QlFVTkJMRTFCUVUxaExGTkJRVk1zVTBGQlZFRXNUVUZCVXl4WFFVRk5UaXhQUVVGUFZDeE5RVUZRTEVkQlFXZENMRTFCUVVzeFFpeEhRVUZNTEVOQlFWTnRReXhOUVVGVUxFTkJRV2RDVHl4TFFVRm9ReXhKUVVGNVEwNHNVMEZCVTJJc1MwRkJTMGNzVFVGQmRrUXNTVUZCYVVWRExHdENRVUYyUlN4RlFVRm1PMEZCUTBFc1RVRkJUV2RDTEZsQlFWa3NVMEZCV2tFc1UwRkJXU3huUWtGQlV5eHBRa0ZCVXp0QlFVTnNRMDRzYVVKQlFWZFBMRTFCUVZnc1EwRkJhMEpzUkN4TFFVRnNRanRCUVVOQlV5eGpRVUZSVkN4TFFVRlNMRWxCUVdsQ01rSXNTMEZCYWtJN1FVRkRRU3hoUVVGUFFTeExRVUZRTzBGQlEwUXNTMEZLYVVJc1JVRkJiRUk3UVVGTFFTeFRRVUZQZWtJc1IwRkJSMDBzVDBGQlNDeERRVUZYTEVsQlFVbExMRTlCUVVvc1EwRkJXU3hWUVVGRFRDeFBRVUZFTEVWQlFWVlZMRTFCUVZZc1JVRkJjVUk3UVVGRGFrUXNVVUZCVFdsRExGbEJRVmtzVTBGQldrRXNVMEZCV1N4SlFVRkxPMEZCUTNKQ08wRkJRMEVzVlVGQlNXeENMR3RDUVVGS0xFVkJRWGRDTEVOQlFVVXNUMEZCVHl4SlFVRlFMRU5CUVdFc1EwRkJka01zVFVGQk5rTXNRMEZCUlVFc2NVSkJRWEZDTEVsQlFYSkNMRU5CUVRKQ08wRkJRekZGZWtJc1kwRkJVVTBzUTBGQlVqdEJRVU5FTEV0QlNrUTdRVUZMUVN4UlFVRk5jME1zVjBGQlZ5eFRRVUZZUVN4UlFVRlhMRWxCUVVzN1FVRkRjRUlzVlVGQlNXNUNMR3RDUVVGS0xFVkJRWGRDTEVOQlFVVXNUMEZCVHl4SlFVRlFMRU5CUVdFc1EwRkJka01zVFVGQk5rTXNRMEZCUlVFc2NVSkJRWEZDTEVsQlFYSkNMRU5CUVRKQ08wRkJRekZGTzBGQlEwRm1MR0ZCUVU5S0xFTkJRVkE3UVVGRFJDeExRVXBFTzBGQlMwRjVRaXhuUWtGQldYcERMRWxCUVZvc1EwRkJhVUlzYVVKQlFWTTdRVUZEZUVJclFpd3dRMEZCVjNkQ0xFdEJRVmc3UVVGRFFTeFZRVUZKTEVOQlFVTndSU3hoUVVGaGIwVXNTMEZCWWl4RFFVRk1MRVZCUVRCQ0xFOUJRVTl1UXl4UFFVRlBMRWxCUVVsb1F5eFpRVUZLTEVOQlFXbENMSGxEUVVGcVFpeERRVUZRTEVOQlFWQTdRVUZETVVJc1ZVRkJUVzlGTEZkQlFWY3NVMEZCV0VFc1VVRkJWeXhIUVVGTk8wRkJRM0pDTEZsQlFVbERMRk5CUVZNc1NVRkJZanRCUVVOQkxGbEJRVWxrTEU5QlFVOVVMRTFCUVZBc1IwRkJaMElzVFVGQlN6RkNMRWRCUVV3c1EwRkJVMjFETEUxQlFWUXNRMEZCWjBKUExFdEJRWEJETEVWQlFUSkRUeXhUUVVGVFNDeFJRVUZVTzBGQlF6TkRMRmxCUVVsTUxGRkJRVW9zUlVGQlkxRXNVMEZCVTBvc1UwRkJWRHRCUVVOa0xGbEJRVWxKTEUxQlFVb3NSVUZCV1N4UFFVRlBNVU1zVVVGQlVXRXNSMEZCVWl4RFFVRlpha0lzVDBGQldpeEZRVUZ4UWxnc1NVRkJja0lzUTBGQk1FSXNkMEpCUVZGNVJDeFBRVUZQT1VNc1QwRkJVQ3hEUVVGU0xFVkJRVEZDTEVsQlFYRkVMRWxCUVhKRUxFZEJRVFJFTEVsQlFXNUZPMEZCUTFvc1pVRkJUeXhMUVVGUU8wRkJRMFFzVDBGT1JEdEJRVTlCTEZWQlFVMHJReXhqUVVGakxGTkJRV1JCTEZkQlFXTXNUVUZCVHp0QlFVTjZRanRCUVVOQkxGbEJRVWwyUWl4clFrRkJTaXhGUVVGM1FqdEJRVU40UWl4WlFVRkpMRU5CUVVOeFFpeFZRVUZFTEVsQlFXVXNRMEZCUXpkRExGRkJRVkZwUXl4TFFVRlNMRU5CUVhCQ0xFVkJRVzlEWlN4UlFVRlJaaXhMUVVGU08wRkJRM0JETEdWQlFVOW5RaXhIUVVGUU8wRkJRMFFzVDBGTVJEczdRVUZQUVN4VlFVRk5SQ3hWUVVGVkxGTkJRVlpCTEU5QlFWVXNTVUZCU3p0QlFVTnVRaXhaUVVGSmVFSXNhMEpCUVVvc1JVRkJkMElzUTBGQlF5eFBRVUZQTEVsQlFWQXNRMEZCV1N4RFFVRnlReXhOUVVFeVF5eERRVUZEVXl4UlFVRlJPMEZCUTNCRUxGbEJRVWxITEdkQ1FVRktMRVZCUVhOQ0xFOUJRVTlqTEZkQlFWY3NiMEpCUVUxR0xGRkJRVkZITEVOQlFWSXNRMEZCVGl4RlFVRllMRVZCUVRaQ0xFTkJRVGRDTEVOQlFWQTdRVUZEZEVJc1dVRkJTVzVFTEZGQlFWRnRSQ3hEUVVGU0xFTkJRVW9zUlVGQlowSXNUMEZCVDI1RUxGRkJRVkZ0UkN4RFFVRlNMRU5CUVZBN1FVRkRhRUpxUWl4dFFrRkJWMnRDTEVkQlFWZ3NRMEZCWlVRc1EwRkJaanRCUVVOQk8wRkJRMEZ1UkN4blFrRkJVVzFFTEVOQlFWSXNTVUZCWVM5RExGRkJRVkZNTEU5QlFWSXNRMEZCWjBKeFFpeExRVUZMSzBJc1EwRkJUQ3hEUVVGb1FqdEJRVU5XT1VRc1dVRkVWU3hEUVVOTUxIVkNRVUZQWjBNc1IwRkJSelJDTEVkQlFVZ3NSVUZCVVVVc1EwRkJVaXhGUVVGWEwwSXNTVUZCV0N4RFFVRlFMRVZCUkVzN1FVRkZWaTlDTEZsQlJsVXNRMEZGVEN4MVFrRkJUMjFFTEZWQlFWVlhMRU5CUVZZc1JVRkJZVVlzUjBGQllpeERRVUZRTEVWQlJrczdRVUZIVmpWRUxGbEJTRlVzUTBGSFREQkVMRmRCU0VzN1FVRkpWalZDTEdGQlNsVXNRMEZKU2l4bFFVRlBPMEZCUTFvc1owSkJRVXQwUWl4SFFVRk1MRU5CUVZOdFF5eE5RVUZVTEVOQlFXZENReXhMUVVGb1FqdEJRVU5CUkN4cFFrRkJUM0ZDTEVsQlFWQXNRMEZCV1VNc1IwRkJXanRCUVVOQk8wRkJRMEVzWTBGQlNYUkNMRTlCUVU5VUxFMUJRVkFzUjBGQlowSXNUVUZCU3pGQ0xFZEJRVXdzUTBGQlUyMURMRTFCUVZRc1EwRkJaMEpQTEV0QlFYQkRMRVZCUVRKRE8wRkJRM3BETEdkQ1FVRk5aMElzVVVGQlVYWkNMRTlCUVU5VUxFMUJRVkFzUzBGQmEwSXNRMEZCYkVJc1IwRkJjMElyUWl4SFFVRjBRaXhIUVVFMFFpeEpRVUZKTlVVc1pVRkJTaXhyUWtGQmJVTXNUVUZCUzIxQ0xFZEJRVXdzUTBGQlUyMURMRTFCUVZRc1EwRkJaMEpQTEV0QlFXNUVPMEZCUTNCRFdTeGhRVVJ2UXl4blFrRkRlRUlzVFVGQlMzUkVMRWRCUVV3c1EwRkJVMjFETEUxQlFWUXNRMEZCWjBKRExFdEJSRkVzUlVGRFF5eEZRVUZGUkN4alFVRkdMRVZCUVZWb1F5eG5Ra0ZCVml4RlFVRnRRbmRFTEV0QlFVc3NTMEZCZUVJc1JVRkVSQ3hEUVVFeFF6dEJRVVZCY0VRc2IwSkJRVkZNTEU5QlFWSXNRMEZCWjBKNVF5eFZRVUZWVnl4RFFVRldMRVZCUVdGSExFZEJRV0lzUTBGQmFFSXNSVUZCYlVOcVJTeEpRVUZ1UXl4RFFVRjNReXh2UWtGQlRYTkVMRk5CUVZOWkxFdEJRVlFzUTBGQlRpeEZRVUY0UXp0QlFVTkVMRmRCU2tRc1RVRkpUeXhEUVVGRk8wRkJRMUFzYlVKQlFVOXVSQ3hSUVVGUlRDeFBRVUZTTEVkQlFXdENWaXhKUVVGc1FpeERRVUYxUWl4dlFrRkJUVzFFTEZWQlFWVlhMRU5CUVZZc1JVRkJZVWNzUjBGQllpeERRVUZPTEVWQlFYWkNMRVZCUVdkRWFrVXNTVUZCYUVRc1EwRkJjVVF3UkN4WFFVRnlSQ3hEUVVGUU8wRkJRMFE3UVVGRFJpeFRRV1pWTEVOQlFXSTdPMEZCYVVKQkxHVkJRVTh2UXl4UlFVRlJiVVFzUTBGQlVpeERRVUZRTzBGQlEwUXNUMEY0UWtRN08wRkJNRUpCTzBGQlEwRXNZVUZCVDNCQ0xHZENRVUZuUWs0c1YwRkJhRUlzU1VGQkswSk5MR2RDUVVGblFsZ3NTMEZCUzBjc1RVRkJNMFFzUjBGQmJVVjVRaXhSUVVGUmFrSXNaVUZCVWl4RlFVRnVSVHRCUVVORUxFdEJOME5FTzBGQk9FTkVMRWRCZWtScFFpeERRVUZZTEVOQlFWQTdRVUV3UkVRaUxDSm1hV3hsSWpvaVlYSnlZWGx6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTlrYkdWMmVTOWpiMlJsTDI5emN5OW1kVzVqZEdsdmJtRnNMWEpwZG1WeUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMjl1YzNRZ2V5QnBjMFZ1ZFcxbGNtRmliR1VnZlNBOUlISmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OTFkR2xzY3ljcFhHNWpiMjV6ZENCN0lFWlFTVzV3ZFhSRmNuSnZjaXdnUm5WdVkzUnBiMjVoYkVWeWNtOXlJSDBnUFNCeVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYSnliM0p6SnlsY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRzFoY0N3Z1ptbHVaQ3dnWm1sdVpFbHVaR1Y0TENCbWFXeDBaWElzSUhKbFpIVmpaU0I5WEc1Y2JtWjFibU4wYVc5dUlHWnBibVFvWTJGc2JHSmhZMnNwSUhzZ2NtVjBkWEp1SUY5bWFXNWtMbU5oYkd3b2RHaHBjeXdnWTJGc2JHSmhZMnNwTG5Sb1pXNG9LSHNnYVhSbGJTQjlLU0E5UGlCcGRHVnRLU0I5WEc1bWRXNWpkR2x2YmlCbWFXNWtTVzVrWlhnb1kyRnNiR0poWTJzcElIc2djbVYwZFhKdUlGOW1hVzVrTG1OaGJHd29kR2hwY3l3Z1kyRnNiR0poWTJzcExuUm9aVzRvS0hzZ2FXNWtaWGdnZlNrZ1BUNGdhVzVrWlhncElIMWNibHh1Wm5WdVkzUnBiMjRnWDJacGJtUW9hWFJsY21GaWJHVXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lHTnZibk4wSUVaUUlEMGdjbVZ4ZFdseVpTZ25MaTlwYm1SbGVDY3BYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkZlptbHVaQ2NzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9kSGx3Wlc5bUlHbDBaWEpoWW14bElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnWTJGc2JHSmhZMnNnUFNCcGRHVnlZV0pzWlZ4dUlDQWdJR2wwWlhKaFlteGxJRDBnZEdocGN5NWZSbEF1Y0hKdmJXbHpaVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJRVpRTG5KbGMyOXNkbVVvYVhSbGNtRmliR1VwWEc0Z0lDQWdMbVpwYkhSbGNpaGpZV3hzWW1GamF5bGNiaUFnSUNBdWRHaGxiaWdvY21WemRXeDBjeWtnUFQ0Z2NtVnpkV3gwYzFzd1hTQWhQU0IxYm1SbFptbHVaV1FnUHlCN0lHbDBaVzA2SUhKbGMzVnNkSE5iTUYwc0lHbHVaR1Y0T2lCeVpYTjFiSFJ6TG1sdVpHVjRUMllvY21WemRXeDBjMXN3WFNrZ2ZTQTZJSHNnYVhSbGJUb2dkVzVrWldacGJtVmtMQ0JwYm1SbGVEb2dMVEVnZlNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWm1sc2RHVnlLR2wwWlhKaFlteGxMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25abWxzZEdWeUp5d2dXeTR1TG1GeVozVnRaVzUwYzEwcFhHNGdJR2xtSUNoMGVYQmxiMllnYVhSbGNtRmliR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQmpZV3hzWW1GamF5QTlJR2wwWlhKaFlteGxYRzRnSUNBZ2FYUmxjbUZpYkdVZ1BTQjBhR2x6TGw5R1VDNXdjbTl0YVhObFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVmtkV05sS0dsMFpYSmhZbXhsTENBb1lXTmpMQ0JwZEdWdEtTQTlQaUJRY205dGFYTmxMbkpsYzI5c2RtVW9ZMkZzYkdKaFkyc29hWFJsYlNrcExuUm9aVzRvZUNBOVBpQW9lQ0EvSUdGall5NWpiMjVqWVhRb1cybDBaVzFkS1NBNklHRmpZeWtwTENCYlhTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVmtkV05sS0dsMFpYSmhZbXhsTENCeVpXUjFZMlZ5TENCcGJtbDBWbUZzS1NCN1hHNGdJR052Ym5OMElFWlFJRDBnY21WeGRXbHlaU2duTGk5cGJtUmxlQ2NwWEc0Z0lHbG1JQ2gwYUdsekxuTjBaWEJ6S1NCeVpYUjFjbTRnZEdocGN5NWhaR1JUZEdWd0tDZHlaV1IxWTJVbkxDQmJMaTR1WVhKbmRXMWxiblJ6WFNsY2JpQWdhV1lnS0hSNWNHVnZaaUJwZEdWeVlXSnNaU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lHbHVhWFJXWVd3Z1BTQnlaV1IxWTJWeVhHNGdJQ0FnY21Wa2RXTmxjaUE5SUdsMFpYSmhZbXhsWEc0Z0lDQWdhWFJsY21GaWJHVWdQU0IwYUdsekxsOUdVQ0EvSUhSb2FYTXVYMFpRTG5CeWIyMXBjMlVnT2lCMGFHbHpYRzRnSUgwZ1pXeHpaU0JwZEdWeVlXSnNaU0E5SUVaUUxuSmxjMjlzZG1Vb2FYUmxjbUZpYkdVc0lIUm9hWE1wWEc1Y2JpQWdjbVYwZFhKdUlHNWxkeUJHVUNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzRnSUNBZ2NtVjBkWEp1SUdsMFpYSmhZbXhsTG5Sb1pXNG9hWFJsY21GaWJHVWdQVDRnZTF4dUlDQWdJQ0FnWTI5dWMzUWdhWFJsY21GMGIzSWdQU0JwZEdWeVlXSnNaVnRUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2xjYmlBZ0lDQWdJR3hsZENCcElEMGdNRnh1WEc0Z0lDQWdJQ0JqYjI1emRDQnVaWGgwSUQwZ2RHOTBZV3dnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamRYSnlaVzUwSUQwZ2FYUmxjbUYwYjNJdWJtVjRkQ2dwWEc0Z0lDQWdJQ0FnSUdsbUlDaGpkWEp5Wlc1MExtUnZibVVwSUhKbGRIVnliaUJ5WlhOdmJIWmxLSFJ2ZEdGc0tWeHVYRzRnSUNBZ0lDQWdJRkJ5YjIxcGMyVXVZV3hzS0Z0MGIzUmhiQ3dnWTNWeWNtVnVkQzUyWVd4MVpWMHBYRzRnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LRnQwYjNSaGJDd2dhWFJsYlYwcElEMCtJRzVsZUhRb2NtVmtkV05sY2loMGIzUmhiQ3dnYVhSbGJTd2dhU3NyS1NrcExtTmhkR05vS0hKbGFtVmpkQ2xjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYm1WNGRDaHBibWwwVm1Gc0tWeHVJQ0FnSUgwcFhHNGdJSDBwWEc1OVhHNWNiaThxWlhOc2FXNTBJRzFoZUMxemRHRjBaVzFsYm5Sek9pQmJYQ0psY25KdmNsd2lMQ0EyTUYwcUwxeHVablZ1WTNScGIyNGdiV0Z3S0dGeVozTXNJR1p1TENCdmNIUnBiMjV6S1NCN1hHNGdJR052Ym5OMElFWlFJRDBnY21WeGRXbHlaU2duTGk5cGJtUmxlQ2NwWEc0Z0lHbG1JQ2gwYUdsekxuTjBaWEJ6S1NCeVpYUjFjbTRnZEdocGN5NWhaR1JUZEdWd0tDZHRZWEFuTENCYkxpNHVZWEpuZFcxbGJuUnpYU2xjYmlBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQVDA5SURFZ0ppWWdkR2hwY3lBbUppQjBhR2x6TGw5R1VDa2dlMXh1SUNBZ0lHWnVJRDBnWVhKbmMxeHVJQ0FnSUdGeVozTWdQU0IwYUdseklDWW1JSFJvYVhNdVgwWlFJQ1ltSUhSb2FYTXVYMFpRTG5CeWIyMXBjMlZjYmlBZ2ZWeHVJQ0JzWlhRZ2NtVnpiMngyWldSUGNsSmxhbVZqZEdWa0lEMGdabUZzYzJWY2JpQWdZMjl1YzNRZ2RHaHlaV0ZrVEdsdGFYUWdQU0JOWVhSb0xtMWhlQ2d4TENCTllYUm9MbTFwYmlnb2RHaHBjeUFtSmlCMGFHbHpMbDlHVUNBbUppQjBhR2x6TGw5R1VDNWpiMjVqZFhKeVpXNWplVXhwYldsMEtTQjhmQ0F4TENBMEtTbGNiaUFnWTI5dWMzUWdhVzV1WlhKV1lXeDFaWE1nUFNCMGFHbHpJQ1ltSUhSb2FYTXVYMFpRSUNZbUlIUm9hWE11WDBaUUxuQnliMjFwYzJVZ1B5QjBhR2x6TGw5R1VDNXdjbTl0YVhObElEb2dVSEp2YldselpTNXlaWE52YkhabEtHRnlaM01wWEc0Z0lHeGxkQ0JwYm1sMGFXRnNWR2h5WldGa0lEMGdNRnh1SUNCc1pYUWdaWEp5YjNKeklEMGdXMTFjYmlBZ2JHVjBJR052ZFc1MElEMGdNRnh1SUNCamIyNXpkQ0J5WlhOMWJIUnpJRDBnVzExY2JpQWdZMjl1YzNRZ2RHaHlaV0ZrVUc5dmJDQTlJRzVsZHlCVFpYUW9LVnh1SUNCamIyNXpkQ0IwYUhKbFlXUlFiMjlzUm5Wc2JDQTlJQ2dwSUQwK0lIUm9jbVZoWkZCdmIyd3VjMmw2WlNBK1BTQjBhSEpsWVdSTWFXMXBkRnh1SUNCamIyNXpkQ0JwYzBSdmJtVWdQU0FvS1NBOVBpQmxjbkp2Y25NdWJHVnVaM1JvSUQ0Z2RHaHBjeTVmUmxBdVpYSnliM0p6TG14cGJXbDBJSHg4SUdOdmRXNTBJRDQ5SUdGeVozTXViR1Z1WjNSb0lIeDhJSEpsYzI5c2RtVmtUM0pTWldwbFkzUmxaRnh1SUNCamIyNXpkQ0J6WlhSU1pYTjFiSFFnUFNCcGJtUmxlQ0E5UGlCMllXeDFaU0E5UGlCN1hHNGdJQ0FnZEdoeVpXRmtVRzl2YkM1a1pXeGxkR1VvYVc1a1pYZ3BYRzRnSUNBZ2NtVnpkV3gwYzF0cGJtUmxlRjBnUFNCMllXeDFaVnh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaVnh1SUNCOVhHNGdJSEpsZEhWeWJpQkdVQzV5WlhOdmJIWmxLRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0J5WlhOdmJIWmxTWFFnUFNCNElEMCtJSHRjYmlBZ0lDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktDZEJZM1JwYjI0dWNtVnpiMngyWlRvbkxDQnlaWE52YkhabFpFOXlVbVZxWldOMFpXUXNJSGdwWEc0Z0lDQWdJQ0JwWmlBb2NtVnpiMngyWldSUGNsSmxhbVZqZEdWa0tTQjdJSEpsZEhWeWJpQnVkV3hzSUgwZ1pXeHpaU0I3SUhKbGMyOXNkbVZrVDNKU1pXcGxZM1JsWkNBOUlIUnlkV1VnZlZ4dUlDQWdJQ0FnY21WemIyeDJaU2g0S1Z4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCeVpXcGxZM1JKZENBOUlIZ2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tISmxjMjlzZG1Wa1QzSlNaV3BsWTNSbFpDa2dleUJ5WlhSMWNtNGdiblZzYkNCOUlHVnNjMlVnZXlCeVpYTnZiSFpsWkU5eVVtVnFaV04wWldRZ1BTQjBjblZsSUgxY2JpQWdJQ0FnSUM4dklHTnZibk52YkdVdWJHOW5LQ2RCWTNScGIyNHVjbVZxWldOME9pY3NJSEpsYzI5c2RtVmtUM0pTWldwbFkzUmxaQ3dnZUNsY2JpQWdJQ0FnSUhKbGFtVmpkQ2g0S1Z4dUlDQWdJSDFjYmlBZ0lDQnBibTVsY2xaaGJIVmxjeTUwYUdWdUtHbDBaVzF6SUQwK0lIdGNiaUFnSUNBZ0lHRnlaM01nUFNCYkxpNHVhWFJsYlhOZFhHNGdJQ0FnSUNCcFppQW9JV2x6Ulc1MWJXVnlZV0pzWlNocGRHVnRjeWtwSUhKbGRIVnliaUJ5WldwbFkzUW9ibVYzSUVaUVNXNXdkWFJGY25KdmNpZ25TVzUyWVd4cFpDQnBibkIxZENCa1lYUmhJSEJoYzNObFpDQnBiblJ2SUVaUUxtMWhjQ2dwSnlrcFhHNGdJQ0FnSUNCamIyNXpkQ0JqYjIxd2JHVjBaU0E5SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHRmpkR2x2YmlBOUlHNTFiR3hjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5Y3k1c1pXNW5kR2dnUGlCMGFHbHpMbDlHVUM1bGNuSnZjbk11YkdsdGFYUXBJR0ZqZEdsdmJpQTlJSEpsYW1WamRFbDBYRzRnSUNBZ0lDQWdJR2xtSUNocGMwUnZibVVvS1NrZ1lXTjBhVzl1SUQwZ2NtVnpiMngyWlVsMFhHNGdJQ0FnSUNBZ0lHbG1JQ2hoWTNScGIyNHBJSEpsZEhWeWJpQlFjbTl0YVhObExtRnNiQ2h5WlhOMWJIUnpLUzUwYUdWdUtHUmhkR0VnUFQ0Z1lXTjBhVzl1S0hKbGMzVnNkSE1wS1NBL0lIUnlkV1VnT2lCMGNuVmxYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdZMmhsWTJ0QmJtUlNkVzRnUFNCMllXd2dQVDRnZTF4dUlDQWdJQ0FnSUNBdkx5QmpiMjV6YjJ4bExteHZaeWduWTJobFkydEJibVJTZFc0bkxDQmpiM1Z1ZEN3Z2NtVnpiMngyWldSUGNsSmxhbVZqZEdWa0xDQjJZV3dwWEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE52YkhabFpFOXlVbVZxWldOMFpXUXBJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQnBaaUFvSVdOdmJYQnNaWFJsS0NrZ0ppWWdJWEpsYzNWc2RITmJZMjkxYm5SZEtTQnlkVzVKZEdWdEtHTnZkVzUwS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk4wSUhKMWJrbDBaVzBnUFNCaklEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjMjlzZG1Wa1QzSlNaV3BsWTNSbFpDa2dlM0psZEhWeWJpQnVkV3hzZlNCbGJITmxJSHRqYjNWdWRDc3JmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHlaV0ZrVUc5dmJFWjFiR3dvS1NrZ2NtVjBkWEp1SUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnY25WdVNYUmxiU2hqS1N3Z01DbGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkSE5iWTEwcElISmxkSFZ5YmlCeVpYTjFiSFJ6VzJOZFhHNGdJQ0FnSUNBZ0lIUm9jbVZoWkZCdmIyd3VZV1JrS0dNcFhHNGdJQ0FnSUNBZ0lDOHZJR1ZwZEdobGNpQm5aWFFnZG1Gc2RXVWdkMmwwYUNCZ1ptNG9hWFJsYlNsZ0lHOXlJR0JwZEdWdExuUm9aVzRvWm00cFlGeHVJQ0FnSUNBZ0lDQnlaWE4xYkhSelcyTmRJRDBnVUhKdmJXbHpaUzV5WlhOdmJIWmxLR0Z5WjNOYlkxMHBYRzRnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9kbUZzSUQwK0lHWnVLSFpoYkN3Z1l5d2dZWEpuY3lrcFhHNGdJQ0FnSUNBZ0lDQWdMblJvWlc0b2RtRnNJRDArSUhObGRGSmxjM1ZzZENoaktTaDJZV3dwS1Z4dUlDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0dOb1pXTnJRVzVrVW5WdUtWeHVJQ0FnSUNBZ0lDQWdJQzVqWVhSamFDaGxjbklnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZSbEF1WlhKeWIzSnpMbU52ZFc1MEt5dGNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXljeTV3ZFhOb0tHVnljaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXViRzluS0NkRlVsSWdTRUZPUkV4RlVpRW5MQ0JsY25KdmNuTXViR1Z1WjNSb0xDQjBhR2x6TGw5R1VDNWxjbkp2Y25NdWJHbHRhWFFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSnpMbXhsYm1kMGFDQStJSFJvYVhNdVgwWlFMbVZ5Y205eWN5NXNhVzFwZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JtY0VWeWNpQTlJR1Z5Y205eWN5NXNaVzVuZEdnZ1BUMDlJREVnUHlCbGNuSWdPaUJ1WlhjZ1JuVnVZM1JwYjI1aGJFVnljbTl5S0dCRmNuSnZjaUJNYVcxcGRDQWtlM1JvYVhNdVgwWlFMbVZ5Y205eWN5NXNhVzFwZEgwZ1JYaGpaV1ZrWldRdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa2VEMGtlMk45SUdWeWNrTnVkRDBrZTNSb2FYTXVYMFpRTG1WeWNtOXljeTVqYjNWdWRIMWdMQ0I3SUdWeWNtOXljeXdnY21WemRXeDBjeXdnWTNSNE9pQjBhR2x6SUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlV1Y21WemIyeDJaU2h6WlhSU1pYTjFiSFFvWXlrb1pYSnlLU2t1ZEdobGJpZ29LU0E5UGlCeVpXcGxZM1JKZENobWNFVnljaWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2V5QXZMeUJqYjI1emIyeGxMbmRoY200b0owVnljbTl5SUU5TE9pY3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtIUm9hWE11WDBaUUxtVnljbTl5Y3lrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LUzUwYUdWdUtDZ3BJRDArSUhObGRGSmxjM1ZzZENoaktTaGxjbklwS1M1MGFHVnVLR05vWldOclFXNWtVblZ1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgwcFhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEhOYlkxMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnUzJsamF5QnZabVlnZUNCdWRXMWlaWElnYjJZZ2FXNXBkR2xoYkNCMGFISmxZV1J6WEc0Z0lDQWdJQ0IzYUdsc1pTQW9hVzVwZEdsaGJGUm9jbVZoWkNBOElIUm9jbVZoWkV4cGJXbDBJQ1ltSUdsdWFYUnBZV3hVYUhKbFlXUWdQQ0JoY21kekxteGxibWQwYUNrZ2NuVnVTWFJsYlNocGJtbDBhV0ZzVkdoeVpXRmtLeXNwWEc0Z0lDQWdmU2xjYmlBZ2ZTa3BYRzU5WEc0aVhYMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hcnJheXMuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpLEZQSW5wdXRFcnJvciA9IF9yZXF1aXJlLkZQSW5wdXRFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKG9iaikge3ZhciBfdGhpcyA9IHRoaXM7Zm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGV2ZW50TmFtZXMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7ZXZlbnROYW1lc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07fVxuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lcyA9PT0gJ3N0cmluZycpIGV2ZW50TmFtZXMgPSBbZXZlbnROYW1lc107XG4gICAgaWYgKCFvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignVmFsaWQgRXZlbnRFbWl0dGVyIHJlcXVpcmVkLicpO1xuICAgIC8vIEdldHMgY2FsbGJhY2sgdG8gYXR0YWNoIHRvIHRoZSBldmVudCBoYW5kbGVyc1xuICAgIHZhciBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpO1xuICAgIHRoaXMuX0ZQLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7cmV0dXJuIF90aGlzLl9GUC5kZXN0cm95SGFuZGxlcy5tYXAoZnVuY3Rpb24gKGZuKSB7cmV0dXJuIGZuKCkgfHwgdHJ1ZTt9KS5maWx0ZXIoZnVuY3Rpb24gKHYpIHtyZXR1cm4gdjt9KS5sZW5ndGg7fTtcbiAgICB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcyA9IGV2ZW50TmFtZXMubWFwKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIG9ialtvYmouYWRkRXZlbnRMaXN0ZW5lciA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdvbiddKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge3JldHVybiBvYmpbb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyAncmVtb3ZlRXZlbnRMaXN0ZW5lcicgOiAnb2ZmJ10oZXZlbnROYW1lLCBoYW5kbGVyKTt9O1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5bGRtVnVkSE11YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJa1pRU1c1d2RYUkZjbkp2Y2lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnNhWE4wWlc0aUxDSnZZbW9pTENKbGRtVnVkRTVoYldWeklpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbWhoYm1Sc1pYSWlMQ0pqYUdGcGJrVnVaQ0lzSWw5R1VDSXNJbVJsYzNSeWIza2lMQ0prWlhOMGNtOTVTR0Z1Wkd4bGN5SXNJbTFoY0NJc0ltWnVJaXdpWm1sc2RHVnlJaXdpZGlJc0lteGxibWQwYUNJc0ltVjJaVzUwVG1GdFpTSXNJbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElpWFN3aWJXRndjR2x1WjNNaU9pSmxRVUYxUWtFc1VVRkJVU3hyUWtGQlVpeERMRU5CUVdoQ1F5eFpMRmxCUVVGQkxGazdPMEZCUlZCRExFOUJRVTlETEU5QlFWQXNSMEZCYVVJN1FVRkRaa01zVVVGRVpTeHJRa0ZEVWtNc1IwRkVVU3hGUVVOWkxHOUVRVUZhUXl4VlFVRlpMRzFGUVVGYVFTeFZRVUZaTzBGQlEzcENMRkZCUVVrc1QwRkJUMEVzVlVGQlVDeExRVUZ6UWl4UlFVRXhRaXhGUVVGdlEwRXNZVUZCWVN4RFFVRkRRU3hWUVVGRUxFTkJRV0k3UVVGRGNFTXNVVUZCU1N4RFFVRkRSQ3hKUVVGSlFTeEpRVUZKUlN4blFrRkJTaXhIUVVGMVFpeHJRa0ZCZGtJc1IwRkJORU1zU1VGQmFFUXNRMEZCVEN4RlFVRTBSQ3hOUVVGTkxFbEJRVWxPTEZsQlFVb3NRMEZCYVVJc09FSkJRV3BDTEVOQlFVNDdRVUZETlVRN1FVRkRRU3hSUVVGTlR5eFZRVUZWTEV0QlFVdERMRkZCUVV3c1JVRkJhRUk3UVVGRFFTeFRRVUZMUXl4SFFVRk1MRU5CUVZORExFOUJRVlFzUjBGQmJVSXNiMEpCUVUwc1RVRkJTMFFzUjBGQlRDeERRVUZUUlN4alFVRlVMRU5CUVhkQ1F5eEhRVUY0UWl4RFFVRTBRaXh6UWtGQlRVTXNVVUZCVVN4SlFVRmtMRVZCUVRWQ0xFVkJRV2RFUXl4TlFVRm9SQ3hEUVVGMVJDeHhRa0ZCUzBNc1EwRkJUQ3hGUVVGMlJDeEZRVUVyUkVNc1RVRkJja1VzUlVGQmJrSTdRVUZEUVN4VFFVRkxVQ3hIUVVGTUxFTkJRVk5GTEdOQlFWUXNSMEZCTUVKT0xGZEJRVmRQTEVkQlFWZ3NRMEZCWlN4eFFrRkJZVHRCUVVOd1JGSXNWVUZCU1VFc1NVRkJTVVVzWjBKQlFVb3NSMEZCZFVJc2EwSkJRWFpDTEVkQlFUUkRMRWxCUVdoRUxFVkJRWE5FVnl4VFFVRjBSQ3hGUVVGcFJWWXNUMEZCYWtVN1FVRkRRU3hoUVVGUExHOUNRVUZOU0N4SlFVRkpRU3hKUVVGSll5eHRRa0ZCU2l4SFFVRXdRaXh4UWtGQk1VSXNSMEZCYTBRc1MwRkJkRVFzUlVGQk5rUkVMRk5CUVRkRUxFVkJRWGRGVml4UFFVRjRSU3hEUVVGT0xFVkJRVkE3UVVGRFJDeExRVWg1UWl4RFFVRXhRanRCUVVsQkxGZEJRVThzU1VGQlVEdEJRVU5FTEVkQldtTXNSVUZCYWtJaUxDSm1hV3hsSWpvaVpYWmxiblJ6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWk5VmMyVnljeTlrYkdWMmVTOWpiMlJsTDI5emN5OW1kVzVqZEdsdmJtRnNMWEpwZG1WeUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMjl1YzNRZ2UwWlFTVzV3ZFhSRmNuSnZjbjBnUFNCeVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYSnliM0p6SnlsY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUd4cGMzUmxiaWh2WW1vc0lDNHVMbVYyWlc1MFRtRnRaWE1wSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWMlpXNTBUbUZ0WlhNZ1BUMDlJQ2R6ZEhKcGJtY25LU0JsZG1WdWRFNWhiV1Z6SUQwZ1cyVjJaVzUwVG1GdFpYTmRYRzRnSUNBZ2FXWWdLQ0Z2WW1wYmIySnFMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWdQeUFuWVdSa1JYWmxiblJNYVhOMFpXNWxjaWNnT2lBbmIyNG5YU2tnZEdoeWIzY2dibVYzSUVaUVNXNXdkWFJGY25KdmNpZ25WbUZzYVdRZ1JYWmxiblJGYldsMGRHVnlJSEpsY1hWcGNtVmtMaWNwWEc0Z0lDQWdMeThnUjJWMGN5QmpZV3hzWW1GamF5QjBieUJoZEhSaFkyZ2dkRzhnZEdobElHVjJaVzUwSUdoaGJtUnNaWEp6WEc0Z0lDQWdZMjl1YzNRZ2FHRnVaR3hsY2lBOUlIUm9hWE11WTJoaGFXNUZibVFvS1Z4dUlDQWdJSFJvYVhNdVgwWlFMbVJsYzNSeWIza2dQU0FvS1NBOVBpQjBhR2x6TGw5R1VDNWtaWE4wY205NVNHRnVaR3hsY3k1dFlYQW9abTRnUFQ0Z1ptNG9LU0I4ZkNCMGNuVmxLUzVtYVd4MFpYSW9kaUE5UGlCMktTNXNaVzVuZEdoY2JpQWdJQ0IwYUdsekxsOUdVQzVrWlhOMGNtOTVTR0Z1Wkd4bGN5QTlJR1YyWlc1MFRtRnRaWE11YldGd0tHVjJaVzUwVG1GdFpTQTlQaUI3WEc0Z0lDQWdJQ0J2WW1wYmIySnFMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWdQeUFuWVdSa1JYWmxiblJNYVhOMFpXNWxjaWNnT2lBbmIyNG5YU2hsZG1WdWRFNWhiV1VzSUdoaGJtUnNaWElwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdLQ2tnUFQ0Z2IySnFXMjlpYWk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUlEOGdKM0psYlc5MlpVVjJaVzUwVEdsemRHVnVaWEluSURvZ0oyOW1aaWRkS0dWMlpXNTBUbUZ0WlN3Z2FHRnVaR3hsY2lsY2JpQWdJQ0I5S1Z4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMHNYRzU5SWwxOVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2V2ZW50cy5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL21vZHVsZXMvdXRpbHMnKSxpc1Byb21pc2VMaWtlID0gX3JlcXVpcmUuaXNQcm9taXNlTGlrZTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IHRoZW5JZjogdGhlbklmLCB0YXBJZjogdGFwSWYsIF90aGVuSWY6IF90aGVuSWYgfTtcblxuZnVuY3Rpb24gdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgndGhlbklmJywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZlRydWUgPSBjb25kO1xuICAgIGNvbmQgPSBmdW5jdGlvbiBjb25kKHgpIHtyZXR1cm4geDt9O1xuICB9XG4gIGlmIChpc1Byb21pc2VMaWtlKHRoaXMpKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtyZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpKHZhbHVlKTt9KTtcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpO1xufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZlRydWUgPSBjb25kO1xuICAgIGNvbmQgPSBmdW5jdGlvbiBjb25kKHgpIHtyZXR1cm4geDt9O1xuICB9XG4gIGlmIChpc1Byb21pc2VMaWtlKHRoaXMpKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtyZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKTt9KTtcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBfdGhlbklmKCkge3ZhciBjb25kID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmdW5jdGlvbiAoeCkge3JldHVybiB4O307dmFyIGlmVHJ1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKHgpIHtyZXR1cm4geDt9O3ZhciBpZkZhbHNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmdW5jdGlvbiAoKSB7cmV0dXJuIG51bGw7fTt2YXIgcmV0dXJuVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlO1xuICB2YXIgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtyZXR1cm4gKFxuICAgICAgRlAucmVzb2x2ZShjb25kKHZhbHVlKSkuXG4gICAgICB0aGVuKGZ1bmN0aW9uIChhbnMpIHtyZXR1cm4gYW5zID8gaWZUcnVlKHZhbHVlKSA6IGlmRmFsc2UodmFsdWUpO30pLlxuICAgICAgdGhlbihmdW5jdGlvbiAodikge3JldHVybiByZXR1cm5WYWx1ZSA/IHZhbHVlIDogdjt9KSk7fTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTlqYjI1a2FYUnBiMjVoYkM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpYVhOUWNtOXRhWE5sVEdsclpTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlMQ0owYUdWdVNXWWlMQ0owWVhCSlppSXNJbDkwYUdWdVNXWWlMQ0pqYjI1a0lpd2lhV1pVY25WbElpd2lhV1pHWVd4elpTSXNJbk4wWlhCeklpd2lZV1JrVTNSbGNDSXNJbUZ5WjNWdFpXNTBjeUlzSW14bGJtZDBhQ0lzSW5naUxDSjBhR1Z1SWl3aWRtRnNkV1VpTENKeVpYUjFjbTVXWVd4MVpTSXNJa1pRSWl3aWNtVnpiMngyWlNJc0ltRnVjeUlzSW5ZaVhTd2liV0Z3Y0dsdVozTWlPaUpsUVVGM1FrRXNVVUZCVVN4cFFrRkJVaXhETEVOQlFXcENReXhoTEZsQlFVRkJMR0U3TzBGQlJWQkRMRTlCUVU5RExFOUJRVkFzUjBGQmFVSXNSVUZCUTBNc1kwRkJSQ3hGUVVGVFF5eFpRVUZVTEVWQlFXZENReXhuUWtGQmFFSXNSVUZCYWtJN08wRkJSVUVzVTBGQlUwWXNUVUZCVkN4RFFVRm5Ra2NzU1VGQmFFSXNSVUZCYzBKRExFMUJRWFJDTEVWQlFUaENReXhQUVVFNVFpeEZRVUYxUXp0QlFVTnlReXhOUVVGSkxFdEJRVXRETEV0QlFWUXNSVUZCWjBJc1QwRkJUeXhMUVVGTFF5eFBRVUZNTEVOQlFXRXNVVUZCWWl4MVEwRkJNa0pETEZOQlFUTkNMRWRCUVZBN1FVRkRhRUlzVFVGQlNVRXNWVUZCVlVNc1RVRkJWaXhMUVVGeFFpeERRVUY2UWl4RlFVRTBRanRCUVVNeFFrd3NZVUZCVTBRc1NVRkJWRHRCUVVOQlFTeFhRVUZQTEhsQ1FVRkxUeXhEUVVGTUxFVkJRVkE3UVVGRFJEdEJRVU5FTEUxQlFVbGlMR05CUVdNc1NVRkJaQ3hEUVVGS0xFVkJRWGxDTzBGQlEzWkNMRmRCUVU4c1MwRkJTMk1zU1VGQlRDeERRVUZWTEhsQ1FVRlRWQ3hSUVVGUlF5eEpRVUZTTEVWQlFXTkRMRTFCUVdRc1JVRkJjMEpETEU5QlFYUkNMRVZCUVN0Q1R5eExRVUV2UWl4RFFVRlVMRVZCUVZZc1EwRkJVRHRCUVVORU8wRkJRMFFzVTBGQlQxWXNVVUZCVVVNc1NVRkJVaXhGUVVGalF5eE5RVUZrTEVWQlFYTkNReXhQUVVGMFFpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVMG9zUzBGQlZDeERRVUZsUlN4SlFVRm1MRVZCUVhGQ1F5eE5RVUZ5UWl4RlFVRTJRa01zVDBGQk4wSXNSVUZCYzBNN1FVRkRjRU1zVFVGQlNTeExRVUZMUXl4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwTXNUMEZCVEN4RFFVRmhMRTlCUVdJc2RVTkJRVEJDUXl4VFFVRXhRaXhIUVVGUU8wRkJRMmhDTEUxQlFVbEJMRlZCUVZWRExFMUJRVllzUzBGQmNVSXNRMEZCZWtJc1JVRkJORUk3UVVGRE1VSk1MR0ZCUVZORUxFbEJRVlE3UVVGRFFVRXNWMEZCVHl4NVFrRkJTMDhzUTBGQlRDeEZRVUZRTzBGQlEwUTdRVUZEUkN4TlFVRkpZaXhqUVVGakxFbEJRV1FzUTBGQlNpeEZRVUY1UWp0QlFVTjJRaXhYUVVGUExFdEJRVXRqTEVsQlFVd3NRMEZCVlN4NVFrRkJVMVFzVVVGQlVVTXNTVUZCVWl4RlFVRmpReXhOUVVGa0xFVkJRWE5DUXl4UFFVRjBRaXhGUVVFclFpeEpRVUV2UWl4RlFVRnhRMDhzUzBGQmNrTXNRMEZCVkN4RlFVRldMRU5CUVZBN1FVRkRSRHRCUVVORUxGTkJRVTlXTEZGQlFWRkRMRWxCUVZJc1JVRkJZME1zVFVGQlpDeEZRVUZ6UWtNc1QwRkJkRUlzUlVGQkswSXNTVUZCTDBJc1EwRkJVRHRCUVVORU96dEJRVVZFTEZOQlFWTklMRTlCUVZRc1IwRkJORVlzUzBGQk0wVkRMRWxCUVRKRkxIVkZRVUZ3UlN4eFFrRkJTMDhzUTBGQlRDeEZRVUZ2UlN4TFFVRTFSRTRzVFVGQk5FUXNkVVZCUVc1RUxIRkNRVUZMVFN4RFFVRk1MRVZCUVcxRUxFdEJRVE5EVEN4UFFVRXlReXgxUlVGQmFrTXNiMEpCUVUwc1NVRkJUaXhGUVVGcFF5eExRVUZ5UWxFc1YwRkJjVUlzZFVWQlFWQXNTMEZCVHp0QlFVTXhSaXhOUVVGTlF5eExRVUZMYkVJc1VVRkJVU3hUUVVGU0xFTkJRVmc3UVVGRFFTeFRRVUZQTzBGQlEweHJRaXhUUVVGSFF5eFBRVUZJTEVOQlFWZGFMRXRCUVV0VExFdEJRVXdzUTBGQldEdEJRVU5IUkN4VlFVUklMRU5CUTFFc2RVSkJRVkZMTEUxQlFVMWFMRTlCUVU5UkxFdEJRVkFzUTBGQlRpeEhRVUZ6UWxBc1VVRkJVVThzUzBGQlVpeERRVUU1UWl4RlFVUlNPMEZCUlVkRUxGVkJSa2dzUTBGRlVTeHhRa0ZCVFVVc1kwRkJZMFFzUzBGQlpDeEhRVUZ6UWtzc1EwRkJOVUlzUlVGR1VpeERRVVJMTEVkQlFWQTdRVUZKUkNJc0ltWnBiR1VpT2lKamIyNWthWFJwYjI1aGJDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSXZWWE5sY25NdlpHeGxkbmt2WTI5a1pTOXZjM012Wm5WdVkzUnBiMjVoYkMxeWFYWmxjaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1OdmJuTjBJSHRwYzFCeWIyMXBjMlZNYVd0bGZTQTlJSEpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTkxZEdsc2N5Y3BYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTNSb1pXNUpaaXdnZEdGd1NXWXNJRjkwYUdWdVNXWjlYRzVjYm1aMWJtTjBhVzl1SUhSb1pXNUpaaWhqYjI1a0xDQnBabFJ5ZFdVc0lHbG1SbUZzYzJVcElIdGNiaUFnYVdZZ0tIUm9hWE11YzNSbGNITXBJSEpsZEhWeWJpQjBhR2x6TG1Ga1pGTjBaWEFvSjNSb1pXNUpaaWNzSUZzdUxpNWhjbWQxYldWdWRITmRLVnh1SUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUdsbVZISjFaU0E5SUdOdmJtUmNiaUFnSUNCamIyNWtJRDBnZUNBOVBpQjRYRzRnSUgxY2JpQWdhV1lnS0dselVISnZiV2x6WlV4cGEyVW9kR2hwY3lrcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTBhR1Z1S0haaGJIVmxJRDArSUY5MGFHVnVTV1lvWTI5dVpDd2dhV1pVY25WbExDQnBaa1poYkhObEtTaDJZV3gxWlNrcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUY5MGFHVnVTV1lvWTI5dVpDd2dhV1pVY25WbExDQnBaa1poYkhObEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMFlYQkpaaWhqYjI1a0xDQnBabFJ5ZFdVc0lHbG1SbUZzYzJVcElIdGNiaUFnYVdZZ0tIUm9hWE11YzNSbGNITXBJSEpsZEhWeWJpQjBhR2x6TG1Ga1pGTjBaWEFvSjNSaGNFbG1KeXdnV3k0dUxtRnlaM1Z0Wlc1MGMxMHBYRzRnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnYVdaVWNuVmxJRDBnWTI5dVpGeHVJQ0FnSUdOdmJtUWdQU0I0SUQwK0lIaGNiaUFnZlZ4dUlDQnBaaUFvYVhOUWNtOXRhWE5sVEdsclpTaDBhR2x6S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuUm9aVzRvZG1Gc2RXVWdQVDRnWDNSb1pXNUpaaWhqYjI1a0xDQnBabFJ5ZFdVc0lHbG1SbUZzYzJVc0lIUnlkV1VwS0haaGJIVmxLU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdYM1JvWlc1SlppaGpiMjVrTENCcFpsUnlkV1VzSUdsbVJtRnNjMlVzSUhSeWRXVXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOTBhR1Z1U1dZb1kyOXVaQ0E5SUhnZ1BUNGdlQ3dnYVdaVWNuVmxJRDBnZUNBOVBpQjRMQ0JwWmtaaGJITmxJRDBnS0NrZ1BUNGdiblZzYkN3Z2NtVjBkWEp1Vm1Gc2RXVWdQU0JtWVd4elpTa2dlMXh1SUNCamIyNXpkQ0JHVUNBOUlISmxjWFZwY21Vb0p5NHZhVzVrWlhnbktWeHVJQ0J5WlhSMWNtNGdkbUZzZFdVZ1BUNWNiaUFnSUNCR1VDNXlaWE52YkhabEtHTnZibVFvZG1Gc2RXVXBLVnh1SUNBZ0lDQWdMblJvWlc0b1lXNXpJRDArSUNoaGJuTWdQeUJwWmxSeWRXVW9kbUZzZFdVcElEb2dhV1pHWVd4elpTaDJZV3gxWlNrcEtWeHVJQ0FnSUNBZ0xuUm9aVzRvZGlBOVBpQW9jbVYwZFhKdVZtRnNkV1VnUHlCMllXeDFaU0E2SUhZcEtWeHVmVnh1SWwxOVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2NvbmRpdGlvbmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKSxGUElucHV0RXJyb3IgPSBfcmVxdWlyZS5GUElucHV0RXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0geyBhbGw6IGFsbCwgcmVqZWN0OiByZWplY3QsIGRlbGF5OiBkZWxheSwgX2RlbGF5OiBfZGVsYXkgfTtcblxuZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHZhciBGUCA9IHJlcXVpcmUoJy4vJyk7XG4gIHJldHVybiBGUC5yZXNvbHZlKEFycmF5LmlzQXJyYXkocHJvbWlzZXMpID8gUHJvbWlzZS5hbGwocHJvbWlzZXMpIDogcHJvbWlzZUFsbE9iamVjdChwcm9taXNlcykpO1xufVxuXG5mdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaik7XG4gIHZhciB2YWx1ZXMgPSBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIG9ialtrZXldO30pO1xuICByZXR1cm4gUHJvbWlzZS5hbGwodmFsdWVzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7cmV0dXJuIHJlc3VsdHMucmVkdWNlKGZ1bmN0aW9uIChvYmosIHZhbCwgaW5kZXgpIHt2YXIgX09iamVjdCRhc3NpZ247XG4gICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbigoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25ba2V5XSA9IHZhbCwgX09iamVjdCRhc3NpZ24pLCBvYmopO1xuICAgIH0sIHt9KTt9KTtcbn1cblxuZnVuY3Rpb24gcmVqZWN0KGVycikge1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnI7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdSZWplY3Qgb25seSBhY2NlcHRzIGEgbmV3IGluc3RhbmNlIG9mIEVycm9yIScpO1xufVxuXG5mdW5jdGlvbiBfZGVsYXkobXNlYykge1xuICB2YXIgRlAgPSByZXF1aXJlKCcuLycpO1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIobXNlYykpIHRocm93IG5ldyBGUElucHV0RXJyb3IoJ0ZQLmRlbGF5KG1pbGxpc2VjKSByZXF1aXJlcyBhIG51bWVyaWMgYXJnLicpO1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7cmV0dXJuIG5ldyBGUChmdW5jdGlvbiAocmVzb2x2ZSkge3NldFRpbWVvdXQoZnVuY3Rpb24gKCkge3JldHVybiByZXNvbHZlKHZhbHVlKTt9LCBtc2VjKTt9KTt9O1xufVxuXG5mdW5jdGlvbiBkZWxheShtc2VjKSB7XG4gIHZhciBGUCA9IHJlcXVpcmUoJy4vJyk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdkZWxheScsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIHJldHVybiB0aGlzICYmIHRoaXMuX0ZQID8gRlAucmVzb2x2ZSh0aGlzLnRoZW4oX2RlbGF5KG1zZWMpKSkgOiBfZGVsYXkobXNlYykoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTl3Y205dGFYTmxMbXB6SWwwc0ltNWhiV1Z6SWpwYkluSmxjWFZwY21VaUxDSkdVRWx1Y0hWMFJYSnliM0lpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVlXeHNJaXdpY21WcVpXTjBJaXdpWkdWc1lYa2lMQ0pmWkdWc1lYa2lMQ0p3Y205dGFYTmxjeUlzSWtaUUlpd2ljbVZ6YjJ4MlpTSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbEJ5YjIxcGMyVWlMQ0p3Y205dGFYTmxRV3hzVDJKcVpXTjBJaXdpYjJKcUlpd2lhMlY1Y3lJc0lrOWlhbVZqZENJc0ltZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTWlMQ0oyWVd4MVpYTWlMQ0p0WVhBaUxDSnJaWGtpTENKMGFHVnVJaXdpY21WemRXeDBjeUlzSW5KbFpIVmpaU0lzSW5aaGJDSXNJbWx1WkdWNElpd2lZWE56YVdkdUlpd2laWEp5SWl3aVJYSnliM0lpTENKZlpYSnliM0lpTENKdGMyVmpJaXdpVG5WdFltVnlJaXdpYVhOSmJuUmxaMlZ5SWl3aWMyVjBWR2x0Wlc5MWRDSXNJblpoYkhWbElpd2ljM1JsY0hNaUxDSmhaR1JUZEdWd0lpd2lZWEpuZFcxbGJuUnpJaXdpWDBaUUlsMHNJbTFoY0hCcGJtZHpJam9pWlVGQmVVSkJMRkZCUVZFc2EwSkJRVklzUXl4RFFVRnFRa01zV1N4WlFVRkJRU3haT3p0QlFVVlNReXhQUVVGUFF5eFBRVUZRTEVkQlFXbENMRVZCUVVWRExGRkJRVVlzUlVGQlQwTXNZMEZCVUN4RlFVRmxReXhaUVVGbUxFVkJRWE5DUXl4alFVRjBRaXhGUVVGcVFqczdRVUZGUVN4VFFVRlRTQ3hIUVVGVUxFTkJRV0ZKTEZGQlFXSXNSVUZCZFVJN1FVRkRja0lzVFVGQlRVTXNTMEZCUzFRc1VVRkJVU3hKUVVGU0xFTkJRVmc3UVVGRFFTeFRRVUZQVXl4SFFVRkhReXhQUVVGSUxFTkJRVmRETEUxQlFVMURMRTlCUVU0c1EwRkJZMG9zVVVGQlpDeEpRVUV3UWtzc1VVRkJVVlFzUjBGQlVpeERRVUZaU1N4UlFVRmFMRU5CUVRGQ0xFZEJRV3RFVFN4cFFrRkJhVUpPTEZGQlFXcENMRU5CUVRkRUxFTkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRUU3huUWtGQlZDeERRVUV3UWtNc1IwRkJNVUlzUlVGQkswSTdRVUZETjBJc1RVRkJUVU1zVDBGQlQwTXNUMEZCVDBNc2JVSkJRVkFzUTBGQk1rSklMRWRCUVROQ0xFTkJRV0k3UVVGRFFTeE5RVUZOU1N4VFFVRlRTQ3hMUVVGTFNTeEhRVUZNTEVOQlFWTXNkVUpCUVU5TUxFbEJRVWxOTEVkQlFVb3NRMEZCVUN4RlFVRlVMRU5CUVdZN1FVRkRRU3hUUVVGUFVpeFJRVUZSVkN4SFFVRlNMRU5CUVZsbExFMUJRVm9zUlVGQmIwSkhMRWxCUVhCQ0xFTkJRWGxDTERKQ1FVRlhReXhSUVVGUlF5eE5RVUZTTEVOQlFXVXNWVUZCUTFRc1IwRkJSQ3hGUVVGTlZTeEhRVUZPTEVWQlFWZERMRXRCUVZnc1JVRkJjVUk3UVVGRE4wVXNWVUZCVFV3c1RVRkJUVXdzUzBGQlMxVXNTMEZCVEN4RFFVRmFPMEZCUTBFc1lVRkJUMVFzVDBGQlQxVXNUVUZCVUN4elEwRkJhVUpPTEVkQlFXcENMRWxCUVhWQ1NTeEhRVUYyUWl4dFFrRkJPRUpXTEVkQlFUbENMRU5CUVZBN1FVRkRSQ3hMUVVnd1F5eEZRVWQ0UXl4RlFVaDNReXhEUVVGWUxFVkJRWHBDTEVOQlFWQTdRVUZKUkRzN1FVRkZSQ3hUUVVGVFZpeE5RVUZVTEVOQlFXZENkVUlzUjBGQmFFSXNSVUZCY1VJN1FVRkRia0lzVFVGQlNVRXNaVUZCWlVNc1MwRkJia0lzUlVGQk1FSTdRVUZEZUVJc1VVRkJTU3hKUVVGS0xFVkJRVlVzUzBGQlMwTXNUVUZCVEN4SFFVRmpSaXhIUVVGa08wRkJRMVlzVjBGQlQyWXNVVUZCVVZJc1RVRkJVaXhEUVVGbGRVSXNSMEZCWml4RFFVRlFPMEZCUTBRN1FVRkRSQ3hSUVVGTkxFbEJRVWxETEV0QlFVb3NaMFJCUVU0N1FVRkRSRHM3UVVGRlJDeFRRVUZUZEVJc1RVRkJWQ3hEUVVGblFuZENMRWxCUVdoQ0xFVkJRWE5DTzBGQlEzQkNMRTFCUVUxMFFpeExRVUZMVkN4UlFVRlJMRWxCUVZJc1EwRkJXRHRCUVVOQkxFMUJRVWtzUTBGQlEyZERMRTlCUVU5RExGTkJRVkFzUTBGQmFVSkdMRWxCUVdwQ0xFTkJRVXdzUlVGQk5rSXNUVUZCVFN4SlFVRkpPVUlzV1VGQlNpeERRVUZwUWl3MFEwRkJha0lzUTBGQlRqdEJRVU0zUWl4VFFVRlBMSGxDUVVGVExFbEJRVWxSTEVWQlFVb3NRMEZCVHl4dFFrRkJWeXhEUVVGRmVVSXNWMEZCVnl4dlFrRkJUWGhDTEZGQlFWRjVRaXhMUVVGU0xFTkJRVTRzUlVGQldDeEZRVUZwUTBvc1NVRkJha01zUlVGQmQwTXNRMEZCTlVRc1EwRkJWQ3hGUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTNwQ0xFdEJRVlFzUTBGQlpYbENMRWxCUVdZc1JVRkJjVUk3UVVGRGJrSXNUVUZCVFhSQ0xFdEJRVXRVTEZGQlFWRXNTVUZCVWl4RFFVRllPMEZCUTBFc1RVRkJTU3hMUVVGTGIwTXNTMEZCVkN4RlFVRm5RaXhQUVVGUExFdEJRVXRETEU5QlFVd3NRMEZCWVN4UFFVRmlMSFZEUVVFd1FrTXNVMEZCTVVJc1IwRkJVRHRCUVVOb1FpeFRRVUZQTEZGQlFWRXNTMEZCUzBNc1IwRkJZaXhIUVVGdFFqbENMRWRCUVVkRExFOUJRVWdzUTBGQlZ5eExRVUZMV1N4SlFVRk1MRU5CUVZWbUxFOUJRVTkzUWl4SlFVRlFMRU5CUVZZc1EwRkJXQ3hEUVVGdVFpeEhRVUY1UkhoQ0xFOUJRVTkzUWl4SlFVRlFMRWRCUVdoRk8wRkJRMFFpTENKbWFXeGxJam9pY0hKdmJXbHpaUzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZaR3hsZG5rdlkyOWtaUzl2YzNNdlpuVnVZM1JwYjI1aGJDMXlhWFpsY2lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUhzZ1JsQkpibkIxZEVWeWNtOXlJSDBnUFNCeVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYSnliM0p6SnlsY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJR0ZzYkN3Z2NtVnFaV04wTENCa1pXeGhlU3dnWDJSbGJHRjVJSDFjYmx4dVpuVnVZM1JwYjI0Z1lXeHNLSEJ5YjIxcGMyVnpLU0I3WEc0Z0lHTnZibk4wSUVaUUlEMGdjbVZ4ZFdseVpTZ25MaThuS1Z4dUlDQnlaWFIxY200Z1JsQXVjbVZ6YjJ4MlpTaEJjbkpoZVM1cGMwRnljbUY1S0hCeWIyMXBjMlZ6S1NBL0lGQnliMjFwYzJVdVlXeHNLSEJ5YjIxcGMyVnpLU0E2SUhCeWIyMXBjMlZCYkd4UFltcGxZM1FvY0hKdmJXbHpaWE1wS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJ3Y205dGFYTmxRV3hzVDJKcVpXTjBLRzlpYWlrZ2UxeHVJQ0JqYjI1emRDQnJaWGx6SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb2IySnFLVnh1SUNCamIyNXpkQ0IyWVd4MVpYTWdQU0JyWlhsekxtMWhjQ2hyWlhrZ1BUNGdiMkpxVzJ0bGVWMHBYRzRnSUhKbGRIVnliaUJRY205dGFYTmxMbUZzYkNoMllXeDFaWE1wTG5Sb1pXNG9jbVZ6ZFd4MGN5QTlQaUJ5WlhOMWJIUnpMbkpsWkhWalpTZ29iMkpxTENCMllXd3NJR2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2EyVjVJRDBnYTJWNWMxdHBibVJsZUYxY2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExtRnpjMmxuYmloN0lGdHJaWGxkT2lCMllXd2dmU3dnYjJKcUtWeHVJQ0I5TENCN2ZTa3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxhbVZqZENobGNuSXBJSHRjYmlBZ2FXWWdLR1Z5Y2lCcGJuTjBZVzVqWlc5bUlFVnljbTl5S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE1wSUhSb2FYTXVYMlZ5Y205eUlEMGdaWEp5WEc0Z0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnFaV04wS0dWeWNpbGNiaUFnZlZ4dUlDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lGSmxhbVZqZENCdmJteDVJR0ZqWTJWd2RITWdZU0J1WlhjZ2FXNXpkR0Z1WTJVZ2IyWWdSWEp5YjNJaFlDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1gyUmxiR0Y1S0cxelpXTXBJSHRjYmlBZ1kyOXVjM1FnUmxBZ1BTQnlaWEYxYVhKbEtDY3VMeWNwWEc0Z0lHbG1JQ2doVG5WdFltVnlMbWx6U1c1MFpXZGxjaWh0YzJWaktTa2dkR2h5YjNjZ2JtVjNJRVpRU1c1d2RYUkZjbkp2Y2lnblJsQXVaR1ZzWVhrb2JXbHNiR2x6WldNcElISmxjWFZwY21WeklHRWdiblZ0WlhKcFl5QmhjbWN1SnlsY2JpQWdjbVYwZFhKdUlIWmhiSFZsSUQwK0lHNWxkeUJHVUNoeVpYTnZiSFpsSUQwK0lIc2djMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQnlaWE52YkhabEtIWmhiSFZsS1N3Z2JYTmxZeWtnZlNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWkdWc1lYa29iWE5sWXlrZ2UxeHVJQ0JqYjI1emRDQkdVQ0E5SUhKbGNYVnBjbVVvSnk0dkp5bGNiaUFnYVdZZ0tIUm9hWE11YzNSbGNITXBJSEpsZEhWeWJpQjBhR2x6TG1Ga1pGTjBaWEFvSjJSbGJHRjVKeXdnV3k0dUxtRnlaM1Z0Wlc1MGMxMHBYRzRnSUhKbGRIVnliaUIwYUdseklDWW1JSFJvYVhNdVgwWlFJRDhnUmxBdWNtVnpiMngyWlNoMGFHbHpMblJvWlc0b1gyUmxiR0Y1S0cxelpXTXBLU2tnT2lCZlpHVnNZWGtvYlhObFl5a29LVnh1ZlZ4dUlsMTlcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQ3pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUN4TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUM1SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QSIsInNvdXJjZVJvb3QiOiIifQ==