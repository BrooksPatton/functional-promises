/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_errors__ = __webpack_require__(/*! ./modules/errors */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_utils__ = __webpack_require__(/*! ./modules/utils */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__monads__ = __webpack_require__(/*! ./monads */ 4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__arrays__ = __webpack_require__(/*! ./arrays */ 5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__events__ = __webpack_require__(/*! ./events */ 6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__conditional__ = __webpack_require__(/*! ./conditional */ 7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__promise__ = __webpack_require__(/*! ./promise */ 8);








function FP(resolveRejectCB) {
  if (!(this instanceof FP)) {
    return new FP(resolveRejectCB);
  }
  if (arguments.length !== 1) throw new Error('FunctionalPromises constructor only accepts 1 callback argument');
  this._FP = {
    errors: { limit: 0, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4
  };
}
Object.assign(FP.prototype, __WEBPACK_IMPORTED_MODULE_3__arrays__["a" /* default */], __WEBPACK_IMPORTED_MODULE_4__events__["a" /* default */], __WEBPACK_IMPORTED_MODULE_5__conditional__["a" /* default */], __WEBPACK_IMPORTED_MODULE_6__promise__["a" /* default */]);

FP.default = FP;

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = msec => FP.resolve().delay(msec);
FP.silent = limit => FP.resolve().silent(limit);

// Monadic Methods
FP.chain = __WEBPACK_IMPORTED_MODULE_2__monads__["a" /* chain */];
FP.prototype.chainEnd = __WEBPACK_IMPORTED_MODULE_2__monads__["b" /* chainEnd */];
FP.reject = FP.prototype.reject;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency(limit = Infinity) {
  if (this.steps) return this.addStep('concurrency', [...arguments]);
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet(errorLimit = Infinity) {
  if (this.steps) return this.addStep('quiet', [...arguments]);
  this._FP.errors = { count: 0, limit: errorLimit };
  return this;
};
FP.prototype.silent = FP.prototype.quiet;

FP.prototype.get = function get(...keyNames) {
  if (this.steps) return this.addStep('get', [...arguments]);
  keyNames = Object(__WEBPACK_IMPORTED_MODULE_1__modules_utils__["a" /* flatten */])(keyNames);
  return this.then(obj => {
    if (typeof obj === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce((extracted, key) => {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [...arguments]);
  return this.then(obj => {
    if (typeof obj === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [...arguments]);
  if (arguments.length === 2) return this.catchIf(...arguments);
  if (!Object(__WEBPACK_IMPORTED_MODULE_1__modules_utils__["c" /* isFunction */])(fn)) throw new __WEBPACK_IMPORTED_MODULE_0__modules_errors__["b" /* FunctionalError */]('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.catch(err => fn(err)));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [...arguments]);
  if (!Object(__WEBPACK_IMPORTED_MODULE_1__modules_utils__["c" /* isFunction */])(fn)) throw new __WEBPACK_IMPORTED_MODULE_0__modules_errors__["b" /* FunctionalError */]('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + typeof fn);

  return FP.resolve(this._FP.promise.catch(err => {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [...arguments]);
  if (!Object(__WEBPACK_IMPORTED_MODULE_1__modules_utils__["c" /* isFunction */])(fn)) throw new __WEBPACK_IMPORTED_MODULE_0__modules_errors__["b" /* FunctionalError */]('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [...arguments]);
  if (!Object(__WEBPACK_IMPORTED_MODULE_1__modules_utils__["c" /* isFunction */])(fn)) throw new __WEBPACK_IMPORTED_MODULE_0__modules_errors__["b" /* FunctionalError */]('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(value => fn(value) ? value : value));
};

FP.resolve = FP.prototype.resolve = function resolve(value) {
  return new FP((resolve, reject) => {
    if (value && Object(__WEBPACK_IMPORTED_MODULE_1__modules_utils__["c" /* isFunction */])(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
};

FP.promisify = function promisify(cb) {
  return (...args) => new FP((yah, nah) => cb.call(this, ...args, (err, res) => err ? nah(err) : yah(res)));
};

FP.promisifyAll = function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {
    throw new Error('Invalid Argument obj in promisifyAll(obj)');
  }
  return Object.getOwnPropertyNames(obj).filter(key => typeof obj[key] === 'function').reduce((obj, fnName) => {
    if (!/Sync/.test(fnName) && !obj[`${fnName}Async`]) obj[`${fnName}Async`] = FP.promisify(obj[`${fnName}`]);
    return obj;
  }, obj);
};

FP.unpack = function unpack() {
  let resolve,
      reject,
      promise = new FP((yah, nah) => {
    resolve = yah;reject = nah;
  });
  return { promise, resolve, reject };
};

/* harmony default export */ __webpack_exports__["default"] = (FP);

if (process && process.on) {
  // process.on('uncaughtException', e => console.error('FPromises: FATAL EXCEPTION: uncaughtException', e))
  process.on('unhandledRejection', e => console.error('FPromises: FATAL ERROR: unhandledRejection', e));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(/*! ./../node_modules/process/browser.js */ 3)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! exports provided: FunctionalError, FunctionalUserError, FPUnexpectedError, FPInputError, FPSoftError, FPTimeout */
/*! exports used: FPInputError, FunctionalError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class FunctionalError extends Error {
  constructor(msg, options) {
    if (typeof msg === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }
    super(msg);
    if (typeof options === 'object') {
      Object.getOwnPropertyNames(options).forEach(key => {
        this[key] = options[key];
      });
    }
    this.name = this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(this, this.constructor);
  }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = FunctionalError;

class FunctionalUserError extends FunctionalError {}
/* unused harmony export FunctionalUserError */

class FPUnexpectedError extends FunctionalError {}
/* unused harmony export FPUnexpectedError */

class FPInputError extends FunctionalError {}
/* harmony export (immutable) */ __webpack_exports__["a"] = FPInputError;

class FPSoftError extends FunctionalError {}
/* unused harmony export FPSoftError */

class FPTimeout extends FunctionalError {}
/* unused harmony export FPTimeout */

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibXNnIiwib3B0aW9ucyIsIm1lc3NhZ2UiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImtleSIsIm5hbWUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0Il0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU1BLGVBQU4sU0FBOEJDLEtBQTlCLENBQW9DO0FBQ3pDQyxjQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLE9BQU9ELEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCO0FBQ0QsVUFBTUYsR0FBTjtBQUNBLFFBQUksT0FBT0MsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQkUsYUFBT0MsbUJBQVAsQ0FBMkJILE9BQTNCLEVBQ0dJLE9BREgsQ0FDV0MsT0FBTztBQUNkLGFBQUtBLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FISDtBQUlEO0FBQ0QsU0FBS0MsSUFBTCxHQUFZLEtBQUtSLFdBQUwsQ0FBaUJRLElBQTdCO0FBQ0E7QUFDQVQsVUFBTVUsaUJBQU4sQ0FBd0IsSUFBeEIsRUFBOEIsS0FBS1QsV0FBbkM7QUFDRDtBQWhCd0M7QUFrQjNDLE9BQU8sTUFBTVUsbUJBQU4sU0FBa0NaLGVBQWxDLENBQWtEO0FBQ3pELE9BQU8sTUFBTWEsaUJBQU4sU0FBZ0NiLGVBQWhDLENBQWdEO0FBQ3ZELE9BQU8sTUFBTWMsWUFBTixTQUEyQmQsZUFBM0IsQ0FBMkM7QUFDbEQsT0FBTyxNQUFNZSxXQUFOLFNBQTBCZixlQUExQixDQUEwQztBQUNqRCxPQUFPLE1BQU1nQixTQUFOLFNBQXdCaEIsZUFBeEIsQ0FBd0MiLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEZ1bmN0aW9uYWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobXNnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBtc2cgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0gbXNnXG4gICAgICBpZiAoIG1zZy5tZXNzYWdlICkgbXNnID0gbXNnLm1lc3NhZ2VcbiAgICB9XG4gICAgc3VwZXIobXNnKVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9wdGlvbnMpXG4gICAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICAgIC8vIENhcHR1cmluZyBzdGFjayB0cmFjZSwgZXhjbHVkaW5nIGNvbnN0cnVjdG9yIGNhbGwgZnJvbSBpdC5cbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKVxuICB9XG59XG5leHBvcnQgY2xhc3MgRnVuY3Rpb25hbFVzZXJFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0IGNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5leHBvcnQgY2xhc3MgRlBJbnB1dEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5leHBvcnQgY2xhc3MgRlBTb2Z0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmV4cG9ydCBjbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbiJdfQ==

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! exports provided: isPromiseLike, isFunction, isEnumerable, flatten */
/*! exports used: flatten, isEnumerable, isFunction, isPromiseLike */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const isPromiseLike = function (p) {
  return p && typeof p.then === 'function';
};
/* harmony export (immutable) */ __webpack_exports__["d"] = isPromiseLike;

const isFunction = function (fn) {
  return typeof fn === 'function';
};
/* harmony export (immutable) */ __webpack_exports__["c"] = isFunction;

const isEnumerable = function (list) {
  return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';
};
/* harmony export (immutable) */ __webpack_exports__["b"] = isEnumerable;


const flatten = function (arr) {
  if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
  return arr.reduce((results, item) => results.concat(Array.isArray(item) ? utils.flatten(item) : [item]), []);
};
/* harmony export (immutable) */ __webpack_exports__["a"] = flatten;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsInJlc3VsdHMiLCJpdGVtIiwiY29uY2F0IiwidXRpbHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTUEsZ0JBQWdCLFVBQVNDLENBQVQsRUFBWTtBQUFFLFNBQU9BLEtBQUssT0FBT0EsRUFBRUMsSUFBVCxLQUFrQixVQUE5QjtBQUEwQyxDQUE5RTtBQUNQLE9BQU8sTUFBTUMsYUFBYSxVQUFTQyxFQUFULEVBQWE7QUFBRSxTQUFPLE9BQU9BLEVBQVAsS0FBYyxVQUFyQjtBQUFpQyxDQUFuRTtBQUNQLE9BQU8sTUFBTUMsZUFBZSxVQUFTQyxJQUFULEVBQWU7QUFBRSxTQUFPQSxRQUFRQyxNQUFNQyxPQUFOLENBQWNGLElBQWQsQ0FBUixJQUErQixPQUFPQSxLQUFLRyxPQUFPQyxRQUFaLENBQVAsS0FBaUMsVUFBdkU7QUFBbUYsQ0FBekg7O0FBRVAsT0FBTyxNQUFNQyxVQUFVLFVBQVNDLEdBQVQsRUFBYztBQUNuQyxNQUFJLENBQUNMLE1BQU1DLE9BQU4sQ0FBY0ksR0FBZCxDQUFMLEVBQXlCLE1BQU0sSUFBSUMsS0FBSixDQUFVLGlEQUFWLENBQU47QUFDekIsU0FBT0QsSUFBSUUsTUFBSixDQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixLQUFtQkQsUUFBUUUsTUFBUixDQUFlVixNQUFNQyxPQUFOLENBQWNRLElBQWQsSUFBc0JFLE1BQU1QLE9BQU4sQ0FBY0ssSUFBZCxDQUF0QixHQUE0QyxDQUFDQSxJQUFELENBQTNELENBQTlCLEVBQWtHLEVBQWxHLENBQVA7QUFDRCxDQUhNIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzUHJvbWlzZUxpa2UgPSBmdW5jdGlvbihwKSB7IHJldHVybiBwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicgfVxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSBmdW5jdGlvbihmbikgeyByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nIH1cbmV4cG9ydCBjb25zdCBpc0VudW1lcmFibGUgPSBmdW5jdGlvbihsaXN0KSB7IHJldHVybiBsaXN0ICYmIEFycmF5LmlzQXJyYXkobGlzdCkgfHwgdHlwZW9mIGxpc3RbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJyB9XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuID0gZnVuY3Rpb24oYXJyKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBgZmxhdHRlbmAgcmVxdWlyZXMgdmFsaWQgYXJyYXkgcGFyYW1ldGVyJylcbiAgcmV0dXJuIGFyci5yZWR1Y2UoKHJlc3VsdHMsIGl0ZW0pID0+IHJlc3VsdHMuY29uY2F0KEFycmF5LmlzQXJyYXkoaXRlbSkgPyB1dGlscy5mbGF0dGVuKGl0ZW0pIDogW2l0ZW1dKSwgW10pXG59XG5cbiJdfQ==

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! exports provided: chain, chainEnd */
/*! exports used: chain, chainEnd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = chain;
/* harmony export (immutable) */ __webpack_exports__["b"] = chainEnd;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_errors__ = __webpack_require__(/*! ./modules/errors */ 1);


/**
 * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
 * @returns FunctionalPromise
 */
function chain() {
  const FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  const promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
 * Call after starting a `.chain()`.
 *
 * One of the few non-chainable methods in the API.
 * @returns a Function. It runs your functional chain!
 */
function chainEnd() {
  const FP = __webpack_require__(/*! ./index */ 0);

  return input => {
    if (!this.steps || this.steps.length <= 0) throw new __WEBPACK_IMPORTED_MODULE_0__modules_errors__["a" /* FPInputError */]('No steps defined between .chain() & .chainEnd()');
    let stepCount = 0;
    let { promise, resolve, reject } = FP.unpack();
    while (stepCount < this.steps.length) {
      const [fnName,, args] = this.steps[stepCount];
      promise = promise[fnName](...args);
      stepCount++;
    }
    resolve(input);
    return promise;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsiRlBJbnB1dEVycm9yIiwiY2hhaW4iLCJGUCIsInJlcXVpcmUiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwiY2hhaW5FbmQiLCJpbnB1dCIsImxlbmd0aCIsInN0ZXBDb3VudCIsInJlamVjdCIsInVucGFjayIsImZuTmFtZSIsImFyZ3MiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFlBQVQsUUFBNkIsa0JBQTdCOztBQUVBOzs7O0FBSUEsT0FBTyxTQUFTQyxLQUFULEdBQWlCO0FBQ3RCLFFBQU1DLEtBQUtDLFFBQVEsU0FBUixDQUFYO0FBQ0E7QUFDQSxRQUFNQyxVQUFVRixHQUFHRyxPQUFILEVBQWhCO0FBQ0FELFVBQVFFLEtBQVIsR0FBZ0IsRUFBaEI7QUFDQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1BLE9BQU8sU0FBU0csUUFBVCxHQUFvQjtBQUN6QixRQUFNTCxLQUFLQyxRQUFRLFNBQVIsQ0FBWDs7QUFFQSxTQUFPSyxTQUFTO0FBQ2QsUUFBSSxDQUFDLEtBQUtGLEtBQU4sSUFBZSxLQUFLQSxLQUFMLENBQVdHLE1BQVgsSUFBcUIsQ0FBeEMsRUFBMkMsTUFBTSxJQUFJVCxZQUFKLENBQWlCLGlEQUFqQixDQUFOO0FBQzNDLFFBQUlVLFlBQVksQ0FBaEI7QUFDQSxRQUFJLEVBQUNOLE9BQUQsRUFBVUMsT0FBVixFQUFtQk0sTUFBbkIsS0FBNkJULEdBQUdVLE1BQUgsRUFBakM7QUFDQSxXQUFPRixZQUFZLEtBQUtKLEtBQUwsQ0FBV0csTUFBOUIsRUFBc0M7QUFDcEMsWUFBTSxDQUFDSSxNQUFELEdBQVdDLElBQVgsSUFBbUIsS0FBS1IsS0FBTCxDQUFXSSxTQUFYLENBQXpCO0FBQ0FOLGdCQUFVQSxRQUFRUyxNQUFSLEVBQWdCLEdBQUdDLElBQW5CLENBQVY7QUFDQUo7QUFDRDtBQUNETCxZQUFRRyxLQUFSO0FBQ0EsV0FBT0osT0FBUDtBQUNELEdBWEQ7QUFZRCIsImZpbGUiOiJtb25hZHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGUElucHV0RXJyb3IgfSBmcm9tICcuL21vZHVsZXMvZXJyb3JzJ1xuXG4vKipcbiAqIFN0YXJ0ICdyZWNvcmRpbmcnIGEgY2hhaW4gb2YgY29tbWFuZHMsIGFmdGVyIHN0ZXBzIGRlZmluZWQgY2FsbCBgLmNoYWluRW5kKClgXG4gKiBAcmV0dXJucyBGdW5jdGlvbmFsUHJvbWlzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhaW4oKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi9pbmRleCcpXG4gIC8vIGNyZWF0ZSBhIHBsYWNlaG9sZGVyL2luaXRpYWwgcHJvbWlzZSB0byBob2xkIHRoZSBzdGVwcy9jaGFpbiBkYXRhXG4gIGNvbnN0IHByb21pc2UgPSBGUC5yZXNvbHZlKClcbiAgcHJvbWlzZS5zdGVwcyA9IFtdXG4gIHJldHVybiBwcm9taXNlXG59XG5cbi8qKlxuICogQ2FsbCBhZnRlciBzdGFydGluZyBhIGAuY2hhaW4oKWAuXG4gKlxuICogT25lIG9mIHRoZSBmZXcgbm9uLWNoYWluYWJsZSBtZXRob2RzIGluIHRoZSBBUEkuXG4gKiBAcmV0dXJucyBhIEZ1bmN0aW9uLiBJdCBydW5zIHlvdXIgZnVuY3Rpb25hbCBjaGFpbiFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYWluRW5kKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgaWYgKCF0aGlzLnN0ZXBzIHx8IHRoaXMuc3RlcHMubGVuZ3RoIDw9IDApIHRocm93IG5ldyBGUElucHV0RXJyb3IoJ05vIHN0ZXBzIGRlZmluZWQgYmV0d2VlbiAuY2hhaW4oKSAmIC5jaGFpbkVuZCgpJylcbiAgICBsZXQgc3RlcENvdW50ID0gMFxuICAgIGxldCB7cHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0fSA9IEZQLnVucGFjaygpXG4gICAgd2hpbGUgKHN0ZXBDb3VudCA8IHRoaXMuc3RlcHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBbZm5OYW1lLCAsIGFyZ3NdID0gdGhpcy5zdGVwc1tzdGVwQ291bnRdXG4gICAgICBwcm9taXNlID0gcHJvbWlzZVtmbk5hbWVdKC4uLmFyZ3MpXG4gICAgICBzdGVwQ291bnQrK1xuICAgIH1cbiAgICByZXNvbHZlKGlucHV0KVxuICAgIHJldHVybiBwcm9taXNlXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_utils__ = __webpack_require__(/*! ./modules/utils */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__modules_errors__ = __webpack_require__(/*! ./modules/errors */ 1);



/* harmony default export */ __webpack_exports__["a"] = ({ map, find, findIndex, filter, reduce });

function find(callback) {
  return _find.call(this, callback).then(({ item }) => item);
}
function findIndex(callback) {
  return _find.call(this, callback).then(({ index }) => index);
}

function _find(iterable, callback) {
  const FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [...arguments]);
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).filter(callback).then(results => results[0] != undefined ? { item: results[0], index: results.indexOf(results[0]) } : { item: undefined, index: -1 });
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [...arguments]);
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, (acc, item) => Promise.resolve(callback(item)).then(x => x ? acc.concat([item]) : acc), []);
}

function reduce(iterable, reducer, initVal) {
  const FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [...arguments]);
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else iterable = FP.resolve(iterable, this);

  return new FP((resolve, reject) => {
    return iterable.then(iterable => {
      const iterator = iterable[Symbol.iterator]();
      let i = 0;

      const next = total => {
        const current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).then(([total, item]) => next(reducer(total, item, i++))).catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {
  const FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [...arguments]);
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }
  let resolvedOrRejected = false;
  const threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  const innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  let initialThread = 0;
  let errors = [];
  let count = 0;
  const results = [];
  const threadPool = new Set();
  const threadPoolFull = () => threadPool.size >= threadLimit;
  const isDone = () => errors.length > this._FP.errors.limit || count >= args.length || resolvedOrRejected;
  const setResult = index => value => {
    threadPool.delete(index);
    results[index] = value;
    return value;
  };
  return FP.resolve(new Promise((resolve, reject) => {
    const resolveIt = x => {
      // console.log('Action.resolve:', resolvedOrRejected, x)
      if (resolvedOrRejected) {
        return null;
      } else {
        resolvedOrRejected = true;
      }
      resolve(x);
    };
    const rejectIt = x => {
      if (resolvedOrRejected) {
        return null;
      } else {
        resolvedOrRejected = true;
      }
      // console.log('Action.reject:', resolvedOrRejected, x)
      reject(x);
    };
    innerValues.then(items => {
      args = [...items];
      if (!Object(__WEBPACK_IMPORTED_MODULE_0__modules_utils__["b" /* isEnumerable */])(items)) return reject(new __WEBPACK_IMPORTED_MODULE_1__modules_errors__["a" /* FPInputError */]('Invalid input data passed into FP.map()'));
      const complete = () => {
        let action = null;
        if (errors.length > this._FP.errors.limit) action = rejectIt;
        if (isDone()) action = resolveIt;
        if (action) return Promise.all(results).then(data => action(results)) ? true : true;
        return false;
      };
      const checkAndRun = val => {
        // console.log('checkAndRun', count, resolvedOrRejected, val)
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      const runItem = c => {
        if (resolvedOrRejected) {
          return null;
        } else {
          count++;
        }
        if (threadPoolFull()) return setTimeout(() => runItem(c), 0);
        if (results[c]) return results[c];
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        results[c] = Promise.resolve(args[c]).then(val => fn(val, c, args)).then(val => setResult(c)(val)).then(checkAndRun).catch(err => {
          this._FP.errors.count++;
          errors.push(err);
          // console.log('ERR HANDLER!', errors.length, this._FP.errors.limit)
          if (errors.length > this._FP.errors.limit) {
            const fpErr = errors.length === 1 ? err : new __WEBPACK_IMPORTED_MODULE_1__modules_errors__["b" /* FunctionalError */](`Error Limit ${this._FP.errors.limit} Exceeded.
              idx=${c} errCnt=${this._FP.errors.count}`, { errors, results, ctx: this });
            Promise.resolve(setResult(c)(err)).then(() => rejectIt(fpErr));
          } else {
            // console.warn('Error OK:', JSON.stringify(this._FP.errors))
            return Promise.resolve().then(() => setResult(c)(err)).then(checkAndRun);
          }
        });

        return results[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) runItem(initialThread++);
    });
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_errors__ = __webpack_require__(/*! ./modules/errors */ 1);


/* harmony default export */ __webpack_exports__["a"] = ({
  listen(obj, ...eventNames) {
    if (typeof eventNames === 'string') eventNames = [eventNames];
    if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) throw new __WEBPACK_IMPORTED_MODULE_0__modules_errors__["a" /* FPInputError */]('Valid EventEmitter required.');
    // Gets callback to attach to the event handlers
    const handler = this.chainEnd();
    this._FP.destroy = () => this._FP.destroyHandles.map(fn => fn() || true).filter(v => v).length;
    this._FP.destroyHandles = eventNames.map(eventName => {
      obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
      return () => obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);
    });
    return this;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsiRlBJbnB1dEVycm9yIiwibGlzdGVuIiwib2JqIiwiZXZlbnROYW1lcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVyIiwiY2hhaW5FbmQiLCJfRlAiLCJkZXN0cm95IiwiZGVzdHJveUhhbmRsZXMiLCJtYXAiLCJmbiIsImZpbHRlciIsInYiLCJsZW5ndGgiLCJldmVudE5hbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxZQUFULFFBQTZCLGtCQUE3Qjs7QUFFQSxlQUFlO0FBQ2JDLFNBQU9DLEdBQVAsRUFBWSxHQUFHQyxVQUFmLEVBQTJCO0FBQ3pCLFFBQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsUUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RCxNQUFNLElBQUlKLFlBQUosQ0FBaUIsOEJBQWpCLENBQU47QUFDNUQ7QUFDQSxVQUFNSyxVQUFVLEtBQUtDLFFBQUwsRUFBaEI7QUFDQSxTQUFLQyxHQUFMLENBQVNDLE9BQVQsR0FBbUIsTUFBTSxLQUFLRCxHQUFMLENBQVNFLGNBQVQsQ0FBd0JDLEdBQXhCLENBQTRCQyxNQUFNQSxRQUFRLElBQTFDLEVBQWdEQyxNQUFoRCxDQUF1REMsS0FBS0EsQ0FBNUQsRUFBK0RDLE1BQXhGO0FBQ0EsU0FBS1AsR0FBTCxDQUFTRSxjQUFULEdBQTBCTixXQUFXTyxHQUFYLENBQWVLLGFBQWE7QUFDcERiLFVBQUlBLElBQUlFLGdCQUFKLEdBQXVCLGtCQUF2QixHQUE0QyxJQUFoRCxFQUFzRFcsU0FBdEQsRUFBaUVWLE9BQWpFO0FBQ0EsYUFBTyxNQUFNSCxJQUFJQSxJQUFJYyxtQkFBSixHQUEwQixxQkFBMUIsR0FBa0QsS0FBdEQsRUFBNkRELFNBQTdELEVBQXdFVixPQUF4RSxDQUFiO0FBQ0QsS0FIeUIsQ0FBMUI7QUFJQSxXQUFPLElBQVA7QUFDRDtBQVpZLENBQWYiLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRlBJbnB1dEVycm9yIH0gZnJvbSAnLi9tb2R1bGVzL2Vycm9ycydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsaXN0ZW4ob2JqLCAuLi5ldmVudE5hbWVzKSB7XG4gICAgaWYgKHR5cGVvZiBldmVudE5hbWVzID09PSAnc3RyaW5nJykgZXZlbnROYW1lcyA9IFtldmVudE5hbWVzXVxuICAgIGlmICghb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10pIHRocm93IG5ldyBGUElucHV0RXJyb3IoJ1ZhbGlkIEV2ZW50RW1pdHRlciByZXF1aXJlZC4nKVxuICAgIC8vIEdldHMgY2FsbGJhY2sgdG8gYXR0YWNoIHRvIHRoZSBldmVudCBoYW5kbGVyc1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNoYWluRW5kKClcbiAgICB0aGlzLl9GUC5kZXN0cm95ID0gKCkgPT4gdGhpcy5fRlAuZGVzdHJveUhhbmRsZXMubWFwKGZuID0+IGZuKCkgfHwgdHJ1ZSkuZmlsdGVyKHYgPT4gdikubGVuZ3RoXG4gICAgdGhpcy5fRlAuZGVzdHJveUhhbmRsZXMgPSBldmVudE5hbWVzLm1hcChldmVudE5hbWUgPT4ge1xuICAgICAgb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10oZXZlbnROYW1lLCBoYW5kbGVyKVxuICAgICAgcmV0dXJuICgpID0+IG9ialtvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA/ICdyZW1vdmVFdmVudExpc3RlbmVyJyA6ICdvZmYnXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgfSlcbiAgICByZXR1cm4gdGhpc1xuICB9LFxufSJdfQ==

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_utils__ = __webpack_require__(/*! ./modules/utils */ 2);


/* harmony default export */ __webpack_exports__["a"] = ({ thenIf, tapIf, _thenIf });

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if (Object(__WEBPACK_IMPORTED_MODULE_0__modules_utils__["d" /* isPromiseLike */])(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if (Object(__WEBPACK_IMPORTED_MODULE_0__modules_utils__["d" /* isPromiseLike */])(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse, true)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf(cond = x => x, ifTrue = x => x, ifFalse = () => null, returnValue = false) {
  const FP = __webpack_require__(/*! ./index */ 0);
  return value => FP.resolve(cond(value)).then(ans => ans ? ifTrue(value) : ifFalse(value)).then(v => returnValue ? value : v);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJpc1Byb21pc2VMaWtlIiwidGhlbklmIiwidGFwSWYiLCJfdGhlbklmIiwiY29uZCIsImlmVHJ1ZSIsImlmRmFsc2UiLCJzdGVwcyIsImFkZFN0ZXAiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ4IiwidGhlbiIsInZhbHVlIiwicmV0dXJuVmFsdWUiLCJGUCIsInJlcXVpcmUiLCJyZXNvbHZlIiwiYW5zIiwidiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsYUFBVCxRQUE4QixpQkFBOUI7O0FBRUEsZUFBZSxFQUFDQyxNQUFELEVBQVNDLEtBQVQsRUFBZ0JDLE9BQWhCLEVBQWY7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYixFQUF1QixDQUFDLEdBQUdDLFNBQUosQ0FBdkIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUlYLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS1ksSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFTSixLQUFULENBQWVFLElBQWYsRUFBcUJDLE1BQXJCLEVBQTZCQyxPQUE3QixFQUFzQztBQUNwQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsT0FBYixFQUFzQixDQUFDLEdBQUdDLFNBQUosQ0FBdEIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUlYLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS1ksSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLEVBQXFDTyxLQUFyQyxDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLENBQVA7QUFDRDs7QUFFRCxTQUFTSCxPQUFULENBQWlCQyxPQUFPTyxLQUFLQSxDQUE3QixFQUFnQ04sU0FBU00sS0FBS0EsQ0FBOUMsRUFBaURMLFVBQVUsTUFBTSxJQUFqRSxFQUF1RVEsY0FBYyxLQUFyRixFQUE0RjtBQUMxRixRQUFNQyxLQUFLQyxRQUFRLFNBQVIsQ0FBWDtBQUNBLFNBQU9ILFNBQ0xFLEdBQUdFLE9BQUgsQ0FBV2IsS0FBS1MsS0FBTCxDQUFYLEVBQ0dELElBREgsQ0FDUU0sT0FBUUEsTUFBTWIsT0FBT1EsS0FBUCxDQUFOLEdBQXNCUCxRQUFRTyxLQUFSLENBRHRDLEVBRUdELElBRkgsQ0FFUU8sS0FBTUwsY0FBY0QsS0FBZCxHQUFzQk0sQ0FGcEMsQ0FERjtBQUlEIiwiZmlsZSI6ImNvbmRpdGlvbmFsLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQcm9taXNlTGlrZSB9IGZyb20gJy4vbW9kdWxlcy91dGlscydcblxuZXhwb3J0IGRlZmF1bHQge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_errors__ = __webpack_require__(/*! ./modules/errors */ 1);


/* harmony default export */ __webpack_exports__["a"] = ({ all, reject, delay, _delay });

function all(promises) {
  const FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  const keys = Object.getOwnPropertyNames(obj);
  const values = keys.map(key => obj[key]);
  return Promise.all(values).then(results => results.reduce((obj, val, index) => {
    var _Object$assign;

    const key = keys[index];
    return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
  }, {}));
}

function reject(err) {
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error(`Reject only accepts a new instance of Error!`);
}

function _delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new __WEBPACK_IMPORTED_MODULE_0__modules_errors__["a" /* FPInputError */]('FP.delay(millisec) requires a numeric arg.');
  return value => new FP(resolve => {
    setTimeout(() => resolve(value), msec);
  });
}

function delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [...arguments]);
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbIkZQSW5wdXRFcnJvciIsImFsbCIsInJlamVjdCIsImRlbGF5IiwiX2RlbGF5IiwicHJvbWlzZXMiLCJGUCIsInJlcXVpcmUiLCJyZXNvbHZlIiwiQXJyYXkiLCJpc0FycmF5IiwiUHJvbWlzZSIsInByb21pc2VBbGxPYmplY3QiLCJvYmoiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInZhbHVlcyIsIm1hcCIsImtleSIsInRoZW4iLCJyZXN1bHRzIiwicmVkdWNlIiwidmFsIiwiaW5kZXgiLCJhc3NpZ24iLCJlcnIiLCJFcnJvciIsIl9lcnJvciIsIm1zZWMiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJ2YWx1ZSIsInNldFRpbWVvdXQiLCJzdGVwcyIsImFkZFN0ZXAiLCJhcmd1bWVudHMiLCJfRlAiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFlBQVQsUUFBNkIsa0JBQTdCOztBQUVBLGVBQWUsRUFBRUMsR0FBRixFQUFPQyxNQUFQLEVBQWVDLEtBQWYsRUFBc0JDLE1BQXRCLEVBQWY7O0FBRUEsU0FBU0gsR0FBVCxDQUFhSSxRQUFiLEVBQXVCO0FBQ3JCLFFBQU1DLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsU0FBT0QsR0FBR0UsT0FBSCxDQUFXQyxNQUFNQyxPQUFOLENBQWNMLFFBQWQsSUFBMEJNLFFBQVFWLEdBQVIsQ0FBWUksUUFBWixDQUExQixHQUFrRE8saUJBQWlCUCxRQUFqQixDQUE3RCxDQUFQO0FBQ0Q7O0FBRUQsU0FBU08sZ0JBQVQsQ0FBMEJDLEdBQTFCLEVBQStCO0FBQzdCLFFBQU1DLE9BQU9DLE9BQU9DLG1CQUFQLENBQTJCSCxHQUEzQixDQUFiO0FBQ0EsUUFBTUksU0FBU0gsS0FBS0ksR0FBTCxDQUFTQyxPQUFPTixJQUFJTSxHQUFKLENBQWhCLENBQWY7QUFDQSxTQUFPUixRQUFRVixHQUFSLENBQVlnQixNQUFaLEVBQW9CRyxJQUFwQixDQUF5QkMsV0FBV0EsUUFBUUMsTUFBUixDQUFlLENBQUNULEdBQUQsRUFBTVUsR0FBTixFQUFXQyxLQUFYLEtBQXFCO0FBQUE7O0FBQzdFLFVBQU1MLE1BQU1MLEtBQUtVLEtBQUwsQ0FBWjtBQUNBLFdBQU9ULE9BQU9VLE1BQVAsc0NBQWlCTixHQUFqQixJQUF1QkksR0FBdkIsbUJBQThCVixHQUE5QixDQUFQO0FBQ0QsR0FIMEMsRUFHeEMsRUFId0MsQ0FBcEMsQ0FBUDtBQUlEOztBQUVELFNBQVNYLE1BQVQsQ0FBZ0J3QixHQUFoQixFQUFxQjtBQUNuQixNQUFJQSxlQUFlQyxLQUFuQixFQUEwQjtBQUN4QixRQUFJLElBQUosRUFBVSxLQUFLQyxNQUFMLEdBQWNGLEdBQWQ7QUFDVixXQUFPZixRQUFRVCxNQUFSLENBQWV3QixHQUFmLENBQVA7QUFDRDtBQUNELFFBQU0sSUFBSUMsS0FBSixDQUFXLDhDQUFYLENBQU47QUFDRDs7QUFFRCxTQUFTdkIsTUFBVCxDQUFnQnlCLElBQWhCLEVBQXNCO0FBQ3BCLFFBQU12QixLQUFLQyxRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUksQ0FBQ3VCLE9BQU9DLFNBQVAsQ0FBaUJGLElBQWpCLENBQUwsRUFBNkIsTUFBTSxJQUFJN0IsWUFBSixDQUFpQiw0Q0FBakIsQ0FBTjtBQUM3QixTQUFPZ0MsU0FBUyxJQUFJMUIsRUFBSixDQUFPRSxXQUFXO0FBQUV5QixlQUFXLE1BQU16QixRQUFRd0IsS0FBUixDQUFqQixFQUFpQ0gsSUFBakM7QUFBd0MsR0FBNUQsQ0FBaEI7QUFDRDs7QUFFRCxTQUFTMUIsS0FBVCxDQUFlMEIsSUFBZixFQUFxQjtBQUNuQixRQUFNdkIsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFJLEtBQUsyQixLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsRUFBc0IsQ0FBQyxHQUFHQyxTQUFKLENBQXRCLENBQVA7QUFDaEIsU0FBTyxRQUFRLEtBQUtDLEdBQWIsR0FBbUIvQixHQUFHRSxPQUFILENBQVcsS0FBS1ksSUFBTCxDQUFVaEIsT0FBT3lCLElBQVAsQ0FBVixDQUFYLENBQW5CLEdBQXlEekIsT0FBT3lCLElBQVAsR0FBaEU7QUFDRCIsImZpbGUiOiJwcm9taXNlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRlBJbnB1dEVycm9yIH0gZnJvbSAnLi9tb2R1bGVzL2Vycm9ycydcblxuZXhwb3J0IGRlZmF1bHQgeyBhbGwsIHJlamVjdCwgZGVsYXksIF9kZWxheSB9XG5cbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgcmV0dXJuIEZQLnJlc29sdmUoQXJyYXkuaXNBcnJheShwcm9taXNlcykgPyBQcm9taXNlLmFsbChwcm9taXNlcykgOiBwcm9taXNlQWxsT2JqZWN0KHByb21pc2VzKSlcbn1cblxuZnVuY3Rpb24gcHJvbWlzZUFsbE9iamVjdChvYmopIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iailcbiAgY29uc3QgdmFsdWVzID0ga2V5cy5tYXAoa2V5ID0+IG9ialtrZXldKVxuICByZXR1cm4gUHJvbWlzZS5hbGwodmFsdWVzKS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0cy5yZWR1Y2UoKG9iaiwgdmFsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBba2V5XTogdmFsIH0sIG9iailcbiAgfSwge30pKVxufVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGlmICh0aGlzKSB0aGlzLl9lcnJvciA9IGVyclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBSZWplY3Qgb25seSBhY2NlcHRzIGEgbmV3IGluc3RhbmNlIG9mIEVycm9yIWApXG59XG5cbmZ1bmN0aW9uIF9kZWxheShtc2VjKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICBpZiAoIU51bWJlci5pc0ludGVnZXIobXNlYykpIHRocm93IG5ldyBGUElucHV0RXJyb3IoJ0ZQLmRlbGF5KG1pbGxpc2VjKSByZXF1aXJlcyBhIG51bWVyaWMgYXJnLicpXG4gIHJldHVybiB2YWx1ZSA9PiBuZXcgRlAocmVzb2x2ZSA9PiB7IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh2YWx1ZSksIG1zZWMpIH0pXG59XG5cbmZ1bmN0aW9uIGRlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdkZWxheScsIFsuLi5hcmd1bWVudHNdKVxuICByZXR1cm4gdGhpcyAmJiB0aGlzLl9GUCA/IEZQLnJlc29sdmUodGhpcy50aGVuKF9kZWxheShtc2VjKSkpIDogX2RlbGF5KG1zZWMpKClcbn1cbiJdfQ==

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,