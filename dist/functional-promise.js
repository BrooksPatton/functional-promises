/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _require = __webpack_require__(/*! ./modules/errors */ 1),FunctionalError = _require.FunctionalError;var _require2 =
__webpack_require__(/*! ./modules/utils */ 2),isFunction = _require2.isFunction,flatten = _require2.flatten;var _require3 =
__webpack_require__(/*! ./monads */ 4),chain = _require3.chain,chainEnd = _require3.chainEnd;
var FP = FunctionalPromise;

Object.assign(FP.prototype,
__webpack_require__(/*! ./arrays */ 5),
__webpack_require__(/*! ./events */ 6),
__webpack_require__(/*! ./conditional */ 7),
__webpack_require__(/*! ./promise */ 8));

function FunctionalPromise(resolveRejectCB, unknownArgs) {
  if (!(this instanceof FunctionalPromise)) {return new FunctionalPromise(resolveRejectCB);}
  if (unknownArgs != undefined) throw new Error('FunctionalPromise only accepts 1 argument');
  this._FP = {
    errors: { limit: 1, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4 };

}

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = function (msec) {return FP.resolve().delay(msec);};

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('concurrency', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('quiet', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.errors = { count: 0, limit: limit };
  return this;
};

FP.prototype.get = function get() {for (var _len = arguments.length, keyNames = Array(_len), _key = 0; _key < _len; _key++) {keyNames[_key] = arguments[_key];}
  if (this.steps) return this.addStep('get', [].concat(Array.prototype.slice.call(arguments)));
  keyNames = flatten(keyNames);
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce(function (extracted, key) {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 2) return this.catchIf.apply(this, arguments);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.catch(function (err) {return fn(err);}));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));

  return FP.resolve(this._FP.promise.catch(function (err) {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(function (value) {return fn(value) ? value : value;}));
};

FP.resolve = FP.prototype.resolve = function resolve(value) {
  return new FP(function (resolve, reject) {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
};

FP.promisify = function promisify(cb) {var _this = this;
  return function () {for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}return new FP(function (yah, nah) {return (
        cb.call.apply(cb, [_this].concat(args, [function (err, res) {return err ? nah(err) : yah(res);}])));});};
};

FP.promisifyAll = function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(function (key) {return typeof obj[key] === 'function';}).
  reduce(function (obj, fnName) {
    if (!/Sync/.test(fnName) && !obj[fnName + 'Async']) obj[fnName + 'Async'] = FP.promisify(obj['' + fnName]);
    return obj;
  }, obj);
};

FP.unpack = function unpack() {
  var resolve = void 0,reject = void 0,promise = void 0;
  promise = new Promise(function (yah, nah) {resolve = yah;reject = nah;});
  return { promise: promise, resolve: resolve, reject: reject };
};

module.exports = FunctionalPromise;

if (process && process.on) {
  process.on('uncaughtException', function (e) {return console.error('Process: FATAL EXCEPTION: uncaughtException', e, '\n\n');});
  process.on('unhandledRejection', function (e) {return console.error('Process: FATAL PROMISE ERROR: unhandledRejection', e, '\n\n');});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 3)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var FunctionalError = function (_Error) {_inherits(FunctionalError, _Error);
  function FunctionalError(msg, options) {_classCallCheck(this, FunctionalError);
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }var _this = _possibleConstructorReturn(this, (FunctionalError.__proto__ || Object.getPrototypeOf(FunctionalError)).call(this,
    msg));
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      Object.getOwnPropertyNames(options).
      forEach(function (key) {
        _this[key] = options[key];
      });
    }
    _this.name = _this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(_this, _this.constructor);return _this;
  }return FunctionalError;}(Error);var

FunctionalUserError = function (_FunctionalError) {_inherits(FunctionalUserError, _FunctionalError);function FunctionalUserError() {_classCallCheck(this, FunctionalUserError);return _possibleConstructorReturn(this, (FunctionalUserError.__proto__ || Object.getPrototypeOf(FunctionalUserError)).apply(this, arguments));}return FunctionalUserError;}(FunctionalError);var
FPUnexpectedError = function (_FunctionalError2) {_inherits(FPUnexpectedError, _FunctionalError2);function FPUnexpectedError() {_classCallCheck(this, FPUnexpectedError);return _possibleConstructorReturn(this, (FPUnexpectedError.__proto__ || Object.getPrototypeOf(FPUnexpectedError)).apply(this, arguments));}return FPUnexpectedError;}(FunctionalError);var
FPInputError = function (_FunctionalError3) {_inherits(FPInputError, _FunctionalError3);function FPInputError() {_classCallCheck(this, FPInputError);return _possibleConstructorReturn(this, (FPInputError.__proto__ || Object.getPrototypeOf(FPInputError)).apply(this, arguments));}return FPInputError;}(FunctionalError);var
FPSoftError = function (_FunctionalError4) {_inherits(FPSoftError, _FunctionalError4);function FPSoftError() {_classCallCheck(this, FPSoftError);return _possibleConstructorReturn(this, (FPSoftError.__proto__ || Object.getPrototypeOf(FPSoftError)).apply(this, arguments));}return FPSoftError;}(FunctionalError);var
FPTimeout = function (_FunctionalError5) {_inherits(FPTimeout, _FunctionalError5);function FPTimeout() {_classCallCheck(this, FPTimeout);return _possibleConstructorReturn(this, (FPTimeout.__proto__ || Object.getPrototypeOf(FPTimeout)).apply(this, arguments));}return FPTimeout;}(FunctionalError);

module.exports = {
  FunctionalError: FunctionalError,
  FunctionalUserError: FunctionalUserError,
  FPUnexpectedError: FPUnexpectedError,
  FPInputError: FPInputError,
  FPSoftError: FPSoftError,
  FPTimeout: FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJtc2ciLCJvcHRpb25zIiwibWVzc2FnZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwia2V5IiwibmFtZSIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InFuQ0FBTUEsZTtBQUNKLDJCQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLFFBQU9ELEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCLEtBSnVCO0FBS2xCRixPQUxrQjtBQU14QixRQUFJLFFBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDL0JFLGFBQU9DLG1CQUFQLENBQTJCSCxPQUEzQjtBQUNHSSxhQURILENBQ1csZUFBTztBQUNkLGNBQUtDLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FISDtBQUlEO0FBQ0QsVUFBS0MsSUFBTCxHQUFZLE1BQUtDLFdBQUwsQ0FBaUJELElBQTdCO0FBQ0E7QUFDQUUsVUFBTUMsaUJBQU4sUUFBOEIsTUFBS0YsV0FBbkMsRUFkd0I7QUFlekIsRyx5QkFoQjJCQyxLOztBQWtCeEJFLG1CLHdVQUE0QlosZTtBQUM1QmEsaUIsOFRBQTBCYixlO0FBQzFCYyxZLGdTQUFxQmQsZTtBQUNyQmUsVywwUkFBb0JmLGU7QUFDcEJnQixTLDhRQUFrQmhCLGU7O0FBRXhCaUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbEIsa0NBRGU7QUFFZlksMENBRmU7QUFHZkMsc0NBSGU7QUFJZkMsNEJBSmU7QUFLZkMsMEJBTGU7QUFNZkMsc0JBTmUsRUFBakIiLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRnVuY3Rpb25hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihtc2csIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBtc2dcbiAgICAgIGlmICggbXNnLm1lc3NhZ2UgKSBtc2cgPSBtc2cubWVzc2FnZVxuICAgIH1cbiAgICBzdXBlcihtc2cpXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucylcbiAgICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICB0aGlzW2tleV0gPSBvcHRpb25zW2tleV1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH1cbn1cbmNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dCxcbn1cbiJdfQ==

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var utils = module.exports = {
  isPromiseLike: function isPromiseLike(p) {return p && typeof p.then === 'function';},

  isFunction: function isFunction(fn) {return typeof fn === 'function';},

  isEnumerable: function isEnumerable(list) {return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';},

  flatten: function flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce(function (results, item) {return results.concat(Array.isArray(item) ? utils.flatten(item) : [item]);}, []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsInJlc3VsdHMiLCJpdGVtIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxlQUQ2Qix5QkFDZkMsQ0FEZSxFQUNaLENBQUUsT0FBT0EsS0FBSyxPQUFPQSxFQUFFQyxJQUFULEtBQWtCLFVBQTlCLENBQTBDLENBRGhDOztBQUc3QkMsWUFINkIsc0JBR2xCQyxFQUhrQixFQUdkLENBQUUsT0FBTyxPQUFPQSxFQUFQLEtBQWMsVUFBckIsQ0FBaUMsQ0FIckI7O0FBSzdCQyxjQUw2Qix3QkFLaEJDLElBTGdCLEVBS1YsQ0FBRSxPQUFPQSxRQUFRQyxNQUFNQyxPQUFOLENBQWNGLElBQWQsQ0FBUixJQUErQixPQUFPQSxLQUFLRyxPQUFPQyxRQUFaLENBQVAsS0FBaUMsVUFBdkUsQ0FBbUYsQ0FMM0U7O0FBTzdCQyxTQVA2QixtQkFPckJDLEdBUHFCLEVBT2hCO0FBQ1gsUUFBSSxDQUFDTCxNQUFNQyxPQUFOLENBQWNJLEdBQWQsQ0FBTCxFQUF5QixNQUFNLElBQUlDLEtBQUosQ0FBVSxpREFBVixDQUFOO0FBQ3pCLFdBQU9ELElBQUlFLE1BQUosQ0FBVyxVQUFDQyxPQUFELEVBQVVDLElBQVYsVUFBbUJELFFBQVFFLE1BQVIsQ0FBZVYsTUFBTUMsT0FBTixDQUFjUSxJQUFkLElBQXNCbkIsTUFBTWMsT0FBTixDQUFjSyxJQUFkLENBQXRCLEdBQTRDLENBQUNBLElBQUQsQ0FBM0QsQ0FBbkIsRUFBWCxFQUFrRyxFQUFsRyxDQUFQO0FBQ0QsR0FWNEIsRUFBL0IiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBpc1Byb21pc2VMaWtlKHApIHsgcmV0dXJuIHAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRnVuY3Rpb24oZm4pIHsgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRW51bWVyYWJsZShsaXN0KSB7IHJldHVybiBsaXN0ICYmIEFycmF5LmlzQXJyYXkobGlzdCkgfHwgdHlwZW9mIGxpc3RbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGZsYXR0ZW4oYXJyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHRocm93IG5ldyBFcnJvcignTWV0aG9kIGBmbGF0dGVuYCByZXF1aXJlcyB2YWxpZCBhcnJheSBwYXJhbWV0ZXInKVxuICAgIHJldHVybiBhcnIucmVkdWNlKChyZXN1bHRzLCBpdGVtKSA9PiByZXN1bHRzLmNvbmNhdChBcnJheS5pc0FycmF5KGl0ZW0pID8gdXRpbHMuZmxhdHRlbihpdGVtKSA6IFtpdGVtXSksIFtdKVxuICB9XG59XG4iXX0=

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { chain: chain, chainEnd: chainEnd


  /**
                                                     * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                                     * @returns FunctionalPromise
                                                     */ };
function chain() {
  var FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  var promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);

  return function (input) {
    return new FP(function (resolve, reject) {
      var iterator = _this.steps[Symbol.iterator]();

      var next = function next(promise) {
        var current = iterator.next();
        if (current.done) return resolve(promise);var _current$value = _slicedToArray(
        current.value, 3),fnName = _current$value[0],args = _current$value[2];
        return next(promise[fnName].apply(promise, _toConsumableArray(args)));
      };
      next(FP.resolve(input));
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwicmVqZWN0IiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJuZXh0IiwiY3VycmVudCIsImRvbmUiLCJ2YWx1ZSIsImZuTmFtZSIsImFyZ3MiLCJpbnB1dCJdLCJtYXBwaW5ncyI6ImkwQkFBeUJBLFFBQVEsa0JBQVIsQyxDQUFqQkMsWSxZQUFBQSxZOztBQUVSQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUVDLFlBQUYsRUFBU0M7OztBQUcxQjs7O3VEQUhpQixFQUFqQjtBQU9BLFNBQVNELEtBQVQsR0FBaUI7QUFDZixNQUFNRSxLQUFLTixRQUFRLFNBQVIsQ0FBWDtBQUNBO0FBQ0EsTUFBTU8sVUFBVUQsR0FBR0UsT0FBSCxFQUFoQjtBQUNBRCxVQUFRRSxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsU0FBT0YsT0FBUDtBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixRQUFULEdBQW9CO0FBQ2xCLE1BQU1DLEtBQUtOLFFBQVEsU0FBUixDQUFYOztBQUVBLFNBQU8saUJBQVM7QUFDZCxXQUFPLElBQUlNLEVBQUosQ0FBTyxVQUFDRSxPQUFELEVBQVVFLE1BQVYsRUFBcUI7QUFDakMsVUFBTUMsV0FBVyxNQUFLRixLQUFMLENBQVdHLE9BQU9ELFFBQWxCLEdBQWpCOztBQUVBLFVBQU1FLE9BQU8sU0FBUEEsSUFBTyxVQUFXO0FBQ3RCLFlBQU1DLFVBQVVILFNBQVNFLElBQVQsRUFBaEI7QUFDQSxZQUFJQyxRQUFRQyxJQUFaLEVBQWtCLE9BQU9QLFFBQVFELE9BQVIsQ0FBUCxDQUZJO0FBR0dPLGdCQUFRRSxLQUhYLEtBR2ZDLE1BSGUscUJBR0xDLElBSEs7QUFJdEIsZUFBT0wsS0FBS04sUUFBUVUsTUFBUixvQ0FBbUJDLElBQW5CLEVBQUwsQ0FBUDtBQUNELE9BTEQ7QUFNQUwsV0FBS1AsR0FBR0UsT0FBSCxDQUFXVyxLQUFYLENBQUw7QUFDRCxLQVZNLENBQVA7QUFXRCxHQVpEO0FBYUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBGUElucHV0RXJyb3IgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY2hhaW4sIGNoYWluRW5kIH1cblxuXG4vKipcbiAqIFN0YXJ0ICdyZWNvcmRpbmcnIGEgY2hhaW4gb2YgY29tbWFuZHMsIGFmdGVyIHN0ZXBzIGRlZmluZWQgY2FsbCBgLmNoYWluRW5kKClgXG4gKiBAcmV0dXJucyBGdW5jdGlvbmFsUHJvbWlzZVxuICovXG5mdW5jdGlvbiBjaGFpbigpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgLy8gY3JlYXRlIGEgcGxhY2Vob2xkZXIvaW5pdGlhbCBwcm9taXNlIHRvIGhvbGQgdGhlIHN0ZXBzL2NoYWluIGRhdGFcbiAgY29uc3QgcHJvbWlzZSA9IEZQLnJlc29sdmUoKVxuICBwcm9taXNlLnN0ZXBzID0gW11cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuLyoqXG4gKiBDYWxsIGFmdGVyIHN0YXJ0aW5nIGEgYC5jaGFpbigpYC5cbiAqXG4gKiBPbmUgb2YgdGhlIGZldyBub24tY2hhaW5hYmxlIG1ldGhvZHMgaW4gdGhlIEFQSS5cbiAqIEByZXR1cm5zIGEgRnVuY3Rpb24uIEl0IHJ1bnMgeW91ciBmdW5jdGlvbmFsIGNoYWluIVxuICovXG5mdW5jdGlvbiBjaGFpbkVuZCgpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcblxuICByZXR1cm4gaW5wdXQgPT4ge1xuICAgIHJldHVybiBuZXcgRlAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLnN0ZXBzW1N5bWJvbC5pdGVyYXRvcl0oKVxuXG4gICAgICBjb25zdCBuZXh0ID0gcHJvbWlzZSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KClcbiAgICAgICAgaWYgKGN1cnJlbnQuZG9uZSkgcmV0dXJuIHJlc29sdmUocHJvbWlzZSlcbiAgICAgICAgY29uc3QgW2ZuTmFtZSwgLCBhcmdzXSA9IGN1cnJlbnQudmFsdWVcbiAgICAgICAgcmV0dXJuIG5leHQocHJvbWlzZVtmbk5hbWVdKC4uLmFyZ3MpKVxuICAgICAgfVxuICAgICAgbmV4dChGUC5yZXNvbHZlKGlucHV0KSlcbiAgICB9KVxuICB9XG59XG4iXX0=

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/utils */ 2),isEnumerable = _require.isEnumerable;var _require2 =
__webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require2.FPInputError,FunctionalError = _require2.FunctionalError;

module.exports = { map: map, find: find, findIndex: findIndex, filter: filter, reduce: reduce };

function find(callback) {return _find.call(this, callback).then(function (_ref) {var item = _ref.item;return item;});}
function findIndex(callback) {return _find.call(this, callback).then(function (_ref2) {var index = _ref2.index;return index;});}

function _find(iterable, callback) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(function (results) {return results && results[0] ?
    { item: results[0], index: results.indexOf(results[0]) } :
    { item: undefined, index: -1 };});
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, function (acc, item) {return Promise.resolve(callback(item)).then(function (x) {return x ? acc.concat([item]) : acc;});}, []);
}

function reduce(iterable, reducer, initVal) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else iterable = FP.resolve(iterable, this);

  return new FP(function (resolve, reject) {
    return iterable.then(function (iterable) {
      var iterator = iterable[Symbol.iterator]();
      var i = 0;

      var next = function next(total) {
        var current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),total = _ref4[0],item = _ref4[1];return next(reducer(total, item, i++));}).catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }
  var resolvedOrRejected = false;
  var threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  var innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  var initialThread = 0;
  var errors = [];
  var count = 0;
  var results = [];
  var threadPool = new Set();
  var threadPoolFull = function threadPoolFull() {return threadPool.size >= threadLimit;};
  var isDone = function isDone() {return count >= args.length || resolvedOrRejected || errors.length > _this._FP.errors.limit;};
  var setResult = function setResult(index) {return function (value) {
      threadPool.delete(index);
      results[index] = value;
      return value;
    };};
  return new FP(function (resolve, reject) {
    var resolveIt = function resolveIt(x) {
      if (resolvedOrRejected) {return null;} else {resolvedOrRejected = true;}
      resolve(x);
    };
    var rejectIt = function rejectIt(x) {
      if (resolvedOrRejected) {return null;} else {resolvedOrRejected = true;}
      reject(x);
    };
    innerValues.then(function (items) {
      args = [].concat(_toConsumableArray(items));
      if (!isEnumerable(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      var complete = function complete() {
        var action = null;
        if (errors.length > _this._FP.errors.limit) action = rejectIt;
        if (isDone()) action = resolveIt;
        if (action) return Promise.all(results).then(function (data) {return action(results);}) ? true : true;
        return false;
      };
      var checkAndRun = function checkAndRun(val) {
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      var runItem = function runItem(c) {
        if (resolvedOrRejected) {return null;} else {count++;}
        if (threadPoolFull()) return setTimeout(function () {return runItem(c);}, 0);
        if (results[c]) return results[c];
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        results[c] = Promise.resolve(args[c]).
        then(function (val) {return fn(val, c, args);}).
        then(function (val) {return setResult(c)(val);}).
        then(checkAndRun).
        catch(function (err) {
          _this._FP.errors.count++;
          errors.push(err);
          if (errors.length > _this._FP.errors.limit) {
            var fpErr = errors.length === 1 ? err : new FunctionalError('Error Limit ' + _this._FP.errors.limit + ' Exceeded. CurrentArrayIndex=' + c + ' ActualNumberOfErrors=' + _this._FP.errors.count, { errors: errors, results: results, ctx: _this });
            Promise.resolve(setResult(c)(err)).then(function () {rejectIt(fpErr);});
          } else {// console.warn('Error OK:', JSON.stringify(this._FP.errors))
            return Promise.resolve().then(function () {return setResult(c)(err);}).then(checkAndRun);
          }
        });

        return results[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) {runItem(initialThread++);}
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = {
  listen: function listen(obj) {var _this = this;for (var _len = arguments.length, eventNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {eventNames[_key - 1] = arguments[_key];}
    if (typeof eventNames === 'string') eventNames = [eventNames];
    if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) throw new FPInputError('Valid EventEmitter required.');
    // Gets callback to attach to the event handlers
    var handler = this.chainEnd();
    this._FP.destroy = function () {return _this._FP.destroyHandles.map(function (fn) {return fn() || true;}).filter(function (v) {return v;}).length;};
    this._FP.destroyHandles = eventNames.map(function (eventName) {
      obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
      return function () {return obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);};
    });
    return this;
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsIl9GUCIsImRlc3Ryb3kiLCJkZXN0cm95SGFuZGxlcyIsIm1hcCIsImZuIiwiZmlsdGVyIiwidiIsImxlbmd0aCIsImV2ZW50TmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJlQUF1QkEsUUFBUSxrQkFBUixDLENBQWhCQyxZLFlBQUFBLFk7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsUUFEZSxrQkFDUkMsR0FEUSxFQUNZLG9EQUFaQyxVQUFZLG1FQUFaQSxVQUFZO0FBQ3pCLFFBQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsUUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RCxNQUFNLElBQUlOLFlBQUosQ0FBaUIsOEJBQWpCLENBQU47QUFDNUQ7QUFDQSxRQUFNTyxVQUFVLEtBQUtDLFFBQUwsRUFBaEI7QUFDQSxTQUFLQyxHQUFMLENBQVNDLE9BQVQsR0FBbUIsb0JBQU0sTUFBS0QsR0FBTCxDQUFTRSxjQUFULENBQXdCQyxHQUF4QixDQUE0QixzQkFBTUMsUUFBUSxJQUFkLEVBQTVCLEVBQWdEQyxNQUFoRCxDQUF1RCxxQkFBS0MsQ0FBTCxFQUF2RCxFQUErREMsTUFBckUsRUFBbkI7QUFDQSxTQUFLUCxHQUFMLENBQVNFLGNBQVQsR0FBMEJOLFdBQVdPLEdBQVgsQ0FBZSxxQkFBYTtBQUNwRFIsVUFBSUEsSUFBSUUsZ0JBQUosR0FBdUIsa0JBQXZCLEdBQTRDLElBQWhELEVBQXNEVyxTQUF0RCxFQUFpRVYsT0FBakU7QUFDQSxhQUFPLG9CQUFNSCxJQUFJQSxJQUFJYyxtQkFBSixHQUEwQixxQkFBMUIsR0FBa0QsS0FBdEQsRUFBNkRELFNBQTdELEVBQXdFVixPQUF4RSxDQUFOLEVBQVA7QUFDRCxLQUh5QixDQUExQjtBQUlBLFdBQU8sSUFBUDtBQUNELEdBWmMsRUFBakIiLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0ZQSW5wdXRFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGxpc3RlbihvYmosIC4uLmV2ZW50TmFtZXMpIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdzdHJpbmcnKSBldmVudE5hbWVzID0gW2V2ZW50TmFtZXNdXG4gICAgaWYgKCFvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignVmFsaWQgRXZlbnRFbWl0dGVyIHJlcXVpcmVkLicpXG4gICAgLy8gR2V0cyBjYWxsYmFjayB0byBhdHRhY2ggdG8gdGhlIGV2ZW50IGhhbmRsZXJzXG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuY2hhaW5FbmQoKVxuICAgIHRoaXMuX0ZQLmRlc3Ryb3kgPSAoKSA9PiB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcy5tYXAoZm4gPT4gZm4oKSB8fCB0cnVlKS5maWx0ZXIodiA9PiB2KS5sZW5ndGhcbiAgICB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcyA9IGV2ZW50TmFtZXMubWFwKGV2ZW50TmFtZSA9PiB7XG4gICAgICBvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgICByZXR1cm4gKCkgPT4gb2JqW29iai5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ29mZiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgICB9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cbn0iXX0=

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/utils */ 2),isPromiseLike = _require.isPromiseLike;

module.exports = { thenIf: thenIf, tapIf: tapIf, _thenIf: _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse, true)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf() {var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {return x;};var ifTrue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {return x;};var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {return null;};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var FP = __webpack_require__(/*! ./index */ 0);
  return function (value) {return (
      FP.resolve(cond(value)).
      then(function (ans) {return ans ? ifTrue(value) : ifFalse(value);}).
      then(function (v) {return returnValue ? value : v;}));};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNQcm9taXNlTGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJlQUF3QkEsUUFBUSxpQkFBUixDLENBQWpCQyxhLFlBQUFBLGE7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0MsY0FBRCxFQUFTQyxZQUFULEVBQWdCQyxnQkFBaEIsRUFBakI7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYix1Q0FBMkJDLFNBQTNCLEdBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPLHlCQUFLTyxDQUFMLEVBQVA7QUFDRDtBQUNELE1BQUliLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS2MsSUFBTCxDQUFVLHlCQUFTVCxRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFULEVBQVYsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsdUNBQTBCQyxTQUExQixHQUFQO0FBQ2hCLE1BQUlBLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJMLGFBQVNELElBQVQ7QUFDQUEsV0FBTyx5QkFBS08sQ0FBTCxFQUFQO0FBQ0Q7QUFDRCxNQUFJYixjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtjLElBQUwsQ0FBVSx5QkFBU1QsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBVCxFQUFWLENBQVA7QUFDRDtBQUNELFNBQU9WLFFBQVFDLElBQVIsRUFBY0MsTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsR0FBNEYsS0FBM0VDLElBQTJFLHVFQUFwRSxxQkFBS08sQ0FBTCxFQUFvRSxLQUE1RE4sTUFBNEQsdUVBQW5ELHFCQUFLTSxDQUFMLEVBQW1ELEtBQTNDTCxPQUEyQyx1RUFBakMsb0JBQU0sSUFBTixFQUFpQyxLQUFyQlEsV0FBcUIsdUVBQVAsS0FBTztBQUMxRixNQUFNQyxLQUFLbEIsUUFBUSxTQUFSLENBQVg7QUFDQSxTQUFPO0FBQ0xrQixTQUFHQyxPQUFILENBQVdaLEtBQUtTLEtBQUwsQ0FBWDtBQUNHRCxVQURILENBQ1EsdUJBQVFLLE1BQU1aLE9BQU9RLEtBQVAsQ0FBTixHQUFzQlAsUUFBUU8sS0FBUixDQUE5QixFQURSO0FBRUdELFVBRkgsQ0FFUSxxQkFBTUUsY0FBY0QsS0FBZCxHQUFzQkssQ0FBNUIsRUFGUixDQURLLEdBQVA7QUFJRCIsImZpbGUiOiJjb25kaXRpb25hbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtpc1Byb21pc2VMaWtlfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91dGlscycpXG5cbm1vZHVsZS5leHBvcnRzID0ge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { all: all, cast: cast, reject: reject, delay: delay, _delay: _delay };

function all(promises) {
  var FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  var keys = Object.getOwnPropertyNames(obj);
  var values = keys.map(function (key) {return obj[key];});
  return Promise.all(values).then(function (results) {return results.reduce(function (obj, val, index) {var _Object$assign;
      var key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {});});
}

function cast(obj) {return Promise.resolve(obj);}

function reject(err) {
  // ret._captureStackTrace();
  // ret._rejectCallback(reason, true);
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error('Reject only accepts a new instance of Error!');
}

function _delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new FPInputError('FP.delay(millisec) requires a numeric arg.');
  return function (value) {return new FP(function (resolve) {setTimeout(function () {return resolve(value);}, msec);});};
}

function delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [].concat(Array.prototype.slice.call(arguments)));
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJGUElucHV0RXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwiY2FzdCIsInJlamVjdCIsImRlbGF5IiwiX2RlbGF5IiwicHJvbWlzZXMiLCJGUCIsInJlc29sdmUiLCJBcnJheSIsImlzQXJyYXkiLCJQcm9taXNlIiwicHJvbWlzZUFsbE9iamVjdCIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsdWVzIiwibWFwIiwia2V5IiwidGhlbiIsInJlc3VsdHMiLCJyZWR1Y2UiLCJ2YWwiLCJpbmRleCIsImFzc2lnbiIsImVyciIsIkVycm9yIiwiX2Vycm9yIiwibXNlYyIsIk51bWJlciIsImlzSW50ZWdlciIsInNldFRpbWVvdXQiLCJ2YWx1ZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsIl9GUCJdLCJtYXBwaW5ncyI6ImVBQXlCQSxRQUFRLGtCQUFSLEMsQ0FBakJDLFksWUFBQUEsWTs7QUFFUkMsT0FBT0MsT0FBUCxHQUFpQixFQUFFQyxRQUFGLEVBQU9DLFVBQVAsRUFBYUMsY0FBYixFQUFxQkMsWUFBckIsRUFBNEJDLGNBQTVCLEVBQWpCOztBQUVBLFNBQVNKLEdBQVQsQ0FBYUssUUFBYixFQUF1QjtBQUNyQixNQUFNQyxLQUFLVixRQUFRLElBQVIsQ0FBWDtBQUNBLFNBQU9VLEdBQUdDLE9BQUgsQ0FBV0MsTUFBTUMsT0FBTixDQUFjSixRQUFkLElBQTBCSyxRQUFRVixHQUFSLENBQVlLLFFBQVosQ0FBMUIsR0FBa0RNLGlCQUFpQk4sUUFBakIsQ0FBN0QsQ0FBUDtBQUNEOztBQUVELFNBQVNNLGdCQUFULENBQTBCQyxHQUExQixFQUErQjtBQUM3QixNQUFNQyxPQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkgsR0FBM0IsQ0FBYjtBQUNBLE1BQU1JLFNBQVNILEtBQUtJLEdBQUwsQ0FBUyx1QkFBT0wsSUFBSU0sR0FBSixDQUFQLEVBQVQsQ0FBZjtBQUNBLFNBQU9SLFFBQVFWLEdBQVIsQ0FBWWdCLE1BQVosRUFBb0JHLElBQXBCLENBQXlCLDJCQUFXQyxRQUFRQyxNQUFSLENBQWUsVUFBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDN0UsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBaUJOLEdBQWpCLElBQXVCSSxHQUF2QixtQkFBOEJWLEdBQTlCLENBQVA7QUFDRCxLQUgwQyxFQUd4QyxFQUh3QyxDQUFYLEVBQXpCLENBQVA7QUFJRDs7QUFFRCxTQUFTWCxJQUFULENBQWNXLEdBQWQsRUFBbUIsQ0FBRSxPQUFPRixRQUFRSCxPQUFSLENBQWdCSyxHQUFoQixDQUFQLENBQTZCOztBQUVsRCxTQUFTVixNQUFULENBQWdCdUIsR0FBaEIsRUFBcUI7QUFDbkI7QUFDQTtBQUNBLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9mLFFBQVFSLE1BQVIsQ0FBZXVCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLGdEQUFOO0FBQ0Q7O0FBRUQsU0FBU3RCLE1BQVQsQ0FBZ0J3QixJQUFoQixFQUFzQjtBQUNwQixNQUFNdEIsS0FBS1YsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFJLENBQUNpQyxPQUFPQyxTQUFQLENBQWlCRixJQUFqQixDQUFMLEVBQTZCLE1BQU0sSUFBSS9CLFlBQUosQ0FBaUIsNENBQWpCLENBQU47QUFDN0IsU0FBTyx5QkFBUyxJQUFJUyxFQUFKLENBQU8sbUJBQVcsQ0FBRXlCLFdBQVcsb0JBQU14QixRQUFReUIsS0FBUixDQUFOLEVBQVgsRUFBaUNKLElBQWpDLEVBQXdDLENBQTVELENBQVQsRUFBUDtBQUNEOztBQUVELFNBQVN6QixLQUFULENBQWV5QixJQUFmLEVBQXFCO0FBQ25CLE1BQU10QixLQUFLVixRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUksS0FBS3FDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsT0FBYix1Q0FBMEJDLFNBQTFCLEdBQVA7QUFDaEIsU0FBTyxRQUFRLEtBQUtDLEdBQWIsR0FBbUI5QixHQUFHQyxPQUFILENBQVcsS0FBS1ksSUFBTCxDQUFVZixPQUFPd0IsSUFBUCxDQUFWLENBQVgsQ0FBbkIsR0FBeUR4QixPQUFPd0IsSUFBUCxHQUFoRTtBQUNEIiwiZmlsZSI6InByb21pc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IEZQSW5wdXRFcnJvciB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpXG5cbm1vZHVsZS5leHBvcnRzID0geyBhbGwsIGNhc3QsIHJlamVjdCwgZGVsYXksIF9kZWxheSB9XG5cbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgcmV0dXJuIEZQLnJlc29sdmUoQXJyYXkuaXNBcnJheShwcm9taXNlcykgPyBQcm9taXNlLmFsbChwcm9taXNlcykgOiBwcm9taXNlQWxsT2JqZWN0KHByb21pc2VzKSlcbn1cblxuZnVuY3Rpb24gcHJvbWlzZUFsbE9iamVjdChvYmopIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iailcbiAgY29uc3QgdmFsdWVzID0ga2V5cy5tYXAoa2V5ID0+IG9ialtrZXldKVxuICByZXR1cm4gUHJvbWlzZS5hbGwodmFsdWVzKS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0cy5yZWR1Y2UoKG9iaiwgdmFsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBba2V5XTogdmFsIH0sIG9iailcbiAgfSwge30pKVxufVxuXG5mdW5jdGlvbiBjYXN0KG9iaikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9iaikgfVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIC8vIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgLy8gcmV0Ll9yZWplY3RDYWxsYmFjayhyZWFzb24sIHRydWUpO1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5mdW5jdGlvbiBfZGVsYXkobXNlYykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG1zZWMpKSB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdGUC5kZWxheShtaWxsaXNlYykgcmVxdWlyZXMgYSBudW1lcmljIGFyZy4nKVxuICByZXR1cm4gdmFsdWUgPT4gbmV3IEZQKHJlc29sdmUgPT4geyBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUodmFsdWUpLCBtc2VjKSB9KVxufVxuXG5mdW5jdGlvbiBkZWxheShtc2VjKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZGVsYXknLCBbLi4uYXJndW1lbnRzXSlcbiAgcmV0dXJuIHRoaXMgJiYgdGhpcy5fRlAgPyBGUC5yZXNvbHZlKHRoaXMudGhlbihfZGVsYXkobXNlYykpKSA6IF9kZWxheShtc2VjKSgpXG59XG4iXX0=

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,