/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _require = __webpack_require__(/*! ./modules/errors */ 1),FunctionalError = _require.FunctionalError;var _require2 =
__webpack_require__(/*! ./modules/utils */ 2),isFunction = _require2.isFunction,flatten = _require2.flatten;var _require3 =
__webpack_require__(/*! ./monads */ 4),chain = _require3.chain,chainEnd = _require3.chainEnd;
var FP = FunctionalPromise;

Object.assign(FP.prototype,
__webpack_require__(/*! ./arrays */ 5),
__webpack_require__(/*! ./events */ 6),
__webpack_require__(/*! ./conditional */ 7),
__webpack_require__(/*! ./promise */ 8));

function FunctionalPromise(resolveRejectCB, unknownArgs) {
  if (!(this instanceof FunctionalPromise)) {return new FunctionalPromise(resolveRejectCB);}
  if (unknownArgs != undefined) throw new Error('FunctionalPromise only accepts 1 argument');
  this._FP = {
    errors: { limit: 1, count: 0 },
    concurrencyLimit: 4,
    promise: new Promise(resolveRejectCB) };

}

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = function (msec) {return FP.resolve().delay(msec);};

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('concurrency', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('quiet', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.errors = { count: 0, limit: limit };
  return this;
};

FP.prototype.get = function get() {for (var _len = arguments.length, keyNames = Array(_len), _key = 0; _key < _len; _key++) {keyNames[_key] = arguments[_key];}
  if (this.steps) return this.addStep('get', [].concat(Array.prototype.slice.call(arguments)));
  keyNames = flatten(keyNames);
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce(function (extracted, key) {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 2) return this.catchIf.apply(this, arguments);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.catch(function (err) {return fn(err);}));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));

  return FP.resolve(this._FP.promise.catch(function (err) {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(function (value) {return fn(value) ? value : value;}));
};

FP.resolve = FP.prototype.resolve = function resolve(value) {
  return new FP(function (resolve, reject) {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
};

FP.promisify = function promisify(cb) {var _this = this;
  return function () {for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}return new FP(function (yah, nah) {return (
        cb.call.apply(cb, [_this].concat(args, [function (err, res) {return err ? nah(err) : yah(res);}])));});};
};

FP.promisifyAll = function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(function (key) {return typeof obj[key] === 'function';}).
  reduce(function (obj, fnName) {
    if (!/Sync/.test(fnName) && !obj[fnName + 'Async']) obj[fnName + 'Async'] = FP.promisify(obj['' + fnName]);
    return obj;
  }, obj);
};

FP.unpack = function unpack() {
  var resolve = void 0,reject = void 0,promise = void 0;
  promise = new Promise(function (yah, nah) {resolve = yah;reject = nah;});
  return { promise: promise, resolve: resolve, reject: reject };
};

module.exports = FunctionalPromise;

if (process && process.on) {
  process.on('uncaughtException', function (e) {return console.error('Process: FATAL EXCEPTION: uncaughtException', e, '\n\n');});
  process.on('unhandledRejection', function (e) {return console.error('Process: FATAL PROMISE ERROR: unhandledRejection', e, '\n\n');});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 3)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var FunctionalError = function (_Error) {_inherits(FunctionalError, _Error);
  function FunctionalError(msg, options) {_classCallCheck(this, FunctionalError);
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }var _this = _possibleConstructorReturn(this, (FunctionalError.__proto__ || Object.getPrototypeOf(FunctionalError)).call(this,
    msg));
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      Object.getOwnPropertyNames(options).
      forEach(function (key) {
        _this[key] = options[key];
      });
    }
    _this.name = _this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(_this, _this.constructor);return _this;
  }return FunctionalError;}(Error);var

FunctionalUserError = function (_FunctionalError) {_inherits(FunctionalUserError, _FunctionalError);function FunctionalUserError() {_classCallCheck(this, FunctionalUserError);return _possibleConstructorReturn(this, (FunctionalUserError.__proto__ || Object.getPrototypeOf(FunctionalUserError)).apply(this, arguments));}return FunctionalUserError;}(FunctionalError);var
FPUnexpectedError = function (_FunctionalError2) {_inherits(FPUnexpectedError, _FunctionalError2);function FPUnexpectedError() {_classCallCheck(this, FPUnexpectedError);return _possibleConstructorReturn(this, (FPUnexpectedError.__proto__ || Object.getPrototypeOf(FPUnexpectedError)).apply(this, arguments));}return FPUnexpectedError;}(FunctionalError);var
FPInputError = function (_FunctionalError3) {_inherits(FPInputError, _FunctionalError3);function FPInputError() {_classCallCheck(this, FPInputError);return _possibleConstructorReturn(this, (FPInputError.__proto__ || Object.getPrototypeOf(FPInputError)).apply(this, arguments));}return FPInputError;}(FunctionalError);var
FPSoftError = function (_FunctionalError4) {_inherits(FPSoftError, _FunctionalError4);function FPSoftError() {_classCallCheck(this, FPSoftError);return _possibleConstructorReturn(this, (FPSoftError.__proto__ || Object.getPrototypeOf(FPSoftError)).apply(this, arguments));}return FPSoftError;}(FunctionalError);var
FPTimeout = function (_FunctionalError5) {_inherits(FPTimeout, _FunctionalError5);function FPTimeout() {_classCallCheck(this, FPTimeout);return _possibleConstructorReturn(this, (FPTimeout.__proto__ || Object.getPrototypeOf(FPTimeout)).apply(this, arguments));}return FPTimeout;}(FunctionalError);

module.exports = {
  FunctionalError: FunctionalError,
  FunctionalUserError: FunctionalUserError,
  FPUnexpectedError: FPUnexpectedError,
  FPInputError: FPInputError,
  FPSoftError: FPSoftError,
  FPTimeout: FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJtc2ciLCJvcHRpb25zIiwibWVzc2FnZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwia2V5IiwibmFtZSIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InFuQ0FBTUEsZTtBQUNKLDJCQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLFFBQU9ELEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCLEtBSnVCO0FBS2xCRixPQUxrQjtBQU14QixRQUFJLFFBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDL0JFLGFBQU9DLG1CQUFQLENBQTJCSCxPQUEzQjtBQUNDSSxhQURELENBQ1MsZUFBTztBQUNkLGNBQUtDLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FIRDtBQUlEO0FBQ0QsVUFBS0MsSUFBTCxHQUFZLE1BQUtDLFdBQUwsQ0FBaUJELElBQTdCO0FBQ0E7QUFDQUUsVUFBTUMsaUJBQU4sUUFBOEIsTUFBS0YsV0FBbkMsRUFkd0I7QUFlekIsRyx5QkFoQjJCQyxLOztBQWtCeEJFLG1CLHdVQUE0QlosZTtBQUM1QmEsaUIsOFRBQTBCYixlO0FBQzFCYyxZLGdTQUFxQmQsZTtBQUNyQmUsVywwUkFBb0JmLGU7QUFDcEJnQixTLDhRQUFrQmhCLGU7O0FBRXhCaUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbEIsa0NBRGU7QUFFZlksMENBRmU7QUFHZkMsc0NBSGU7QUFJZkMsNEJBSmU7QUFLZkMsMEJBTGU7QUFNZkMsc0JBTmUsRUFBakIiLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRnVuY3Rpb25hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihtc2csIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBtc2dcbiAgICAgIGlmICggbXNnLm1lc3NhZ2UgKSBtc2cgPSBtc2cubWVzc2FnZVxuICAgIH1cbiAgICBzdXBlcihtc2cpXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucylcbiAgICAgIC5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH1cbn1cbmNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dCxcbn1cbiJdfQ==

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var utils = module.exports = {
  isPromiseLike: function isPromiseLike(p) {return p && typeof p.then === 'function';},

  isFunction: function isFunction(fn) {return typeof fn === 'function';},

  isEnumerable: function isEnumerable(list) {return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';},

  flatten: function flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce(function (results, item) {return results.concat(Array.isArray(item) ? utils.flatten(item) : [item]);}, []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsInJlc3VsdHMiLCJpdGVtIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxlQUQ2Qix5QkFDZkMsQ0FEZSxFQUNaLENBQUUsT0FBT0EsS0FBSyxPQUFPQSxFQUFFQyxJQUFULEtBQWtCLFVBQTlCLENBQTBDLENBRGhDOztBQUc3QkMsWUFINkIsc0JBR2xCQyxFQUhrQixFQUdkLENBQUUsT0FBTyxPQUFPQSxFQUFQLEtBQWMsVUFBckIsQ0FBaUMsQ0FIckI7O0FBSzdCQyxjQUw2Qix3QkFLaEJDLElBTGdCLEVBS1YsQ0FBRSxPQUFPQSxRQUFRQyxNQUFNQyxPQUFOLENBQWNGLElBQWQsQ0FBUixJQUErQixPQUFPQSxLQUFLRyxPQUFPQyxRQUFaLENBQVAsS0FBaUMsVUFBdkUsQ0FBbUYsQ0FMM0U7O0FBTzdCQyxTQVA2QixtQkFPckJDLEdBUHFCLEVBT2hCO0FBQ1gsUUFBSSxDQUFDTCxNQUFNQyxPQUFOLENBQWNJLEdBQWQsQ0FBTCxFQUF5QixNQUFNLElBQUlDLEtBQUosQ0FBVSxpREFBVixDQUFOO0FBQ3pCLFdBQU9ELElBQUlFLE1BQUosQ0FBVyxVQUFDQyxPQUFELEVBQVVDLElBQVYsVUFBbUJELFFBQVFFLE1BQVIsQ0FBZVYsTUFBTUMsT0FBTixDQUFjUSxJQUFkLElBQXNCbkIsTUFBTWMsT0FBTixDQUFjSyxJQUFkLENBQXRCLEdBQTRDLENBQUNBLElBQUQsQ0FBM0QsQ0FBbkIsRUFBWCxFQUFrRyxFQUFsRyxDQUFQO0FBQ0QsR0FWNEIsRUFBL0IiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBpc1Byb21pc2VMaWtlKHApIHsgcmV0dXJuIHAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRnVuY3Rpb24oZm4pIHsgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRW51bWVyYWJsZShsaXN0KSB7IHJldHVybiBsaXN0ICYmIEFycmF5LmlzQXJyYXkobGlzdCkgfHwgdHlwZW9mIGxpc3RbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGZsYXR0ZW4oYXJyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHRocm93IG5ldyBFcnJvcignTWV0aG9kIGBmbGF0dGVuYCByZXF1aXJlcyB2YWxpZCBhcnJheSBwYXJhbWV0ZXInKVxuICAgIHJldHVybiBhcnIucmVkdWNlKChyZXN1bHRzLCBpdGVtKSA9PiByZXN1bHRzLmNvbmNhdChBcnJheS5pc0FycmF5KGl0ZW0pID8gdXRpbHMuZmxhdHRlbihpdGVtKSA6IFtpdGVtXSksIFtdKVxuICB9XG59XG4iXX0=

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJlIiwiY2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNhbGwiLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImxlbmd0aCIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibmV4dFRpY2siLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJpIiwicHVzaCIsIkl0ZW0iLCJhcnJheSIsInByb3RvdHlwZSIsImFwcGx5IiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJuYW1lIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsSUFBSUEsVUFBVUMsT0FBT0MsT0FBUCxHQUFpQixFQUEvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQyxnQkFBSjtBQUNBLElBQUlDLGtCQUFKOztBQUVBLFNBQVNDLGdCQUFULEdBQTRCO0FBQ3hCLFVBQU0sSUFBSUMsS0FBSixDQUFVLGlDQUFWLENBQU47QUFDSDtBQUNELFNBQVNDLG1C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VixFQUFlO0FBQzNCLFVBQU0sSUFBSXBELEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0gsQ0FGRDtBQUdBTixRQUFRMkQsS0FBUixHQUFnQixZQUFXLENBQUUsT0FBTyxDQUFQLENBQVcsQ0FBeEMiLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iXX0=

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { chain: chain, chainEnd: chainEnd


  /**
                                                     * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                                     * @returns FunctionalPromise
                                                     */ };
function chain() {
  var FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  var promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);

  return function (input) {
    return new FP(function (resolve, reject) {
      var iterator = _this.steps[Symbol.iterator]();

      var next = function next(promise) {
        var current = iterator.next();
        if (current.done) return resolve(promise);var _current$value = _slicedToArray(
        current.value, 3),fnName = _current$value[0],args = _current$value[2];
        return next(promise[fnName].apply(promise, _toConsumableArray(args)));
      };
      next(FP.resolve(input));
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwicmVqZWN0IiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJuZXh0IiwiY3VycmVudCIsImRvbmUiLCJ2YWx1ZSIsImZuTmFtZSIsImFyZ3MiLCJpbnB1dCJdLCJtYXBwaW5ncyI6ImkwQkFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFlBQUQsRUFBUUM7OztBQUd6Qjs7O3VEQUhpQixFQUFqQjtBQU9BLFNBQVNELEtBQVQsR0FBaUI7QUFDZixNQUFNRSxLQUFLTixRQUFRLFNBQVIsQ0FBWDtBQUNBO0FBQ0EsTUFBTU8sVUFBVUQsR0FBR0UsT0FBSCxFQUFoQjtBQUNBRCxVQUFRRSxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsU0FBT0YsT0FBUDtBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixRQUFULEdBQW9CO0FBQ2xCLE1BQU1DLEtBQUtOLFFBQVEsU0FBUixDQUFYOztBQUVBLFNBQU8saUJBQVM7QUFDZCxXQUFPLElBQUlNLEVBQUosQ0FBTyxVQUFDRSxPQUFELEVBQVVFLE1BQVYsRUFBcUI7QUFDakMsVUFBTUMsV0FBVyxNQUFLRixLQUFMLENBQVdHLE9BQU9ELFFBQWxCLEdBQWpCOztBQUVBLFVBQU1FLE9BQU8sU0FBUEEsSUFBTyxVQUFXO0FBQ3RCLFlBQU1DLFVBQVVILFNBQVNFLElBQVQsRUFBaEI7QUFDQSxZQUFJQyxRQUFRQyxJQUFaLEVBQWtCLE9BQU9QLFFBQVFELE9BQVIsQ0FBUCxDQUZJO0FBR0dPLGdCQUFRRSxLQUhYLEtBR2ZDLE1BSGUscUJBR0xDLElBSEs7QUFJdEIsZUFBT0wsS0FBS04sUUFBUVUsTUFBUixvQ0FBbUJDLElBQW5CLEVBQUwsQ0FBUDtBQUNELE9BTEQ7QUFNQUwsV0FBS1AsR0FBR0UsT0FBSCxDQUFXVyxLQUFYLENBQUw7QUFDRCxLQVZNLENBQVA7QUFXRCxHQVpEO0FBYUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0ZQSW5wdXRFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7Y2hhaW4sIGNoYWluRW5kfVxuXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGNoYWluKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICAvLyBjcmVhdGUgYSBwbGFjZWhvbGRlci9pbml0aWFsIHByb21pc2UgdG8gaG9sZCB0aGUgc3RlcHMvY2hhaW4gZGF0YVxuICBjb25zdCBwcm9taXNlID0gRlAucmVzb2x2ZSgpXG4gIHByb21pc2Uuc3RlcHMgPSBbXVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG4vKipcbiAqIENhbGwgYWZ0ZXIgc3RhcnRpbmcgYSBgLmNoYWluKClgLlxuICpcbiAqIE9uZSBvZiB0aGUgZmV3IG5vbi1jaGFpbmFibGUgbWV0aG9kcyBpbiB0aGUgQVBJLlxuICogQHJldHVybnMgYSBGdW5jdGlvbi4gSXQgcnVucyB5b3VyIGZ1bmN0aW9uYWwgY2hhaW4hXG4gKi9cbmZ1bmN0aW9uIGNoYWluRW5kKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgcmV0dXJuIG5ldyBGUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuc3RlcHNbU3ltYm9sLml0ZXJhdG9yXSgpXG5cbiAgICAgIGNvbnN0IG5leHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGl0ZXJhdG9yLm5leHQoKVxuICAgICAgICBpZiAoY3VycmVudC5kb25lKSByZXR1cm4gcmVzb2x2ZShwcm9taXNlKVxuICAgICAgICBjb25zdCBbZm5OYW1lLCAsIGFyZ3NdID0gY3VycmVudC52YWx1ZVxuICAgICAgICByZXR1cm4gbmV4dChwcm9taXNlW2ZuTmFtZV0oLi4uYXJncykpXG4gICAgICB9XG4gICAgICBuZXh0KEZQLnJlc29sdmUoaW5wdXQpKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/utils */ 2),isEnumerable = _require.isEnumerable;var _require2 =
__webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require2.FPInputError,FunctionalError = _require2.FunctionalError;

module.exports = { map: map, find: find, findIndex: findIndex, filter: filter, reduce: reduce };

function find(callback) {
  return _find.call(this, callback).then(function (_ref) {var item = _ref.item;return item;});
}
function findIndex(callback) {
  return _find.call(this, callback).then(function (_ref2) {var index = _ref2.index;return index;});
}

function _find(iterable, callback) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(function (results) {return results && results[0] ?
    { item: results[0], index: results.indexOf(results[0]) } :
    { item: undefined, index: -1 };});
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, function (aggregate, item) {
    return Promise.resolve(callback(item)).then(function (value) {return value ? aggregate.concat([item]) : aggregate;});
  }, []);
}

function reduce(iterable, reducer, initVal) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else {
    iterable = FP.resolve(iterable, this);
  }
  return new FP(function (resolve, reject) {
    return iterable.then(function (iterable) {
      var iterator = iterable[Symbol.iterator]();
      var i = 0;

      var next = function next(total) {
        var current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),total = _ref4[0],item = _ref4[1];return next(reducer(total, item, i++));}).
        catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }

  var resolvedOrRejected = false;
  var threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  var innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  var initialThread = 0;
  var errors = [];
  var count = 0;
  var results = [],altResults = [];
  var threadPool = new Set();
  var threadPoolFull = function threadPoolFull() {return threadPool.size >= threadLimit;};
  var isDone = function isDone() {return count >= args.length || resolvedOrRejected || errors.length > _this._FP.errors.limit;};
  var setResult = function setResult(index) {return function (value) {
      threadPool.delete(index);
      results[index] = value;
      return value;
    };};

  return new FP(function (resolve, reject) {
    var resolveIt = function resolveIt(x) {
      if (resolvedOrRejected) return;
      resolvedOrRejected = true;
      resolve(x);
    };
    var rejectIt = function rejectIt(x) {
      if (resolvedOrRejected) return;
      resolvedOrRejected = true;
      reject(x);
    };
    innerValues.then(function (items) {
      args = [].concat(_toConsumableArray(items));
      if (!isEnumerable(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      var complete = function complete() {
        if (errors.length > _this._FP.errors.limit) {
          Promise.all(altResults).
          then(function (data) {return rejectIt(results);});
          return true;
        }
        if (isDone()) {
          Promise.all(altResults).
          then(function (data) {return resolveIt(results);});
          return true;
        }
        return false;
      };
      var checkAndRun = function checkAndRun(val) {
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      var runItem = function runItem(c) {
        if (resolvedOrRejected) return;
        count++;
        if (threadPoolFull()) return setTimeout(function () {return runItem(c);}, 0);
        // const isComplete = complete()
        if (results[c]) {
          // console.error('completed/processing item already', c, results[c])
          return results[c];
        }
        // if (!isDone()) {
        //   return results
        // }
        // .then(results => {
        //   console.log('altResults', altResults)
        //   resolve(results)
        // })
        // const result = [args[c], c]
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        altResults[c] = Promise.resolve(args[c]).
        then(function (val) {return fn(val, c, args);}).
        then(function (val) {return setResult(c)(val);}).
        then(checkAndRun).
        catch(function (err) {
          _this._FP.errors.count++;
          errors.push(err);
          if (errors.length > _this._FP.errors.limit) {
            var fpErr = errors.length === 1 ? err : new FunctionalError('Error Limit ' + _this._FP.errors.limit + ' Exceeded. CurrentArrayIndex=' + c + ' ActualNumberOfErrors=' + _this._FP.errors.count, { errors: errors, results: results, ctx: _this });
            // console.warn('Error Limit:', c, JSON.stringify(this._FP.errors))
            Promise.resolve(setResult(c)(err)).
            then(function () {
              // console.log('\nAHHHHH SHOULD END RUNNING NOW-ish!!!!!!!!!\n')
              rejectIt(fpErr);
            });
          } else {
            // console.warn('Error OK:', JSON.stringify(this._FP.errors))
            // console.dir(err)
            return Promise.
            resolve().
            then(function () {return setResult(c)(err);}).
            then(checkAndRun);
          }
          // return err
        });

        return altResults[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) {runItem(initialThread++);}
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { listen: listen };

function listen(obj) {for (var _len = arguments.length, eventNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {eventNames[_key - 1] = arguments[_key];}
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) {
    throw new FPInputError('Input object isn\'t a valid EventEmitter or similar.');
  }

  // Sets up the handlers
  var handler = this.chainEnd();
  // console.log(`   > Attaching ${eventNames} handler`, eventNames)
  this.cleanupHandles = eventNames.map(function (eventName) {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return function () {return obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);};
  });

  return this;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsImNsZWFudXBIYW5kbGVzIiwibWFwIiwiZXZlbnROYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6ImVBQXVCQSxRQUFRLGtCQUFSLEMsQ0FBaEJDLFksWUFBQUEsWTs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxjQUFELEVBQWpCOztBQUVBLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQW9DLG1DQUFaQyxVQUFZLG1FQUFaQSxVQUFZO0FBQ2xDLE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RDtBQUMxRCxVQUFNLElBQUlOLFlBQUosQ0FBaUIsc0RBQWpCLENBQU47QUFDRDs7QUFFRDtBQUNBLE1BQU1PLFVBQVUsS0FBS0MsUUFBTCxFQUFoQjtBQUNBO0FBQ0EsT0FBS0MsY0FBTCxHQUFzQkosV0FBV0ssR0FBWCxDQUFlLHFCQUFhO0FBQ2hETixRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RLLFNBQXRELEVBQWlFSixPQUFqRTtBQUNBLFdBQU8sb0JBQU1ILElBQUlBLElBQUlRLG1CQUFKLEdBQTBCLHFCQUExQixHQUFrRCxLQUF0RCxFQUE2REQsU0FBN0QsRUFBd0VKLE9BQXhFLENBQU4sRUFBUDtBQUNELEdBSHFCLENBQXRCOztBQUtBLFNBQU8sSUFBUDtBQUNEIiwiZmlsZSI6ImV2ZW50cy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtGUElucHV0RXJyb3J9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpXG5cbm1vZHVsZS5leHBvcnRzID0ge2xpc3Rlbn1cblxuZnVuY3Rpb24gbGlzdGVuKG9iaiwgLi4uZXZlbnROYW1lcykge1xuICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdzdHJpbmcnKSBldmVudE5hbWVzID0gW2V2ZW50TmFtZXNdXG4gIGlmICghb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10pIHtcbiAgICB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdJbnB1dCBvYmplY3QgaXNuXFwndCBhIHZhbGlkIEV2ZW50RW1pdHRlciBvciBzaW1pbGFyLicpXG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIC8vIGNvbnNvbGUubG9nKGAgICA+IEF0dGFjaGluZyAke2V2ZW50TmFtZXN9IGhhbmRsZXJgLCBldmVudE5hbWVzKVxuICB0aGlzLmNsZWFudXBIYW5kbGVzID0gZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lID0+IHtcbiAgICBvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgcmV0dXJuICgpID0+IG9ialtvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA/ICdyZW1vdmVFdmVudExpc3RlbmVyJyA6ICdvZmYnXShldmVudE5hbWUsIGhhbmRsZXIpXG4gIH0pXG5cbiAgcmV0dXJuIHRoaXNcbn1cbiJdfQ==

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/utils */ 2),isPromiseLike = _require.isPromiseLike;

module.exports = { thenIf: thenIf, tapIf: tapIf, _thenIf: _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse, true)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf() {var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {return x;};var ifTrue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {return x;};var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {return null;};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var FP = __webpack_require__(/*! ./index */ 0);
  return function (value) {return (
      FP.resolve(cond(value)).
      then(function (ans) {return ans ? ifTrue(value) : ifFalse(value);}).
      then(function (v) {return returnValue ? value : v;}));};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNQcm9taXNlTGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJlQUF3QkEsUUFBUSxpQkFBUixDLENBQWpCQyxhLFlBQUFBLGE7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0MsY0FBRCxFQUFTQyxZQUFULEVBQWdCQyxnQkFBaEIsRUFBakI7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYix1Q0FBMkJDLFNBQTNCLEdBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPLHlCQUFLTyxDQUFMLEVBQVA7QUFDRDtBQUNELE1BQUliLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS2MsSUFBTCxDQUFVLHlCQUFTVCxRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFULEVBQVYsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsdUNBQTBCQyxTQUExQixHQUFQO0FBQ2hCLE1BQUlBLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJMLGFBQVNELElBQVQ7QUFDQUEsV0FBTyx5QkFBS08sQ0FBTCxFQUFQO0FBQ0Q7QUFDRCxNQUFJYixjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtjLElBQUwsQ0FBVSx5QkFBU1QsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBVCxFQUFWLENBQVA7QUFDRDtBQUNELFNBQU9WLFFBQVFDLElBQVIsRUFBY0MsTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsR0FBNEYsS0FBM0VDLElBQTJFLHVFQUFwRSxxQkFBS08sQ0FBTCxFQUFvRSxLQUE1RE4sTUFBNEQsdUVBQW5ELHFCQUFLTSxDQUFMLEVBQW1ELEtBQTNDTCxPQUEyQyx1RUFBakMsb0JBQU0sSUFBTixFQUFpQyxLQUFyQlEsV0FBcUIsdUVBQVAsS0FBTztBQUMxRixNQUFNQyxLQUFLbEIsUUFBUSxTQUFSLENBQVg7QUFDQSxTQUFPO0FBQ0xrQixTQUFHQyxPQUFILENBQVdaLEtBQUtTLEtBQUwsQ0FBWDtBQUNHRCxVQURILENBQ1EsdUJBQVFLLE1BQU1aLE9BQU9RLEtBQVAsQ0FBTixHQUFzQlAsUUFBUU8sS0FBUixDQUE5QixFQURSO0FBRUdELFVBRkgsQ0FFUSxxQkFBTUUsY0FBY0QsS0FBZCxHQUFzQkssQ0FBNUIsRUFGUixDQURLLEdBQVA7QUFJRCIsImZpbGUiOiJjb25kaXRpb25hbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtpc1Byb21pc2VMaWtlfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91dGlscycpXG5cbm1vZHVsZS5leHBvcnRzID0ge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { all: all, cast: cast, reject: reject, delay: delay, _delay: _delay };

function all(promises) {
  var FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  var keys = Object.getOwnPropertyNames(obj);
  var values = keys.map(function (key) {return obj[key];});
  return Promise.all(values).then(function (results) {return results.reduce(function (obj, val, index) {var _Object$assign;
      var key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {});});
}

function cast(obj) {return Promise.resolve(obj);}

function reject(err) {
  // ret._captureStackTrace();
  // ret._rejectCallback(reason, true);
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error('Reject only accepts a new instance of Error!');
}

function _delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new FPInputError('FP.delay(millisec) requires a numeric arg.');
  return function (value) {return new FP(function (resolve) {setTimeout(function () {return resolve(value);}, msec);});};
}

function delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [].concat(Array.prototype.slice.call(arguments)));
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJGUElucHV0RXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwiY2FzdCIsInJlamVjdCIsImRlbGF5IiwiX2RlbGF5IiwicHJvbWlzZXMiLCJGUCIsInJlc29sdmUiLCJBcnJheSIsImlzQXJyYXkiLCJQcm9taXNlIiwicHJvbWlzZUFsbE9iamVjdCIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsdWVzIiwibWFwIiwia2V5IiwidGhlbiIsInJlc3VsdHMiLCJyZWR1Y2UiLCJ2YWwiLCJpbmRleCIsImFzc2lnbiIsImVyciIsIkVycm9yIiwiX2Vycm9yIiwibXNlYyIsIk51bWJlciIsImlzSW50ZWdlciIsInNldFRpbWVvdXQiLCJ2YWx1ZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsIl9GUCJdLCJtYXBwaW5ncyI6ImVBQXVCQSxRQUFRLGtCQUFSLEMsQ0FBaEJDLFksWUFBQUEsWTs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxRQUFELEVBQU1DLFVBQU4sRUFBWUMsY0FBWixFQUFvQkMsWUFBcEIsRUFBMkJDLGNBQTNCLEVBQWpCOztBQUVBLFNBQVNKLEdBQVQsQ0FBYUssUUFBYixFQUF1QjtBQUNyQixNQUFNQyxLQUFLVixRQUFRLElBQVIsQ0FBWDtBQUNBLFNBQU9VLEdBQUdDLE9BQUgsQ0FBV0MsTUFBTUMsT0FBTixDQUFjSixRQUFkLElBQTBCSyxRQUFRVixHQUFSLENBQVlLLFFBQVosQ0FBMUIsR0FBa0RNLGlCQUFpQk4sUUFBakIsQ0FBN0QsQ0FBUDtBQUNEOztBQUVELFNBQVNNLGdCQUFULENBQTBCQyxHQUExQixFQUErQjtBQUM3QixNQUFNQyxPQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkgsR0FBM0IsQ0FBYjtBQUNBLE1BQU1JLFNBQVNILEtBQUtJLEdBQUwsQ0FBUyx1QkFBT0wsSUFBSU0sR0FBSixDQUFQLEVBQVQsQ0FBZjtBQUNBLFNBQU9SLFFBQVFWLEdBQVIsQ0FBWWdCLE1BQVosRUFBb0JHLElBQXBCLENBQXlCLDJCQUFXQyxRQUFRQyxNQUFSLENBQWUsVUFBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDM0UsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBZ0JOLEdBQWhCLElBQXNCSSxHQUF0QixtQkFBNEJWLEdBQTVCLENBQVA7QUFDRCxLQUh3QyxFQUd0QyxFQUhzQyxDQUFYLEVBQXpCLENBQVA7QUFJRDs7QUFFRCxTQUFTWCxJQUFULENBQWNXLEdBQWQsRUFBbUIsQ0FBRSxPQUFPRixRQUFRSCxPQUFSLENBQWdCSyxHQUFoQixDQUFQLENBQTZCOztBQUVsRCxTQUFTVixNQUFULENBQWdCdUIsR0FBaEIsRUFBcUI7QUFDbkI7QUFDQTtBQUNBLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9mLFFBQVFSLE1BQVIsQ0FBZXVCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLGdEQUFOO0FBQ0Q7O0FBRUQsU0FBU3RCLE1BQVQsQ0FBZ0J3QixJQUFoQixFQUFzQjtBQUNwQixNQUFNdEIsS0FBS1YsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFJLENBQUNpQyxPQUFPQyxTQUFQLENBQWlCRixJQUFqQixDQUFMLEVBQTZCLE1BQU0sSUFBSS9CLFlBQUosQ0FBaUIsNENBQWpCLENBQU47QUFDN0IsU0FBTyx5QkFBUyxJQUFJUyxFQUFKLENBQU8sbUJBQVcsQ0FBRXlCLFdBQVcsb0JBQU14QixRQUFReUIsS0FBUixDQUFOLEVBQVgsRUFBaUNKLElBQWpDLEVBQXdDLENBQTVELENBQVQsRUFBUDtBQUNEOztBQUVELFNBQVN6QixLQUFULENBQWV5QixJQUFmLEVBQXFCO0FBQ25CLE1BQU10QixLQUFLVixRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUksS0FBS3FDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsT0FBYix1Q0FBMEJDLFNBQTFCLEdBQVA7QUFDaEIsU0FBTyxRQUFRLEtBQUtDLEdBQWIsR0FBbUI5QixHQUFHQyxPQUFILENBQVcsS0FBS1ksSUFBTCxDQUFVZixPQUFPd0IsSUFBUCxDQUFWLENBQVgsQ0FBbkIsR0FBeUR4QixPQUFPd0IsSUFBUCxHQUFoRTtBQUNEIiwiZmlsZSI6InByb21pc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7RlBJbnB1dEVycm9yfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHthbGwsIGNhc3QsIHJlamVjdCwgZGVsYXksIF9kZWxheX1cblxuZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICByZXR1cm4gRlAucmVzb2x2ZShBcnJheS5pc0FycmF5KHByb21pc2VzKSA/IFByb21pc2UuYWxsKHByb21pc2VzKSA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5mdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKVxuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gb2JqW2tleV0pXG4gIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMpLnRoZW4ocmVzdWx0cyA9PiByZXN1bHRzLnJlZHVjZSgob2JqLCB2YWwsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2luZGV4XVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1trZXldOiB2YWx9LCBvYmopXG4gICAgfSwge30pKVxufVxuXG5mdW5jdGlvbiBjYXN0KG9iaikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9iaikgfVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIC8vIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgLy8gcmV0Ll9yZWplY3RDYWxsYmFjayhyZWFzb24sIHRydWUpO1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5mdW5jdGlvbiBfZGVsYXkobXNlYykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG1zZWMpKSB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdGUC5kZWxheShtaWxsaXNlYykgcmVxdWlyZXMgYSBudW1lcmljIGFyZy4nKVxuICByZXR1cm4gdmFsdWUgPT4gbmV3IEZQKHJlc29sdmUgPT4geyBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUodmFsdWUpLCBtc2VjKSB9KVxufVxuXG5mdW5jdGlvbiBkZWxheShtc2VjKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZGVsYXknLCBbLi4uYXJndW1lbnRzXSlcbiAgcmV0dXJuIHRoaXMgJiYgdGhpcy5fRlAgPyBGUC5yZXNvbHZlKHRoaXMudGhlbihfZGVsYXkobXNlYykpKSA6IF9kZWxheShtc2VjKSgpXG59XG4iXX0=

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,