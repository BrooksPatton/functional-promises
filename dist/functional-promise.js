/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _require = __webpack_require__(/*! ./modules/errors */ 1),FunctionalError = _require.FunctionalError;var _require2 =
__webpack_require__(/*! ./modules/utils */ 2),isFunction = _require2.isFunction,flatten = _require2.flatten;var _require3 =
__webpack_require__(/*! ./monads */ 4),chain = _require3.chain,chainEnd = _require3.chainEnd;
var FP = FunctionalPromise;

Object.assign(FP.prototype,
__webpack_require__(/*! ./arrays */ 5),
__webpack_require__(/*! ./events */ 6),
__webpack_require__(/*! ./conditional */ 7),
__webpack_require__(/*! ./promise */ 8));

function FunctionalPromise(resolveRejectCB, unknownArgs) {
  if (!(this instanceof FunctionalPromise)) {return new FunctionalPromise(resolveRejectCB);}
  if (unknownArgs != undefined) throw new Error('FunctionalPromise only accepts 1 argument');
  this._FP = {
    errors: { limit: 1, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4 };

}

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = function (msec) {return FP.resolve().delay(msec);};

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('concurrency', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet() {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('quiet', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.errors = { count: 0, limit: limit };
  return this;
};

FP.prototype.get = function get() {for (var _len = arguments.length, keyNames = Array(_len), _key = 0; _key < _len; _key++) {keyNames[_key] = arguments[_key];}
  if (this.steps) return this.addStep('get', [].concat(Array.prototype.slice.call(arguments)));
  keyNames = flatten(keyNames);
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce(function (extracted, key) {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 2) return this.catchIf.apply(this, arguments);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.catch(function (err) {return fn(err);}));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));

  return FP.resolve(this._FP.promise.catch(function (err) {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(function (value) {return fn(value) ? value : value;}));
};

FP.resolve = FP.prototype.resolve = function resolve(value) {
  return new FP(function (resolve, reject) {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
};

FP.promisify = function promisify(cb) {var _this = this;
  return function () {for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}return new FP(function (yah, nah) {return (
        cb.call.apply(cb, [_this].concat(args, [function (err, res) {return err ? nah(err) : yah(res);}])));});};
};

FP.promisifyAll = function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(function (key) {return typeof obj[key] === 'function';}).
  reduce(function (obj, fnName) {
    if (!/Sync/.test(fnName) && !obj[fnName + 'Async']) obj[fnName + 'Async'] = FP.promisify(obj['' + fnName]);
    return obj;
  }, obj);
};

FP.unpack = function unpack() {
  var resolve = void 0,reject = void 0,promise = void 0;
  promise = new Promise(function (yah, nah) {resolve = yah;reject = nah;});
  return { promise: promise, resolve: resolve, reject: reject };
};

module.exports = FunctionalPromise;

if (process && process.on) {
  process.on('uncaughtException', function (e) {return console.error('Process: FATAL EXCEPTION: uncaughtException', e, '\n\n');});
  process.on('unhandledRejection', function (e) {return console.error('Process: FATAL PROMISE ERROR: unhandledRejection', e, '\n\n');});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 3)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var FunctionalError = function (_Error) {_inherits(FunctionalError, _Error);
  function FunctionalError(msg, options) {_classCallCheck(this, FunctionalError);
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }var _this = _possibleConstructorReturn(this, (FunctionalError.__proto__ || Object.getPrototypeOf(FunctionalError)).call(this,
    msg));
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      Object.getOwnPropertyNames(options).
      forEach(function (key) {
        _this[key] = options[key];
      });
    }
    _this.name = _this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(_this, _this.constructor);return _this;
  }return FunctionalError;}(Error);var

FunctionalUserError = function (_FunctionalError) {_inherits(FunctionalUserError, _FunctionalError);function FunctionalUserError() {_classCallCheck(this, FunctionalUserError);return _possibleConstructorReturn(this, (FunctionalUserError.__proto__ || Object.getPrototypeOf(FunctionalUserError)).apply(this, arguments));}return FunctionalUserError;}(FunctionalError);var
FPUnexpectedError = function (_FunctionalError2) {_inherits(FPUnexpectedError, _FunctionalError2);function FPUnexpectedError() {_classCallCheck(this, FPUnexpectedError);return _possibleConstructorReturn(this, (FPUnexpectedError.__proto__ || Object.getPrototypeOf(FPUnexpectedError)).apply(this, arguments));}return FPUnexpectedError;}(FunctionalError);var
FPInputError = function (_FunctionalError3) {_inherits(FPInputError, _FunctionalError3);function FPInputError() {_classCallCheck(this, FPInputError);return _possibleConstructorReturn(this, (FPInputError.__proto__ || Object.getPrototypeOf(FPInputError)).apply(this, arguments));}return FPInputError;}(FunctionalError);var
FPSoftError = function (_FunctionalError4) {_inherits(FPSoftError, _FunctionalError4);function FPSoftError() {_classCallCheck(this, FPSoftError);return _possibleConstructorReturn(this, (FPSoftError.__proto__ || Object.getPrototypeOf(FPSoftError)).apply(this, arguments));}return FPSoftError;}(FunctionalError);var
FPTimeout = function (_FunctionalError5) {_inherits(FPTimeout, _FunctionalError5);function FPTimeout() {_classCallCheck(this, FPTimeout);return _possibleConstructorReturn(this, (FPTimeout.__proto__ || Object.getPrototypeOf(FPTimeout)).apply(this, arguments));}return FPTimeout;}(FunctionalError);

module.exports = {
  FunctionalError: FunctionalError,
  FunctionalUserError: FunctionalUserError,
  FPUnexpectedError: FPUnexpectedError,
  FPInputError: FPInputError,
  FPSoftError: FPSoftError,
  FPTimeout: FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJtc2ciLCJvcHRpb25zIiwibWVzc2FnZSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJmb3JFYWNoIiwia2V5IiwibmFtZSIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InFuQ0FBTUEsZTtBQUNKLDJCQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLFFBQU9ELEdBQVAseUNBQU9BLEdBQVAsT0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCLEtBSnVCO0FBS2xCRixPQUxrQjtBQU14QixRQUFJLFFBQU9DLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDL0JFLGFBQU9DLG1CQUFQLENBQTJCSCxPQUEzQjtBQUNHSSxhQURILENBQ1csZUFBTztBQUNkLGNBQUtDLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FISDtBQUlEO0FBQ0QsVUFBS0MsSUFBTCxHQUFZLE1BQUtDLFdBQUwsQ0FBaUJELElBQTdCO0FBQ0E7QUFDQUUsVUFBTUMsaUJBQU4sUUFBOEIsTUFBS0YsV0FBbkMsRUFkd0I7QUFlekIsRyx5QkFoQjJCQyxLOztBQWtCeEJFLG1CLHdVQUE0QlosZTtBQUM1QmEsaUIsOFRBQTBCYixlO0FBQzFCYyxZLGdTQUFxQmQsZTtBQUNyQmUsVywwUkFBb0JmLGU7QUFDcEJnQixTLDhRQUFrQmhCLGU7O0FBRXhCaUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbEIsa0NBRGU7QUFFZlksMENBRmU7QUFHZkMsc0NBSGU7QUFJZkMsNEJBSmU7QUFLZkMsMEJBTGU7QUFNZkMsc0JBTmUsRUFBakIiLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRnVuY3Rpb25hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihtc2csIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG1zZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBtc2dcbiAgICAgIGlmICggbXNnLm1lc3NhZ2UgKSBtc2cgPSBtc2cubWVzc2FnZVxuICAgIH1cbiAgICBzdXBlcihtc2cpXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucylcbiAgICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICB0aGlzW2tleV0gPSBvcHRpb25zW2tleV1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH1cbn1cbmNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dCxcbn1cbiJdfQ==

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var utils = module.exports = {
  isPromiseLike: function isPromiseLike(p) {return p && typeof p.then === 'function';},

  isFunction: function isFunction(fn) {return typeof fn === 'function';},

  isEnumerable: function isEnumerable(list) {return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';},

  flatten: function flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce(function (results, item) {return results.concat(Array.isArray(item) ? utils.flatten(item) : [item]);}, []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsInJlc3VsdHMiLCJpdGVtIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxlQUQ2Qix5QkFDZkMsQ0FEZSxFQUNaLENBQUUsT0FBT0EsS0FBSyxPQUFPQSxFQUFFQyxJQUFULEtBQWtCLFVBQTlCLENBQTBDLENBRGhDOztBQUc3QkMsWUFINkIsc0JBR2xCQyxFQUhrQixFQUdkLENBQUUsT0FBTyxPQUFPQSxFQUFQLEtBQWMsVUFBckIsQ0FBaUMsQ0FIckI7O0FBSzdCQyxjQUw2Qix3QkFLaEJDLElBTGdCLEVBS1YsQ0FBRSxPQUFPQSxRQUFRQyxNQUFNQyxPQUFOLENBQWNGLElBQWQsQ0FBUixJQUErQixPQUFPQSxLQUFLRyxPQUFPQyxRQUFaLENBQVAsS0FBaUMsVUFBdkUsQ0FBbUYsQ0FMM0U7O0FBTzdCQyxTQVA2QixtQkFPckJDLEdBUHFCLEVBT2hCO0FBQ1gsUUFBSSxDQUFDTCxNQUFNQyxPQUFOLENBQWNJLEdBQWQsQ0FBTCxFQUF5QixNQUFNLElBQUlDLEtBQUosQ0FBVSxpREFBVixDQUFOO0FBQ3pCLFdBQU9ELElBQUlFLE1BQUosQ0FBVyxVQUFDQyxPQUFELEVBQVVDLElBQVYsVUFBbUJELFFBQVFFLE1BQVIsQ0FBZVYsTUFBTUMsT0FBTixDQUFjUSxJQUFkLElBQXNCbkIsTUFBTWMsT0FBTixDQUFjSyxJQUFkLENBQXRCLEdBQTRDLENBQUNBLElBQUQsQ0FBM0QsQ0FBbkIsRUFBWCxFQUFrRyxFQUFsRyxDQUFQO0FBQ0QsR0FWNEIsRUFBL0IiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBpc1Byb21pc2VMaWtlKHApIHsgcmV0dXJuIHAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRnVuY3Rpb24oZm4pIHsgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGlzRW51bWVyYWJsZShsaXN0KSB7IHJldHVybiBsaXN0ICYmIEFycmF5LmlzQXJyYXkobGlzdCkgfHwgdHlwZW9mIGxpc3RbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJyB9LFxuXG4gIGZsYXR0ZW4oYXJyKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHRocm93IG5ldyBFcnJvcignTWV0aG9kIGBmbGF0dGVuYCByZXF1aXJlcyB2YWxpZCBhcnJheSBwYXJhbWV0ZXInKVxuICAgIHJldHVybiBhcnIucmVkdWNlKChyZXN1bHRzLCBpdGVtKSA9PiByZXN1bHRzLmNvbmNhdChBcnJheS5pc0FycmF5KGl0ZW0pID8gdXRpbHMuZmxhdHRlbihpdGVtKSA6IFtpdGVtXSksIFtdKVxuICB9XG59XG4iXX0=

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { chain: chain, chainEnd: chainEnd


  /**
                                                     * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                                     * @returns FunctionalPromise
                                                     */ };
function chain() {
  var FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  var promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);

  return function (input) {
    return new FP(function (resolve, reject) {
      var iterator = _this.steps[Symbol.iterator]();

      var next = function next(promise) {
        var current = iterator.next();
        if (current.done) return resolve(promise);var _current$value = _slicedToArray(
        current.value, 3),fnName = _current$value[0],args = _current$value[2];
        return next(promise[fnName].apply(promise, _toConsumableArray(args)));
      };
      next(FP.resolve(input));
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwicmVqZWN0IiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJuZXh0IiwiY3VycmVudCIsImRvbmUiLCJ2YWx1ZSIsImZuTmFtZSIsImFyZ3MiLCJpbnB1dCJdLCJtYXBwaW5ncyI6ImkwQkFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFlBQUQsRUFBUUM7OztBQUd6Qjs7O3VEQUhpQixFQUFqQjtBQU9BLFNBQVNELEtBQVQsR0FBaUI7QUFDZixNQUFNRSxLQUFLTixRQUFRLFNBQVIsQ0FBWDtBQUNBO0FBQ0EsTUFBTU8sVUFBVUQsR0FBR0UsT0FBSCxFQUFoQjtBQUNBRCxVQUFRRSxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsU0FBT0YsT0FBUDtBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixRQUFULEdBQW9CO0FBQ2xCLE1BQU1DLEtBQUtOLFFBQVEsU0FBUixDQUFYOztBQUVBLFNBQU8saUJBQVM7QUFDZCxXQUFPLElBQUlNLEVBQUosQ0FBTyxVQUFDRSxPQUFELEVBQVVFLE1BQVYsRUFBcUI7QUFDakMsVUFBTUMsV0FBVyxNQUFLRixLQUFMLENBQVdHLE9BQU9ELFFBQWxCLEdBQWpCOztBQUVBLFVBQU1FLE9BQU8sU0FBUEEsSUFBTyxVQUFXO0FBQ3RCLFlBQU1DLFVBQVVILFNBQVNFLElBQVQsRUFBaEI7QUFDQSxZQUFJQyxRQUFRQyxJQUFaLEVBQWtCLE9BQU9QLFFBQVFELE9BQVIsQ0FBUCxDQUZJO0FBR0dPLGdCQUFRRSxLQUhYLEtBR2ZDLE1BSGUscUJBR0xDLElBSEs7QUFJdEIsZUFBT0wsS0FBS04sUUFBUVUsTUFBUixvQ0FBbUJDLElBQW5CLEVBQUwsQ0FBUDtBQUNELE9BTEQ7QUFNQUwsV0FBS1AsR0FBR0UsT0FBSCxDQUFXVyxLQUFYLENBQUw7QUFDRCxLQVZNLENBQVA7QUFXRCxHQVpEO0FBYUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0ZQSW5wdXRFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7Y2hhaW4sIGNoYWluRW5kfVxuXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGNoYWluKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICAvLyBjcmVhdGUgYSBwbGFjZWhvbGRlci9pbml0aWFsIHByb21pc2UgdG8gaG9sZCB0aGUgc3RlcHMvY2hhaW4gZGF0YVxuICBjb25zdCBwcm9taXNlID0gRlAucmVzb2x2ZSgpXG4gIHByb21pc2Uuc3RlcHMgPSBbXVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG4vKipcbiAqIENhbGwgYWZ0ZXIgc3RhcnRpbmcgYSBgLmNoYWluKClgLlxuICpcbiAqIE9uZSBvZiB0aGUgZmV3IG5vbi1jaGFpbmFibGUgbWV0aG9kcyBpbiB0aGUgQVBJLlxuICogQHJldHVybnMgYSBGdW5jdGlvbi4gSXQgcnVucyB5b3VyIGZ1bmN0aW9uYWwgY2hhaW4hXG4gKi9cbmZ1bmN0aW9uIGNoYWluRW5kKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgcmV0dXJuIG5ldyBGUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuc3RlcHNbU3ltYm9sLml0ZXJhdG9yXSgpXG5cbiAgICAgIGNvbnN0IG5leHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGl0ZXJhdG9yLm5leHQoKVxuICAgICAgICBpZiAoY3VycmVudC5kb25lKSByZXR1cm4gcmVzb2x2ZShwcm9taXNlKVxuICAgICAgICBjb25zdCBbZm5OYW1lLCAsIGFyZ3NdID0gY3VycmVudC52YWx1ZVxuICAgICAgICByZXR1cm4gbmV4dChwcm9taXNlW2ZuTmFtZV0oLi4uYXJncykpXG4gICAgICB9XG4gICAgICBuZXh0KEZQLnJlc29sdmUoaW5wdXQpKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/utils */ 2),isEnumerable = _require.isEnumerable;var _require2 =
__webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require2.FPInputError,FunctionalError = _require2.FunctionalError;

module.exports = { map: map, find: find, findIndex: findIndex, filter: filter, reduce: reduce };

function find(callback) {
  return _find.call(this, callback).then(function (_ref) {var item = _ref.item;return item;});
}
function findIndex(callback) {
  return _find.call(this, callback).then(function (_ref2) {var index = _ref2.index;return index;});
}

function _find(iterable, callback) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(function (results) {return results && results[0] ?
    { item: results[0], index: results.indexOf(results[0]) } :
    { item: undefined, index: -1 };});
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, function (aggregate, item) {
    return Promise.resolve(callback(item)).then(function (value) {return value ? aggregate.concat([item]) : aggregate;});
  }, []);
}

function reduce(iterable, reducer, initVal) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else {
    iterable = FP.resolve(iterable, this);
  }
  return new FP(function (resolve, reject) {
    return iterable.then(function (iterable) {
      var iterator = iterable[Symbol.iterator]();
      var i = 0;

      var next = function next(total) {
        var current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),total = _ref4[0],item = _ref4[1];return next(reducer(total, item, i++));}).
        catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }

  var resolvedOrRejected = false;
  var threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  var innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  var initialThread = 0;
  var errors = [];
  var count = 0;
  var results = [],altResults = [];
  var threadPool = new Set();
  var threadPoolFull = function threadPoolFull() {return threadPool.size >= threadLimit;};
  var isDone = function isDone() {return count >= args.length || resolvedOrRejected || errors.length > _this._FP.errors.limit;};
  var setResult = function setResult(index) {return function (value) {
      threadPool.delete(index);
      results[index] = value;
      return value;
    };};

  return new FP(function (resolve, reject) {
    var resolveIt = function resolveIt(x) {
      if (resolvedOrRejected) return;
      resolvedOrRejected = true;
      resolve(x);
    };
    var rejectIt = function rejectIt(x) {
      if (resolvedOrRejected) return;
      resolvedOrRejected = true;
      reject(x);
    };
    innerValues.then(function (items) {
      args = [].concat(_toConsumableArray(items));
      if (!isEnumerable(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      var complete = function complete() {
        if (errors.length > _this._FP.errors.limit) {
          Promise.all(altResults).
          then(function (data) {return rejectIt(results);});
          return true;
        }
        if (isDone()) {
          Promise.all(altResults).
          then(function (data) {return resolveIt(results);});
          return true;
        }
        return false;
      };
      var checkAndRun = function checkAndRun(val) {
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      var runItem = function runItem(c) {
        if (resolvedOrRejected) return;
        count++;
        if (threadPoolFull()) return setTimeout(function () {return runItem(c);}, 0);
        // const isComplete = complete()
        if (results[c]) {
          // console.error('completed/processing item already', c, results[c])
          return results[c];
        }
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        altResults[c] = Promise.resolve(args[c]).
        then(function (val) {return fn(val, c, args);}).
        then(function (val) {return setResult(c)(val);}).
        then(checkAndRun).
        catch(function (err) {
          _this._FP.errors.count++;
          errors.push(err);
          if (errors.length > _this._FP.errors.limit) {
            var fpErr = errors.length === 1 ? err : new FunctionalError('Error Limit ' + _this._FP.errors.limit + ' Exceeded. CurrentArrayIndex=' + c + ' ActualNumberOfErrors=' + _this._FP.errors.count, { errors: errors, results: results, ctx: _this });
            // console.warn('Error Limit:', c, JSON.stringify(this._FP.errors))
            Promise.resolve(setResult(c)(err)).
            then(function () {
              // console.log('\nAHHHHH SHOULD END RUNNING NOW-ish!!!!!!!!!\n')
              rejectIt(fpErr);
            });
          } else {
            // console.warn('Error OK:', JSON.stringify(this._FP.errors))
            return Promise.
            resolve().
            then(function () {return setResult(c)(err);}).
            then(checkAndRun);
          }
        });

        return altResults[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) {runItem(initialThread++);}
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { listen: listen };

function listen(obj) {for (var _len = arguments.length, eventNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {eventNames[_key - 1] = arguments[_key];}
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) {
    throw new FPInputError('Input object isn\'t a valid EventEmitter or similar.');
  }

  // Sets up the handlers
  var handler = this.chainEnd();
  // console.log(`   > Attaching ${eventNames} handler`, eventNames)
  this.cleanupHandles = eventNames.map(function (eventName) {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return function () {return obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);};
  });

  return this;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsImNsZWFudXBIYW5kbGVzIiwibWFwIiwiZXZlbnROYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6ImVBQXVCQSxRQUFRLGtCQUFSLEMsQ0FBaEJDLFksWUFBQUEsWTs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxjQUFELEVBQWpCOztBQUVBLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQW9DLG1DQUFaQyxVQUFZLG1FQUFaQSxVQUFZO0FBQ2xDLE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RDtBQUMxRCxVQUFNLElBQUlOLFlBQUosQ0FBaUIsc0RBQWpCLENBQU47QUFDRDs7QUFFRDtBQUNBLE1BQU1PLFVBQVUsS0FBS0MsUUFBTCxFQUFoQjtBQUNBO0FBQ0EsT0FBS0MsY0FBTCxHQUFzQkosV0FBV0ssR0FBWCxDQUFlLHFCQUFhO0FBQ2hETixRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RLLFNBQXRELEVBQWlFSixPQUFqRTtBQUNBLFdBQU8sb0JBQU1ILElBQUlBLElBQUlRLG1CQUFKLEdBQTBCLHFCQUExQixHQUFrRCxLQUF0RCxFQUE2REQsU0FBN0QsRUFBd0VKLE9BQXhFLENBQU4sRUFBUDtBQUNELEdBSHFCLENBQXRCOztBQUtBLFNBQU8sSUFBUDtBQUNEIiwiZmlsZSI6ImV2ZW50cy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtGUElucHV0RXJyb3J9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpXG5cbm1vZHVsZS5leHBvcnRzID0ge2xpc3Rlbn1cblxuZnVuY3Rpb24gbGlzdGVuKG9iaiwgLi4uZXZlbnROYW1lcykge1xuICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdzdHJpbmcnKSBldmVudE5hbWVzID0gW2V2ZW50TmFtZXNdXG4gIGlmICghb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10pIHtcbiAgICB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdJbnB1dCBvYmplY3QgaXNuXFwndCBhIHZhbGlkIEV2ZW50RW1pdHRlciBvciBzaW1pbGFyLicpXG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIC8vIGNvbnNvbGUubG9nKGAgICA+IEF0dGFjaGluZyAke2V2ZW50TmFtZXN9IGhhbmRsZXJgLCBldmVudE5hbWVzKVxuICB0aGlzLmNsZWFudXBIYW5kbGVzID0gZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lID0+IHtcbiAgICBvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgcmV0dXJuICgpID0+IG9ialtvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA/ICdyZW1vdmVFdmVudExpc3RlbmVyJyA6ICdvZmYnXShldmVudE5hbWUsIGhhbmRsZXIpXG4gIH0pXG5cbiAgcmV0dXJuIHRoaXNcbn1cbiJdfQ==

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/utils */ 2),isPromiseLike = _require.isPromiseLike;

module.exports = { thenIf: thenIf, tapIf: tapIf, _thenIf: _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse, true)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf() {var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {return x;};var ifTrue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {return x;};var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {return null;};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var FP = __webpack_require__(/*! ./index */ 0);
  return function (value) {return (
      FP.resolve(cond(value)).
      then(function (ans) {return ans ? ifTrue(value) : ifFalse(value);}).
      then(function (v) {return returnValue ? value : v;}));};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNQcm9taXNlTGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJlQUF3QkEsUUFBUSxpQkFBUixDLENBQWpCQyxhLFlBQUFBLGE7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0MsY0FBRCxFQUFTQyxZQUFULEVBQWdCQyxnQkFBaEIsRUFBakI7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYix1Q0FBMkJDLFNBQTNCLEdBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPLHlCQUFLTyxDQUFMLEVBQVA7QUFDRDtBQUNELE1BQUliLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS2MsSUFBTCxDQUFVLHlCQUFTVCxRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFULEVBQVYsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsdUNBQTBCQyxTQUExQixHQUFQO0FBQ2hCLE1BQUlBLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJMLGFBQVNELElBQVQ7QUFDQUEsV0FBTyx5QkFBS08sQ0FBTCxFQUFQO0FBQ0Q7QUFDRCxNQUFJYixjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtjLElBQUwsQ0FBVSx5QkFBU1QsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBVCxFQUFWLENBQVA7QUFDRDtBQUNELFNBQU9WLFFBQVFDLElBQVIsRUFBY0MsTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsR0FBNEYsS0FBM0VDLElBQTJFLHVFQUFwRSxxQkFBS08sQ0FBTCxFQUFvRSxLQUE1RE4sTUFBNEQsdUVBQW5ELHFCQUFLTSxDQUFMLEVBQW1ELEtBQTNDTCxPQUEyQyx1RUFBakMsb0JBQU0sSUFBTixFQUFpQyxLQUFyQlEsV0FBcUIsdUVBQVAsS0FBTztBQUMxRixNQUFNQyxLQUFLbEIsUUFBUSxTQUFSLENBQVg7QUFDQSxTQUFPO0FBQ0xrQixTQUFHQyxPQUFILENBQVdaLEtBQUtTLEtBQUwsQ0FBWDtBQUNHRCxVQURILENBQ1EsdUJBQVFLLE1BQU1aLE9BQU9RLEtBQVAsQ0FBTixHQUFzQlAsUUFBUU8sS0FBUixDQUE5QixFQURSO0FBRUdELFVBRkgsQ0FFUSxxQkFBTUUsY0FBY0QsS0FBZCxHQUFzQkssQ0FBNUIsRUFGUixDQURLLEdBQVA7QUFJRCIsImZpbGUiOiJjb25kaXRpb25hbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtpc1Byb21pc2VMaWtlfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91dGlscycpXG5cbm1vZHVsZS5leHBvcnRzID0ge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { all: all, cast: cast, reject: reject, delay: delay, _delay: _delay };

function all(promises) {
  var FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  var keys = Object.getOwnPropertyNames(obj);
  var values = keys.map(function (key) {return obj[key];});
  return Promise.all(values).then(function (results) {return results.reduce(function (obj, val, index) {var _Object$assign;
      var key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {});});
}

function cast(obj) {return Promise.resolve(obj);}

function reject(err) {
  // ret._captureStackTrace();
  // ret._rejectCallback(reason, true);
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error('Reject only accepts a new instance of Error!');
}

function _delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new FPInputError('FP.delay(millisec) requires a numeric arg.');
  return function (value) {return new FP(function (resolve) {setTimeout(function () {return resolve(value);}, msec);});};
}

function delay(msec) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [].concat(Array.prototype.slice.call(arguments)));
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJGUElucHV0RXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwiY2FzdCIsInJlamVjdCIsImRlbGF5IiwiX2RlbGF5IiwicHJvbWlzZXMiLCJGUCIsInJlc29sdmUiLCJBcnJheSIsImlzQXJyYXkiLCJQcm9taXNlIiwicHJvbWlzZUFsbE9iamVjdCIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsdWVzIiwibWFwIiwia2V5IiwidGhlbiIsInJlc3VsdHMiLCJyZWR1Y2UiLCJ2YWwiLCJpbmRleCIsImFzc2lnbiIsImVyciIsIkVycm9yIiwiX2Vycm9yIiwibXNlYyIsIk51bWJlciIsImlzSW50ZWdlciIsInNldFRpbWVvdXQiLCJ2YWx1ZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsIl9GUCJdLCJtYXBwaW5ncyI6ImVBQXVCQSxRQUFRLGtCQUFSLEMsQ0FBaEJDLFksWUFBQUEsWTs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxRQUFELEVBQU1DLFVBQU4sRUFBWUMsY0FBWixFQUFvQkMsWUFBcEIsRUFBMkJDLGNBQTNCLEVBQWpCOztBQUVBLFNBQVNKLEdBQVQsQ0FBYUssUUFBYixFQUF1QjtBQUNyQixNQUFNQyxLQUFLVixRQUFRLElBQVIsQ0FBWDtBQUNBLFNBQU9VLEdBQUdDLE9BQUgsQ0FBV0MsTUFBTUMsT0FBTixDQUFjSixRQUFkLElBQTBCSyxRQUFRVixHQUFSLENBQVlLLFFBQVosQ0FBMUIsR0FBa0RNLGlCQUFpQk4sUUFBakIsQ0FBN0QsQ0FBUDtBQUNEOztBQUVELFNBQVNNLGdCQUFULENBQTBCQyxHQUExQixFQUErQjtBQUM3QixNQUFNQyxPQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkgsR0FBM0IsQ0FBYjtBQUNBLE1BQU1JLFNBQVNILEtBQUtJLEdBQUwsQ0FBUyx1QkFBT0wsSUFBSU0sR0FBSixDQUFQLEVBQVQsQ0FBZjtBQUNBLFNBQU9SLFFBQVFWLEdBQVIsQ0FBWWdCLE1BQVosRUFBb0JHLElBQXBCLENBQXlCLDJCQUFXQyxRQUFRQyxNQUFSLENBQWUsVUFBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDN0UsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBZ0JOLEdBQWhCLElBQXNCSSxHQUF0QixtQkFBNEJWLEdBQTVCLENBQVA7QUFDRCxLQUgwQyxFQUd4QyxFQUh3QyxDQUFYLEVBQXpCLENBQVA7QUFJRDs7QUFFRCxTQUFTWCxJQUFULENBQWNXLEdBQWQsRUFBbUIsQ0FBRSxPQUFPRixRQUFRSCxPQUFSLENBQWdCSyxHQUFoQixDQUFQLENBQTZCOztBQUVsRCxTQUFTVixNQUFULENBQWdCdUIsR0FBaEIsRUFBcUI7QUFDbkI7QUFDQTtBQUNBLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9mLFFBQVFSLE1BQVIsQ0FBZXVCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLGdEQUFOO0FBQ0Q7O0FBRUQsU0FBU3RCLE1BQVQsQ0FBZ0J3QixJQUFoQixFQUFzQjtBQUNwQixNQUFNdEIsS0FBS1YsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFJLENBQUNpQyxPQUFPQyxTQUFQLENBQWlCRixJQUFqQixDQUFMLEVBQTZCLE1BQU0sSUFBSS9CLFlBQUosQ0FBaUIsNENBQWpCLENBQU47QUFDN0IsU0FBTyx5QkFBUyxJQUFJUyxFQUFKLENBQU8sbUJBQVcsQ0FBRXlCLFdBQVcsb0JBQU14QixRQUFReUIsS0FBUixDQUFOLEVBQVgsRUFBaUNKLElBQWpDLEVBQXdDLENBQTVELENBQVQsRUFBUDtBQUNEOztBQUVELFNBQVN6QixLQUFULENBQWV5QixJQUFmLEVBQXFCO0FBQ25CLE1BQU10QixLQUFLVixRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUksS0FBS3FDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsT0FBYix1Q0FBMEJDLFNBQTFCLEdBQVA7QUFDaEIsU0FBTyxRQUFRLEtBQUtDLEdBQWIsR0FBbUI5QixHQUFHQyxPQUFILENBQVcsS0FBS1ksSUFBTCxDQUFVZixPQUFPd0IsSUFBUCxDQUFWLENBQVgsQ0FBbkIsR0FBeUR4QixPQUFPd0IsSUFBUCxHQUFoRTtBQUNEIiwiZmlsZSI6InByb21pc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7RlBJbnB1dEVycm9yfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHthbGwsIGNhc3QsIHJlamVjdCwgZGVsYXksIF9kZWxheX1cblxuZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICByZXR1cm4gRlAucmVzb2x2ZShBcnJheS5pc0FycmF5KHByb21pc2VzKSA/IFByb21pc2UuYWxsKHByb21pc2VzKSA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5mdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKVxuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gb2JqW2tleV0pXG4gIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMpLnRoZW4ocmVzdWx0cyA9PiByZXN1bHRzLnJlZHVjZSgob2JqLCB2YWwsIGluZGV4KSA9PiB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpbmRleF1cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7W2tleV06IHZhbH0sIG9iailcbiAgfSwge30pKVxufVxuXG5mdW5jdGlvbiBjYXN0KG9iaikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9iaikgfVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIC8vIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgLy8gcmV0Ll9yZWplY3RDYWxsYmFjayhyZWFzb24sIHRydWUpO1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5mdW5jdGlvbiBfZGVsYXkobXNlYykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG1zZWMpKSB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdGUC5kZWxheShtaWxsaXNlYykgcmVxdWlyZXMgYSBudW1lcmljIGFyZy4nKVxuICByZXR1cm4gdmFsdWUgPT4gbmV3IEZQKHJlc29sdmUgPT4geyBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUodmFsdWUpLCBtc2VjKSB9KVxufVxuXG5mdW5jdGlvbiBkZWxheShtc2VjKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZGVsYXknLCBbLi4uYXJndW1lbnRzXSlcbiAgcmV0dXJuIHRoaXMgJiYgdGhpcy5fRlAgPyBGUC5yZXNvbHZlKHRoaXMudGhlbihfZGVsYXkobXNlYykpKSA6IF9kZWxheShtc2VjKSgpXG59XG4iXX0=

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9mdW5jdGlvbmFsLXByb21pc2UuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZTA3YmNjMjJhNDE5YzQ0M2UyMWYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9tb25hZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FycmF5cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb25kaXRpb25hbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvbWlzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBlMDdiY2MyMmE0MTljNDQzZTIxZiIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7cmV0dXJuIHR5cGVvZiBvYmo7fSA6IGZ1bmN0aW9uIChvYmopIHtyZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajt9O3ZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKSxGdW5jdGlvbmFsRXJyb3IgPSBfcmVxdWlyZS5GdW5jdGlvbmFsRXJyb3I7dmFyIF9yZXF1aXJlMiA9XG5yZXF1aXJlKCcuL21vZHVsZXMvdXRpbHMnKSxpc0Z1bmN0aW9uID0gX3JlcXVpcmUyLmlzRnVuY3Rpb24sZmxhdHRlbiA9IF9yZXF1aXJlMi5mbGF0dGVuO3ZhciBfcmVxdWlyZTMgPVxucmVxdWlyZSgnLi9tb25hZHMnKSxjaGFpbiA9IF9yZXF1aXJlMy5jaGFpbixjaGFpbkVuZCA9IF9yZXF1aXJlMy5jaGFpbkVuZDtcbnZhciBGUCA9IEZ1bmN0aW9uYWxQcm9taXNlO1xuXG5PYmplY3QuYXNzaWduKEZQLnByb3RvdHlwZSxcbnJlcXVpcmUoJy4vYXJyYXlzJyksXG5yZXF1aXJlKCcuL2V2ZW50cycpLFxucmVxdWlyZSgnLi9jb25kaXRpb25hbCcpLFxucmVxdWlyZSgnLi9wcm9taXNlJykpO1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUHJvbWlzZShyZXNvbHZlUmVqZWN0Q0IsIHVua25vd25BcmdzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBGdW5jdGlvbmFsUHJvbWlzZSkpIHtyZXR1cm4gbmV3IEZ1bmN0aW9uYWxQcm9taXNlKHJlc29sdmVSZWplY3RDQik7fVxuICBpZiAodW5rbm93bkFyZ3MgIT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uYWxQcm9taXNlIG9ubHkgYWNjZXB0cyAxIGFyZ3VtZW50Jyk7XG4gIHRoaXMuX0ZQID0ge1xuICAgIGVycm9yczogeyBsaW1pdDogMSwgY291bnQ6IDAgfSxcbiAgICBwcm9taXNlOiBuZXcgUHJvbWlzZShyZXNvbHZlUmVqZWN0Q0IpLFxuICAgIGNvbmN1cnJlbmN5TGltaXQ6IDQgfTtcblxufVxuXG5GUC5hbGwgPSBGUC5wcm90b3R5cGUuYWxsO1xuRlAudGhlbklmID0gRlAucHJvdG90eXBlLl90aGVuSWY7XG5GUC5kZWxheSA9IGZ1bmN0aW9uIChtc2VjKSB7cmV0dXJuIEZQLnJlc29sdmUoKS5kZWxheShtc2VjKTt9O1xuXG4vLyBNb25hZGljIE1ldGhvZHNcbkZQLmNoYWluID0gY2hhaW47XG5GUC5wcm90b3R5cGUuY2hhaW5FbmQgPSBjaGFpbkVuZDtcblxuRlAucHJvdG90eXBlLmFkZFN0ZXAgPSBmdW5jdGlvbiBhZGRTdGVwKG5hbWUsIGFyZ3MpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHRoaXMuc3RlcHMucHVzaChbbmFtZSwgdGhpcywgYXJnc10pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkZQLnByb3RvdHlwZS5jb25jdXJyZW5jeSA9IGZ1bmN0aW9uIGNvbmN1cnJlbmN5KCkge3ZhciBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogSW5maW5pdHk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdjb25jdXJyZW5jeScsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIHRoaXMuX0ZQLmNvbmN1cnJlbmN5TGltaXQgPSBsaW1pdDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5GUC5wcm90b3R5cGUucXVpZXQgPSBmdW5jdGlvbiBxdWlldCgpIHt2YXIgbGltaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IEluZmluaXR5O1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgncXVpZXQnLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICB0aGlzLl9GUC5lcnJvcnMgPSB7IGNvdW50OiAwLCBsaW1pdDogbGltaXQgfTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5GUC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0KCkge2ZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBrZXlOYW1lcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge2tleU5hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO31cbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2dldCcsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIGtleU5hbWVzID0gZmxhdHRlbihrZXlOYW1lcyk7XG4gIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKG9iaikge1xuICAgIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoa2V5TmFtZXMubGVuZ3RoID09PSAxKSByZXR1cm4gb2JqW2tleU5hbWVzWzBdXTtcbiAgICAgIHJldHVybiBrZXlOYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKGV4dHJhY3RlZCwga2V5KSB7XG4gICAgICAgIGV4dHJhY3RlZFtrZXldID0gb2JqW2tleV07XG4gICAgICAgIHJldHVybiBleHRyYWN0ZWQ7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH0pO1xufTtcblxuRlAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldChrZXlOYW1lLCB2YWx1ZSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnc2V0JywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmopKSA9PT0gJ29iamVjdCcpIG9ialtrZXlOYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiBvYmo7XG4gIH0pO1xufTtcblxuRlAucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gKGZuKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdjYXRjaCcsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSByZXR1cm4gdGhpcy5jYXRjaElmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGlmICghaXNGdW5jdGlvbihmbikpIHRocm93IG5ldyBGdW5jdGlvbmFsRXJyb3IoJ0ludmFsaWQgZm4gYXJndW1lbnQgZm9yIGAuY2F0Y2goZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyAodHlwZW9mIGZuID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihmbikpKTtcbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7cmV0dXJuIGZuKGVycik7fSkpO1xufTtcblxuRlAucHJvdG90eXBlLmNhdGNoSWYgPSBmdW5jdGlvbiBjYXRjaElmKGNvbmRpdGlvbiwgZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ2NhdGNoSWYnLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLmNhdGNoSWYoY29uZGl0aW9uLCBmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArICh0eXBlb2YgZm4gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGZuKSkpO1xuXG4gIHJldHVybiBGUC5yZXNvbHZlKHRoaXMuX0ZQLnByb21pc2UuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChjb25kaXRpb24gJiYgZXJyIGluc3RhbmNlb2YgY29uZGl0aW9uKSByZXR1cm4gZm4oZXJyKTsgLy8gdHJ5IHJlLXRocm93LCBtaWdodCBiZSByZWFsbHkgc2xvdy4uLlxuICAgIHRocm93IGVycjtcbiAgfSkpO1xufTtcblxuRlAucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbiB0aGVuKGZuKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0aGVuJywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC50aGVuKGZuKWAuIE11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudGx5OiAnICsgKHR5cGVvZiBmbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZm4pKSk7XG4gIHJldHVybiBGUC5yZXNvbHZlKHRoaXMuX0ZQLnByb21pc2UudGhlbihmbikpO1xufTtcblxuRlAucHJvdG90eXBlLnRhcCA9IGZ1bmN0aW9uIHRhcChmbikge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgndGFwJywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC50YXAoZm4pYC4gTXVzdCBiZSBhIGZ1bmN0aW9uLiBDdXJyZW50bHk6ICcgKyAodHlwZW9mIGZuID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihmbikpKTtcbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge3JldHVybiBmbih2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlO30pKTtcbn07XG5cbkZQLnJlc29sdmUgPSBGUC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBGUChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUudGhlbikpIHJldHVybiB2YWx1ZS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0pO1xufTtcblxuRlAucHJvbWlzaWZ5ID0gZnVuY3Rpb24gcHJvbWlzaWZ5KGNiKSB7dmFyIF90aGlzID0gdGhpcztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge2FyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTt9cmV0dXJuIG5ldyBGUChmdW5jdGlvbiAoeWFoLCBuYWgpIHtyZXR1cm4gKFxuICAgICAgICBjYi5jYWxsLmFwcGx5KGNiLCBbX3RoaXNdLmNvbmNhdChhcmdzLCBbZnVuY3Rpb24gKGVyciwgcmVzKSB7cmV0dXJuIGVyciA/IG5haChlcnIpIDogeWFoKHJlcyk7fV0pKSk7fSk7fTtcbn07XG5cbkZQLnByb21pc2lmeUFsbCA9IGZ1bmN0aW9uIHByb21pc2lmeUFsbChvYmopIHtcbiAgaWYgKCFvYmogfHwgIU9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSB7dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFyZ3VtZW50IG9iaiBpbiBwcm9taXNpZnlBbGwob2JqKScpO31cbiAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuXG4gIGZpbHRlcihmdW5jdGlvbiAoa2V5KSB7cmV0dXJuIHR5cGVvZiBvYmpba2V5XSA9PT0gJ2Z1bmN0aW9uJzt9KS5cbiAgcmVkdWNlKGZ1bmN0aW9uIChvYmosIGZuTmFtZSkge1xuICAgIGlmICghL1N5bmMvLnRlc3QoZm5OYW1lKSAmJiAhb2JqW2ZuTmFtZSArICdBc3luYyddKSBvYmpbZm5OYW1lICsgJ0FzeW5jJ10gPSBGUC5wcm9taXNpZnkob2JqWycnICsgZm5OYW1lXSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfSwgb2JqKTtcbn07XG5cbkZQLnVucGFjayA9IGZ1bmN0aW9uIHVucGFjaygpIHtcbiAgdmFyIHJlc29sdmUgPSB2b2lkIDAscmVqZWN0ID0gdm9pZCAwLHByb21pc2UgPSB2b2lkIDA7XG4gIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAoeWFoLCBuYWgpIHtyZXNvbHZlID0geWFoO3JlamVjdCA9IG5haDt9KTtcbiAgcmV0dXJuIHsgcHJvbWlzZTogcHJvbWlzZSwgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb25hbFByb21pc2U7XG5cbmlmIChwcm9jZXNzICYmIHByb2Nlc3Mub24pIHtcbiAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBmdW5jdGlvbiAoZSkge3JldHVybiBjb25zb2xlLmVycm9yKCdQcm9jZXNzOiBGQVRBTCBFWENFUFRJT046IHVuY2F1Z2h0RXhjZXB0aW9uJywgZSwgJ1xcblxcbicpO30pO1xuICBwcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCBmdW5jdGlvbiAoZSkge3JldHVybiBjb25zb2xlLmVycm9yKCdQcm9jZXNzOiBGQVRBTCBQUk9NSVNFIEVSUk9SOiB1bmhhbmRsZWRSZWplY3Rpb24nLCBlLCAnXFxuXFxuJyk7fSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNld5SnlaWEYxYVhKbElpd2lSblZ1WTNScGIyNWhiRVZ5Y205eUlpd2lhWE5HZFc1amRHbHZiaUlzSW1ac1lYUjBaVzRpTENKamFHRnBiaUlzSW1Ob1lXbHVSVzVrSWl3aVJsQWlMQ0pHZFc1amRHbHZibUZzVUhKdmJXbHpaU0lzSWs5aWFtVmpkQ0lzSW1GemMybG5iaUlzSW5CeWIzUnZkSGx3WlNJc0luSmxjMjlzZG1WU1pXcGxZM1JEUWlJc0luVnVhMjV2ZDI1QmNtZHpJaXdpZFc1a1pXWnBibVZrSWl3aVJYSnliM0lpTENKZlJsQWlMQ0psY25KdmNuTWlMQ0pzYVcxcGRDSXNJbU52ZFc1MElpd2ljSEp2YldselpTSXNJbEJ5YjIxcGMyVWlMQ0pqYjI1amRYSnlaVzVqZVV4cGJXbDBJaXdpWVd4c0lpd2lkR2hsYmtsbUlpd2lYM1JvWlc1SlppSXNJbVJsYkdGNUlpd2ljbVZ6YjJ4MlpTSXNJbTF6WldNaUxDSmhaR1JUZEdWd0lpd2libUZ0WlNJc0ltRnlaM01pTENKemRHVndjeUlzSW5CMWMyZ2lMQ0pqYjI1amRYSnlaVzVqZVNJc0lrbHVabWx1YVhSNUlpd2lZWEpuZFcxbGJuUnpJaXdpY1hWcFpYUWlMQ0puWlhRaUxDSnJaWGxPWVcxbGN5SXNJblJvWlc0aUxDSnZZbW9pTENKc1pXNW5kR2dpTENKeVpXUjFZMlVpTENKbGVIUnlZV04wWldRaUxDSnJaWGtpTENKelpYUWlMQ0pyWlhsT1lXMWxJaXdpZG1Gc2RXVWlMQ0pqWVhSamFDSXNJbVp1SWl3aVkyRjBZMmhKWmlJc0ltVnljaUlzSW1OdmJtUnBkR2x2YmlJc0luUmhjQ0lzSW5KbGFtVmpkQ0lzSW5CeWIyMXBjMmxtZVNJc0ltTmlJaXdpZVdGb0lpd2libUZvSWl3aVkyRnNiQ0lzSW5KbGN5SXNJbkJ5YjIxcGMybG1lVUZzYkNJc0ltZGxkRkJ5YjNSdmRIbHdaVTltSWl3aVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5SXNJbVpwYkhSbGNpSXNJbVp1VG1GdFpTSXNJblJsYzNRaUxDSjFibkJoWTJzaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljSEp2WTJWemN5SXNJbTl1SWl3aVkyOXVjMjlzWlNJc0ltVnljbTl5SWl3aVpTSmRMQ0p0WVhCd2FXNW5jeUk2SW5kU1FVRnRRMEVzVVVGQlVTeHJRa0ZCVWl4RExFTkJRVFZDUXl4bExGbEJRVUZCTEdVN1FVRkRORUpFTEZGQlFWRXNhVUpCUVZJc1F5eERRVUUxUWtVc1ZTeGhRVUZCUVN4VkxFTkJRVmxETEU4c1lVRkJRVUVzVHp0QlFVTm5Ra2dzVVVGQlVTeFZRVUZTTEVNc1EwRkJOVUpKTEVzc1lVRkJRVUVzU3l4RFFVRlBReXhSTEdGQlFVRkJMRkU3UVVGRFpDeEpRVUZOUXl4TFFVRkxReXhwUWtGQldEczdRVUZGUVVNc1QwRkJUME1zVFVGQlVDeERRVUZqU0N4SFFVRkhTU3hUUVVGcVFqdEJRVU5GVml4UlFVRlJMRlZCUVZJc1EwRkVSanRCUVVWRlFTeFJRVUZSTEZWQlFWSXNRMEZHUmp0QlFVZEZRU3hSUVVGUkxHVkJRVklzUTBGSVJqdEJRVWxGUVN4UlFVRlJMRmRCUVZJc1EwRktSanM3UVVGTlFTeFRRVUZUVHl4cFFrRkJWQ3hEUVVFeVFra3NaVUZCTTBJc1JVRkJORU5ETEZkQlFUVkRMRVZCUVhsRU8wRkJRM1pFTEUxQlFVa3NSVUZCUlN4blFrRkJaMEpNTEdsQ1FVRnNRaXhEUVVGS0xFVkJRVEJETEVOQlFVTXNUMEZCVHl4SlFVRkpRU3hwUWtGQlNpeERRVUZ6UWtrc1pVRkJkRUlzUTBGQlVDeERRVUU0UXp0QlFVTjZSaXhOUVVGSlF5eGxRVUZsUXl4VFFVRnVRaXhGUVVFNFFpeE5RVUZOTEVsQlFVbERMRXRCUVVvc1EwRkJWU3d5UTBGQlZpeERRVUZPTzBGQlF6bENMRTlCUVV0RExFZEJRVXdzUjBGQlZ6dEJRVU5VUXl4WlFVRnJRaXhGUVVGRFF5eFBRVUZQTEVOQlFWSXNSVUZCVjBNc1QwRkJUeXhEUVVGc1FpeEZRVVJVTzBGQlJWUkRMR0ZCUVd0Q0xFbEJRVWxETEU5QlFVb3NRMEZCV1ZRc1pVRkJXaXhEUVVaVU8wRkJSMVJWTEhOQ1FVRnJRaXhEUVVoVUxFVkJRVmc3TzBGQlMwUTdPMEZCUlVSbUxFZEJRVWRuUWl4SFFVRklMRWRCUVZOb1FpeEhRVUZIU1N4VFFVRklMRU5CUVdGWkxFZEJRWFJDTzBGQlEwRm9RaXhIUVVGSGFVSXNUVUZCU0N4SFFVRlpha0lzUjBGQlIwa3NVMEZCU0N4RFFVRmhZeXhQUVVGNlFqdEJRVU5CYkVJc1IwRkJSMjFDTEV0QlFVZ3NSMEZCVnl4M1FrRkJVVzVDTEVkQlFVZHZRaXhQUVVGSUxFZEJRV0ZFTEV0QlFXSXNRMEZCYlVKRkxFbEJRVzVDTEVOQlFWSXNSVUZCV0RzN1FVRkZRVHRCUVVOQmNrSXNSMEZCUjBZc1MwRkJTQ3hIUVVGWFFTeExRVUZZTzBGQlEwRkZMRWRCUVVkSkxGTkJRVWdzUTBGQllVd3NVVUZCWWl4SFFVRjNRa0VzVVVGQmVFSTdPMEZCUlVGRExFZEJRVWRKTEZOQlFVZ3NRMEZCWVd0Q0xFOUJRV0lzUjBGQmRVSXNVMEZCVTBFc1QwRkJWQ3hEUVVGcFFrTXNTVUZCYWtJc1JVRkJkVUpETEVsQlFYWkNMRVZCUVRaQ08wRkJRMnhFTEUxQlFVa3NTMEZCUzBNc1MwRkJWQ3hGUVVGblFpeExRVUZMUVN4TFFVRk1MRU5CUVZkRExFbEJRVmdzUTBGQlowSXNRMEZCUTBnc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllVTXNTVUZCWWl4RFFVRm9RanRCUVVOb1FpeFRRVUZQTEVsQlFWQTdRVUZEUkN4RFFVaEVPenRCUVV0QmVFSXNSMEZCUjBrc1UwRkJTQ3hEUVVGaGRVSXNWMEZCWWl4SFFVRXlRaXhUUVVGVFFTeFhRVUZVTEVkQlFYVkRMRXRCUVd4Q2FFSXNTMEZCYTBJc2RVVkJRVlpwUWl4UlFVRlZPMEZCUTJoRkxFMUJRVWtzUzBGQlMwZ3NTMEZCVkN4RlFVRm5RaXhQUVVGUExFdEJRVXRJTEU5QlFVd3NRMEZCWVN4aFFVRmlMSFZEUVVGblEwOHNVMEZCYUVNc1IwRkJVRHRCUVVOb1FpeFBRVUZMY0VJc1IwRkJUQ3hEUVVGVFRTeG5Ra0ZCVkN4SFFVRTBRa29zUzBGQk5VSTdRVUZEUVN4VFFVRlBMRWxCUVZBN1FVRkRSQ3hEUVVwRU96dEJRVTFCV0N4SFFVRkhTU3hUUVVGSUxFTkJRV0V3UWl4TFFVRmlMRWRCUVhGQ0xGTkJRVk5CTEV0QlFWUXNSMEZCYVVNc1MwRkJiRUp1UWl4TFFVRnJRaXgxUlVGQlZtbENMRkZCUVZVN1FVRkRjRVFzVFVGQlNTeExRVUZMU0N4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwZ3NUMEZCVEN4RFFVRmhMRTlCUVdJc2RVTkJRVEJDVHl4VFFVRXhRaXhIUVVGUU8wRkJRMmhDTEU5QlFVdHdRaXhIUVVGTUxFTkJRVk5ETEUxQlFWUXNSMEZCYTBJc1JVRkJSVVVzVDBGQlR5eERRVUZVTEVWQlFWbEVMRTlCUVU5QkxFdEJRVzVDTEVWQlFXeENPMEZCUTBFc1UwRkJUeXhKUVVGUU8wRkJRMFFzUTBGS1JEczdRVUZOUVZnc1IwRkJSMGtzVTBGQlNDeERRVUZoTWtJc1IwRkJZaXhIUVVGdFFpeFRRVUZUUVN4SFFVRlVMRWRCUVRCQ0xHMURRVUZXUXl4UlFVRlZMR2RFUVVGV1FTeFJRVUZWTzBGQlF6TkRMRTFCUVVrc1MwRkJTMUFzUzBGQlZDeEZRVUZuUWl4UFFVRlBMRXRCUVV0SUxFOUJRVXdzUTBGQllTeExRVUZpTEhWRFFVRjNRazhzVTBGQmVFSXNSMEZCVUR0QlFVTm9Ra2NzWVVGQlYyNURMRkZCUVZGdFF5eFJRVUZTTEVOQlFWZzdRVUZEUVN4VFFVRlBMRXRCUVV0RExFbEJRVXdzUTBGQlZTeFZRVUZEUXl4SFFVRkVMRVZCUVZNN1FVRkRlRUlzVVVGQlNTeFJRVUZQUVN4SFFVRlFMSGxEUVVGUFFTeEhRVUZRTEU5QlFXVXNVVUZCYmtJc1JVRkJOa0k3UVVGRE0wSXNWVUZCU1VZc1UwRkJVMGNzVFVGQlZDeExRVUZ2UWl4RFFVRjRRaXhGUVVFeVFpeFBRVUZQUkN4SlFVRkpSaXhUUVVGVExFTkJRVlFzUTBGQlNpeERRVUZRTzBGQlF6TkNMR0ZCUVU5QkxGTkJRVk5KTEUxQlFWUXNRMEZCWjBJc1ZVRkJRME1zVTBGQlJDeEZRVUZaUXl4SFFVRmFMRVZCUVc5Q08wRkJRM3BEUkN4clFrRkJWVU1zUjBGQlZpeEpRVUZwUWtvc1NVRkJTVWtzUjBGQlNpeERRVUZxUWp0QlFVTkJMR1ZCUVU5RUxGTkJRVkE3UVVGRFJDeFBRVWhOTEVWQlIwb3NSVUZJU1N4RFFVRlFPMEZCU1VRN1FVRkRSQ3hYUVVGUFNDeEhRVUZRTzBGQlEwUXNSMEZVVFN4RFFVRlFPMEZCVlVRc1EwRmlSRHM3UVVGbFFXeERMRWRCUVVkSkxGTkJRVWdzUTBGQllXMURMRWRCUVdJc1IwRkJiVUlzVTBGQlUwRXNSMEZCVkN4RFFVRmhReXhQUVVGaUxFVkJRWE5DUXl4TFFVRjBRaXhGUVVFMlFqdEJRVU01UXl4TlFVRkpMRXRCUVV0b1FpeExRVUZVTEVWQlFXZENMRTlCUVU4c1MwRkJTMGdzVDBGQlRDeERRVUZoTEV0QlFXSXNkVU5CUVhkQ1R5eFRRVUY0UWl4SFFVRlFPMEZCUTJoQ0xGTkJRVThzUzBGQlMwa3NTVUZCVEN4RFFVRlZMR1ZCUVU4N1FVRkRkRUlzVVVGQlNTeFJRVUZQUXl4SFFVRlFMSGxEUVVGUFFTeEhRVUZRTEU5QlFXVXNVVUZCYmtJc1JVRkJOa0pCTEVsQlFVbE5MRTlCUVVvc1NVRkJaVU1zUzBGQlpqdEJRVU0zUWl4WFFVRlBVQ3hIUVVGUU8wRkJRMFFzUjBGSVRTeERRVUZRTzBGQlNVUXNRMEZPUkRzN1FVRlJRV3hETEVkQlFVZEpMRk5CUVVnc1EwRkJZWE5ETEV0QlFXSXNSMEZCY1VJc1ZVRkJVME1zUlVGQlZDeEZRVUZoTzBGQlEyaERMRTFCUVVrc1MwRkJTMnhDTEV0QlFWUXNSVUZCWjBJc1QwRkJUeXhMUVVGTFNDeFBRVUZNTEVOQlFXRXNUMEZCWWl4MVEwRkJNRUpQTEZOQlFURkNMRWRCUVZBN1FVRkRhRUlzVFVGQlNVRXNWVUZCVlUwc1RVRkJWaXhMUVVGeFFpeERRVUY2UWl4RlFVRTBRaXhQUVVGUExFdEJRVXRUTEU5QlFVd3NZVUZCWjBKbUxGTkJRV2hDTEVOQlFWQTdRVUZETlVJc1RVRkJTU3hEUVVGRGFrTXNWMEZCVnl0RExFVkJRVmdzUTBGQlRDeEZRVUZ4UWl4TlFVRk5MRWxCUVVsb1JDeGxRVUZLTEVOQlFXOUNMR3RHUVVGcFJtZEVMRVZCUVdwR0xIbERRVUZwUmtFc1JVRkJha1lzUlVGQmNFSXNRMEZCVGp0QlFVTnlRaXhUUVVGUE0wTXNSMEZCUjI5Q0xFOUJRVWdzUTBGQlZ5eExRVUZMV0N4SFFVRk1MRU5CUVZOSkxFOUJRVlFzUTBGQmFVSTJRaXhMUVVGcVFpeERRVUYxUWl4MVFrRkJUME1zUjBGQlIwVXNSMEZCU0N4RFFVRlFMRVZCUVhaQ0xFTkJRVmdzUTBGQlVEdEJRVU5FTEVOQlRFUTdPMEZCVDBFM1F5eEhRVUZIU1N4VFFVRklMRU5CUVdGM1F5eFBRVUZpTEVkQlFYVkNMRk5CUVZOQkxFOUJRVlFzUTBGQmFVSkZMRk5CUVdwQ0xFVkJRVFJDU0N4RlFVRTFRaXhGUVVGblF6dEJRVU55UkN4TlFVRkpMRXRCUVV0c1FpeExRVUZVTEVWQlFXZENMRTlCUVU4c1MwRkJTMGdzVDBGQlRDeERRVUZoTEZOQlFXSXNkVU5CUVRSQ1R5eFRRVUUxUWl4SFFVRlFPMEZCUTJoQ0xFMUJRVWtzUTBGQlEycERMRmRCUVZjclF5eEZRVUZZTEVOQlFVd3NSVUZCY1VJc1RVRkJUU3hKUVVGSmFFUXNaVUZCU2l4RFFVRnZRaXdyUmtGQk9FWm5SQ3hGUVVFNVJpeDVRMEZCT0VaQkxFVkJRVGxHTEVWQlFYQkNMRU5CUVU0N08wRkJSWEpDTEZOQlFVOHpReXhIUVVGSGIwSXNUMEZCU0N4RFFVRlhMRXRCUVV0WUxFZEJRVXdzUTBGQlUwa3NUMEZCVkN4RFFVRnBRalpDTEV0QlFXcENMRU5CUVhWQ0xHVkJRVTg3UVVGRE9VTXNVVUZCU1Vrc1lVRkJZVVFzWlVGQlpVTXNVMEZCYUVNc1JVRkJNa01zVDBGQlQwZ3NSMEZCUjBVc1IwRkJTQ3hEUVVGUUxFTkJSRWNzUTBGRFdUdEJRVU14UkN4VlFVRk5RU3hIUVVGT08wRkJRMFFzUjBGSWFVSXNRMEZCV0N4RFFVRlFPMEZCU1VRc1EwRlNSRHM3UVVGVlFUZERMRWRCUVVkSkxGTkJRVWdzUTBGQllUWkNMRWxCUVdJc1IwRkJiMElzVTBGQlUwRXNTVUZCVkN4RFFVRmpWU3hGUVVGa0xFVkJRV3RDTzBGQlEzQkRMRTFCUVVrc1MwRkJTMnhDTEV0QlFWUXNSVUZCWjBJc1QwRkJUeXhMUVVGTFNDeFBRVUZNTEVOQlFXRXNUVUZCWWl4MVEwRkJlVUpQTEZOQlFYcENMRWRCUVZBN1FVRkRhRUlzVFVGQlNTeERRVUZEYWtNc1YwRkJWeXRETEVWQlFWZ3NRMEZCVEN4RlFVRnhRaXhOUVVGTkxFbEJRVWxvUkN4bFFVRktMRU5CUVc5Q0xHbEdRVUZuUm1kRUxFVkJRV2hHTEhsRFFVRm5Sa0VzUlVGQmFFWXNSVUZCY0VJc1EwRkJUanRCUVVOeVFpeFRRVUZQTTBNc1IwRkJSMjlDTEU5QlFVZ3NRMEZCVnl4TFFVRkxXQ3hIUVVGTUxFTkJRVk5KTEU5QlFWUXNRMEZCYVVKdlFpeEpRVUZxUWl4RFFVRnpRbFVzUlVGQmRFSXNRMEZCV0N4RFFVRlFPMEZCUTBRc1EwRktSRHM3UVVGTlFUTkRMRWRCUVVkSkxGTkJRVWdzUTBGQllUSkRMRWRCUVdJc1IwRkJiVUlzVTBGQlUwRXNSMEZCVkN4RFFVRmhTaXhGUVVGaUxFVkJRV2xDTzBGQlEyeERMRTFCUVVrc1MwRkJTMnhDTEV0QlFWUXNSVUZCWjBJc1QwRkJUeXhMUVVGTFNDeFBRVUZNTEVOQlFXRXNTMEZCWWl4MVEwRkJkMEpQTEZOQlFYaENMRWRCUVZBN1FVRkRhRUlzVFVGQlNTeERRVUZEYWtNc1YwRkJWeXRETEVWQlFWZ3NRMEZCVEN4RlFVRnhRaXhOUVVGTkxFbEJRVWxvUkN4bFFVRktMRU5CUVc5Q0xHZEdRVUVyUldkRUxFVkJRUzlGTEhsRFFVRXJSVUVzUlVGQkwwVXNSVUZCY0VJc1EwRkJUanRCUVVOeVFpeFRRVUZQTTBNc1IwRkJSMjlDTEU5QlFVZ3NRMEZCVnl4TFFVRkxXQ3hIUVVGTUxFTkJRVk5KTEU5QlFWUXNRMEZCYVVKdlFpeEpRVUZxUWl4RFFVRnpRaXg1UWtGQlUxVXNSMEZCUjBZc1MwRkJTQ3hKUVVGWlFTeExRVUZhTEVkQlFXOUNRU3hMUVVFM1FpeEZRVUYwUWl4RFFVRllMRU5CUVZBN1FVRkRSQ3hEUVVwRU96dEJRVTFCZWtNc1IwRkJSMjlDTEU5QlFVZ3NSMEZCWVhCQ0xFZEJRVWRKTEZOQlFVZ3NRMEZCWVdkQ0xFOUJRV0lzUjBGQmRVSXNVMEZCVTBFc1QwRkJWQ3hEUVVGcFFuRkNMRXRCUVdwQ0xFVkJRWGRDTzBGQlF6RkVMRk5CUVU4c1NVRkJTWHBETEVWQlFVb3NRMEZCVHl4VlFVRkRiMElzVDBGQlJDeEZRVUZWTkVJc1RVRkJWaXhGUVVGeFFqdEJRVU5xUXl4UlFVRkpVQ3hUUVVGVE4wTXNWMEZCVnpaRExFMUJRVTFTTEVsQlFXcENMRU5CUVdJc1JVRkJjVU1zVDBGQlQxRXNUVUZCVFZJc1NVRkJUaXhEUVVGWFlpeFBRVUZZTEVWQlFXOUNjMElzUzBGQmNFSXNRMEZCTUVKTkxFMUJRVEZDTEVOQlFWQTdRVUZEY2tNMVFpeFpRVUZSY1VJc1MwRkJVanRCUVVORUxFZEJTRTBzUTBGQlVEdEJRVWxFTEVOQlRFUTdPMEZCVDBGNlF5eEhRVUZIYVVRc1UwRkJTQ3hIUVVGbExGTkJRVk5CTEZOQlFWUXNRMEZCYlVKRExFVkJRVzVDTEVWQlFYVkNPMEZCUTNCRExGTkJRVThzWjBSQlFVa3hRaXhKUVVGS0xIRkVRVUZKUVN4SlFVRktMRzFEUVVGaExFbEJRVWw0UWl4RlFVRktMRU5CUVU4c1ZVRkJRMjFFTEVkQlFVUXNSVUZCVFVNc1IwRkJUanRCUVVONlFrWXNWMEZCUjBjc1NVRkJTQ3d3UWtGQmFVSTNRaXhKUVVGcVFpeEhRVUYxUWl4VlFVRkRjVUlzUjBGQlJDeEZRVUZOVXl4SFFVRk9MRlZCUVdOVUxFMUJRVTFQTEVsQlFVbFFMRWRCUVVvc1EwRkJUaXhIUVVGcFFrMHNTVUZCU1Vjc1IwRkJTaXhEUVVFdlFpeEZRVUYyUWl4SFFVUjVRaXhIUVVGUUxFTkJRV0lzUlVGQlVEdEJRVVZFTEVOQlNFUTdPMEZCUzBGMFJDeEhRVUZIZFVRc1dVRkJTQ3hIUVVGclFpeFRRVUZUUVN4WlFVRlVMRU5CUVhOQ2NrSXNSMEZCZEVJc1JVRkJNa0k3UVVGRE0wTXNUVUZCU1N4RFFVRkRRU3hIUVVGRUxFbEJRVkVzUTBGQlEyaERMRTlCUVU5elJDeGpRVUZRTEVOQlFYTkNkRUlzUjBGQmRFSXNRMEZCWWl4RlFVRjVReXhEUVVGRkxFMUJRVTBzU1VGQlNURkNMRXRCUVVvc1EwRkJWU3d5UTBGQlZpeERRVUZPTEVOQlFUaEVPMEZCUTNwSExGTkJRVTlPTEU5QlFVOTFSQ3h0UWtGQlVDeERRVUV5UW5aQ0xFZEJRVE5DTzBGQlEwcDNRaXhSUVVSSkxFTkJRMGNzZFVKQlFVOHNUMEZCVDNoQ0xFbEJRVWxKTEVkQlFVb3NRMEZCVUN4TFFVRnZRaXhWUVVFelFpeEZRVVJJTzBGQlJVcEdMRkZCUmtrc1EwRkZSeXhWUVVGRFJpeEhRVUZFTEVWQlFVMTVRaXhOUVVGT0xFVkJRV2xDTzBGQlEzWkNMRkZCUVVrc1EwRkJReXhQUVVGUFF5eEpRVUZRTEVOQlFWbEVMRTFCUVZvc1EwRkJSQ3hKUVVGM1FpeERRVUZEZWtJc1NVRkJUM2xDTEUxQlFWQXNWMEZCTjBJc1JVRkJiMFI2UWl4SlFVRlBlVUlzVFVGQlVDeGpRVUYzUWpORUxFZEJRVWRwUkN4VFFVRklMRU5CUVdGbUxGTkJRVTk1UWl4TlFVRlFMRU5CUVdJc1EwRkJlRUk3UVVGRGNFUXNWMEZCVDNwQ0xFZEJRVkE3UVVGRFJDeEhRVXhKTEVWQlMwWkJMRWRCVEVVc1EwRkJVRHRCUVUxRUxFTkJVa1E3TzBGQlZVRnNReXhIUVVGSE5rUXNUVUZCU0N4SFFVRlpMRk5CUVZOQkxFMUJRVlFzUjBGQmEwSTdRVUZETlVJc1RVRkJTWHBETEdkQ1FVRktMRU5CUVdFMFFpeGxRVUZpTEVOQlFYRkNia01zWjBKQlFYSkNPMEZCUTBGQkxGbEJRVlVzU1VGQlNVTXNUMEZCU2l4RFFVRlpMRlZCUVVOeFF5eEhRVUZFTEVWQlFVMURMRWRCUVU0c1JVRkJZeXhEUVVGRmFFTXNWVUZCVlN0Q0xFZEJRVllzUTBGQlpVZ3NVMEZCVTBrc1IwRkJWQ3hEUVVGakxFTkJRWHBFTEVOQlFWWTdRVUZEUVN4VFFVRlBMRVZCUVVWMlF5eG5Ra0ZCUml4RlFVRlhUeXhuUWtGQldDeEZRVUZ2UWpSQ0xHTkJRWEJDTEVWQlFWQTdRVUZEUkN4RFFVcEVPenRCUVUxQll5eFBRVUZQUXl4UFFVRlFMRWRCUVdsQ09VUXNhVUpCUVdwQ096dEJRVVZCTEVsQlFVa3JSQ3hYUVVGWFFTeFJRVUZSUXl4RlFVRjJRaXhGUVVFeVFqdEJRVU42UWtRc1ZVRkJVVU1zUlVGQlVpeERRVUZYTEcxQ1FVRllMRVZCUVdkRExIRkNRVUZMUXl4UlFVRlJReXhMUVVGU0xFTkJRV01zTmtOQlFXUXNSVUZCTmtSRExFTkJRVGRFTEVWQlFXZEZMRTFCUVdoRkxFTkJRVXdzUlVGQmFFTTdRVUZEUVVvc1ZVRkJVVU1zUlVGQlVpeERRVUZYTEc5Q1FVRllMRVZCUVdsRExIRkNRVUZMUXl4UlFVRlJReXhMUVVGU0xFTkJRV01zYTBSQlFXUXNSVUZCYTBWRExFTkJRV3hGTEVWQlFYRkZMRTFCUVhKRkxFTkJRVXdzUlVGQmFrTTdRVUZEUkNJc0ltWnBiR1VpT2lKcGJtUmxlQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZaR3hsZG5rdlkyOWtaUzl2YzNNdlpuVnVZM1JwYjI1aGJDMXlhWFpsY2lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUh0R2RXNWpkR2x2Ym1Gc1JYSnliM0o5SUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnljbTl5Y3ljcFhHNWpiMjV6ZENCN2FYTkdkVzVqZEdsdmJpd2dabXhoZEhSbGJuMGdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OTFkR2xzY3ljcFhHNWpiMjV6ZENCN1kyaGhhVzRzSUdOb1lXbHVSVzVrZlNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZiVzl1WVdSekp5bGNibU52Ym5OMElFWlFJRDBnUm5WdVkzUnBiMjVoYkZCeWIyMXBjMlZjYmx4dVQySnFaV04wTG1GemMybG5iaWhHVUM1d2NtOTBiM1I1Y0dVc1hHNGdJSEpsY1hWcGNtVW9KeTR2WVhKeVlYbHpKeWtzWEc0Z0lISmxjWFZwY21Vb0p5NHZaWFpsYm5Sekp5a3NYRzRnSUhKbGNYVnBjbVVvSnk0dlkyOXVaR2wwYVc5dVlXd25LU3hjYmlBZ2NtVnhkV2x5WlNnbkxpOXdjbTl0YVhObEp5a3BYRzVjYm1aMWJtTjBhVzl1SUVaMWJtTjBhVzl1WVd4UWNtOXRhWE5sS0hKbGMyOXNkbVZTWldwbFkzUkRRaXdnZFc1cmJtOTNia0Z5WjNNcElIdGNiaUFnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFWjFibU4wYVc5dVlXeFFjbTl0YVhObEtTa2dlM0psZEhWeWJpQnVaWGNnUm5WdVkzUnBiMjVoYkZCeWIyMXBjMlVvY21WemIyeDJaVkpsYW1WamRFTkNLWDFjYmlBZ2FXWWdLSFZ1YTI1dmQyNUJjbWR6SUNFOUlIVnVaR1ZtYVc1bFpDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEdkVzVqZEdsdmJtRnNVSEp2YldselpTQnZibXg1SUdGalkyVndkSE1nTVNCaGNtZDFiV1Z1ZENjcFhHNGdJSFJvYVhNdVgwWlFJRDBnZTF4dUlDQWdJR1Z5Y205eWN6b2dJQ0FnSUNBZ0lDQWdJSHRzYVcxcGREb2dNU3dnWTI5MWJuUTZJREI5TEZ4dUlDQWdJSEJ5YjIxcGMyVTZJQ0FnSUNBZ0lDQWdJRzVsZHlCUWNtOXRhWE5sS0hKbGMyOXNkbVZTWldwbFkzUkRRaWtzWEc0Z0lDQWdZMjl1WTNWeWNtVnVZM2xNYVcxcGREb2dOQ3hjYmlBZ2ZWeHVmVnh1WEc1R1VDNWhiR3dnUFNCR1VDNXdjbTkwYjNSNWNHVXVZV3hzWEc1R1VDNTBhR1Z1U1dZZ1BTQkdVQzV3Y205MGIzUjVjR1V1WDNSb1pXNUpabHh1UmxBdVpHVnNZWGtnUFNCdGMyVmpJRDArSUVaUUxuSmxjMjlzZG1Vb0tTNWtaV3hoZVNodGMyVmpLVnh1WEc0dkx5Qk5iMjVoWkdsaklFMWxkR2h2WkhOY2JrWlFMbU5vWVdsdUlEMGdZMmhoYVc1Y2JrWlFMbkJ5YjNSdmRIbHdaUzVqYUdGcGJrVnVaQ0E5SUdOb1lXbHVSVzVrWEc1Y2JrWlFMbkJ5YjNSdmRIbHdaUzVoWkdSVGRHVndJRDBnWm5WdVkzUnBiMjRnWVdSa1UzUmxjQ2h1WVcxbExDQmhjbWR6S1NCN1hHNGdJR2xtSUNoMGFHbHpMbk4wWlhCektTQjBhR2x6TG5OMFpYQnpMbkIxYzJnb1cyNWhiV1VzSUhSb2FYTXNJR0Z5WjNOZEtWeHVJQ0J5WlhSMWNtNGdkR2hwYzF4dWZWeHVYRzVHVUM1d2NtOTBiM1I1Y0dVdVkyOXVZM1Z5Y21WdVkza2dQU0JtZFc1amRHbHZiaUJqYjI1amRYSnlaVzVqZVNoc2FXMXBkQ0E5SUVsdVptbHVhWFI1S1NCN1hHNGdJR2xtSUNoMGFHbHpMbk4wWlhCektTQnlaWFIxY200Z2RHaHBjeTVoWkdSVGRHVndLQ2RqYjI1amRYSnlaVzVqZVNjc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQjBhR2x6TGw5R1VDNWpiMjVqZFhKeVpXNWplVXhwYldsMElEMGdiR2x0YVhSY2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVSbEF1Y0hKdmRHOTBlWEJsTG5GMWFXVjBJRDBnWm5WdVkzUnBiMjRnY1hWcFpYUW9iR2x0YVhRZ1BTQkpibVpwYm1sMGVTa2dlMXh1SUNCcFppQW9kR2hwY3k1emRHVndjeWtnY21WMGRYSnVJSFJvYVhNdVlXUmtVM1JsY0NnbmNYVnBaWFFuTENCYkxpNHVZWEpuZFcxbGJuUnpYU2xjYmlBZ2RHaHBjeTVmUmxBdVpYSnliM0p6SUQwZ2V5QmpiM1Z1ZERvZ01Dd2diR2x0YVhRNklHeHBiV2wwSUgxY2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVSbEF1Y0hKdmRHOTBlWEJsTG1kbGRDQTlJR1oxYm1OMGFXOXVJR2RsZENndUxpNXJaWGxPWVcxbGN5a2dlMXh1SUNCcFppQW9kR2hwY3k1emRHVndjeWtnY21WMGRYSnVJSFJvYVhNdVlXUmtVM1JsY0NnbloyVjBKeXdnV3k0dUxtRnlaM1Z0Wlc1MGMxMHBYRzRnSUd0bGVVNWhiV1Z6SUQwZ1pteGhkSFJsYmloclpYbE9ZVzFsY3lsY2JpQWdjbVYwZFhKdUlIUm9hWE11ZEdobGJpZ29iMkpxS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnZZbW9nUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQnBaaUFvYTJWNVRtRnRaWE11YkdWdVozUm9JRDA5UFNBeEtTQnlaWFIxY200Z2IySnFXMnRsZVU1aGJXVnpXekJkWFZ4dUlDQWdJQ0FnY21WMGRYSnVJR3RsZVU1aGJXVnpMbkpsWkhWalpTZ29aWGgwY21GamRHVmtMQ0JyWlhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWlhoMGNtRmpkR1ZrVzJ0bGVWMGdQU0J2WW1wYmEyVjVYVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWGgwY21GamRHVmtYRzRnSUNBZ0lDQjlMQ0I3ZlNsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHOWlhbHh1SUNCOUtWeHVmVnh1WEc1R1VDNXdjbTkwYjNSNWNHVXVjMlYwSUQwZ1puVnVZM1JwYjI0Z2MyVjBLR3RsZVU1aGJXVXNJSFpoYkhWbEtTQjdYRzRnSUdsbUlDaDBhR2x6TG5OMFpYQnpLU0J5WlhSMWNtNGdkR2hwY3k1aFpHUlRkR1Z3S0NkelpYUW5MQ0JiTGk0dVlYSm5kVzFsYm5SelhTbGNiaUFnY21WMGRYSnVJSFJvYVhNdWRHaGxiaWh2WW1vZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiMkpxSUQwOVBTQW5iMkpxWldOMEp5a2diMkpxVzJ0bGVVNWhiV1ZkSUQwZ2RtRnNkV1ZjYmlBZ0lDQnlaWFIxY200Z2IySnFYRzRnSUgwcFhHNTlYRzVjYmtaUUxuQnliM1J2ZEhsd1pTNWpZWFJqYUNBOUlHWjFibU4wYVc5dUtHWnVLU0I3WEc0Z0lHbG1JQ2gwYUdsekxuTjBaWEJ6S1NCeVpYUjFjbTRnZEdocGN5NWhaR1JUZEdWd0tDZGpZWFJqYUNjc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ01pa2djbVYwZFhKdUlIUm9hWE11WTJGMFkyaEpaaWd1TGk1aGNtZDFiV1Z1ZEhNcFhHNGdJR2xtSUNnaGFYTkdkVzVqZEdsdmJpaG1iaWtwSUhSb2NtOTNJRzVsZHlCR2RXNWpkR2x2Ym1Gc1JYSnliM0lvSjBsdWRtRnNhV1FnWm00Z1lYSm5kVzFsYm5RZ1ptOXlJR0F1WTJGMFkyZ29abTRwWUM0Z1RYVnpkQ0JpWlNCaElHWjFibU4wYVc5dUxpQkRkWEp5Wlc1MGJIazZJQ2NnS3lCMGVYQmxiMllnWm00cFhHNGdJSEpsZEhWeWJpQkdVQzV5WlhOdmJIWmxLSFJvYVhNdVgwWlFMbkJ5YjIxcGMyVXVZMkYwWTJnb1pYSnlJRDArSUdadUtHVnljaWtwS1Z4dWZWeHVYRzVHVUM1d2NtOTBiM1I1Y0dVdVkyRjBZMmhKWmlBOUlHWjFibU4wYVc5dUlHTmhkR05vU1dZb1kyOXVaR2wwYVc5dUxDQm1iaWtnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25ZMkYwWTJoSlppY3NJRnN1TGk1aGNtZDFiV1Z1ZEhOZEtWeHVJQ0JwWmlBb0lXbHpSblZ1WTNScGIyNG9abTRwS1NCMGFISnZkeUJ1WlhjZ1JuVnVZM1JwYjI1aGJFVnljbTl5S0NkSmJuWmhiR2xrSUdadUlHRnlaM1Z0Wlc1MElHWnZjaUJnTG1OaGRHTm9TV1lvWTI5dVpHbDBhVzl1TENCbWJpbGdMaUJOZFhOMElHSmxJR0VnWm5WdVkzUnBiMjR1SUVOMWNuSmxiblJzZVRvZ0p5QXJJSFI1Y0dWdlppQm1iaWxjYmx4dUlDQnlaWFIxY200Z1JsQXVjbVZ6YjJ4MlpTaDBhR2x6TGw5R1VDNXdjbTl0YVhObExtTmhkR05vS0dWeWNpQTlQaUI3WEc0Z0lDQWdhV1lnS0dOdmJtUnBkR2x2YmlBbUppQmxjbklnYVc1emRHRnVZMlZ2WmlCamIyNWthWFJwYjI0cElISmxkSFZ5YmlCbWJpaGxjbklwSUM4dklIUnllU0J5WlMxMGFISnZkeXdnYldsbmFIUWdZbVVnY21WaGJHeDVJSE5zYjNjdUxpNWNiaUFnSUNCMGFISnZkeUJsY25KY2JpQWdmU2twWEc1OVhHNWNia1pRTG5CeWIzUnZkSGx3WlM1MGFHVnVJRDBnWm5WdVkzUnBiMjRnZEdobGJpaG1iaWtnZTF4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25kR2hsYmljc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnBaaUFvSVdselJuVnVZM1JwYjI0b1ptNHBLU0IwYUhKdmR5QnVaWGNnUm5WdVkzUnBiMjVoYkVWeWNtOXlLQ2RKYm5aaGJHbGtJR1p1SUdGeVozVnRaVzUwSUdadmNpQmdMblJvWlc0b1ptNHBZQzRnVFhWemRDQmlaU0JoSUdaMWJtTjBhVzl1TGlCRGRYSnlaVzUwYkhrNklDY2dLeUIwZVhCbGIyWWdabTRwWEc0Z0lISmxkSFZ5YmlCR1VDNXlaWE52YkhabEtIUm9hWE11WDBaUUxuQnliMjFwYzJVdWRHaGxiaWhtYmlrcFhHNTlYRzVjYmtaUUxuQnliM1J2ZEhsd1pTNTBZWEFnUFNCbWRXNWpkR2x2YmlCMFlYQW9abTRwSUh0Y2JpQWdhV1lnS0hSb2FYTXVjM1JsY0hNcElISmxkSFZ5YmlCMGFHbHpMbUZrWkZOMFpYQW9KM1JoY0Njc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnBaaUFvSVdselJuVnVZM1JwYjI0b1ptNHBLU0IwYUhKdmR5QnVaWGNnUm5WdVkzUnBiMjVoYkVWeWNtOXlLQ2RKYm5aaGJHbGtJR1p1SUdGeVozVnRaVzUwSUdadmNpQmdMblJoY0NobWJpbGdMaUJOZFhOMElHSmxJR0VnWm5WdVkzUnBiMjR1SUVOMWNuSmxiblJzZVRvZ0p5QXJJSFI1Y0dWdlppQm1iaWxjYmlBZ2NtVjBkWEp1SUVaUUxuSmxjMjlzZG1Vb2RHaHBjeTVmUmxBdWNISnZiV2x6WlM1MGFHVnVLSFpoYkhWbElEMCtJR1p1S0haaGJIVmxLU0EvSUhaaGJIVmxJRG9nZG1Gc2RXVXBLVnh1ZlZ4dVhHNUdVQzV5WlhOdmJIWmxJRDBnUmxBdWNISnZkRzkwZVhCbExuSmxjMjlzZG1VZ1BTQm1kVzVqZEdsdmJpQnlaWE52YkhabEtIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnUmxBb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gyWVd4MVpTQW1KaUJwYzBaMWJtTjBhVzl1S0haaGJIVmxMblJvWlc0cEtTQnlaWFIxY200Z2RtRnNkV1V1ZEdobGJpaHlaWE52YkhabEtTNWpZWFJqYUNoeVpXcGxZM1FwWEc0Z0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNsY2JpQWdmU2xjYm4xY2JseHVSbEF1Y0hKdmJXbHphV1o1SUQwZ1puVnVZM1JwYjI0Z2NISnZiV2x6YVdaNUtHTmlLU0I3WEc0Z0lISmxkSFZ5YmlBb0xpNHVZWEpuY3lrZ1BUNGdibVYzSUVaUUtDaDVZV2dzSUc1aGFDa2dQVDVjYmlBZ0lDQmpZaTVqWVd4c0tIUm9hWE1zSUM0dUxtRnlaM01zSUNobGNuSXNJSEpsY3lrZ1BUNGdaWEp5SUQ4Z2JtRm9LR1Z5Y2lrZ09pQjVZV2dvY21WektTa3BYRzU5WEc1Y2JrWlFMbkJ5YjIxcGMybG1lVUZzYkNBOUlHWjFibU4wYVc5dUlIQnliMjFwYzJsbWVVRnNiQ2h2WW1vcElIdGNiaUFnYVdZZ0tDRnZZbW9nZkh3Z0lVOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaaWh2WW1vcEtTQjdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25TVzUyWVd4cFpDQkJjbWQxYldWdWRDQnZZbW9nYVc0Z2NISnZiV2x6YVdaNVFXeHNLRzlpYWlrbktTQjlYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWh2WW1vcFhHNGdJQ0FnTG1acGJIUmxjaWhyWlhrZ1BUNGdkSGx3Wlc5bUlHOWlhbHRyWlhsZElEMDlQU0FuWm5WdVkzUnBiMjRuS1Z4dUlDQWdJQzV5WldSMVkyVW9LRzlpYWl3Z1ptNU9ZVzFsS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvSVM5VGVXNWpMeTUwWlhOMEtHWnVUbUZ0WlNrZ0ppWWdJVzlpYWx0Z0pIdG1iazVoYldWOVFYTjVibU5nWFNrZ2IySnFXMkFrZTJadVRtRnRaWDFCYzNsdVkyQmRJRDBnUmxBdWNISnZiV2x6YVdaNUtHOWlhbHRnSkh0bWJrNWhiV1Y5WUYwcFhHNGdJQ0FnSUNCeVpYUjFjbTRnYjJKcVhHNGdJQ0FnZlN3Z2IySnFLVnh1ZlZ4dVhHNUdVQzUxYm5CaFkyc2dQU0JtZFc1amRHbHZiaUIxYm5CaFkyc29LU0I3WEc0Z0lHeGxkQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUXNJSEJ5YjIxcGMyVTdYRzRnSUhCeWIyMXBjMlVnUFNCdVpYY2dVSEp2YldselpTZ29lV0ZvTENCdVlXZ3BJRDArSUhzZ2NtVnpiMngyWlNBOUlIbGhhRHNnY21WcVpXTjBJRDBnYm1Gb0lIMHBYRzRnSUhKbGRIVnliaUI3SUhCeWIyMXBjMlVzSUhKbGMyOXNkbVVzSUhKbGFtVmpkQ0I5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdSblZ1WTNScGIyNWhiRkJ5YjIxcGMyVmNibHh1YVdZZ0tIQnliMk5sYzNNZ0ppWWdjSEp2WTJWemN5NXZiaWtnZTF4dUlDQndjbTlqWlhOekxtOXVLQ2QxYm1OaGRXZG9kRVY0WTJWd2RHbHZiaWNzSUdVZ1BUNGdZMjl1YzI5c1pTNWxjbkp2Y2lnblVISnZZMlZ6Y3pvZ1JrRlVRVXdnUlZoRFJWQlVTVTlPT2lCMWJtTmhkV2RvZEVWNFkyVndkR2x2Ymljc0lHVXNJQ2RjWEc1Y1hHNG5LU2xjYmlBZ2NISnZZMlZ6Y3k1dmJpZ25kVzVvWVc1a2JHVmtVbVZxWldOMGFXOXVKeXdnWlNBOVBpQmpiMjV6YjJ4bExtVnljbTl5S0NkUWNtOWpaWE56T2lCR1FWUkJUQ0JRVWs5TlNWTkZJRVZTVWs5U09pQjFibWhoYm1Sc1pXUlNaV3BsWTNScGIyNG5MQ0JsTENBblhGeHVYRnh1SnlrcFhHNTlYRzRpWFgwPVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7cmV0dXJuIHR5cGVvZiBvYmo7fSA6IGZ1bmN0aW9uIChvYmopIHtyZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajt9O2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7fX1mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7aWYgKCFzZWxmKSB7dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO31yZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjt9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7aWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO31zdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pO2lmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczt9dmFyIEZ1bmN0aW9uYWxFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IpIHtfaW5oZXJpdHMoRnVuY3Rpb25hbEVycm9yLCBfRXJyb3IpO1xuICBmdW5jdGlvbiBGdW5jdGlvbmFsRXJyb3IobXNnLCBvcHRpb25zKSB7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZ1bmN0aW9uYWxFcnJvcik7XG4gICAgaWYgKCh0eXBlb2YgbXNnID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihtc2cpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBtc2c7XG4gICAgICBpZiAobXNnLm1lc3NhZ2UpIG1zZyA9IG1zZy5tZXNzYWdlO1xuICAgIH12YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRnVuY3Rpb25hbEVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRnVuY3Rpb25hbEVycm9yKSkuY2FsbCh0aGlzLFxuICAgIG1zZykpO1xuICAgIGlmICgodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdGlvbnMpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9wdGlvbnMpLlxuICAgICAgZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgX3RoaXMubmFtZSA9IF90aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF90aGlzLCBfdGhpcy5jb25zdHJ1Y3Rvcik7cmV0dXJuIF90aGlzO1xuICB9cmV0dXJuIEZ1bmN0aW9uYWxFcnJvcjt9KEVycm9yKTt2YXJcblxuRnVuY3Rpb25hbFVzZXJFcnJvciA9IGZ1bmN0aW9uIChfRnVuY3Rpb25hbEVycm9yKSB7X2luaGVyaXRzKEZ1bmN0aW9uYWxVc2VyRXJyb3IsIF9GdW5jdGlvbmFsRXJyb3IpO2Z1bmN0aW9uIEZ1bmN0aW9uYWxVc2VyRXJyb3IoKSB7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZ1bmN0aW9uYWxVc2VyRXJyb3IpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRnVuY3Rpb25hbFVzZXJFcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZ1bmN0aW9uYWxVc2VyRXJyb3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTt9cmV0dXJuIEZ1bmN0aW9uYWxVc2VyRXJyb3I7fShGdW5jdGlvbmFsRXJyb3IpO3ZhclxuRlBVbmV4cGVjdGVkRXJyb3IgPSBmdW5jdGlvbiAoX0Z1bmN0aW9uYWxFcnJvcjIpIHtfaW5oZXJpdHMoRlBVbmV4cGVjdGVkRXJyb3IsIF9GdW5jdGlvbmFsRXJyb3IyKTtmdW5jdGlvbiBGUFVuZXhwZWN0ZWRFcnJvcigpIHtfY2xhc3NDYWxsQ2hlY2sodGhpcywgRlBVbmV4cGVjdGVkRXJyb3IpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoRlBVbmV4cGVjdGVkRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGUFVuZXhwZWN0ZWRFcnJvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO31yZXR1cm4gRlBVbmV4cGVjdGVkRXJyb3I7fShGdW5jdGlvbmFsRXJyb3IpO3ZhclxuRlBJbnB1dEVycm9yID0gZnVuY3Rpb24gKF9GdW5jdGlvbmFsRXJyb3IzKSB7X2luaGVyaXRzKEZQSW5wdXRFcnJvciwgX0Z1bmN0aW9uYWxFcnJvcjMpO2Z1bmN0aW9uIEZQSW5wdXRFcnJvcigpIHtfY2xhc3NDYWxsQ2hlY2sodGhpcywgRlBJbnB1dEVycm9yKTtyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZQSW5wdXRFcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZQSW5wdXRFcnJvcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO31yZXR1cm4gRlBJbnB1dEVycm9yO30oRnVuY3Rpb25hbEVycm9yKTt2YXJcbkZQU29mdEVycm9yID0gZnVuY3Rpb24gKF9GdW5jdGlvbmFsRXJyb3I0KSB7X2luaGVyaXRzKEZQU29mdEVycm9yLCBfRnVuY3Rpb25hbEVycm9yNCk7ZnVuY3Rpb24gRlBTb2Z0RXJyb3IoKSB7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZQU29mdEVycm9yKTtyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZQU29mdEVycm9yLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRlBTb2Z0RXJyb3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTt9cmV0dXJuIEZQU29mdEVycm9yO30oRnVuY3Rpb25hbEVycm9yKTt2YXJcbkZQVGltZW91dCA9IGZ1bmN0aW9uIChfRnVuY3Rpb25hbEVycm9yNSkge19pbmhlcml0cyhGUFRpbWVvdXQsIF9GdW5jdGlvbmFsRXJyb3I1KTtmdW5jdGlvbiBGUFRpbWVvdXQoKSB7X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZQVGltZW91dCk7cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChGUFRpbWVvdXQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGUFRpbWVvdXQpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTt9cmV0dXJuIEZQVGltZW91dDt9KEZ1bmN0aW9uYWxFcnJvcik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBGdW5jdGlvbmFsRXJyb3I6IEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcjogRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3I6IEZQVW5leHBlY3RlZEVycm9yLFxuICBGUElucHV0RXJyb3I6IEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3I6IEZQU29mdEVycm9yLFxuICBGUFRpbWVvdXQ6IEZQVGltZW91dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5OeVl5OXRiMlIxYkdWekwyVnljbTl5Y3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpHZFc1amRHbHZibUZzUlhKeWIzSWlMQ0p0YzJjaUxDSnZjSFJwYjI1eklpd2liV1Z6YzJGblpTSXNJazlpYW1WamRDSXNJbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1pTENKbWIzSkZZV05vSWl3aWEyVjVJaXdpYm1GdFpTSXNJbU52Ym5OMGNuVmpkRzl5SWl3aVJYSnliM0lpTENKallYQjBkWEpsVTNSaFkydFVjbUZqWlNJc0lrWjFibU4wYVc5dVlXeFZjMlZ5UlhKeWIzSWlMQ0pHVUZWdVpYaHdaV04wWldSRmNuSnZjaUlzSWtaUVNXNXdkWFJGY25KdmNpSXNJa1pRVTI5bWRFVnljbTl5SWl3aVJsQlVhVzFsYjNWMElpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SW5GdVEwRkJUVUVzWlR0QlFVTktMREpDUVVGWlF5eEhRVUZhTEVWQlFXbENReXhQUVVGcVFpeEZRVUV3UWp0QlFVTjRRaXhSUVVGSkxGRkJRVTlFTEVkQlFWQXNlVU5CUVU5QkxFZEJRVkFzVDBGQlpTeFJRVUZ1UWl4RlFVRTJRanRCUVVNelFrTXNaMEpCUVZWRUxFZEJRVlk3UVVGRFFTeFZRVUZMUVN4SlFVRkpSU3hQUVVGVUxFVkJRVzFDUml4TlFVRk5RU3hKUVVGSlJTeFBRVUZXTzBGQlEzQkNMRXRCU25WQ08wRkJTMnhDUml4UFFVeHJRanRCUVUxNFFpeFJRVUZKTEZGQlFVOURMRTlCUVZBc2VVTkJRVTlCTEU5QlFWQXNUMEZCYlVJc1VVRkJka0lzUlVGQmFVTTdRVUZETDBKRkxHRkJRVTlETEcxQ1FVRlFMRU5CUVRKQ1NDeFBRVUV6UWp0QlFVTkhTU3hoUVVSSUxFTkJRMWNzWlVGQlR6dEJRVU5rTEdOQlFVdERMRWRCUVV3c1NVRkJXVXdzVVVGQlVVc3NSMEZCVWl4RFFVRmFPMEZCUTBRc1QwRklTRHRCUVVsRU8wRkJRMFFzVlVGQlMwTXNTVUZCVEN4SFFVRlpMRTFCUVV0RExGZEJRVXdzUTBGQmFVSkVMRWxCUVRkQ08wRkJRMEU3UVVGRFFVVXNWVUZCVFVNc2FVSkJRVTRzVVVGQk9FSXNUVUZCUzBZc1YwRkJia01zUlVGa2QwSTdRVUZsZWtJc1J5eDVRa0ZvUWpKQ1F5eExPenRCUVd0Q2VFSkZMRzFDTEhkVlFVRTBRbG9zWlR0QlFVTTFRbUVzYVVJc09GUkJRVEJDWWl4bE8wRkJRekZDWXl4WkxHZFRRVUZ4UW1Rc1pUdEJRVU55UW1Vc1Z5d3dVa0ZCYjBKbUxHVTdRVUZEY0VKblFpeFRMRGhSUVVGclFtaENMR1U3TzBGQlJYaENhVUlzVDBGQlQwTXNUMEZCVUN4SFFVRnBRanRCUVVObWJFSXNhME5CUkdVN1FVRkZabGtzTUVOQlJtVTdRVUZIWmtNc2MwTkJTR1U3UVVGSlprTXNORUpCU21VN1FVRkxaa01zTUVKQlRHVTdRVUZOWmtNc2MwSkJUbVVzUlVGQmFrSWlMQ0ptYVd4bElqb2laWEp5YjNKekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpOVZjMlZ5Y3k5a2JHVjJlUzlqYjJSbEwyOXpjeTltZFc1amRHbHZibUZzTFhKcGRtVnlJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWTJ4aGMzTWdSblZ1WTNScGIyNWhiRVZ5Y205eUlHVjRkR1Z1WkhNZ1JYSnliM0lnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh0YzJjc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHMXpaeUE5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQnRjMmRjYmlBZ0lDQWdJR2xtSUNnZ2JYTm5MbTFsYzNOaFoyVWdLU0J0YzJjZ1BTQnRjMmN1YldWemMyRm5aVnh1SUNBZ0lIMWNiaUFnSUNCemRYQmxjaWh0YzJjcFhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6SUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9iM0IwYVc5dWN5bGNiaUFnSUNBZ0lDQWdMbVp2Y2tWaFkyZ29hMlY1SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdselcydGxlVjBnUFNCdmNIUnBiMjV6VzJ0bGVWMWNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV1WVcxbElEMGdkR2hwY3k1amIyNXpkSEoxWTNSdmNpNXVZVzFsWEc0Z0lDQWdMeThnUTJGd2RIVnlhVzVuSUhOMFlXTnJJSFJ5WVdObExDQmxlR05zZFdScGJtY2dZMjl1YzNSeWRXTjBiM0lnWTJGc2JDQm1jbTl0SUdsMExseHVJQ0FnSUVWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLSFJvYVhNc0lIUm9hWE11WTI5dWMzUnlkV04wYjNJcFhHNGdJSDFjYm4xY2JtTnNZWE56SUVaMWJtTjBhVzl1WVd4VmMyVnlSWEp5YjNJZ1pYaDBaVzVrY3lCR2RXNWpkR2x2Ym1Gc1JYSnliM0lnZTMxY2JtTnNZWE56SUVaUVZXNWxlSEJsWTNSbFpFVnljbTl5SUdWNGRHVnVaSE1nUm5WdVkzUnBiMjVoYkVWeWNtOXlJSHQ5WEc1amJHRnpjeUJHVUVsdWNIVjBSWEp5YjNJZ1pYaDBaVzVrY3lCR2RXNWpkR2x2Ym1Gc1JYSnliM0lnZTMxY2JtTnNZWE56SUVaUVUyOW1kRVZ5Y205eUlHVjRkR1Z1WkhNZ1JuVnVZM1JwYjI1aGJFVnljbTl5SUh0OVhHNWpiR0Z6Y3lCR1VGUnBiV1Z2ZFhRZ1pYaDBaVzVrY3lCR2RXNWpkR2x2Ym1Gc1JYSnliM0lnZTMxY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUVaMWJtTjBhVzl1WVd4RmNuSnZjaXhjYmlBZ1JuVnVZM1JwYjI1aGJGVnpaWEpGY25KdmNpeGNiaUFnUmxCVmJtVjRjR1ZqZEdWa1JYSnliM0lzWEc0Z0lFWlFTVzV3ZFhSRmNuSnZjaXhjYmlBZ1JsQlRiMlowUlhKeWIzSXNYRzRnSUVaUVZHbHRaVzkxZEN4Y2JuMWNiaUpkZlE9PVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL21vZHVsZXMvZXJyb3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB1dGlscyA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBpc1Byb21pc2VMaWtlOiBmdW5jdGlvbiBpc1Byb21pc2VMaWtlKHApIHtyZXR1cm4gcCAmJiB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nO30sXG5cbiAgaXNGdW5jdGlvbjogZnVuY3Rpb24gaXNGdW5jdGlvbihmbikge3JldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbic7fSxcblxuICBpc0VudW1lcmFibGU6IGZ1bmN0aW9uIGlzRW51bWVyYWJsZShsaXN0KSB7cmV0dXJuIGxpc3QgJiYgQXJyYXkuaXNBcnJheShsaXN0KSB8fCB0eXBlb2YgbGlzdFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nO30sXG5cbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbihhcnIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgYGZsYXR0ZW5gIHJlcXVpcmVzIHZhbGlkIGFycmF5IHBhcmFtZXRlcicpO1xuICAgIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHRzLCBpdGVtKSB7cmV0dXJuIHJlc3VsdHMuY29uY2F0KEFycmF5LmlzQXJyYXkoaXRlbSkgPyB1dGlscy5mbGF0dGVuKGl0ZW0pIDogW2l0ZW1dKTt9LCBbXSk7XG4gIH0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTl0YjJSMWJHVnpMM1YwYVd4ekxtcHpJbDBzSW01aGJXVnpJanBiSW5WMGFXeHpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUlzSW1selVISnZiV2x6WlV4cGEyVWlMQ0p3SWl3aWRHaGxiaUlzSW1selJuVnVZM1JwYjI0aUxDSm1iaUlzSW1selJXNTFiV1Z5WVdKc1pTSXNJbXhwYzNRaUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSlRlVzFpYjJ3aUxDSnBkR1Z5WVhSdmNpSXNJbVpzWVhSMFpXNGlMQ0poY25JaUxDSkZjbkp2Y2lJc0luSmxaSFZqWlNJc0luSmxjM1ZzZEhNaUxDSnBkR1Z0SWl3aVkyOXVZMkYwSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4SlFVRk5RU3hSUVVGUlF5eFBRVUZQUXl4UFFVRlFMRWRCUVdsQ08wRkJRemRDUXl4bFFVUTJRaXg1UWtGRFprTXNRMEZFWlN4RlFVTmFMRU5CUVVVc1QwRkJUMEVzUzBGQlN5eFBRVUZQUVN4RlFVRkZReXhKUVVGVUxFdEJRV3RDTEZWQlFUbENMRU5CUVRCRExFTkJSR2hET3p0QlFVYzNRa01zV1VGSU5rSXNjMEpCUjJ4Q1F5eEZRVWhyUWl4RlFVZGtMRU5CUVVVc1QwRkJUeXhQUVVGUFFTeEZRVUZRTEV0QlFXTXNWVUZCY2tJc1EwRkJhVU1zUTBGSWNrSTdPMEZCU3pkQ1F5eGpRVXcyUWl4M1FrRkxhRUpETEVsQlRHZENMRVZCUzFZc1EwRkJSU3hQUVVGUFFTeFJRVUZSUXl4TlFVRk5ReXhQUVVGT0xFTkJRV05HTEVsQlFXUXNRMEZCVWl4SlFVRXJRaXhQUVVGUFFTeExRVUZMUnl4UFFVRlBReXhSUVVGYUxFTkJRVkFzUzBGQmFVTXNWVUZCZGtVc1EwRkJiVVlzUTBGTU0wVTdPMEZCVHpkQ1F5eFRRVkEyUWl4dFFrRlBja0pETEVkQlVIRkNMRVZCVDJoQ08wRkJRMWdzVVVGQlNTeERRVUZEVEN4TlFVRk5ReXhQUVVGT0xFTkJRV05KTEVkQlFXUXNRMEZCVEN4RlFVRjVRaXhOUVVGTkxFbEJRVWxETEV0QlFVb3NRMEZCVlN4cFJFRkJWaXhEUVVGT08wRkJRM3BDTEZkQlFVOUVMRWxCUVVsRkxFMUJRVW9zUTBGQlZ5eFZRVUZEUXl4UFFVRkVMRVZCUVZWRExFbEJRVllzVlVGQmJVSkVMRkZCUVZGRkxFMUJRVklzUTBGQlpWWXNUVUZCVFVNc1QwRkJUaXhEUVVGalVTeEpRVUZrTEVsQlFYTkNia0lzVFVGQlRXTXNUMEZCVGl4RFFVRmpTeXhKUVVGa0xFTkJRWFJDTEVkQlFUUkRMRU5CUVVOQkxFbEJRVVFzUTBGQk0wUXNRMEZCYmtJc1JVRkJXQ3hGUVVGclJ5eEZRVUZzUnl4RFFVRlFPMEZCUTBRc1IwRldORUlzUlVGQkwwSWlMQ0ptYVd4bElqb2lkWFJwYkhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUwxVnpaWEp6TDJSc1pYWjVMMk52WkdVdmIzTnpMMloxYm1OMGFXOXVZV3d0Y21sMlpYSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpqYjI1emRDQjFkR2xzY3lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JwYzFCeWIyMXBjMlZNYVd0bEtIQXBJSHNnY21WMGRYSnVJSEFnSmlZZ2RIbHdaVzltSUhBdWRHaGxiaUE5UFQwZ0oyWjFibU4wYVc5dUp5QjlMRnh1WEc0Z0lHbHpSblZ1WTNScGIyNG9abTRwSUhzZ2NtVjBkWEp1SUhSNWNHVnZaaUJtYmlBOVBUMGdKMloxYm1OMGFXOXVKeUI5TEZ4dVhHNGdJR2x6Ulc1MWJXVnlZV0pzWlNoc2FYTjBLU0I3SUhKbGRIVnliaUJzYVhOMElDWW1JRUZ5Y21GNUxtbHpRWEp5WVhrb2JHbHpkQ2tnZkh3Z2RIbHdaVzltSUd4cGMzUmJVM2x0WW05c0xtbDBaWEpoZEc5eVhTQTlQVDBnSjJaMWJtTjBhVzl1SnlCOUxGeHVYRzRnSUdac1lYUjBaVzRvWVhKeUtTQjdYRzRnSUNBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtHRnljaWtwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVFdWMGFHOWtJR0JtYkdGMGRHVnVZQ0J5WlhGMWFYSmxjeUIyWVd4cFpDQmhjbkpoZVNCd1lYSmhiV1YwWlhJbktWeHVJQ0FnSUhKbGRIVnliaUJoY25JdWNtVmtkV05sS0NoeVpYTjFiSFJ6TENCcGRHVnRLU0E5UGlCeVpYTjFiSFJ6TG1OdmJtTmhkQ2hCY25KaGVTNXBjMEZ5Y21GNUtHbDBaVzBwSUQ4Z2RYUnBiSE11Wm14aGRIUmxiaWhwZEdWdEtTQTZJRnRwZEdWdFhTa3NJRnRkS1Z4dUlDQjlYRzU5WEc0aVhYMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tb2R1bGVzL3V0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59KSgpO1xuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHtyZXR1cm4gW107fTtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHtyZXR1cm4gJy8nO307XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uICgpIHtyZXR1cm4gMDt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OXdjbTlqWlhOekwySnliM2R6WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpY0hKdlkyVnpjeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKallXTm9aV1JUWlhSVWFXMWxiM1YwSWl3aVkyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElpd2laR1ZtWVhWc2RGTmxkRlJwYlc5MWRDSXNJa1Z5Y205eUlpd2laR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0lzSW5ObGRGUnBiV1Z2ZFhRaUxDSmxJaXdpWTJ4bFlYSlVhVzFsYjNWMElpd2ljblZ1VkdsdFpXOTFkQ0lzSW1aMWJpSXNJbU5oYkd3aUxDSnlkVzVEYkdWaGNsUnBiV1Z2ZFhRaUxDSnRZWEpyWlhJaUxDSnhkV1YxWlNJc0ltUnlZV2x1YVc1bklpd2lZM1Z5Y21WdWRGRjFaWFZsSWl3aWNYVmxkV1ZKYm1SbGVDSXNJbU5zWldGdVZYQk9aWGgwVkdsamF5SXNJbXhsYm1kMGFDSXNJbU52Ym1OaGRDSXNJbVJ5WVdsdVVYVmxkV1VpTENKMGFXMWxiM1YwSWl3aWJHVnVJaXdpY25WdUlpd2libVY0ZEZScFkyc2lMQ0poY21keklpd2lRWEp5WVhraUxDSmhjbWQxYldWdWRITWlMQ0pwSWl3aWNIVnphQ0lzSWtsMFpXMGlMQ0poY25KaGVTSXNJbkJ5YjNSdmRIbHdaU0lzSW1Gd2NHeDVJaXdpZEdsMGJHVWlMQ0ppY205M2MyVnlJaXdpWlc1Mklpd2lZWEpuZGlJc0luWmxjbk5wYjI0aUxDSjJaWEp6YVc5dWN5SXNJbTV2YjNBaUxDSnZiaUlzSW1Ga1pFeHBjM1JsYm1WeUlpd2liMjVqWlNJc0ltOW1aaUlzSW5KbGJXOTJaVXhwYzNSbGJtVnlJaXdpY21WdGIzWmxRV3hzVEdsemRHVnVaWEp6SWl3aVpXMXBkQ0lzSW5CeVpYQmxibVJNYVhOMFpXNWxjaUlzSW5CeVpYQmxibVJQYm1ObFRHbHpkR1Z1WlhJaUxDSnNhWE4wWlc1bGNuTWlMQ0p1WVcxbElpd2lZbWx1WkdsdVp5SXNJbU4zWkNJc0ltTm9aR2x5SWl3aVpHbHlJaXdpZFcxaGMyc2lYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFc1NVRkJTVUVzVlVGQlZVTXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFpeEZRVUV2UWpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4SlFVRkpReXhuUWtGQlNqdEJRVU5CTEVsQlFVbERMR3RDUVVGS096dEJRVVZCTEZOQlFWTkRMR2RDUVVGVUxFZEJRVFJDTzBGQlEzaENMRlZCUVUwc1NVRkJTVU1zUzBGQlNpeERRVUZWTEdsRFFVRldMRU5CUVU0N1FVRkRTRHRCUVVORUxGTkJRVk5ETEcxQ1FVRlVMRWRCUVdkRE8wRkJRelZDTEZWQlFVMHNTVUZCU1VRc1MwRkJTaXhEUVVGVkxHMURRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTkJMR0ZCUVZrN1FVRkRWQ3hSUVVGSk8wRkJRMEVzV1VGQlNTeFBRVUZQUlN4VlFVRlFMRXRCUVhOQ0xGVkJRVEZDTEVWQlFYTkRPMEZCUTJ4RFRDd3JRa0ZCYlVKTExGVkJRVzVDTzBGQlEwZ3NVMEZHUkN4TlFVVlBPMEZCUTBoTUxDdENRVUZ0UWtVc1owSkJRVzVDTzBGQlEwZzdRVUZEU2l4TFFVNUVMRU5CVFVVc1QwRkJUMGtzUTBGQlVDeEZRVUZWTzBGQlExSk9MREpDUVVGdFFrVXNaMEpCUVc1Q08wRkJRMGc3UVVGRFJDeFJRVUZKTzBGQlEwRXNXVUZCU1N4UFFVRlBTeXhaUVVGUUxFdEJRWGRDTEZWQlFUVkNMRVZCUVhkRE8wRkJRM0JEVGl4cFEwRkJjVUpOTEZsQlFYSkNPMEZCUTBnc1UwRkdSQ3hOUVVWUE8wRkJRMGhPTEdsRFFVRnhRa2NzYlVKQlFYSkNPMEZCUTBnN1FVRkRTaXhMUVU1RUxFTkJUVVVzVDBGQlQwVXNRMEZCVUN4RlFVRlZPMEZCUTFKTUxEWkNRVUZ4UWtjc2JVSkJRWEpDTzBGQlEwZzdRVUZEU2l4RFFXNUNRU3hIUVVGRU8wRkJiMEpCTEZOQlFWTkpMRlZCUVZRc1EwRkJiMEpETEVkQlFYQkNMRVZCUVhsQ08wRkJRM0pDTEZGQlFVbFVMSEZDUVVGeFFrc3NWVUZCZWtJc1JVRkJjVU03UVVGRGFrTTdRVUZEUVN4bFFVRlBRU3hYUVVGWFNTeEhRVUZZTEVWQlFXZENMRU5CUVdoQ0xFTkJRVkE3UVVGRFNEdEJRVU5FTzBGQlEwRXNVVUZCU1N4RFFVRkRWQ3h4UWtGQmNVSkZMR2RDUVVGeVFpeEpRVUY1UXl4RFFVRkRSaXhuUWtGQk0wTXNTMEZCWjBWTExGVkJRWEJGTEVWQlFXZEdPMEZCUXpWRlRDd3lRa0ZCYlVKTExGVkJRVzVDTzBGQlEwRXNaVUZCVDBFc1YwRkJWMGtzUjBGQldDeEZRVUZuUWl4RFFVRm9RaXhEUVVGUU8wRkJRMGc3UVVGRFJDeFJRVUZKTzBGQlEwRTdRVUZEUVN4bFFVRlBWQ3hwUWtGQmFVSlRMRWRCUVdwQ0xFVkJRWE5DTEVOQlFYUkNMRU5CUVZBN1FVRkRTQ3hMUVVoRUxFTkJSMFVzVDBGQlRVZ3NRMEZCVGl4RlFVRlJPMEZCUTA0c1dVRkJTVHRCUVVOQk8wRkJRMEVzYlVKQlFVOU9MR2xDUVVGcFFsVXNTVUZCYWtJc1EwRkJjMElzU1VGQmRFSXNSVUZCTkVKRUxFZEJRVFZDTEVWQlFXbERMRU5CUVdwRExFTkJRVkE3UVVGRFNDeFRRVWhFTEVOQlIwVXNUMEZCVFVnc1EwRkJUaXhGUVVGUk8wRkJRMDQ3UVVGRFFTeHRRa0ZCVDA0c2FVSkJRV2xDVlN4SlFVRnFRaXhEUVVGelFpeEpRVUYwUWl4RlFVRTBRa1FzUjBGQk5VSXNSVUZCYVVNc1EwRkJha01zUTBGQlVEdEJRVU5JTzBGQlEwbzdPenRCUVVkS08wRkJRMFFzVTBGQlUwVXNaVUZCVkN4RFFVRjVRa01zVFVGQmVrSXNSVUZCYVVNN1FVRkROMElzVVVGQlNWZ3NkVUpCUVhWQ1RTeFpRVUV6UWl4RlFVRjVRenRCUVVOeVF6dEJRVU5CTEdWQlFVOUJMR0ZCUVdGTExFMUJRV0lzUTBGQlVEdEJRVU5JTzBGQlEwUTdRVUZEUVN4UlFVRkpMRU5CUVVOWUxIVkNRVUYxUWtjc2JVSkJRWFpDTEVsQlFUaERMRU5CUVVOSUxHdENRVUZvUkN4TFFVRjFSVTBzV1VGQk0wVXNSVUZCZVVZN1FVRkRja1pPTERaQ1FVRnhRazBzV1VGQmNrSTdRVUZEUVN4bFFVRlBRU3hoUVVGaFN5eE5RVUZpTEVOQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrN1FVRkRRVHRCUVVOQkxHVkJRVTlZTEcxQ1FVRnRRbGNzVFVGQmJrSXNRMEZCVUR0QlFVTklMRXRCU0VRc1EwRkhSU3hQUVVGUFRpeERRVUZRTEVWQlFWTTdRVUZEVUN4WlFVRkpPMEZCUTBFN1FVRkRRU3h0UWtGQlQwd3NiVUpCUVcxQ1V5eEpRVUZ1UWl4RFFVRjNRaXhKUVVGNFFpeEZRVUU0UWtVc1RVRkJPVUlzUTBGQlVEdEJRVU5JTEZOQlNFUXNRMEZIUlN4UFFVRlBUaXhEUVVGUUxFVkJRVk03UVVGRFVEdEJRVU5CTzBGQlEwRXNiVUpCUVU5TUxHMUNRVUZ0UWxNc1NVRkJia0lzUTBGQmQwSXNTVUZCZUVJc1JVRkJPRUpGTEUxQlFUbENMRU5CUVZBN1FVRkRTRHRCUVVOS096czdPMEZCU1VvN1FVRkRSQ3hKUVVGSlF5eFJRVUZSTEVWQlFWbzdRVUZEUVN4SlFVRkpReXhYUVVGWExFdEJRV1k3UVVGRFFTeEpRVUZKUXl4WlFVRktPMEZCUTBFc1NVRkJTVU1zWVVGQllTeERRVUZETEVOQlFXeENPenRCUVVWQkxGTkJRVk5ETEdWQlFWUXNSMEZCTWtJN1FVRkRka0lzVVVGQlNTeERRVUZEU0N4UlFVRkVMRWxCUVdFc1EwRkJRME1zV1VGQmJFSXNSVUZCWjBNN1FVRkROVUk3UVVGRFNEdEJRVU5FUkN4bFFVRlhMRXRCUVZnN1FVRkRRU3hSUVVGSlF5eGhRVUZoUnl4TlFVRnFRaXhGUVVGNVFqdEJRVU55UWt3c1owSkJRVkZGTEdGQlFXRkpMRTFCUVdJc1EwRkJiMEpPTEV0QlFYQkNMRU5CUVZJN1FVRkRTQ3hMUVVaRUxFMUJSVTg3UVVGRFNFY3NjVUpCUVdFc1EwRkJReXhEUVVGa08wRkJRMGc3UVVGRFJDeFJRVUZKU0N4TlFVRk5TeXhOUVVGV0xFVkJRV3RDTzBGQlEyUkZPMEZCUTBnN1FVRkRTanM3UVVGRlJDeFRRVUZUUVN4VlFVRlVMRWRCUVhOQ08wRkJRMnhDTEZGQlFVbE9MRkZCUVVvc1JVRkJZenRCUVVOV08wRkJRMGc3UVVGRFJDeFJRVUZKVHl4VlFVRlZZaXhYUVVGWFV5eGxRVUZZTEVOQlFXUTdRVUZEUVVnc1pVRkJWeXhKUVVGWU96dEJRVVZCTEZGQlFVbFJMRTFCUVUxVUxFMUJRVTFMTEUxQlFXaENPMEZCUTBFc1YwRkJUVWtzUjBGQlRpeEZRVUZYTzBGQlExQlFMSFZDUVVGbFJpeExRVUZtTzBGQlEwRkJMR2RDUVVGUkxFVkJRVkk3UVVGRFFTeGxRVUZQTEVWQlFVVkhMRlZCUVVZc1IwRkJaVTBzUjBGQmRFSXNSVUZCTWtJN1FVRkRka0lzWjBKQlFVbFFMRmxCUVVvc1JVRkJhMEk3UVVGRFpFRXNOa0pCUVdGRExGVkJRV0lzUlVGQmVVSlBMRWRCUVhwQ08wRkJRMGc3UVVGRFNqdEJRVU5FVUN4eFFrRkJZU3hEUVVGRExFTkJRV1E3UVVGRFFVMHNZMEZCVFZRc1RVRkJUVXNzVFVGQldqdEJRVU5JTzBGQlEwUklMRzFDUVVGbExFbEJRV1k3UVVGRFFVUXNaVUZCVnl4TFFVRllPMEZCUTBGSUxHOUNRVUZuUWxVc1QwRkJhRUk3UVVGRFNEczdRVUZGUkhoQ0xGRkJRVkV5UWl4UlFVRlNMRWRCUVcxQ0xGVkJRVlZtTEVkQlFWWXNSVUZCWlR0QlFVTTVRaXhSUVVGSlowSXNUMEZCVHl4SlFVRkpReXhMUVVGS0xFTkJRVlZETEZWQlFWVlVMRTFCUVZZc1IwRkJiVUlzUTBGQk4wSXNRMEZCV0R0QlFVTkJMRkZCUVVsVExGVkJRVlZVTEUxQlFWWXNSMEZCYlVJc1EwRkJka0lzUlVGQk1FSTdRVUZEZEVJc1lVRkJTeXhKUVVGSlZTeEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxFTEZWQlFWVlVMRTFCUVRsQ0xFVkJRWE5EVlN4SFFVRjBReXhGUVVFeVF6dEJRVU4yUTBnc2FVSkJRVXRITEVsQlFVa3NRMEZCVkN4SlFVRmpSQ3hWUVVGVlF5eERRVUZXTEVOQlFXUTdRVUZEU0R0QlFVTktPMEZCUTBSbUxGVkJRVTFuUWl4SlFVRk9MRU5CUVZjc1NVRkJTVU1zU1VGQlNpeERRVUZUY2tJc1IwRkJWQ3hGUVVGalowSXNTVUZCWkN4RFFVRllPMEZCUTBFc1VVRkJTVm9zVFVGQlRVc3NUVUZCVGl4TFFVRnBRaXhEUVVGcVFpeEpRVUZ6UWl4RFFVRkRTaXhSUVVFelFpeEZRVUZ4UXp0QlFVTnFRMDRzYlVKQlFWZFpMRlZCUVZnN1FVRkRTRHRCUVVOS0xFTkJXRVE3TzBGQllVRTdRVUZEUVN4VFFVRlRWU3hKUVVGVUxFTkJRV055UWl4SFFVRmtMRVZCUVcxQ2MwSXNTMEZCYmtJc1JVRkJNRUk3UVVGRGRFSXNVMEZCUzNSQ0xFZEJRVXdzUjBGQlYwRXNSMEZCV0R0QlFVTkJMRk5CUVV0elFpeExRVUZNTEVkQlFXRkJMRXRCUVdJN1FVRkRTRHRCUVVORVJDeExRVUZMUlN4VFFVRk1MRU5CUVdWVUxFZEJRV1lzUjBGQmNVSXNXVUZCV1R0QlFVTTNRaXhUUVVGTFpDeEhRVUZNTEVOQlFWTjNRaXhMUVVGVUxFTkJRV1VzU1VGQlppeEZRVUZ4UWl4TFFVRkxSaXhMUVVFeFFqdEJRVU5JTEVOQlJrUTdRVUZIUVd4RExGRkJRVkZ4UXl4TFFVRlNMRWRCUVdkQ0xGTkJRV2hDTzBGQlEwRnlReXhSUVVGUmMwTXNUMEZCVWl4SFFVRnJRaXhKUVVGc1FqdEJRVU5CZEVNc1VVRkJVWFZETEVkQlFWSXNSMEZCWXl4RlFVRmtPMEZCUTBGMlF5eFJRVUZSZDBNc1NVRkJVaXhIUVVGbExFVkJRV1k3UVVGRFFYaERMRkZCUVZGNVF5eFBRVUZTTEVkQlFXdENMRVZCUVd4Q0xFTXNRMEZCYzBJN1FVRkRkRUo2UXl4UlFVRlJNRU1zVVVGQlVpeEhRVUZ0UWl4RlFVRnVRanM3UVVGRlFTeFRRVUZUUXl4SlFVRlVMRWRCUVdkQ0xFTkJRVVU3TzBGQlJXeENNME1zVVVGQlVUUkRMRVZCUVZJc1IwRkJZVVFzU1VGQllqdEJRVU5CTTBNc1VVRkJVVFpETEZkQlFWSXNSMEZCYzBKR0xFbEJRWFJDTzBGQlEwRXpReXhSUVVGUk9FTXNTVUZCVWl4SFFVRmxTQ3hKUVVGbU8wRkJRMEV6UXl4UlFVRlJLME1zUjBGQlVpeEhRVUZqU2l4SlFVRmtPMEZCUTBFelF5eFJRVUZSWjBRc1kwRkJVaXhIUVVGNVFrd3NTVUZCZWtJN1FVRkRRVE5ETEZGQlFWRnBSQ3hyUWtGQlVpeEhRVUUyUWs0c1NVRkJOMEk3UVVGRFFUTkRMRkZCUVZGclJDeEpRVUZTTEVkQlFXVlFMRWxCUVdZN1FVRkRRVE5ETEZGQlFWRnRSQ3hsUVVGU0xFZEJRVEJDVWl4SlFVRXhRanRCUVVOQk0wTXNVVUZCVVc5RUxHMUNRVUZTTEVkQlFUaENWQ3hKUVVFNVFqczdRVUZGUVRORExGRkJRVkZ4UkN4VFFVRlNMRWRCUVc5Q0xGVkJRVlZETEVsQlFWWXNSVUZCWjBJc1EwRkJSU3hQUVVGUExFVkJRVkFzUTBGQlZ5eERRVUZxUkRzN1FVRkZRWFJFTEZGQlFWRjFSQ3hQUVVGU0xFZEJRV3RDTEZWQlFWVkVMRWxCUVZZc1JVRkJaMEk3UVVGRE9VSXNWVUZCVFN4SlFVRkphRVFzUzBGQlNpeERRVUZWTEd0RFFVRldMRU5CUVU0N1FVRkRTQ3hEUVVaRU96dEJRVWxCVGl4UlFVRlJkMFFzUjBGQlVpeEhRVUZqTEZsQlFWa3NRMEZCUlN4UFFVRlBMRWRCUVZBc1EwRkJXU3hEUVVGNFF6dEJRVU5CZUVRc1VVRkJVWGxFTEV0QlFWSXNSMEZCWjBJc1ZVRkJWVU1zUjBGQlZpeEZRVUZsTzBGQlF6TkNMRlZCUVUwc1NVRkJTWEJFTEV0QlFVb3NRMEZCVlN4blEwRkJWaXhEUVVGT08wRkJRMGdzUTBGR1JEdEJRVWRCVGl4UlFVRlJNa1FzUzBGQlVpeEhRVUZuUWl4WlFVRlhMRU5CUVVVc1QwRkJUeXhEUVVGUUxFTkJRVmNzUTBGQmVFTWlMQ0ptYVd4bElqb2lZbkp2ZDNObGNpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSXZWWE5sY25NdlpHeGxkbmt2WTI5a1pTOXZjM012Wm5WdVkzUnBiMjVoYkMxeWFYWmxjaUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4dklITm9hVzBnWm05eUlIVnphVzVuSUhCeWIyTmxjM01nYVc0Z1luSnZkM05sY2x4dWRtRnlJSEJ5YjJObGMzTWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHQ5TzF4dVhHNHZMeUJqWVdOb1pXUWdabkp2YlNCM2FHRjBaWFpsY2lCbmJHOWlZV3dnYVhNZ2NISmxjMlZ1ZENCemJ5QjBhR0YwSUhSbGMzUWdjblZ1Ym1WeWN5QjBhR0YwSUhOMGRXSWdhWFJjYmk4dklHUnZiaWQwSUdKeVpXRnJJSFJvYVc1bmN5NGdJRUoxZENCM1pTQnVaV1ZrSUhSdklIZHlZWEFnYVhRZ2FXNGdZU0IwY25rZ1kyRjBZMmdnYVc0Z1kyRnpaU0JwZENCcGMxeHVMeThnZDNKaGNIQmxaQ0JwYmlCemRISnBZM1FnYlc5a1pTQmpiMlJsSUhkb2FXTm9JR1J2WlhOdUozUWdaR1ZtYVc1bElHRnVlU0JuYkc5aVlXeHpMaUFnU1hRbmN5QnBibk5wWkdVZ1lWeHVMeThnWm5WdVkzUnBiMjRnWW1WallYVnpaU0IwY25rdlkyRjBZMmhsY3lCa1pXOXdkR2x0YVhwbElHbHVJR05sY25SaGFXNGdaVzVuYVc1bGN5NWNibHh1ZG1GeUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRN1hHNTJZWElnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTzF4dVhHNW1kVzVqZEdsdmJpQmtaV1poZFd4MFUyVjBWR2x0YjNWMEtDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmMyVjBWR2x0Wlc5MWRDQm9ZWE1nYm05MElHSmxaVzRnWkdWbWFXNWxaQ2NwTzF4dWZWeHVablZ1WTNScGIyNGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0FvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RqYkdWaGNsUnBiV1Z2ZFhRZ2FHRnpJRzV2ZENCaVpXVnVJR1JsWm1sdVpXUW5LVHRjYm4xY2JpaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpaWFJVYVcxbGIzVjBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCa1pXWmhkV3gwVTJWMFZHbHRiM1YwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZV05vWldSVFpYUlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWREdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOUlHUmxabUYxYkhSRGJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ2ZWeHVmU0FvS1NsY2JtWjFibU4wYVc5dUlISjFibFJwYldWdmRYUW9ablZ1S1NCN1hHNGdJQ0FnYVdZZ0tHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BUMDlJSE5sZEZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXViM0p0WVd3Z1pXNTJhWEp2YldWdWRITWdhVzRnYzJGdVpTQnphWFIxWVhScGIyNXpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklHbG1JSE5sZEZScGJXVnZkWFFnZDJGemJpZDBJR0YyWVdsc1lXSnNaU0JpZFhRZ2QyRnpJR3hoZEhSbGNpQmtaV1pwYm1Wa1hHNGdJQ0FnYVdZZ0tDaGpZV05vWldSVFpYUlVhVzFsYjNWMElEMDlQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBJSHg4SUNGallXTm9aV1JUWlhSVWFXMWxiM1YwS1NBbUppQnpaWFJVYVcxbGIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCelpYUlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyVjBWR2x0Wlc5MWRDaG1kVzRzSURBcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzYUdWdUlIZG9aVzRnYzI5dFpXSnZaSGtnYUdGeklITmpjbVYzWldRZ2QybDBhQ0J6WlhSVWFXMWxiM1YwSUdKMWRDQnVieUJKTGtVdUlHMWhaR1J1WlhOelhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwS0daMWJpd2dNQ2s3WEc0Z0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGZG9aVzRnZDJVZ1lYSmxJR2x1SUVrdVJTNGdZblYwSUhSb1pTQnpZM0pwY0hRZ2FHRnpJR0psWlc0Z1pYWmhiR1ZrSUhOdklFa3VSUzRnWkc5bGMyNG5kQ0IwY25WemRDQjBhR1VnWjJ4dlltRnNJRzlpYW1WamRDQjNhR1Z1SUdOaGJHeGxaQ0J1YjNKdFlXeHNlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaFkyaGxaRk5sZEZScGJXVnZkWFF1WTJGc2JDaHVkV3hzTENCbWRXNHNJREFwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwTG1OaGJHd29kR2hwY3l3Z1puVnVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVYRzU5WEc1bWRXNWpkR2x2YmlCeWRXNURiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLU0I3WEc0Z0lDQWdhV1lnS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdZMnhsWVhKVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZibTl5YldGc0lHVnVkbWx5YjIxbGJuUnpJR2x1SUhOaGJtVWdjMmwwZFdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJR2xtSUdOc1pXRnlWR2x0Wlc5MWRDQjNZWE51SjNRZ1lYWmhhV3hoWW14bElHSjFkQ0IzWVhNZ2JHRjBkR1Z5SUdSbFptbHVaV1JjYmlBZ0lDQnBaaUFvS0dOaFkyaGxaRU5zWldGeVZHbHRaVzkxZENBOVBUMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkQ0I4ZkNBaFkyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMEtTQW1KaUJqYkdWaGNsUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWTJ4bFlYSlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdkMmhsYmlCemIyMWxZbTlrZVNCb1lYTWdjMk55WlhkbFpDQjNhWFJvSUhObGRGUnBiV1Z2ZFhRZ1luVjBJRzV2SUVrdVJTNGdiV0ZrWkc1bGMzTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcE8xeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQjNaU0JoY21VZ2FXNGdTUzVGTGlCaWRYUWdkR2hsSUhOamNtbHdkQ0JvWVhNZ1ltVmxiaUJsZG1Gc1pXUWdjMjhnU1M1RkxpQmtiMlZ6YmlkMElDQjBjblZ6ZENCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCM2FHVnVJR05oYkd4bFpDQnViM0p0WVd4c2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQzVqWVd4c0tHNTFiR3dzSUcxaGNtdGxjaWs3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyRnRaU0JoY3lCaFltOTJaU0JpZFhRZ2QyaGxiaUJwZENkeklHRWdkbVZ5YzJsdmJpQnZaaUJKTGtVdUlIUm9ZWFFnYlhWemRDQm9ZWFpsSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUdadmNpQW5kR2hwY3ljc0lHaHZjR1oxYkd4NUlHOTFjaUJqYjI1MFpYaDBJR052Y25KbFkzUWdiM1JvWlhKM2FYTmxJR2wwSUhkcGJHd2dkR2h5YjNjZ1lTQm5iRzlpWVd3Z1pYSnliM0l1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYjIxbElIWmxjbk5wYjI1eklHOW1JRWt1UlM0Z2FHRjJaU0JrYVdabVpYSmxiblFnY25Wc1pYTWdabTl5SUdOc1pXRnlWR2x0Wlc5MWRDQjJjeUJ6WlhSVWFXMWxiM1YwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMExtTmhiR3dvZEdocGN5d2diV0Z5YTJWeUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1WEc1Y2JuMWNiblpoY2lCeGRXVjFaU0E5SUZ0ZE8xeHVkbUZ5SUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc1MllYSWdZM1Z5Y21WdWRGRjFaWFZsTzF4dWRtRnlJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNibHh1Wm5WdVkzUnBiMjRnWTJ4bFlXNVZjRTVsZUhSVWFXTnJLQ2tnZTF4dUlDQWdJR2xtSUNnaFpISmhhVzVwYm1jZ2ZId2dJV04xY25KbGJuUlJkV1YxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2FXWWdLR04xY25KbGJuUlJkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2NYVmxkV1VnUFNCamRYSnlaVzUwVVhWbGRXVXVZMjl1WTJGMEtIRjFaWFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ1pISmhhVzVSZFdWMVpTZ3BPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pISmhhVzVSZFdWMVpTZ3BJSHRjYmlBZ0lDQnBaaUFvWkhKaGFXNXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnZEdsdFpXOTFkQ0E5SUhKMWJsUnBiV1Z2ZFhRb1kyeGxZVzVWY0U1bGVIUlVhV05yS1R0Y2JpQWdJQ0JrY21GcGJtbHVaeUE5SUhSeWRXVTdYRzVjYmlBZ0lDQjJZWElnYkdWdUlEMGdjWFZsZFdVdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bEtHeGxiaWtnZTF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVVhWbGRXVWdQU0J4ZFdWMVpUdGNiaUFnSUNBZ0lDQWdjWFZsZFdVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ3NyY1hWbGRXVkpibVJsZUNBOElHeGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSmxiblJSZFdWMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlZ0eGRXVjFaVWx1WkdWNFhTNXlkVzRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdZM1Z5Y21WdWRGRjFaWFZsSUQwZ2JuVnNiRHRjYmlBZ0lDQmtjbUZwYm1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUhKMWJrTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGIzVjBLVHRjYm4xY2JseHVjSEp2WTJWemN5NXVaWGgwVkdsamF5QTlJR1oxYm1OMGFXOXVJQ2htZFc0cElIdGNiaUFnSUNCMllYSWdZWEpuY3lBOUlHNWxkeUJCY25KaGVTaGhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtZHpXMmtnTFNBeFhTQTlJR0Z5WjNWdFpXNTBjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J4ZFdWMVpTNXdkWE5vS0c1bGR5QkpkR1Z0S0daMWJpd2dZWEpuY3lrcE8xeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dnUFQwOUlERWdKaVlnSVdSeVlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lISjFibFJwYldWdmRYUW9aSEpoYVc1UmRXVjFaU2s3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVMeThnZGpnZ2JHbHJaWE1nY0hKbFpHbGpkR2xpYkdVZ2IySnFaV04wYzF4dVpuVnVZM1JwYjI0Z1NYUmxiU2htZFc0c0lHRnljbUY1S1NCN1hHNGdJQ0FnZEdocGN5NW1kVzRnUFNCbWRXNDdYRzRnSUNBZ2RHaHBjeTVoY25KaGVTQTlJR0Z5Y21GNU8xeHVmVnh1U1hSbGJTNXdjbTkwYjNSNWNHVXVjblZ1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11Wm5WdUxtRndjR3g1S0c1MWJHd3NJSFJvYVhNdVlYSnlZWGtwTzF4dWZUdGNibkJ5YjJObGMzTXVkR2wwYkdVZ1BTQW5Zbkp2ZDNObGNpYzdYRzV3Y205alpYTnpMbUp5YjNkelpYSWdQU0IwY25WbE8xeHVjSEp2WTJWemN5NWxibllnUFNCN2ZUdGNibkJ5YjJObGMzTXVZWEpuZGlBOUlGdGRPMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVJRDBnSnljN0lDOHZJR1Z0Y0hSNUlITjBjbWx1WnlCMGJ5QmhkbTlwWkNCeVpXZGxlSEFnYVhOemRXVnpYRzV3Y205alpYTnpMblpsY25OcGIyNXpJRDBnZTMwN1hHNWNibVoxYm1OMGFXOXVJRzV2YjNBb0tTQjdmVnh1WEc1d2NtOWpaWE56TG05dUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdVlXUmtUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXZibU5sSUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011YjJabUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNtVnRiM1psVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk1nUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTVsYldsMElEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNISmxjR1Z1WkV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y0hKbGNHVnVaRTl1WTJWTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1Y2JuQnliMk5sYzNNdWJHbHpkR1Z1WlhKeklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIc2djbVYwZFhKdUlGdGRJSDFjYmx4dWNISnZZMlZ6Y3k1aWFXNWthVzVuSUQwZ1puVnVZM1JwYjI0Z0tHNWhiV1VwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0J5YjJObGMzTXVZbWx1WkdsdVp5QnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0p5azdYRzU5TzF4dVhHNXdjbTlqWlhOekxtTjNaQ0E5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlDY3ZKeUI5TzF4dWNISnZZMlZ6Y3k1amFHUnBjaUE5SUdaMWJtTjBhVzl1SUNoa2FYSXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozQnliMk5sYzNNdVkyaGthWElnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ2NwTzF4dWZUdGNibkJ5YjJObGMzTXVkVzFoYzJzZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJREE3SUgwN1hHNGlYWDA9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHtmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge3ZhciBfYXJyID0gW107dmFyIF9uID0gdHJ1ZTt2YXIgX2QgPSBmYWxzZTt2YXIgX2UgPSB1bmRlZmluZWQ7dHJ5IHtmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7X2Fyci5wdXNoKF9zLnZhbHVlKTtpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7fX0gY2F0Y2ggKGVycikge19kID0gdHJ1ZTtfZSA9IGVycjt9IGZpbmFsbHkge3RyeSB7aWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTt9IGZpbmFsbHkge2lmIChfZCkgdGhyb3cgX2U7fX1yZXR1cm4gX2Fycjt9cmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHtpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7cmV0dXJuIGFycjt9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkge3JldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7fSBlbHNlIHt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTt9fTt9KCk7ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge2lmIChBcnJheS5pc0FycmF5KGFycikpIHtmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7YXJyMltpXSA9IGFycltpXTt9cmV0dXJuIGFycjI7fSBlbHNlIHtyZXR1cm4gQXJyYXkuZnJvbShhcnIpO319dmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpLEZQSW5wdXRFcnJvciA9IF9yZXF1aXJlLkZQSW5wdXRFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGNoYWluOiBjaGFpbiwgY2hhaW5FbmQ6IGNoYWluRW5kXG5cblxuICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTdGFydCAncmVjb3JkaW5nJyBhIGNoYWluIG9mIGNvbW1hbmRzLCBhZnRlciBzdGVwcyBkZWZpbmVkIGNhbGwgYC5jaGFpbkVuZCgpYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovIH07XG5mdW5jdGlvbiBjaGFpbigpIHtcbiAgdmFyIEZQID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuICAvLyBjcmVhdGUgYSBwbGFjZWhvbGRlci9pbml0aWFsIHByb21pc2UgdG8gaG9sZCB0aGUgc3RlcHMvY2hhaW4gZGF0YVxuICB2YXIgcHJvbWlzZSA9IEZQLnJlc29sdmUoKTtcbiAgcHJvbWlzZS5zdGVwcyA9IFtdO1xuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLyoqXG4gICAqIENhbGwgYWZ0ZXIgc3RhcnRpbmcgYSBgLmNoYWluKClgLlxuICAgKlxuICAgKiBPbmUgb2YgdGhlIGZldyBub24tY2hhaW5hYmxlIG1ldGhvZHMgaW4gdGhlIEFQSS5cbiAgICogQHJldHVybnMgYSBGdW5jdGlvbi4gSXQgcnVucyB5b3VyIGZ1bmN0aW9uYWwgY2hhaW4hXG4gICAqL1xuZnVuY3Rpb24gY2hhaW5FbmQoKSB7dmFyIF90aGlzID0gdGhpcztcbiAgdmFyIEZQID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gbmV3IEZQKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IF90aGlzLnN0ZXBzW1N5bWJvbC5pdGVyYXRvcl0oKTtcblxuICAgICAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KHByb21pc2UpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChjdXJyZW50LmRvbmUpIHJldHVybiByZXNvbHZlKHByb21pc2UpO3ZhciBfY3VycmVudCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KFxuICAgICAgICBjdXJyZW50LnZhbHVlLCAzKSxmbk5hbWUgPSBfY3VycmVudCR2YWx1ZVswXSxhcmdzID0gX2N1cnJlbnQkdmFsdWVbMl07XG4gICAgICAgIHJldHVybiBuZXh0KHByb21pc2VbZm5OYW1lXS5hcHBseShwcm9taXNlLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpKTtcbiAgICAgIH07XG4gICAgICBuZXh0KEZQLnJlc29sdmUoaW5wdXQpKTtcbiAgICB9KTtcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTnlZeTl0YjI1aFpITXVhbk1pWFN3aWJtRnRaWE1pT2xzaWNtVnhkV2x5WlNJc0lrWlFTVzV3ZFhSRmNuSnZjaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKamFHRnBiaUlzSW1Ob1lXbHVSVzVrSWl3aVJsQWlMQ0p3Y205dGFYTmxJaXdpY21WemIyeDJaU0lzSW5OMFpYQnpJaXdpY21WcVpXTjBJaXdpYVhSbGNtRjBiM0lpTENKVGVXMWliMndpTENKdVpYaDBJaXdpWTNWeWNtVnVkQ0lzSW1SdmJtVWlMQ0oyWVd4MVpTSXNJbVp1VG1GdFpTSXNJbUZ5WjNNaUxDSnBibkIxZENKZExDSnRZWEJ3YVc1bmN5STZJbWt3UWtGQmRVSkJMRkZCUVZFc2EwSkJRVklzUXl4RFFVRm9Ra01zV1N4WlFVRkJRU3haT3p0QlFVVlFReXhQUVVGUFF5eFBRVUZRTEVkQlFXbENMRVZCUVVORExGbEJRVVFzUlVGQlVVTTdPenRCUVVkNlFqczdPM1ZFUVVocFFpeEZRVUZxUWp0QlFVOUJMRk5CUVZORUxFdEJRVlFzUjBGQmFVSTdRVUZEWml4TlFVRk5SU3hMUVVGTFRpeFJRVUZSTEZOQlFWSXNRMEZCV0R0QlFVTkJPMEZCUTBFc1RVRkJUVThzVlVGQlZVUXNSMEZCUjBVc1QwRkJTQ3hGUVVGb1FqdEJRVU5CUkN4VlFVRlJSU3hMUVVGU0xFZEJRV2RDTEVWQlFXaENPMEZCUTBFc1UwRkJUMFlzVDBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN1FVRk5RU3hUUVVGVFJpeFJRVUZVTEVkQlFXOUNPMEZCUTJ4Q0xFMUJRVTFETEV0QlFVdE9MRkZCUVZFc1UwRkJVaXhEUVVGWU96dEJRVVZCTEZOQlFVOHNhVUpCUVZNN1FVRkRaQ3hYUVVGUExFbEJRVWxOTEVWQlFVb3NRMEZCVHl4VlFVRkRSU3hQUVVGRUxFVkJRVlZGTEUxQlFWWXNSVUZCY1VJN1FVRkRha01zVlVGQlRVTXNWMEZCVnl4TlFVRkxSaXhMUVVGTUxFTkJRVmRITEU5QlFVOUVMRkZCUVd4Q0xFZEJRV3BDT3p0QlFVVkJMRlZCUVUxRkxFOUJRVThzVTBGQlVFRXNTVUZCVHl4VlFVRlhPMEZCUTNSQ0xGbEJRVTFETEZWQlFWVklMRk5CUVZORkxFbEJRVlFzUlVGQmFFSTdRVUZEUVN4WlFVRkpReXhSUVVGUlF5eEpRVUZhTEVWQlFXdENMRTlCUVU5UUxGRkJRVkZFTEU5QlFWSXNRMEZCVUN4RFFVWkpPMEZCUjBkUExHZENRVUZSUlN4TFFVaFlMRXRCUjJaRExFMUJTR1VzY1VKQlIweERMRWxCU0VzN1FVRkpkRUlzWlVGQlQwd3NTMEZCUzA0c1VVRkJVVlVzVFVGQlVpeHZRMEZCYlVKRExFbEJRVzVDTEVWQlFVd3NRMEZCVUR0QlFVTkVMRTlCVEVRN1FVRk5RVXdzVjBGQlMxQXNSMEZCUjBVc1QwRkJTQ3hEUVVGWFZ5eExRVUZZTEVOQlFVdzdRVUZEUkN4TFFWWk5MRU5CUVZBN1FVRlhSQ3hIUVZwRU8wRkJZVVFpTENKbWFXeGxJam9pYlc5dVlXUnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaTlWYzJWeWN5OWtiR1YyZVM5amIyUmxMMjl6Y3k5bWRXNWpkR2x2Ym1Gc0xYSnBkbVZ5SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVkyOXVjM1FnZTBaUVNXNXdkWFJGY25KdmNuMGdQU0J5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhKeWIzSnpKeWxjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1kyaGhhVzRzSUdOb1lXbHVSVzVrZlZ4dVhHNWNiaThxS2x4dUlDb2dVM1JoY25RZ0ozSmxZMjl5WkdsdVp5Y2dZU0JqYUdGcGJpQnZaaUJqYjIxdFlXNWtjeXdnWVdaMFpYSWdjM1JsY0hNZ1pHVm1hVzVsWkNCallXeHNJR0F1WTJoaGFXNUZibVFvS1dCY2JpQXFJRUJ5WlhSMWNtNXpJRVoxYm1OMGFXOXVZV3hRY205dGFYTmxYRzRnS2k5Y2JtWjFibU4wYVc5dUlHTm9ZV2x1S0NrZ2UxeHVJQ0JqYjI1emRDQkdVQ0E5SUhKbGNYVnBjbVVvSnk0dmFXNWtaWGduS1Z4dUlDQXZMeUJqY21WaGRHVWdZU0J3YkdGalpXaHZiR1JsY2k5cGJtbDBhV0ZzSUhCeWIyMXBjMlVnZEc4Z2FHOXNaQ0IwYUdVZ2MzUmxjSE12WTJoaGFXNGdaR0YwWVZ4dUlDQmpiMjV6ZENCd2NtOXRhWE5sSUQwZ1JsQXVjbVZ6YjJ4MlpTZ3BYRzRnSUhCeWIyMXBjMlV1YzNSbGNITWdQU0JiWFZ4dUlDQnlaWFIxY200Z2NISnZiV2x6WlZ4dWZWeHVYRzR2S2lwY2JpQXFJRU5oYkd3Z1lXWjBaWElnYzNSaGNuUnBibWNnWVNCZ0xtTm9ZV2x1S0NsZ0xseHVJQ3BjYmlBcUlFOXVaU0J2WmlCMGFHVWdabVYzSUc1dmJpMWphR0ZwYm1GaWJHVWdiV1YwYUc5a2N5QnBiaUIwYUdVZ1FWQkpMbHh1SUNvZ1FISmxkSFZ5Ym5NZ1lTQkdkVzVqZEdsdmJpNGdTWFFnY25WdWN5QjViM1Z5SUdaMWJtTjBhVzl1WVd3Z1kyaGhhVzRoWEc0Z0tpOWNibVoxYm1OMGFXOXVJR05vWVdsdVJXNWtLQ2tnZTF4dUlDQmpiMjV6ZENCR1VDQTlJSEpsY1hWcGNtVW9KeTR2YVc1a1pYZ25LVnh1WEc0Z0lISmxkSFZ5YmlCcGJuQjFkQ0E5UGlCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCR1VDZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emRDQnBkR1Z5WVhSdmNpQTlJSFJvYVhNdWMzUmxjSE5iVTNsdFltOXNMbWwwWlhKaGRHOXlYU2dwWEc1Y2JpQWdJQ0FnSUdOdmJuTjBJRzVsZUhRZ1BTQndjbTl0YVhObElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZM1Z5Y21WdWRDQTlJR2wwWlhKaGRHOXlMbTVsZUhRb0tWeHVJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkQzVrYjI1bEtTQnlaWFIxY200Z2NtVnpiMngyWlNod2NtOXRhWE5sS1Z4dUlDQWdJQ0FnSUNCamIyNXpkQ0JiWm01T1lXMWxMQ0FzSUdGeVozTmRJRDBnWTNWeWNtVnVkQzUyWVd4MVpWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjRkQ2h3Y205dGFYTmxXMlp1VG1GdFpWMG9MaTR1WVhKbmN5a3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnVaWGgwS0VaUUxuSmxjMjlzZG1Vb2FXNXdkWFFwS1Z4dUlDQWdJSDBwWEc0Z0lIMWNibjFjYmlKZGZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9tb25hZHMuanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkge2Z1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7dmFyIF9hcnIgPSBbXTt2YXIgX24gPSB0cnVlO3ZhciBfZCA9IGZhbHNlO3ZhciBfZSA9IHVuZGVmaW5lZDt0cnkge2ZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtfYXJyLnB1c2goX3MudmFsdWUpO2lmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazt9fSBjYXRjaCAoZXJyKSB7X2QgPSB0cnVlO19lID0gZXJyO30gZmluYWxseSB7dHJ5IHtpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpO30gZmluYWxseSB7aWYgKF9kKSB0aHJvdyBfZTt9fXJldHVybiBfYXJyO31yZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkge2lmIChBcnJheS5pc0FycmF5KGFycikpIHtyZXR1cm4gYXJyO30gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7cmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTt9IGVsc2Uge3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO319O30oKTtmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7aWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge2ZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHthcnIyW2ldID0gYXJyW2ldO31yZXR1cm4gYXJyMjt9IGVsc2Uge3JldHVybiBBcnJheS5mcm9tKGFycik7fX12YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL21vZHVsZXMvdXRpbHMnKSxpc0VudW1lcmFibGUgPSBfcmVxdWlyZS5pc0VudW1lcmFibGU7dmFyIF9yZXF1aXJlMiA9XG5yZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJyksRlBJbnB1dEVycm9yID0gX3JlcXVpcmUyLkZQSW5wdXRFcnJvcixGdW5jdGlvbmFsRXJyb3IgPSBfcmVxdWlyZTIuRnVuY3Rpb25hbEVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgbWFwOiBtYXAsIGZpbmQ6IGZpbmQsIGZpbmRJbmRleDogZmluZEluZGV4LCBmaWx0ZXI6IGZpbHRlciwgcmVkdWNlOiByZWR1Y2UgfTtcblxuZnVuY3Rpb24gZmluZChjYWxsYmFjaykge1xuICByZXR1cm4gX2ZpbmQuY2FsbCh0aGlzLCBjYWxsYmFjaykudGhlbihmdW5jdGlvbiAoX3JlZikge3ZhciBpdGVtID0gX3JlZi5pdGVtO3JldHVybiBpdGVtO30pO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrKSB7XG4gIHJldHVybiBfZmluZC5jYWxsKHRoaXMsIGNhbGxiYWNrKS50aGVuKGZ1bmN0aW9uIChfcmVmMikge3ZhciBpbmRleCA9IF9yZWYyLmluZGV4O3JldHVybiBpbmRleDt9KTtcbn1cblxuZnVuY3Rpb24gX2ZpbmQoaXRlcmFibGUsIGNhbGxiYWNrKSB7XG4gIHZhciBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKTtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ19maW5kJywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gaXRlcmFibGU7XG4gICAgaXRlcmFibGUgPSB0aGlzLl9GUC5wcm9taXNlO1xuICB9XG5cbiAgcmV0dXJuIEZQLnJlc29sdmUoaXRlcmFibGUpLlxuICBmaWx0ZXIoY2FsbGJhY2spLlxuICB0aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7cmV0dXJuIHJlc3VsdHMgJiYgcmVzdWx0c1swXSA/XG4gICAgeyBpdGVtOiByZXN1bHRzWzBdLCBpbmRleDogcmVzdWx0cy5pbmRleE9mKHJlc3VsdHNbMF0pIH0gOlxuICAgIHsgaXRlbTogdW5kZWZpbmVkLCBpbmRleDogLTEgfTt9KTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGl0ZXJhYmxlLCBjYWxsYmFjaykge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZmlsdGVyJywgW10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgaWYgKHR5cGVvZiBpdGVyYWJsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gaXRlcmFibGU7XG4gICAgaXRlcmFibGUgPSB0aGlzLl9GUC5wcm9taXNlO1xuICB9XG5cbiAgcmV0dXJuIHJlZHVjZShpdGVyYWJsZSwgZnVuY3Rpb24gKGFnZ3JlZ2F0ZSwgaXRlbSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2FsbGJhY2soaXRlbSkpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7cmV0dXJuIHZhbHVlID8gYWdncmVnYXRlLmNvbmNhdChbaXRlbV0pIDogYWdncmVnYXRlO30pO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShpdGVyYWJsZSwgcmVkdWNlciwgaW5pdFZhbCkge1xuICB2YXIgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdyZWR1Y2UnLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICBpZiAodHlwZW9mIGl0ZXJhYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5pdFZhbCA9IHJlZHVjZXI7XG4gICAgcmVkdWNlciA9IGl0ZXJhYmxlO1xuICAgIGl0ZXJhYmxlID0gdGhpcy5fRlAgPyB0aGlzLl9GUC5wcm9taXNlIDogdGhpcztcbiAgfSBlbHNlIHtcbiAgICBpdGVyYWJsZSA9IEZQLnJlc29sdmUoaXRlcmFibGUsIHRoaXMpO1xuICB9XG4gIHJldHVybiBuZXcgRlAoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJldHVybiBpdGVyYWJsZS50aGVuKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB2YXIgbmV4dCA9IGZ1bmN0aW9uIG5leHQodG90YWwpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChjdXJyZW50LmRvbmUpIHJldHVybiByZXNvbHZlKHRvdGFsKTtcblxuICAgICAgICBQcm9taXNlLmFsbChbdG90YWwsIGN1cnJlbnQudmFsdWVdKS5cbiAgICAgICAgdGhlbihmdW5jdGlvbiAoX3JlZjMpIHt2YXIgX3JlZjQgPSBfc2xpY2VkVG9BcnJheShfcmVmMywgMiksdG90YWwgPSBfcmVmNFswXSxpdGVtID0gX3JlZjRbMV07cmV0dXJuIG5leHQocmVkdWNlcih0b3RhbCwgaXRlbSwgaSsrKSk7fSkuXG4gICAgICAgIGNhdGNoKHJlamVjdCk7XG4gICAgICB9O1xuXG4gICAgICBuZXh0KGluaXRWYWwpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuLyplc2xpbnQgbWF4LXN0YXRlbWVudHM6IFtcImVycm9yXCIsIDYwXSovXG5mdW5jdGlvbiBtYXAoYXJncywgZm4sIG9wdGlvbnMpIHt2YXIgX3RoaXMgPSB0aGlzO1xuICB2YXIgRlAgPSByZXF1aXJlKCcuL2luZGV4Jyk7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdtYXAnLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0aGlzICYmIHRoaXMuX0ZQKSB7XG4gICAgZm4gPSBhcmdzO1xuICAgIGFyZ3MgPSB0aGlzICYmIHRoaXMuX0ZQICYmIHRoaXMuX0ZQLnByb21pc2U7XG4gIH1cblxuICB2YXIgcmVzb2x2ZWRPclJlamVjdGVkID0gZmFsc2U7XG4gIHZhciB0aHJlYWRMaW1pdCA9IE1hdGgubWF4KDEsIE1hdGgubWluKHRoaXMgJiYgdGhpcy5fRlAgJiYgdGhpcy5fRlAuY29uY3VycmVuY3lMaW1pdCB8fCAxLCA0KSk7XG4gIHZhciBpbm5lclZhbHVlcyA9IHRoaXMgJiYgdGhpcy5fRlAgJiYgdGhpcy5fRlAucHJvbWlzZSA/IHRoaXMuX0ZQLnByb21pc2UgOiBQcm9taXNlLnJlc29sdmUoYXJncyk7XG4gIHZhciBpbml0aWFsVGhyZWFkID0gMDtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgY291bnQgPSAwO1xuICB2YXIgcmVzdWx0cyA9IFtdLGFsdFJlc3VsdHMgPSBbXTtcbiAgdmFyIHRocmVhZFBvb2wgPSBuZXcgU2V0KCk7XG4gIHZhciB0aHJlYWRQb29sRnVsbCA9IGZ1bmN0aW9uIHRocmVhZFBvb2xGdWxsKCkge3JldHVybiB0aHJlYWRQb29sLnNpemUgPj0gdGhyZWFkTGltaXQ7fTtcbiAgdmFyIGlzRG9uZSA9IGZ1bmN0aW9uIGlzRG9uZSgpIHtyZXR1cm4gY291bnQgPj0gYXJncy5sZW5ndGggfHwgcmVzb2x2ZWRPclJlamVjdGVkIHx8IGVycm9ycy5sZW5ndGggPiBfdGhpcy5fRlAuZXJyb3JzLmxpbWl0O307XG4gIHZhciBzZXRSZXN1bHQgPSBmdW5jdGlvbiBzZXRSZXN1bHQoaW5kZXgpIHtyZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB0aHJlYWRQb29sLmRlbGV0ZShpbmRleCk7XG4gICAgICByZXN1bHRzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07fTtcblxuICByZXR1cm4gbmV3IEZQKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVzb2x2ZUl0ID0gZnVuY3Rpb24gcmVzb2x2ZUl0KHgpIHtcbiAgICAgIGlmIChyZXNvbHZlZE9yUmVqZWN0ZWQpIHJldHVybjtcbiAgICAgIHJlc29sdmVkT3JSZWplY3RlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKHgpO1xuICAgIH07XG4gICAgdmFyIHJlamVjdEl0ID0gZnVuY3Rpb24gcmVqZWN0SXQoeCkge1xuICAgICAgaWYgKHJlc29sdmVkT3JSZWplY3RlZCkgcmV0dXJuO1xuICAgICAgcmVzb2x2ZWRPclJlamVjdGVkID0gdHJ1ZTtcbiAgICAgIHJlamVjdCh4KTtcbiAgICB9O1xuICAgIGlubmVyVmFsdWVzLnRoZW4oZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICBhcmdzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShpdGVtcykpO1xuICAgICAgaWYgKCFpc0VudW1lcmFibGUoaXRlbXMpKSByZXR1cm4gcmVqZWN0KG5ldyBGUElucHV0RXJyb3IoJ0ludmFsaWQgaW5wdXQgZGF0YSBwYXNzZWQgaW50byBGUC5tYXAoKScpKTtcbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IF90aGlzLl9GUC5lcnJvcnMubGltaXQpIHtcbiAgICAgICAgICBQcm9taXNlLmFsbChhbHRSZXN1bHRzKS5cbiAgICAgICAgICB0aGVuKGZ1bmN0aW9uIChkYXRhKSB7cmV0dXJuIHJlamVjdEl0KHJlc3VsdHMpO30pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RvbmUoKSkge1xuICAgICAgICAgIFByb21pc2UuYWxsKGFsdFJlc3VsdHMpLlxuICAgICAgICAgIHRoZW4oZnVuY3Rpb24gKGRhdGEpIHtyZXR1cm4gcmVzb2x2ZUl0KHJlc3VsdHMpO30pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgICB2YXIgY2hlY2tBbmRSdW4gPSBmdW5jdGlvbiBjaGVja0FuZFJ1bih2YWwpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkT3JSZWplY3RlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIWNvbXBsZXRlKCkgJiYgIXJlc3VsdHNbY291bnRdKSBydW5JdGVtKGNvdW50KTtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH07XG5cbiAgICAgIHZhciBydW5JdGVtID0gZnVuY3Rpb24gcnVuSXRlbShjKSB7XG4gICAgICAgIGlmIChyZXNvbHZlZE9yUmVqZWN0ZWQpIHJldHVybjtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgaWYgKHRocmVhZFBvb2xGdWxsKCkpIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtyZXR1cm4gcnVuSXRlbShjKTt9LCAwKTtcbiAgICAgICAgLy8gY29uc3QgaXNDb21wbGV0ZSA9IGNvbXBsZXRlKClcbiAgICAgICAgaWYgKHJlc3VsdHNbY10pIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKCdjb21wbGV0ZWQvcHJvY2Vzc2luZyBpdGVtIGFscmVhZHknLCBjLCByZXN1bHRzW2NdKVxuICAgICAgICAgIHJldHVybiByZXN1bHRzW2NdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVhZFBvb2wuYWRkKGMpO1xuICAgICAgICAvLyBlaXRoZXIgZ2V0IHZhbHVlIHdpdGggYGZuKGl0ZW0pYCBvciBgaXRlbS50aGVuKGZuKWBcbiAgICAgICAgYWx0UmVzdWx0c1tjXSA9IFByb21pc2UucmVzb2x2ZShhcmdzW2NdKS5cbiAgICAgICAgdGhlbihmdW5jdGlvbiAodmFsKSB7cmV0dXJuIGZuKHZhbCwgYywgYXJncyk7fSkuXG4gICAgICAgIHRoZW4oZnVuY3Rpb24gKHZhbCkge3JldHVybiBzZXRSZXN1bHQoYykodmFsKTt9KS5cbiAgICAgICAgdGhlbihjaGVja0FuZFJ1bikuXG4gICAgICAgIGNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBfdGhpcy5fRlAuZXJyb3JzLmNvdW50Kys7XG4gICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IF90aGlzLl9GUC5lcnJvcnMubGltaXQpIHtcbiAgICAgICAgICAgIHZhciBmcEVyciA9IGVycm9ycy5sZW5ndGggPT09IDEgPyBlcnIgOiBuZXcgRnVuY3Rpb25hbEVycm9yKCdFcnJvciBMaW1pdCAnICsgX3RoaXMuX0ZQLmVycm9ycy5saW1pdCArICcgRXhjZWVkZWQuIEN1cnJlbnRBcnJheUluZGV4PScgKyBjICsgJyBBY3R1YWxOdW1iZXJPZkVycm9ycz0nICsgX3RoaXMuX0ZQLmVycm9ycy5jb3VudCwgeyBlcnJvcnM6IGVycm9ycywgcmVzdWx0czogcmVzdWx0cywgY3R4OiBfdGhpcyB9KTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUud2FybignRXJyb3IgTGltaXQ6JywgYywgSlNPTi5zdHJpbmdpZnkodGhpcy5fRlAuZXJyb3JzKSlcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShzZXRSZXN1bHQoYykoZXJyKSkuXG4gICAgICAgICAgICB0aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1xcbkFISEhISCBTSE9VTEQgRU5EIFJVTk5JTkcgTk9XLWlzaCEhISEhISEhIVxcbicpXG4gICAgICAgICAgICAgIHJlamVjdEl0KGZwRXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oJ0Vycm9yIE9LOicsIEpTT04uc3RyaW5naWZ5KHRoaXMuX0ZQLmVycm9ycykpXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5cbiAgICAgICAgICAgIHJlc29sdmUoKS5cbiAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24gKCkge3JldHVybiBzZXRSZXN1bHQoYykoZXJyKTt9KS5cbiAgICAgICAgICAgIHRoZW4oY2hlY2tBbmRSdW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGFsdFJlc3VsdHNbY107XG4gICAgICB9O1xuXG4gICAgICAvLyBLaWNrIG9mZiB4IG51bWJlciBvZiBpbml0aWFsIHRocmVhZHNcbiAgICAgIHdoaWxlIChpbml0aWFsVGhyZWFkIDwgdGhyZWFkTGltaXQgJiYgaW5pdGlhbFRocmVhZCA8IGFyZ3MubGVuZ3RoKSB7cnVuSXRlbShpbml0aWFsVGhyZWFkKyspO31cbiAgICB9KTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5aGNuSmhlWE11YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJbWx6Ulc1MWJXVnlZV0pzWlNJc0lrWlFTVzV3ZFhSRmNuSnZjaUlzSWtaMWJtTjBhVzl1WVd4RmNuSnZjaUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKdFlYQWlMQ0ptYVc1a0lpd2labWx1WkVsdVpHVjRJaXdpWm1sc2RHVnlJaXdpY21Wa2RXTmxJaXdpWTJGc2JHSmhZMnNpTENKZlptbHVaQ0lzSW1OaGJHd2lMQ0owYUdWdUlpd2lhWFJsYlNJc0ltbHVaR1Y0SWl3aWFYUmxjbUZpYkdVaUxDSkdVQ0lzSW5OMFpYQnpJaXdpWVdSa1UzUmxjQ0lzSW1GeVozVnRaVzUwY3lJc0lsOUdVQ0lzSW5CeWIyMXBjMlVpTENKeVpYTnZiSFpsSWl3aWNtVnpkV3gwY3lJc0ltbHVaR1Y0VDJZaUxDSjFibVJsWm1sdVpXUWlMQ0poWjJkeVpXZGhkR1VpTENKUWNtOXRhWE5sSWl3aWRtRnNkV1VpTENKamIyNWpZWFFpTENKeVpXUjFZMlZ5SWl3aWFXNXBkRlpoYkNJc0luSmxhbVZqZENJc0ltbDBaWEpoZEc5eUlpd2lVM2x0WW05c0lpd2lhU0lzSW01bGVIUWlMQ0pqZFhKeVpXNTBJaXdpWkc5dVpTSXNJblJ2ZEdGc0lpd2lZV3hzSWl3aVkyRjBZMmdpTENKaGNtZHpJaXdpWm00aUxDSnZjSFJwYjI1eklpd2liR1Z1WjNSb0lpd2ljbVZ6YjJ4MlpXUlBjbEpsYW1WamRHVmtJaXdpZEdoeVpXRmtUR2x0YVhRaUxDSk5ZWFJvSWl3aWJXRjRJaXdpYldsdUlpd2lZMjl1WTNWeWNtVnVZM2xNYVcxcGRDSXNJbWx1Ym1WeVZtRnNkV1Z6SWl3aWFXNXBkR2xoYkZSb2NtVmhaQ0lzSW1WeWNtOXljeUlzSW1OdmRXNTBJaXdpWVd4MFVtVnpkV3gwY3lJc0luUm9jbVZoWkZCdmIyd2lMQ0pUWlhRaUxDSjBhSEpsWVdSUWIyOXNSblZzYkNJc0luTnBlbVVpTENKcGMwUnZibVVpTENKc2FXMXBkQ0lzSW5ObGRGSmxjM1ZzZENJc0ltUmxiR1YwWlNJc0luSmxjMjlzZG1WSmRDSXNJbmdpTENKeVpXcGxZM1JKZENJc0ltbDBaVzF6SWl3aVkyOXRjR3hsZEdVaUxDSmphR1ZqYTBGdVpGSjFiaUlzSW5KMWJrbDBaVzBpTENKMllXd2lMQ0p6WlhSVWFXMWxiM1YwSWl3aVl5SXNJbUZrWkNJc0luQjFjMmdpTENKbGNuSWlMQ0ptY0VWeWNpSXNJbU4wZUNKZExDSnRZWEJ3YVc1bmN5STZJbWt3UWtGQmRVSkJMRkZCUVZFc2FVSkJRVklzUXl4RFFVRm9Ra01zV1N4WlFVRkJRU3haTzBGQlEybERSQ3hSUVVGUkxHdENRVUZTTEVNc1EwRkJha05GTEZrc1lVRkJRVUVzV1N4RFFVRmpReXhsTEdGQlFVRkJMR1U3TzBGQlJYSkNReXhQUVVGUFF5eFBRVUZRTEVkQlFXbENMRVZCUVVORExGRkJRVVFzUlVGQlRVTXNWVUZCVGl4RlFVRlpReXh2UWtGQldpeEZRVUYxUWtNc1kwRkJka0lzUlVGQkswSkRMR05CUVM5Q0xFVkJRV3BDT3p0QlFVVkJMRk5CUVZOSUxFbEJRVlFzUTBGQlkwa3NVVUZCWkN4RlFVRjNRanRCUVVOMFFpeFRRVUZQUXl4TlFVRk5ReXhKUVVGT0xFTkJRVmNzU1VGQldDeEZRVUZwUWtZc1VVRkJha0lzUlVGQk1rSkhMRWxCUVROQ0xFTkJRV2RETEhGQ1FVRkZReXhKUVVGR0xGRkJRVVZCTEVsQlFVWXNVVUZCV1VFc1NVRkJXaXhGUVVGb1F5eERRVUZRTzBGQlEwUTdRVUZEUkN4VFFVRlRVQ3hUUVVGVUxFTkJRVzFDUnl4UlFVRnVRaXhGUVVFMlFqdEJRVU16UWl4VFFVRlBReXhOUVVGTlF5eEpRVUZPTEVOQlFWY3NTVUZCV0N4RlFVRnBRa1lzVVVGQmFrSXNSVUZCTWtKSExFbEJRVE5DTEVOQlFXZERMSE5DUVVGRlJTeExRVUZHTEZOQlFVVkJMRXRCUVVZc1VVRkJZVUVzUzBGQllpeEZRVUZvUXl4RFFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUwb3NTMEZCVkN4RFFVRmxTeXhSUVVGbUxFVkJRWGxDVGl4UlFVRjZRaXhGUVVGdFF6dEJRVU5xUXl4TlFVRk5UeXhMUVVGTGJFSXNVVUZCVVN4VFFVRlNMRU5CUVZnN1FVRkRRU3hOUVVGSkxFdEJRVXR0UWl4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwTXNUMEZCVEN4RFFVRmhMRTlCUVdJc2RVTkJRVEJDUXl4VFFVRXhRaXhIUVVGUU8wRkJRMmhDTEUxQlFVa3NUMEZCVDBvc1VVRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRenRCUVVOc1EwNHNaVUZCVjAwc1VVRkJXRHRCUVVOQlFTeGxRVUZYTEV0QlFVdExMRWRCUVV3c1EwRkJVME1zVDBGQmNFSTdRVUZEUkRzN1FVRkZSQ3hUUVVGUFRDeEhRVUZIVFN4UFFVRklMRU5CUVZkUUxGRkJRVmc3UVVGRFNsSXNVVUZFU1N4RFFVTkhSU3hSUVVSSU8wRkJSVXBITEUxQlJra3NRMEZGUXl3eVFrRkJWMWNzVjBGQlYwRXNVVUZCVVN4RFFVRlNMRU5CUVZnN1FVRkRXQ3hOUVVGRFZpeE5RVUZOVlN4UlFVRlJMRU5CUVZJc1EwRkJVQ3hGUVVGdFFsUXNUMEZCVDFNc1VVRkJVVU1zVDBGQlVpeERRVUZuUWtRc1VVRkJVU3hEUVVGU0xFTkJRV2hDTEVOQlFURkNMRVZCUkZjN1FVRkZXQ3hOUVVGRFZpeE5RVUZOV1N4VFFVRlFMRVZCUVcxQ1dDeFBRVUZQTEVOQlFVTXNRMEZCTTBJc1JVRkdRU3hGUVVaRUxFTkJRVkE3UVVGTFJEczdRVUZGUkN4VFFVRlRVQ3hOUVVGVUxFTkJRV2RDVVN4UlFVRm9RaXhGUVVFd1FrNHNVVUZCTVVJc1JVRkJiME03UVVGRGJFTXNUVUZCU1N4TFFVRkxVU3hMUVVGVUxFVkJRV2RDTEU5QlFVOHNTMEZCUzBNc1QwRkJUQ3hEUVVGaExGRkJRV0lzZFVOQlFUSkNReXhUUVVFelFpeEhRVUZRTzBGQlEyaENMRTFCUVVrc1QwRkJUMG9zVVVGQlVDeExRVUZ2UWl4VlFVRjRRaXhGUVVGdlF6dEJRVU5zUTA0c1pVRkJWMDBzVVVGQldEdEJRVU5CUVN4bFFVRlhMRXRCUVV0TExFZEJRVXdzUTBGQlUwTXNUMEZCY0VJN1FVRkRSRHM3UVVGRlJDeFRRVUZQWWl4UFFVRlBUeXhSUVVGUUxFVkJRV2xDTEZWQlFVTlhMRk5CUVVRc1JVRkJXV0lzU1VGQldpeEZRVUZ4UWp0QlFVTXpReXhYUVVGUFl5eFJRVUZSVEN4UFFVRlNMRU5CUVdkQ1lpeFRRVUZUU1N4SlFVRlVMRU5CUVdoQ0xFVkJRV2REUkN4SlFVRm9ReXhEUVVGeFF5eDVRa0ZCVldkQ0xGRkJRVkZHTEZWQlFWVkhMRTFCUVZZc1EwRkJhVUlzUTBGQlEyaENMRWxCUVVRc1EwRkJha0lzUTBGQlVpeEhRVUZ0UTJFc1UwRkJOME1zUlVGQmNrTXNRMEZCVUR0QlFVTkVMRWRCUmswc1JVRkZTaXhGUVVaSkxFTkJRVkE3UVVGSFJEczdRVUZGUkN4VFFVRlRiRUlzVFVGQlZDeERRVUZuUWs4c1VVRkJhRUlzUlVGQk1FSmxMRTlCUVRGQ0xFVkJRVzFEUXl4UFFVRnVReXhGUVVFMFF6dEJRVU14UXl4TlFVRk5aaXhMUVVGTGJFSXNVVUZCVVN4VFFVRlNMRU5CUVZnN1FVRkRRU3hOUVVGSkxFdEJRVXR0UWl4TFFVRlVMRVZCUVdkQ0xFOUJRVThzUzBGQlMwTXNUMEZCVEN4RFFVRmhMRkZCUVdJc2RVTkJRVEpDUXl4VFFVRXpRaXhIUVVGUU8wRkJRMmhDTEUxQlFVa3NUMEZCVDBvc1VVRkJVQ3hMUVVGdlFpeFZRVUY0UWl4RlFVRnZRenRCUVVOc1EyZENMR05CUVZWRUxFOUJRVlk3UVVGRFFVRXNZMEZCVldZc1VVRkJWanRCUVVOQlFTeGxRVUZYTEV0QlFVdExMRWRCUVV3c1IwRkJWeXhMUVVGTFFTeEhRVUZNTEVOQlFWTkRMRTlCUVhCQ0xFZEJRVGhDTEVsQlFYcERPMEZCUTBRc1IwRktSQ3hOUVVsUE8wRkJRMHhPTEdWQlFWZERMRWRCUVVkTkxFOUJRVWdzUTBGQlYxQXNVVUZCV0N4RlFVRnhRaXhKUVVGeVFpeERRVUZZTzBGQlEwUTdRVUZEUkN4VFFVRlBMRWxCUVVsRExFVkJRVW9zUTBGQlR5eFZRVUZEVFN4UFFVRkVMRVZCUVZWVkxFMUJRVllzUlVGQmNVSTdRVUZEYWtNc1YwRkJUMnBDTEZOQlFWTklMRWxCUVZRc1EwRkJZeXh2UWtGQldUdEJRVU12UWl4VlFVRk5jVUlzVjBGQlYyeENMRk5CUVZOdFFpeFBRVUZQUkN4UlFVRm9RaXhIUVVGcVFqdEJRVU5CTEZWQlFVbEZMRWxCUVVrc1EwRkJVanM3UVVGRlFTeFZRVUZOUXl4UFFVRlBMRk5CUVZCQkxFbEJRVThzVVVGQlV6dEJRVU53UWl4WlFVRk5ReXhWUVVGVlNpeFRRVUZUUnl4SlFVRlVMRVZCUVdoQ08wRkJRMEVzV1VGQlNVTXNVVUZCVVVNc1NVRkJXaXhGUVVGclFpeFBRVUZQYUVJc1VVRkJVV2xDTEV0QlFWSXNRMEZCVURzN1FVRkZiRUphTEdkQ1FVRlJZU3hIUVVGU0xFTkJRVmtzUTBGQlEwUXNTMEZCUkN4RlFVRlJSaXhSUVVGUlZDeExRVUZvUWl4RFFVRmFPMEZCUTBkb1FpeFpRVVJJTEVOQlExRXNkVVJCUVVVeVFpeExRVUZHTEZsQlFWTXhRaXhKUVVGVUxHMUNRVUZ0UW5WQ0xFdEJRVXRPTEZGQlFWRlRMRXRCUVZJc1JVRkJaVEZDTEVsQlFXWXNSVUZCY1VKelFpeEhRVUZ5UWl4RFFVRk1MRU5CUVc1Q0xFVkJSRkk3UVVGRlIwMHNZVUZHU0N4RFFVVlRWQ3hOUVVaVU8wRkJSMFFzVDBGUVJEczdRVUZUUVVrc1YwRkJTMHdzVDBGQlREdEJRVU5FTEV0QlpFMHNRMEZCVUR0QlFXVkVMRWRCYUVKTkxFTkJRVkE3UVVGcFFrUTdPMEZCUlVRN1FVRkRRU3hUUVVGVE0wSXNSMEZCVkN4RFFVRmhjME1zU1VGQllpeEZRVUZ0UWtNc1JVRkJia0lzUlVGQmRVSkRMRTlCUVhaQ0xFVkJRV2RETzBGQlF6bENMRTFCUVUwMVFpeExRVUZMYkVJc1VVRkJVU3hUUVVGU0xFTkJRVmc3UVVGRFFTeE5RVUZKTEV0QlFVdHRRaXhMUVVGVUxFVkJRV2RDTEU5QlFVOHNTMEZCUzBNc1QwRkJUQ3hEUVVGaExFdEJRV0lzZFVOQlFYZENReXhUUVVGNFFpeEhRVUZRTzBGQlEyaENMRTFCUVVsQkxGVkJRVlV3UWl4TlFVRldMRXRCUVhGQ0xFTkJRWEpDTEVsQlFUQkNMRWxCUVRGQ0xFbEJRV3RETEV0QlFVdDZRaXhIUVVFelF5eEZRVUZuUkR0QlFVTTVRM1ZDTEZOQlFVdEVMRWxCUVV3N1FVRkRRVUVzVjBGQlR5eFJRVUZSTEV0QlFVdDBRaXhIUVVGaUxFbEJRVzlDTEV0QlFVdEJMRWRCUVV3c1EwRkJVME1zVDBGQmNFTTdRVUZEUkRzN1FVRkZSQ3hOUVVGSmVVSXNjVUpCUVhGQ0xFdEJRWHBDTzBGQlEwRXNUVUZCVFVNc1kwRkJZME1zUzBGQlMwTXNSMEZCVEN4RFFVRlRMRU5CUVZRc1JVRkJXVVFzUzBGQlMwVXNSMEZCVEN4RFFVRlZMRkZCUVZFc1MwRkJTemxDTEVkQlFXSXNTVUZCYjBJc1MwRkJTMEVzUjBGQlRDeERRVUZUSzBJc1owSkJRVGxDTEVsQlFXMUVMRU5CUVRWRUxFVkJRU3RFTEVOQlFTOUVMRU5CUVZvc1EwRkJjRUk3UVVGRFFTeE5RVUZOUXl4alFVRmpMRkZCUVZFc1MwRkJTMmhETEVkQlFXSXNTVUZCYjBJc1MwRkJTMEVzUjBGQlRDeERRVUZUUXl4UFFVRTNRaXhIUVVGMVF5eExRVUZMUkN4SFFVRk1MRU5CUVZORExFOUJRV2hFTEVkQlFUQkVUU3hSUVVGUlRDeFBRVUZTTEVOQlFXZENiMElzU1VGQmFFSXNRMEZCT1VVN1FVRkRRU3hOUVVGSlZ5eG5Ra0ZCWjBJc1EwRkJjRUk3UVVGRFFTeE5RVUZKUXl4VFFVRlRMRVZCUVdJN1FVRkRRU3hOUVVGSlF5eFJRVUZSTEVOQlFWbzdRVUZEUVN4TlFVRk5hRU1zVlVGQlZTeEZRVUZvUWl4RFFVRnZRbWxETEdGQlFXRXNSVUZCYWtNN1FVRkRRU3hOUVVGTlF5eGhRVUZoTEVsQlFVbERMRWRCUVVvc1JVRkJia0k3UVVGRFFTeE5RVUZOUXl4cFFrRkJhVUlzVTBGQmFrSkJMR05CUVdsQ0xGZEJRVTFHTEZkQlFWZEhMRWxCUVZnc1NVRkJiVUppTEZkQlFYcENMRVZCUVhaQ08wRkJRMEVzVFVGQlRXTXNVMEZCVXl4VFFVRlVRU3hOUVVGVExGZEJRVTlPTEZOQlFWTmlMRXRCUVV0SExFMUJRV1FzU1VGQmQwSkRMR3RDUVVGNFFpeEpRVUU0UTFFc1QwRkJUMVFzVFVGQlVDeEhRVUZuUWl4TlFVRkxla0lzUjBGQlRDeERRVUZUYTBNc1RVRkJWQ3hEUVVGblFsRXNTMEZCY2tZc1JVRkJaanRCUVVOQkxFMUJRVTFETEZsQlFWa3NVMEZCV2tFc1UwRkJXU3huUWtGQlV5eHBRa0ZCVXp0QlFVTnNRMDRzYVVKQlFWZFBMRTFCUVZnc1EwRkJhMEpzUkN4TFFVRnNRanRCUVVOQlV5eGpRVUZSVkN4TFFVRlNMRWxCUVdsQ1l5eExRVUZxUWp0QlFVTkJMR0ZCUVU5QkxFdEJRVkE3UVVGRFJDeExRVXBwUWl4RlFVRnNRanM3UVVGTlFTeFRRVUZQTEVsQlFVbGFMRVZCUVVvc1EwRkJUeXhWUVVGRFRTeFBRVUZFTEVWQlFWVlZMRTFCUVZZc1JVRkJjVUk3UVVGRGFrTXNVVUZCVFdsRExGbEJRVmtzVTBGQldrRXNVMEZCV1N4SlFVRkxPMEZCUTNKQ0xGVkJRVWx1UWl4clFrRkJTaXhGUVVGM1FqdEJRVU40UWtFc01rSkJRWEZDTEVsQlFYSkNPMEZCUTBGNFFpeGpRVUZSTkVNc1EwRkJVanRCUVVORUxFdEJTa1E3UVVGTFFTeFJRVUZOUXl4WFFVRlhMRk5CUVZoQkxGRkJRVmNzU1VGQlN6dEJRVU53UWl4VlFVRkpja0lzYTBKQlFVb3NSVUZCZDBJN1FVRkRlRUpCTERKQ1FVRnhRaXhKUVVGeVFqdEJRVU5CWkN4aFFVRlBhME1zUTBGQlVEdEJRVU5FTEV0QlNrUTdRVUZMUVdRc1owSkJRVmw0UXl4SlFVRmFMRU5CUVdsQ0xHbENRVUZUTzBGQlEzaENPRUlzTUVOQlFWY3dRaXhMUVVGWU8wRkJRMEVzVlVGQlNTeERRVUZEY2tVc1lVRkJZWEZGTEV0QlFXSXNRMEZCVEN4RlFVRXdRaXhQUVVGUGNFTXNUMEZCVHl4SlFVRkphRU1zV1VGQlNpeERRVUZwUWl4NVEwRkJha0lzUTBGQlVDeERRVUZRTzBGQlF6RkNMRlZCUVUxeFJTeFhRVUZYTEZOQlFWaEJMRkZCUVZjc1IwRkJUVHRCUVVOeVFpeFpRVUZKWml4UFFVRlBWQ3hOUVVGUUxFZEJRV2RDTEUxQlFVdDZRaXhIUVVGTUxFTkJRVk5yUXl4TlFVRlVMRU5CUVdkQ1VTeExRVUZ3UXl4RlFVRXlRenRCUVVONlEyNURMR3RDUVVGUllTeEhRVUZTTEVOQlFWbG5RaXhWUVVGYU8wRkJRMGMxUXl4alFVUklMRU5CUTFFc2QwSkJRVkYxUkN4VFFVRlROVU1zVDBGQlZDeERRVUZTTEVWQlJGSTdRVUZGUVN4cFFrRkJUeXhKUVVGUU8wRkJRMFE3UVVGRFJDeFpRVUZKYzBNc1VVRkJTaXhGUVVGak8wRkJRMXBzUXl4clFrRkJVV0VzUjBGQlVpeERRVUZaWjBJc1ZVRkJXanRCUVVOSE5VTXNZMEZFU0N4RFFVTlJMSGRDUVVGUmNVUXNWVUZCVlRGRExFOUJRVllzUTBGQlVpeEZRVVJTTzBGQlJVRXNhVUpCUVU4c1NVRkJVRHRCUVVORU8wRkJRMFFzWlVGQlR5eExRVUZRTzBGQlEwUXNUMEZhUkR0QlFXRkJMRlZCUVUwclF5eGpRVUZqTEZOQlFXUkJMRmRCUVdNc1RVRkJUenRCUVVONlFpeFpRVUZKZUVJc2EwSkJRVW9zUlVGQmQwSTdRVUZEZUVJc1dVRkJTU3hEUVVGRGRVSXNWVUZCUkN4SlFVRmxMRU5CUVVNNVF5eFJRVUZSWjBNc1MwRkJVaXhEUVVGd1FpeEZRVUZ2UTJkQ0xGRkJRVkZvUWl4TFFVRlNPMEZCUTNCRExHVkJRVTlwUWl4SFFVRlFPMEZCUTBRc1QwRktSRHM3UVVGTlFTeFZRVUZOUkN4VlFVRlZMRk5CUVZaQkxFOUJRVlVzU1VGQlN6dEJRVU51UWl4WlFVRkpla0lzYTBKQlFVb3NSVUZCZDBJN1FVRkRlRUpUTzBGQlEwRXNXVUZCU1Vrc1owSkJRVW9zUlVGQmMwSXNUMEZCVDJNc1YwRkJWeXh2UWtGQlRVWXNVVUZCVVVjc1EwRkJVaXhEUVVGT0xFVkJRVmdzUlVGQk5rSXNRMEZCTjBJc1EwRkJVRHRCUVVOMFFqdEJRVU5CTEZsQlFVbHVSQ3hSUVVGUmJVUXNRMEZCVWl4RFFVRktMRVZCUVdkQ08wRkJRMlE3UVVGRFFTeHBRa0ZCVDI1RUxGRkJRVkZ0UkN4RFFVRlNMRU5CUVZBN1FVRkRSRHRCUVVORWFrSXNiVUpCUVZkclFpeEhRVUZZTEVOQlFXVkVMRU5CUVdZN1FVRkRRVHRCUVVOQmJFSXNiVUpCUVZkclFpeERRVUZZTEVsQlFXZENMME1zVVVGQlVVd3NUMEZCVWl4RFFVRm5RbTlDTEV0QlFVdG5ReXhEUVVGTUxFTkJRV2hDTzBGQlEySTVSQ3haUVVSaExFTkJRMUlzZFVKQlFVOHJRaXhIUVVGSE5rSXNSMEZCU0N4RlFVRlJSU3hEUVVGU0xFVkJRVmRvUXl4SlFVRllMRU5CUVZBc1JVRkVVVHRCUVVWaU9VSXNXVUZHWVN4RFFVVlNMSFZDUVVGUGJVUXNWVUZCVlZjc1EwRkJWaXhGUVVGaFJpeEhRVUZpTEVOQlFWQXNSVUZHVVR0QlFVZGlOVVFzV1VGSVlTeERRVWRTTUVRc1YwRklVVHRCUVVsaU4wSXNZVUZLWVN4RFFVbFFMR1ZCUVU4N1FVRkRXaXhuUWtGQlMzSkNMRWRCUVV3c1EwRkJVMnRETEUxQlFWUXNRMEZCWjBKRExFdEJRV2hDTzBGQlEwRkVMR2xDUVVGUGMwSXNTVUZCVUN4RFFVRlpReXhIUVVGYU8wRkJRMEVzWTBGQlNYWkNMRTlCUVU5VUxFMUJRVkFzUjBGQlowSXNUVUZCUzNwQ0xFZEJRVXdzUTBGQlUydERMRTFCUVZRc1EwRkJaMEpSTEV0QlFYQkRMRVZCUVRKRE8wRkJRM3BETEdkQ1FVRk5aMElzVVVGQlVYaENMRTlCUVU5VUxFMUJRVkFzUzBGQmEwSXNRMEZCYkVJc1IwRkJjMEpuUXl4SFFVRjBRaXhIUVVFMFFpeEpRVUZKTlVVc1pVRkJTaXhyUWtGQmJVTXNUVUZCUzIxQ0xFZEJRVXdzUTBGQlUydERMRTFCUVZRc1EwRkJaMEpSTEV0QlFXNUVMSEZEUVVGM1Jsa3NRMEZCZUVZc09FSkJRV3RJTEUxQlFVdDBSQ3hIUVVGTUxFTkJRVk5yUXl4TlFVRlVMRU5CUVdkQ1F5eExRVUZzU1N4RlFVRXlTU3hGUVVGRFJDeGpRVUZFTEVWQlFWTXZRaXhuUWtGQlZDeEZRVUZyUW5kRUxGVkJRV3hDTEVWQlFUTkpMRU5CUVRGRE8wRkJRMEU3UVVGRFFYQkVMRzlDUVVGUlRDeFBRVUZTTEVOQlFXZENlVU1zVlVGQlZWY3NRMEZCVml4RlFVRmhSeXhIUVVGaUxFTkJRV2hDTzBGQlEwZHFSU3huUWtGRVNDeERRVU5STEZsQlFVMDdRVUZEVmp0QlFVTkJkVVFzZFVKQlFWTlhMRXRCUVZRN1FVRkRSQ3hoUVVwSU8wRkJTMFFzVjBGU1JDeE5RVkZQTzBGQlEwdzdRVUZEUVN4dFFrRkJUMjVFTzBGQlEwcE1MRzFDUVVSSk8wRkJSVXBXTEdkQ1FVWkpMRU5CUlVNc2IwSkJRVTF0UkN4VlFVRlZWeXhEUVVGV0xFVkJRV0ZITEVkQlFXSXNRMEZCVGl4RlFVWkVPMEZCUjBwcVJTeG5Ra0ZJU1N4RFFVZERNRVFzVjBGSVJDeERRVUZRTzBGQlNVUTdRVUZEUml4VFFYUkNZU3hEUVVGb1FqczdRVUYzUWtFc1pVRkJUMlFzVjBGQlYydENMRU5CUVZnc1EwRkJVRHRCUVVORUxFOUJjRU5FT3p0QlFYTkRRVHRCUVVOQkxHRkJRVTl5UWl4blFrRkJaMEpPTEZkQlFXaENMRWxCUVN0Q1RTeG5Ra0ZCWjBKWUxFdEJRVXRITEUxQlFUTkVMRWRCUVcxRk1FSXNVVUZCVVd4Q0xHVkJRVklzUlVGQmJrVTdRVUZEUkN4TFFUbEVSRHRCUVN0RVJDeEhRVEZGVFN4RFFVRlFPMEZCTWtWRUlpd2labWxzWlNJNkltRnljbUY1Y3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJdlZYTmxjbk12Wkd4bGRua3ZZMjlrWlM5dmMzTXZablZ1WTNScGIyNWhiQzF5YVhabGNpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbU52Ym5OMElIdHBjMFZ1ZFcxbGNtRmliR1Y5SUQwZ2NtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwzVjBhV3h6SnlsY2JtTnZibk4wSUh0R1VFbHVjSFYwUlhKeWIzSXNJRVoxYm1OMGFXOXVZV3hGY25KdmNuMGdQU0J5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhKeWIzSnpKeWxjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN2JXRndMQ0JtYVc1a0xDQm1hVzVrU1c1a1pYZ3NJR1pwYkhSbGNpd2djbVZrZFdObGZWeHVYRzVtZFc1amRHbHZiaUJtYVc1a0tHTmhiR3hpWVdOcktTQjdYRzRnSUhKbGRIVnliaUJmWm1sdVpDNWpZV3hzS0hSb2FYTXNJR05oYkd4aVlXTnJLUzUwYUdWdUtDaDdhWFJsYlgwcElEMCtJR2wwWlcwcFhHNTlYRzVtZFc1amRHbHZiaUJtYVc1a1NXNWtaWGdvWTJGc2JHSmhZMnNwSUh0Y2JpQWdjbVYwZFhKdUlGOW1hVzVrTG1OaGJHd29kR2hwY3l3Z1kyRnNiR0poWTJzcExuUm9aVzRvS0h0cGJtUmxlSDBwSUQwK0lHbHVaR1Y0S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJmWm1sdVpDaHBkR1Z5WVdKc1pTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ1kyOXVjM1FnUmxBZ1BTQnlaWEYxYVhKbEtDY3VMMmx1WkdWNEp5bGNiaUFnYVdZZ0tIUm9hWE11YzNSbGNITXBJSEpsZEhWeWJpQjBhR2x6TG1Ga1pGTjBaWEFvSjE5bWFXNWtKeXdnV3k0dUxtRnlaM1Z0Wlc1MGMxMHBYRzRnSUdsbUlDaDBlWEJsYjJZZ2FYUmxjbUZpYkdVZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0JqWVd4c1ltRmpheUE5SUdsMFpYSmhZbXhsWEc0Z0lDQWdhWFJsY21GaWJHVWdQU0IwYUdsekxsOUdVQzV3Y205dGFYTmxYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdSbEF1Y21WemIyeDJaU2hwZEdWeVlXSnNaU2xjYmlBZ0lDQXVabWxzZEdWeUtHTmhiR3hpWVdOcktWeHVJQ0FnSUM1MGFHVnVLSEpsYzNWc2RITWdQVDRnY21WemRXeDBjeUFtSmlCeVpYTjFiSFJ6V3pCZFhHNGdJQ0FnSUNBZ0lEOGdlMmwwWlcwNklISmxjM1ZzZEhOYk1GMHNJR2x1WkdWNE9pQnlaWE4xYkhSekxtbHVaR1Y0VDJZb2NtVnpkV3gwYzFzd1hTbDlYRzRnSUNBZ0lDQWdJRG9nZTJsMFpXMDZJSFZ1WkdWbWFXNWxaQ3dnSUdsdVpHVjRPaUF0TVgwcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdacGJIUmxjaWhwZEdWeVlXSnNaU3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdhV1lnS0hSb2FYTXVjM1JsY0hNcElISmxkSFZ5YmlCMGFHbHpMbUZrWkZOMFpYQW9KMlpwYkhSbGNpY3NJRnN1TGk1aGNtZDFiV1Z1ZEhOZEtWeHVJQ0JwWmlBb2RIbHdaVzltSUdsMFpYSmhZbXhsSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdZMkZzYkdKaFkyc2dQU0JwZEdWeVlXSnNaVnh1SUNBZ0lHbDBaWEpoWW14bElEMGdkR2hwY3k1ZlJsQXVjSEp2YldselpWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlISmxaSFZqWlNocGRHVnlZV0pzWlN3Z0tHRm5aM0psWjJGMFpTd2dhWFJsYlNrZ1BUNGdlMXh1SUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvWTJGc2JHSmhZMnNvYVhSbGJTa3BMblJvWlc0b2RtRnNkV1VnUFQ0Z0tIWmhiSFZsSUQ4Z1lXZG5jbVZuWVhSbExtTnZibU5oZENoYmFYUmxiVjBwSURvZ1lXZG5jbVZuWVhSbEtTbGNiaUFnZlN3Z1cxMHBYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxaSFZqWlNocGRHVnlZV0pzWlN3Z2NtVmtkV05sY2l3Z2FXNXBkRlpoYkNrZ2UxeHVJQ0JqYjI1emRDQkdVQ0E5SUhKbGNYVnBjbVVvSnk0dmFXNWtaWGduS1Z4dUlDQnBaaUFvZEdocGN5NXpkR1Z3Y3lrZ2NtVjBkWEp1SUhSb2FYTXVZV1JrVTNSbGNDZ25jbVZrZFdObEp5d2dXeTR1TG1GeVozVnRaVzUwYzEwcFhHNGdJR2xtSUNoMGVYQmxiMllnYVhSbGNtRmliR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQnBibWwwVm1Gc0lEMGdjbVZrZFdObGNseHVJQ0FnSUhKbFpIVmpaWElnUFNCcGRHVnlZV0pzWlZ4dUlDQWdJR2wwWlhKaFlteGxJRDBnZEdocGN5NWZSbEFnUHlCMGFHbHpMbDlHVUM1d2NtOXRhWE5sSURvZ2RHaHBjMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR2wwWlhKaFlteGxJRDBnUmxBdWNtVnpiMngyWlNocGRHVnlZV0pzWlN3Z2RHaHBjeWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdibVYzSUVaUUtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQnlaWFIxY200Z2FYUmxjbUZpYkdVdWRHaGxiaWhwZEdWeVlXSnNaU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0JwZEdWeVlYUnZjaUE5SUdsMFpYSmhZbXhsVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBvS1Z4dUlDQWdJQ0FnYkdWMElHa2dQU0F3WEc1Y2JpQWdJQ0FnSUdOdmJuTjBJRzVsZUhRZ1BTQjBiM1JoYkNBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTjFjbkpsYm5RZ1BTQnBkR1Z5WVhSdmNpNXVaWGgwS0NsY2JpQWdJQ0FnSUNBZ2FXWWdLR04xY25KbGJuUXVaRzl1WlNrZ2NtVjBkWEp1SUhKbGMyOXNkbVVvZEc5MFlXd3BYRzVjYmlBZ0lDQWdJQ0FnVUhKdmJXbHpaUzVoYkd3b1czUnZkR0ZzTENCamRYSnlaVzUwTG5aaGJIVmxYU2xjYmlBZ0lDQWdJQ0FnSUNBdWRHaGxiaWdvVzNSdmRHRnNMQ0JwZEdWdFhTa2dQVDRnYm1WNGRDaHlaV1IxWTJWeUtIUnZkR0ZzTENCcGRHVnRMQ0JwS3lzcEtTbGNiaUFnSUNBZ0lDQWdJQ0F1WTJGMFkyZ29jbVZxWldOMEtWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnVaWGgwS0dsdWFYUldZV3dwWEc0Z0lDQWdmU2xjYmlBZ2ZTbGNibjFjYmx4dUx5cGxjMnhwYm5RZ2JXRjRMWE4wWVhSbGJXVnVkSE02SUZ0Y0ltVnljbTl5WENJc0lEWXdYU292WEc1bWRXNWpkR2x2YmlCdFlYQW9ZWEpuY3l3Z1ptNHNJRzl3ZEdsdmJuTXBJSHRjYmlBZ1kyOXVjM1FnUmxBZ1BTQnlaWEYxYVhKbEtDY3VMMmx1WkdWNEp5bGNiaUFnYVdZZ0tIUm9hWE11YzNSbGNITXBJSEpsZEhWeWJpQjBhR2x6TG1Ga1pGTjBaWEFvSjIxaGNDY3NJRnN1TGk1aGNtZDFiV1Z1ZEhOZEtWeHVJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNU0FtSmlCMGFHbHpJQ1ltSUhSb2FYTXVYMFpRS1NCN1hHNGdJQ0FnWm00Z1BTQmhjbWR6WEc0Z0lDQWdZWEpuY3lBOUlIUm9hWE1nSmlZZ2RHaHBjeTVmUmxBZ0ppWWdkR2hwY3k1ZlJsQXVjSEp2YldselpWeHVJQ0I5WEc1Y2JpQWdiR1YwSUhKbGMyOXNkbVZrVDNKU1pXcGxZM1JsWkNBOUlHWmhiSE5sWEc0Z0lHTnZibk4wSUhSb2NtVmhaRXhwYldsMElEMGdUV0YwYUM1dFlYZ29NU3dnVFdGMGFDNXRhVzRvS0hSb2FYTWdKaVlnZEdocGN5NWZSbEFnSmlZZ2RHaHBjeTVmUmxBdVkyOXVZM1Z5Y21WdVkzbE1hVzFwZENrZ2ZId2dNU3dnTkNrcFhHNGdJR052Ym5OMElHbHVibVZ5Vm1Gc2RXVnpJRDBnZEdocGN5QW1KaUIwYUdsekxsOUdVQ0FtSmlCMGFHbHpMbDlHVUM1d2NtOXRhWE5sSUQ4Z2RHaHBjeTVmUmxBdWNISnZiV2x6WlNBNklGQnliMjFwYzJVdWNtVnpiMngyWlNoaGNtZHpLVnh1SUNCc1pYUWdhVzVwZEdsaGJGUm9jbVZoWkNBOUlEQmNiaUFnYkdWMElHVnljbTl5Y3lBOUlGdGRYRzRnSUd4bGRDQmpiM1Z1ZENBOUlEQmNiaUFnWTI5dWMzUWdjbVZ6ZFd4MGN5QTlJRnRkTENCaGJIUlNaWE4xYkhSeklEMGdXMTFjYmlBZ1kyOXVjM1FnZEdoeVpXRmtVRzl2YkNBOUlHNWxkeUJUWlhRb0tWeHVJQ0JqYjI1emRDQjBhSEpsWVdSUWIyOXNSblZzYkNBOUlDZ3BJRDArSUhSb2NtVmhaRkJ2YjJ3dWMybDZaU0ErUFNCMGFISmxZV1JNYVcxcGRGeHVJQ0JqYjI1emRDQnBjMFJ2Ym1VZ1BTQW9LU0E5UGlBZ1kyOTFiblFnUGowZ1lYSm5jeTVzWlc1bmRHZ2dmSHdnY21WemIyeDJaV1JQY2xKbGFtVmpkR1ZrSUh4OElHVnljbTl5Y3k1c1pXNW5kR2dnUGlCMGFHbHpMbDlHVUM1bGNuSnZjbk11YkdsdGFYUmNiaUFnWTI5dWMzUWdjMlYwVW1WemRXeDBJRDBnYVc1a1pYZ2dQVDRnZG1Gc2RXVWdQVDRnZTF4dUlDQWdJSFJvY21WaFpGQnZiMnd1WkdWc1pYUmxLR2x1WkdWNEtWeHVJQ0FnSUhKbGMzVnNkSE5iYVc1a1pYaGRJRDBnZG1Gc2RXVmNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVmNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnVaWGNnUmxBb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhKbGMyOXNkbVZKZENBOUlIZ2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tISmxjMjlzZG1Wa1QzSlNaV3BsWTNSbFpDa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ2NtVnpiMngyWldSUGNsSmxhbVZqZEdWa0lEMGdkSEoxWlZ4dUlDQWdJQ0FnY21WemIyeDJaU2g0S1Z4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCeVpXcGxZM1JKZENBOUlIZ2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tISmxjMjlzZG1Wa1QzSlNaV3BsWTNSbFpDa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ2NtVnpiMngyWldSUGNsSmxhbVZqZEdWa0lEMGdkSEoxWlZ4dUlDQWdJQ0FnY21WcVpXTjBLSGdwWEc0Z0lDQWdmVnh1SUNBZ0lHbHVibVZ5Vm1Gc2RXVnpMblJvWlc0b2FYUmxiWE1nUFQ0Z2UxeHVJQ0FnSUNBZ1lYSm5jeUE5SUZzdUxpNXBkR1Z0YzExY2JpQWdJQ0FnSUdsbUlDZ2hhWE5GYm5WdFpYSmhZbXhsS0dsMFpXMXpLU2tnY21WMGRYSnVJSEpsYW1WamRDaHVaWGNnUmxCSmJuQjFkRVZ5Y205eUtDZEpiblpoYkdsa0lHbHVjSFYwSUdSaGRHRWdjR0Z6YzJWa0lHbHVkRzhnUmxBdWJXRndLQ2tuS1NsY2JpQWdJQ0FnSUdOdmJuTjBJR052YlhCc1pYUmxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0p6TG14bGJtZDBhQ0ErSUhSb2FYTXVYMFpRTG1WeWNtOXljeTVzYVcxcGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlV1WVd4c0tHRnNkRkpsYzNWc2RITXBYRzRnSUNBZ0lDQWdJQ0FnSUNBdWRHaGxiaWhrWVhSaElEMCtJSEpsYW1WamRFbDBLSEpsYzNWc2RITXBLVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dselJHOXVaU2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdVSEp2YldselpTNWhiR3dvWVd4MFVtVnpkV3gwY3lsY2JpQWdJQ0FnSUNBZ0lDQWdJQzUwYUdWdUtHUmhkR0VnUFQ0Z2NtVnpiMngyWlVsMEtISmxjM1ZzZEhNcEtWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpiMjV6ZENCamFHVmphMEZ1WkZKMWJpQTlJSFpoYkNBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTnZiSFpsWkU5eVVtVnFaV04wWldRcElISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZqYjIxd2JHVjBaU2dwSUNZbUlDRnlaWE4xYkhSelcyTnZkVzUwWFNrZ2NuVnVTWFJsYlNoamIzVnVkQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFpoYkZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCamIyNXpkQ0J5ZFc1SmRHVnRJRDBnWXlBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTnZiSFpsWkU5eVVtVnFaV04wWldRcElISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ1kyOTFiblFySzF4dUlDQWdJQ0FnSUNCcFppQW9kR2h5WldGa1VHOXZiRVoxYkd3b0tTa2djbVYwZFhKdUlITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2NuVnVTWFJsYlNoaktTd2dNQ2xjYmlBZ0lDQWdJQ0FnTHk4Z1kyOXVjM1FnYVhORGIyMXdiR1YwWlNBOUlHTnZiWEJzWlhSbEtDbGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkSE5iWTEwcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG1WeWNtOXlLQ2RqYjIxd2JHVjBaV1F2Y0hKdlkyVnpjMmx1WnlCcGRHVnRJR0ZzY21WaFpIa25MQ0JqTENCeVpYTjFiSFJ6VzJOZEtWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhSelcyTmRYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdoeVpXRmtVRzl2YkM1aFpHUW9ZeWxjYmlBZ0lDQWdJQ0FnTHk4Z1pXbDBhR1Z5SUdkbGRDQjJZV3gxWlNCM2FYUm9JR0JtYmlocGRHVnRLV0FnYjNJZ1lHbDBaVzB1ZEdobGJpaG1iaWxnWEc0Z0lDQWdJQ0FnSUdGc2RGSmxjM1ZzZEhOYlkxMGdQU0JRY205dGFYTmxMbkpsYzI5c2RtVW9ZWEpuYzF0alhTbGNiaUFnSUNBZ0lDQWdJQ0F1ZEdobGJpaDJZV3dnUFQ0Z1ptNG9kbUZzTENCakxDQmhjbWR6S1NsY2JpQWdJQ0FnSUNBZ0lDQXVkR2hsYmloMllXd2dQVDRnYzJWMFVtVnpkV3gwS0dNcEtIWmhiQ2twWEc0Z0lDQWdJQ0FnSUNBZ0xuUm9aVzRvWTJobFkydEJibVJTZFc0cFhHNGdJQ0FnSUNBZ0lDQWdMbU5oZEdOb0tHVnljaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOUdVQzVsY25KdmNuTXVZMjkxYm5RcksxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSnpMbkIxYzJnb1pYSnlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eWN5NXNaVzVuZEdnZ1BpQjBhR2x6TGw5R1VDNWxjbkp2Y25NdWJHbHRhWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdabkJGY25JZ1BTQmxjbkp2Y25NdWJHVnVaM1JvSUQwOVBTQXhJRDhnWlhKeUlEb2dibVYzSUVaMWJtTjBhVzl1WVd4RmNuSnZjaWhnUlhKeWIzSWdUR2x0YVhRZ0pIdDBhR2x6TGw5R1VDNWxjbkp2Y25NdWJHbHRhWFI5SUVWNFkyVmxaR1ZrTGlCRGRYSnlaVzUwUVhKeVlYbEpibVJsZUQwa2UyTjlJRUZqZEhWaGJFNTFiV0psY2s5bVJYSnliM0p6UFNSN2RHaHBjeTVmUmxBdVpYSnliM0p6TG1OdmRXNTBmV0FzSUh0bGNuSnZjbk1zSUhKbGMzVnNkSE1zSUdOMGVEb2dkR2hwYzMwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHTnZibk52YkdVdWQyRnliaWduUlhKeWIzSWdUR2x0YVhRNkp5d2dZeXdnU2xOUFRpNXpkSEpwYm1kcFpua29kR2hwY3k1ZlJsQXVaWEp5YjNKektTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1VISnZiV2x6WlM1eVpYTnZiSFpsS0hObGRGSmxjM1ZzZENoaktTaGxjbklwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1MGFHVnVLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOdmJuTnZiR1V1Ykc5bktDZGNYRzVCU0VoSVNFZ2dVMGhQVlV4RUlFVk9SQ0JTVlU1T1NVNUhJRTVQVnkxcGMyZ2hJU0VoSVNFaElTRmNYRzRuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wU1hRb1puQkZjbklwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR052Ym5OdmJHVXVkMkZ5YmlnblJYSnliM0lnVDBzNkp5d2dTbE5QVGk1emRISnBibWRwWm5rb2RHaHBjeTVmUmxBdVpYSnliM0p6S1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ6YjJ4MlpTZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMblJvWlc0b0tDa2dQVDRnYzJWMFVtVnpkV3gwS0dNcEtHVnljaWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9ZMmhsWTJ0QmJtUlNkVzRwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlNsY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXeDBVbVZ6ZFd4MGMxdGpYVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCTGFXTnJJRzltWmlCNElHNTFiV0psY2lCdlppQnBibWwwYVdGc0lIUm9jbVZoWkhOY2JpQWdJQ0FnSUhkb2FXeGxJQ2hwYm1sMGFXRnNWR2h5WldGa0lEd2dkR2h5WldGa1RHbHRhWFFnSmlZZ2FXNXBkR2xoYkZSb2NtVmhaQ0E4SUdGeVozTXViR1Z1WjNSb0tTQnlkVzVKZEdWdEtHbHVhWFJwWVd4VWFISmxZV1FyS3lsY2JpQWdJQ0I5S1Z4dUlDQjlLVnh1ZlZ4dUlsMTlcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9hcnJheXMuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpLEZQSW5wdXRFcnJvciA9IF9yZXF1aXJlLkZQSW5wdXRFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGxpc3RlbjogbGlzdGVuIH07XG5cbmZ1bmN0aW9uIGxpc3RlbihvYmopIHtmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZXZlbnROYW1lcyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtldmVudE5hbWVzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTt9XG4gIGlmICh0eXBlb2YgZXZlbnROYW1lcyA9PT0gJ3N0cmluZycpIGV2ZW50TmFtZXMgPSBbZXZlbnROYW1lc107XG4gIGlmICghb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10pIHtcbiAgICB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdJbnB1dCBvYmplY3QgaXNuXFwndCBhIHZhbGlkIEV2ZW50RW1pdHRlciBvciBzaW1pbGFyLicpO1xuICB9XG5cbiAgLy8gU2V0cyB1cCB0aGUgaGFuZGxlcnNcbiAgdmFyIGhhbmRsZXIgPSB0aGlzLmNoYWluRW5kKCk7XG4gIC8vIGNvbnNvbGUubG9nKGAgICA+IEF0dGFjaGluZyAke2V2ZW50TmFtZXN9IGhhbmRsZXJgLCBldmVudE5hbWVzKVxuICB0aGlzLmNsZWFudXBIYW5kbGVzID0gZXZlbnROYW1lcy5tYXAoZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgIG9ialtvYmouYWRkRXZlbnRMaXN0ZW5lciA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdvbiddKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtyZXR1cm4gb2JqW29iai5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ29mZiddKGV2ZW50TmFtZSwgaGFuZGxlcik7fTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5bGRtVnVkSE11YW5NaVhTd2libUZ0WlhNaU9sc2ljbVZ4ZFdseVpTSXNJa1pRU1c1d2RYUkZjbkp2Y2lJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaUxDSnNhWE4wWlc0aUxDSnZZbW9pTENKbGRtVnVkRTVoYldWeklpd2lZV1JrUlhabGJuUk1hWE4wWlc1bGNpSXNJbWhoYm1Sc1pYSWlMQ0pqYUdGcGJrVnVaQ0lzSW1Oc1pXRnVkWEJJWVc1a2JHVnpJaXdpYldGd0lpd2laWFpsYm5ST1lXMWxJaXdpY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lKZExDSnRZWEJ3YVc1bmN5STZJbVZCUVhWQ1FTeFJRVUZSTEd0Q1FVRlNMRU1zUTBGQmFFSkRMRmtzV1VGQlFVRXNXVHM3UVVGRlVFTXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFpeEZRVUZEUXl4alFVRkVMRVZCUVdwQ096dEJRVVZCTEZOQlFWTkJMRTFCUVZRc1EwRkJaMEpETEVkQlFXaENMRVZCUVc5RExHMURRVUZhUXl4VlFVRlpMRzFGUVVGYVFTeFZRVUZaTzBGQlEyeERMRTFCUVVrc1QwRkJUMEVzVlVGQlVDeExRVUZ6UWl4UlFVRXhRaXhGUVVGdlEwRXNZVUZCWVN4RFFVRkRRU3hWUVVGRUxFTkJRV0k3UVVGRGNFTXNUVUZCU1N4RFFVRkRSQ3hKUVVGSlFTeEpRVUZKUlN4blFrRkJTaXhIUVVGMVFpeHJRa0ZCZGtJc1IwRkJORU1zU1VGQmFFUXNRMEZCVEN4RlFVRTBSRHRCUVVNeFJDeFZRVUZOTEVsQlFVbE9MRmxCUVVvc1EwRkJhVUlzYzBSQlFXcENMRU5CUVU0N1FVRkRSRHM3UVVGRlJEdEJRVU5CTEUxQlFVMVBMRlZCUVZVc1MwRkJTME1zVVVGQlRDeEZRVUZvUWp0QlFVTkJPMEZCUTBFc1QwRkJTME1zWTBGQlRDeEhRVUZ6UWtvc1YwRkJWMHNzUjBGQldDeERRVUZsTEhGQ1FVRmhPMEZCUTJoRVRpeFJRVUZKUVN4SlFVRkpSU3huUWtGQlNpeEhRVUYxUWl4clFrRkJka0lzUjBGQk5FTXNTVUZCYUVRc1JVRkJjMFJMTEZOQlFYUkVMRVZCUVdsRlNpeFBRVUZxUlR0QlFVTkJMRmRCUVU4c2IwSkJRVTFJTEVsQlFVbEJMRWxCUVVsUkxHMUNRVUZLTEVkQlFUQkNMSEZDUVVFeFFpeEhRVUZyUkN4TFFVRjBSQ3hGUVVFMlJFUXNVMEZCTjBRc1JVRkJkMFZLTEU5QlFYaEZMRU5CUVU0c1JVRkJVRHRCUVVORUxFZEJTSEZDTEVOQlFYUkNPenRCUVV0QkxGTkJRVThzU1VGQlVEdEJRVU5FSWl3aVptbHNaU0k2SW1WMlpXNTBjeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZaR3hsZG5rdlkyOWtaUzl2YzNNdlpuVnVZM1JwYjI1aGJDMXlhWFpsY2lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUh0R1VFbHVjSFYwUlhKeWIzSjlJRDBnY21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWeWNtOXljeWNwWEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UyeHBjM1JsYm4xY2JseHVablZ1WTNScGIyNGdiR2x6ZEdWdUtHOWlhaXdnTGk0dVpYWmxiblJPWVcxbGN5a2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHVjJaVzUwVG1GdFpYTWdQVDA5SUNkemRISnBibWNuS1NCbGRtVnVkRTVoYldWeklEMGdXMlYyWlc1MFRtRnRaWE5kWEc0Z0lHbG1JQ2doYjJKcVcyOWlhaTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlJRDhnSjJGa1pFVjJaVzUwVEdsemRHVnVaWEluSURvZ0oyOXVKMTBwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUmxCSmJuQjFkRVZ5Y205eUtDZEpibkIxZENCdlltcGxZM1FnYVhOdVhGd25kQ0JoSUhaaGJHbGtJRVYyWlc1MFJXMXBkSFJsY2lCdmNpQnphVzFwYkdGeUxpY3BYRzRnSUgxY2JseHVJQ0F2THlCVFpYUnpJSFZ3SUhSb1pTQm9ZVzVrYkdWeWMxeHVJQ0JqYjI1emRDQm9ZVzVrYkdWeUlEMGdkR2hwY3k1amFHRnBia1Z1WkNncFhHNGdJQzh2SUdOdmJuTnZiR1V1Ykc5bktHQWdJQ0ErSUVGMGRHRmphR2x1WnlBa2UyVjJaVzUwVG1GdFpYTjlJR2hoYm1Sc1pYSmdMQ0JsZG1WdWRFNWhiV1Z6S1Z4dUlDQjBhR2x6TG1Oc1pXRnVkWEJJWVc1a2JHVnpJRDBnWlhabGJuUk9ZVzFsY3k1dFlYQW9aWFpsYm5ST1lXMWxJRDArSUh0Y2JpQWdJQ0J2WW1wYmIySnFMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSWdQeUFuWVdSa1JYWmxiblJNYVhOMFpXNWxjaWNnT2lBbmIyNG5YU2hsZG1WdWRFNWhiV1VzSUdoaGJtUnNaWElwWEc0Z0lDQWdjbVYwZFhKdUlDZ3BJRDArSUc5aWFsdHZZbW91Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lBL0lDZHlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlKeUE2SUNkdlptWW5YU2hsZG1WdWRFNWhiV1VzSUdoaGJtUnNaWElwWEc0Z0lIMHBYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTmNibjFjYmlKZGZRPT1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9ldmVudHMuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIF9yZXF1aXJlID0gcmVxdWlyZSgnLi9tb2R1bGVzL3V0aWxzJyksaXNQcm9taXNlTGlrZSA9IF9yZXF1aXJlLmlzUHJvbWlzZUxpa2U7XG5cbm1vZHVsZS5leHBvcnRzID0geyB0aGVuSWY6IHRoZW5JZiwgdGFwSWY6IHRhcElmLCBfdGhlbklmOiBfdGhlbklmIH07XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZDtcbiAgICBjb25kID0gZnVuY3Rpb24gY29uZCh4KSB7cmV0dXJuIHg7fTtcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7cmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSk7fSk7XG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKTtcbn1cblxuZnVuY3Rpb24gdGFwSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0YXBJZicsIFtdLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZDtcbiAgICBjb25kID0gZnVuY3Rpb24gY29uZCh4KSB7cmV0dXJuIHg7fTtcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7cmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKSh2YWx1ZSk7fSk7XG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gX3RoZW5JZigpIHt2YXIgY29uZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZnVuY3Rpb24gKHgpIHtyZXR1cm4geDt9O3ZhciBpZlRydWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZ1bmN0aW9uICh4KSB7cmV0dXJuIHg7fTt2YXIgaWZGYWxzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZnVuY3Rpb24gKCkge3JldHVybiBudWxsO307dmFyIHJldHVyblZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcbiAgdmFyIEZQID0gcmVxdWlyZSgnLi9pbmRleCcpO1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7cmV0dXJuIChcbiAgICAgIEZQLnJlc29sdmUoY29uZCh2YWx1ZSkpLlxuICAgICAgdGhlbihmdW5jdGlvbiAoYW5zKSB7cmV0dXJuIGFucyA/IGlmVHJ1ZSh2YWx1ZSkgOiBpZkZhbHNlKHZhbHVlKTt9KS5cbiAgICAgIHRoZW4oZnVuY3Rpb24gKHYpIHtyZXR1cm4gcmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHY7fSkpO307XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5amIyNWthWFJwYjI1aGJDNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aWFYTlFjbTl0YVhObFRHbHJaU0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKMGFHVnVTV1lpTENKMFlYQkpaaUlzSWw5MGFHVnVTV1lpTENKamIyNWtJaXdpYVdaVWNuVmxJaXdpYVdaR1lXeHpaU0lzSW5OMFpYQnpJaXdpWVdSa1UzUmxjQ0lzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luZ2lMQ0owYUdWdUlpd2lkbUZzZFdVaUxDSnlaWFIxY201V1lXeDFaU0lzSWtaUUlpd2ljbVZ6YjJ4MlpTSXNJbUZ1Y3lJc0luWWlYU3dpYldGd2NHbHVaM01pT2lKbFFVRjNRa0VzVVVGQlVTeHBRa0ZCVWl4RExFTkJRV3BDUXl4aExGbEJRVUZCTEdFN08wRkJSVkJETEU5QlFVOURMRTlCUVZBc1IwRkJhVUlzUlVGQlEwTXNZMEZCUkN4RlFVRlRReXhaUVVGVUxFVkJRV2RDUXl4blFrRkJhRUlzUlVGQmFrSTdPMEZCUlVFc1UwRkJVMFlzVFVGQlZDeERRVUZuUWtjc1NVRkJhRUlzUlVGQmMwSkRMRTFCUVhSQ0xFVkJRVGhDUXl4UFFVRTVRaXhGUVVGMVF6dEJRVU55UXl4TlFVRkpMRXRCUVV0RExFdEJRVlFzUlVGQlowSXNUMEZCVHl4TFFVRkxReXhQUVVGTUxFTkJRV0VzVVVGQllpeDFRMEZCTWtKRExGTkJRVE5DTEVkQlFWQTdRVUZEYUVJc1RVRkJTVUVzVlVGQlZVTXNUVUZCVml4TFFVRnhRaXhEUVVGNlFpeEZRVUUwUWp0QlFVTXhRa3dzWVVGQlUwUXNTVUZCVkR0QlFVTkJRU3hYUVVGUExIbENRVUZMVHl4RFFVRk1MRVZCUVZBN1FVRkRSRHRCUVVORUxFMUJRVWxpTEdOQlFXTXNTVUZCWkN4RFFVRktMRVZCUVhsQ08wRkJRM1pDTEZkQlFVOHNTMEZCUzJNc1NVRkJUQ3hEUVVGVkxIbENRVUZUVkN4UlFVRlJReXhKUVVGU0xFVkJRV05ETEUxQlFXUXNSVUZCYzBKRExFOUJRWFJDTEVWQlFTdENUeXhMUVVFdlFpeERRVUZVTEVWQlFWWXNRMEZCVUR0QlFVTkVPMEZCUTBRc1UwRkJUMVlzVVVGQlVVTXNTVUZCVWl4RlFVRmpReXhOUVVGa0xFVkJRWE5DUXl4UFFVRjBRaXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTBvc1MwRkJWQ3hEUVVGbFJTeEpRVUZtTEVWQlFYRkNReXhOUVVGeVFpeEZRVUUyUWtNc1QwRkJOMElzUlVGQmMwTTdRVUZEY0VNc1RVRkJTU3hMUVVGTFF5eExRVUZVTEVWQlFXZENMRTlCUVU4c1MwRkJTME1zVDBGQlRDeERRVUZoTEU5QlFXSXNkVU5CUVRCQ1F5eFRRVUV4UWl4SFFVRlFPMEZCUTJoQ0xFMUJRVWxCTEZWQlFWVkRMRTFCUVZZc1MwRkJjVUlzUTBGQmVrSXNSVUZCTkVJN1FVRkRNVUpNTEdGQlFWTkVMRWxCUVZRN1FVRkRRVUVzVjBGQlR5eDVRa0ZCUzA4c1EwRkJUQ3hGUVVGUU8wRkJRMFE3UVVGRFJDeE5RVUZKWWl4alFVRmpMRWxCUVdRc1EwRkJTaXhGUVVGNVFqdEJRVU4yUWl4WFFVRlBMRXRCUVV0akxFbEJRVXdzUTBGQlZTeDVRa0ZCVTFRc1VVRkJVVU1zU1VGQlVpeEZRVUZqUXl4TlFVRmtMRVZCUVhOQ1F5eFBRVUYwUWl4RlFVRXJRaXhKUVVFdlFpeEZRVUZ4UTA4c1MwRkJja01zUTBGQlZDeEZRVUZXTEVOQlFWQTdRVUZEUkR0QlFVTkVMRk5CUVU5V0xGRkJRVkZETEVsQlFWSXNSVUZCWTBNc1RVRkJaQ3hGUVVGelFrTXNUMEZCZEVJc1JVRkJLMElzU1VGQkwwSXNRMEZCVUR0QlFVTkVPenRCUVVWRUxGTkJRVk5JTEU5QlFWUXNSMEZCTkVZc1MwRkJNMFZETEVsQlFUSkZMSFZGUVVGd1JTeHhRa0ZCUzA4c1EwRkJUQ3hGUVVGdlJTeExRVUUxUkU0c1RVRkJORVFzZFVWQlFXNUVMSEZDUVVGTFRTeERRVUZNTEVWQlFXMUVMRXRCUVRORFRDeFBRVUV5UXl4MVJVRkJha01zYjBKQlFVMHNTVUZCVGl4RlFVRnBReXhMUVVGeVFsRXNWMEZCY1VJc2RVVkJRVkFzUzBGQlR6dEJRVU14Uml4TlFVRk5ReXhMUVVGTGJFSXNVVUZCVVN4VFFVRlNMRU5CUVZnN1FVRkRRU3hUUVVGUE8wRkJRMHhyUWl4VFFVRkhReXhQUVVGSUxFTkJRVmRhTEV0QlFVdFRMRXRCUVV3c1EwRkJXRHRCUVVOSFJDeFZRVVJJTEVOQlExRXNkVUpCUVZGTExFMUJRVTFhTEU5QlFVOVJMRXRCUVZBc1EwRkJUaXhIUVVGelFsQXNVVUZCVVU4c1MwRkJVaXhEUVVFNVFpeEZRVVJTTzBGQlJVZEVMRlZCUmtnc1EwRkZVU3h4UWtGQlRVVXNZMEZCWTBRc1MwRkJaQ3hIUVVGelFrc3NRMEZCTlVJc1JVRkdVaXhEUVVSTExFZEJRVkE3UVVGSlJDSXNJbVpwYkdVaU9pSmpiMjVrYVhScGIyNWhiQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUl2VlhObGNuTXZaR3hsZG5rdlkyOWtaUzl2YzNNdlpuVnVZM1JwYjI1aGJDMXlhWFpsY2lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUh0cGMxQnliMjFwYzJWTWFXdGxmU0E5SUhKbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5MWRHbHNjeWNwWEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UzUm9aVzVKWml3Z2RHRndTV1lzSUY5MGFHVnVTV1o5WEc1Y2JtWjFibU4wYVc5dUlIUm9aVzVKWmloamIyNWtMQ0JwWmxSeWRXVXNJR2xtUm1Gc2MyVXBJSHRjYmlBZ2FXWWdLSFJvYVhNdWMzUmxjSE1wSUhKbGRIVnliaUIwYUdsekxtRmtaRk4wWlhBb0ozUm9aVzVKWmljc0lGc3VMaTVoY21kMWJXVnVkSE5kS1Z4dUlDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ01Ta2dlMXh1SUNBZ0lHbG1WSEoxWlNBOUlHTnZibVJjYmlBZ0lDQmpiMjVrSUQwZ2VDQTlQaUI0WEc0Z0lIMWNiaUFnYVdZZ0tHbHpVSEp2YldselpVeHBhMlVvZEdocGN5a3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYUdWdUtIWmhiSFZsSUQwK0lGOTBhR1Z1U1dZb1kyOXVaQ3dnYVdaVWNuVmxMQ0JwWmtaaGJITmxLU2gyWVd4MVpTa3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlGOTBhR1Z1U1dZb1kyOXVaQ3dnYVdaVWNuVmxMQ0JwWmtaaGJITmxLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjBZWEJKWmloamIyNWtMQ0JwWmxSeWRXVXNJR2xtUm1Gc2MyVXBJSHRjYmlBZ2FXWWdLSFJvYVhNdWMzUmxjSE1wSUhKbGRIVnliaUIwYUdsekxtRmtaRk4wWlhBb0ozUmhjRWxtSnl3Z1d5NHVMbUZ5WjNWdFpXNTBjMTBwWEc0Z0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ2FXWlVjblZsSUQwZ1kyOXVaRnh1SUNBZ0lHTnZibVFnUFNCNElEMCtJSGhjYmlBZ2ZWeHVJQ0JwWmlBb2FYTlFjbTl0YVhObFRHbHJaU2gwYUdsektTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJvWlc0b2RtRnNkV1VnUFQ0Z1gzUm9aVzVKWmloamIyNWtMQ0JwWmxSeWRXVXNJR2xtUm1Gc2MyVXNJSFJ5ZFdVcEtIWmhiSFZsS1NsY2JpQWdmVnh1SUNCeVpYUjFjbTRnWDNSb1pXNUpaaWhqYjI1a0xDQnBabFJ5ZFdVc0lHbG1SbUZzYzJVc0lIUnlkV1VwWEc1OVhHNWNibVoxYm1OMGFXOXVJRjkwYUdWdVNXWW9ZMjl1WkNBOUlIZ2dQVDRnZUN3Z2FXWlVjblZsSUQwZ2VDQTlQaUI0TENCcFprWmhiSE5sSUQwZ0tDa2dQVDRnYm5Wc2JDd2djbVYwZFhKdVZtRnNkV1VnUFNCbVlXeHpaU2tnZTF4dUlDQmpiMjV6ZENCR1VDQTlJSEpsY1hWcGNtVW9KeTR2YVc1a1pYZ25LVnh1SUNCeVpYUjFjbTRnZG1Gc2RXVWdQVDVjYmlBZ0lDQkdVQzV5WlhOdmJIWmxLR052Ym1Rb2RtRnNkV1VwS1Z4dUlDQWdJQ0FnTG5Sb1pXNG9ZVzV6SUQwK0lDaGhibk1nUHlCcFpsUnlkV1VvZG1Gc2RXVXBJRG9nYVdaR1lXeHpaU2gyWVd4MVpTa3BLVnh1SUNBZ0lDQWdMblJvWlc0b2RpQTlQaUFvY21WMGRYSnVWbUZzZFdVZ1B5QjJZV3gxWlNBNklIWXBLVnh1ZlZ4dUlsMTlcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb25kaXRpb25hbC5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJyksRlBJbnB1dEVycm9yID0gX3JlcXVpcmUuRlBJbnB1dEVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgYWxsOiBhbGwsIGNhc3Q6IGNhc3QsIHJlamVjdDogcmVqZWN0LCBkZWxheTogZGVsYXksIF9kZWxheTogX2RlbGF5IH07XG5cbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICB2YXIgRlAgPSByZXF1aXJlKCcuLycpO1xuICByZXR1cm4gRlAucmVzb2x2ZShBcnJheS5pc0FycmF5KHByb21pc2VzKSA/IFByb21pc2UuYWxsKHByb21pc2VzKSA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKTtcbn1cblxuZnVuY3Rpb24gcHJvbWlzZUFsbE9iamVjdChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopO1xuICB2YXIgdmFsdWVzID0ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge3JldHVybiBvYmpba2V5XTt9KTtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHZhbHVlcykudGhlbihmdW5jdGlvbiAocmVzdWx0cykge3JldHVybiByZXN1bHRzLnJlZHVjZShmdW5jdGlvbiAob2JqLCB2YWwsIGluZGV4KSB7dmFyIF9PYmplY3QkYXNzaWduO1xuICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oKF9PYmplY3QkYXNzaWduID0ge30sIF9PYmplY3QkYXNzaWduW2tleV0gPSB2YWwsIF9PYmplY3QkYXNzaWduKSwgb2JqKTtcbiAgICB9LCB7fSk7fSk7XG59XG5cbmZ1bmN0aW9uIGNhc3Qob2JqKSB7cmV0dXJuIFByb21pc2UucmVzb2x2ZShvYmopO31cblxuZnVuY3Rpb24gcmVqZWN0KGVycikge1xuICAvLyByZXQuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gIC8vIHJldC5fcmVqZWN0Q2FsbGJhY2socmVhc29uLCB0cnVlKTtcbiAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgaWYgKHRoaXMpIHRoaXMuX2Vycm9yID0gZXJyO1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciEnKTtcbn1cblxuZnVuY3Rpb24gX2RlbGF5KG1zZWMpIHtcbiAgdmFyIEZQID0gcmVxdWlyZSgnLi8nKTtcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG1zZWMpKSB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdGUC5kZWxheShtaWxsaXNlYykgcmVxdWlyZXMgYSBudW1lcmljIGFyZy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge3JldHVybiBuZXcgRlAoZnVuY3Rpb24gKHJlc29sdmUpIHtzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtyZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7fSwgbXNlYyk7fSk7fTtcbn1cblxuZnVuY3Rpb24gZGVsYXkobXNlYykge1xuICB2YXIgRlAgPSByZXF1aXJlKCcuLycpO1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZGVsYXknLCBbXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICByZXR1cm4gdGhpcyAmJiB0aGlzLl9GUCA/IEZQLnJlc29sdmUodGhpcy50aGVuKF9kZWxheShtc2VjKSkpIDogX2RlbGF5KG1zZWMpKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk55WXk5d2NtOXRhWE5sTG1weklsMHNJbTVoYldWeklqcGJJbkpsY1hWcGNtVWlMQ0pHVUVsdWNIVjBSWEp5YjNJaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2lZV3hzSWl3aVkyRnpkQ0lzSW5KbGFtVmpkQ0lzSW1SbGJHRjVJaXdpWDJSbGJHRjVJaXdpY0hKdmJXbHpaWE1pTENKR1VDSXNJbkpsYzI5c2RtVWlMQ0pCY25KaGVTSXNJbWx6UVhKeVlYa2lMQ0pRY205dGFYTmxJaXdpY0hKdmJXbHpaVUZzYkU5aWFtVmpkQ0lzSW05aWFpSXNJbXRsZVhNaUxDSlBZbXBsWTNRaUxDSm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpJaXdpZG1Gc2RXVnpJaXdpYldGd0lpd2lhMlY1SWl3aWRHaGxiaUlzSW5KbGMzVnNkSE1pTENKeVpXUjFZMlVpTENKMllXd2lMQ0pwYm1SbGVDSXNJbUZ6YzJsbmJpSXNJbVZ5Y2lJc0lrVnljbTl5SWl3aVgyVnljbTl5SWl3aWJYTmxZeUlzSWs1MWJXSmxjaUlzSW1selNXNTBaV2RsY2lJc0luTmxkRlJwYldWdmRYUWlMQ0oyWVd4MVpTSXNJbk4wWlhCeklpd2lZV1JrVTNSbGNDSXNJbUZ5WjNWdFpXNTBjeUlzSWw5R1VDSmRMQ0p0WVhCd2FXNW5jeUk2SW1WQlFYVkNRU3hSUVVGUkxHdENRVUZTTEVNc1EwRkJhRUpETEZrc1dVRkJRVUVzV1RzN1FVRkZVRU1zVDBGQlQwTXNUMEZCVUN4SFFVRnBRaXhGUVVGRFF5eFJRVUZFTEVWQlFVMURMRlZCUVU0c1JVRkJXVU1zWTBGQldpeEZRVUZ2UWtNc1dVRkJjRUlzUlVGQk1rSkRMR05CUVROQ0xFVkJRV3BDT3p0QlFVVkJMRk5CUVZOS0xFZEJRVlFzUTBGQllVc3NVVUZCWWl4RlFVRjFRanRCUVVOeVFpeE5RVUZOUXl4TFFVRkxWaXhSUVVGUkxFbEJRVklzUTBGQldEdEJRVU5CTEZOQlFVOVZMRWRCUVVkRExFOUJRVWdzUTBGQlYwTXNUVUZCVFVNc1QwRkJUaXhEUVVGalNpeFJRVUZrTEVsQlFUQkNTeXhSUVVGUlZpeEhRVUZTTEVOQlFWbExMRkZCUVZvc1EwRkJNVUlzUjBGQmEwUk5MR2xDUVVGcFFrNHNVVUZCYWtJc1EwRkJOMFFzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVZOTkxHZENRVUZVTEVOQlFUQkNReXhIUVVFeFFpeEZRVUVyUWp0QlFVTTNRaXhOUVVGTlF5eFBRVUZQUXl4UFFVRlBReXh0UWtGQlVDeERRVUV5UWtnc1IwRkJNMElzUTBGQllqdEJRVU5CTEUxQlFVMUpMRk5CUVZOSUxFdEJRVXRKTEVkQlFVd3NRMEZCVXl4MVFrRkJUMHdzU1VGQlNVMHNSMEZCU2l4RFFVRlFMRVZCUVZRc1EwRkJaanRCUVVOQkxGTkJRVTlTTEZGQlFWRldMRWRCUVZJc1EwRkJXV2RDTEUxQlFWb3NSVUZCYjBKSExFbEJRWEJDTEVOQlFYbENMREpDUVVGWFF5eFJRVUZSUXl4TlFVRlNMRU5CUVdVc1ZVRkJRMVFzUjBGQlJDeEZRVUZOVlN4SFFVRk9MRVZCUVZkRExFdEJRVmdzUlVGQmNVSTdRVUZETjBVc1ZVRkJUVXdzVFVGQlRVd3NTMEZCUzFVc1MwRkJUQ3hEUVVGYU8wRkJRMEVzWVVGQlQxUXNUMEZCVDFVc1RVRkJVQ3h6UTBGQlowSk9MRWRCUVdoQ0xFbEJRWE5DU1N4SFFVRjBRaXh0UWtGQk5FSldMRWRCUVRWQ0xFTkJRVkE3UVVGRFJDeExRVWd3UXl4RlFVZDRReXhGUVVoM1F5eERRVUZZTEVWQlFYcENMRU5CUVZBN1FVRkpSRHM3UVVGRlJDeFRRVUZUV0N4SlFVRlVMRU5CUVdOWExFZEJRV1FzUlVGQmJVSXNRMEZCUlN4UFFVRlBSaXhSUVVGUlNDeFBRVUZTTEVOQlFXZENTeXhIUVVGb1FpeERRVUZRTEVOQlFUWkNPenRCUVVWc1JDeFRRVUZUVml4TlFVRlVMRU5CUVdkQ2RVSXNSMEZCYUVJc1JVRkJjVUk3UVVGRGJrSTdRVUZEUVR0QlFVTkJMRTFCUVVsQkxHVkJRV1ZETEV0QlFXNUNMRVZCUVRCQ08wRkJRM2hDTEZGQlFVa3NTVUZCU2l4RlFVRlZMRXRCUVV0RExFMUJRVXdzUjBGQlkwWXNSMEZCWkR0QlFVTldMRmRCUVU5bUxGRkJRVkZTTEUxQlFWSXNRMEZCWlhWQ0xFZEJRV1lzUTBGQlVEdEJRVU5FTzBGQlEwUXNVVUZCVFN4SlFVRkpReXhMUVVGS0xHZEVRVUZPTzBGQlEwUTdPMEZCUlVRc1UwRkJVM1JDTEUxQlFWUXNRMEZCWjBKM1FpeEpRVUZvUWl4RlFVRnpRanRCUVVOd1FpeE5RVUZOZEVJc1MwRkJTMVlzVVVGQlVTeEpRVUZTTEVOQlFWZzdRVUZEUVN4TlFVRkpMRU5CUVVOcFF5eFBRVUZQUXl4VFFVRlFMRU5CUVdsQ1JpeEpRVUZxUWl4RFFVRk1MRVZCUVRaQ0xFMUJRVTBzU1VGQlNTOUNMRmxCUVVvc1EwRkJhVUlzTkVOQlFXcENMRU5CUVU0N1FVRkROMElzVTBGQlR5eDVRa0ZCVXl4SlFVRkpVeXhGUVVGS0xFTkJRVThzYlVKQlFWY3NRMEZCUlhsQ0xGZEJRVmNzYjBKQlFVMTRRaXhSUVVGUmVVSXNTMEZCVWl4RFFVRk9MRVZCUVZnc1JVRkJhVU5LTEVsQlFXcERMRVZCUVhkRExFTkJRVFZFTEVOQlFWUXNSVUZCVUR0QlFVTkVPenRCUVVWRUxGTkJRVk42UWl4TFFVRlVMRU5CUVdWNVFpeEpRVUZtTEVWQlFYRkNPMEZCUTI1Q0xFMUJRVTEwUWl4TFFVRkxWaXhSUVVGUkxFbEJRVklzUTBGQldEdEJRVU5CTEUxQlFVa3NTMEZCUzNGRExFdEJRVlFzUlVGQlowSXNUMEZCVHl4TFFVRkxReXhQUVVGTUxFTkJRV0VzVDBGQllpeDFRMEZCTUVKRExGTkJRVEZDTEVkQlFWQTdRVUZEYUVJc1UwRkJUeXhSUVVGUkxFdEJRVXRETEVkQlFXSXNSMEZCYlVJNVFpeEhRVUZIUXl4UFFVRklMRU5CUVZjc1MwRkJTMWtzU1VGQlRDeERRVUZWWml4UFFVRlBkMElzU1VGQlVDeERRVUZXTEVOQlFWZ3NRMEZCYmtJc1IwRkJlVVI0UWl4UFFVRlBkMElzU1VGQlVDeEhRVUZvUlR0QlFVTkVJaXdpWm1sc1pTSTZJbkJ5YjIxcGMyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lMMVZ6WlhKekwyUnNaWFo1TDJOdlpHVXZiM056TDJaMWJtTjBhVzl1WVd3dGNtbDJaWElpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKamIyNXpkQ0I3UmxCSmJuQjFkRVZ5Y205eWZTQTlJSEpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY25KdmNuTW5LVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0aGJHd3NJR05oYzNRc0lISmxhbVZqZEN3Z1pHVnNZWGtzSUY5a1pXeGhlWDFjYmx4dVpuVnVZM1JwYjI0Z1lXeHNLSEJ5YjIxcGMyVnpLU0I3WEc0Z0lHTnZibk4wSUVaUUlEMGdjbVZ4ZFdseVpTZ25MaThuS1Z4dUlDQnlaWFIxY200Z1JsQXVjbVZ6YjJ4MlpTaEJjbkpoZVM1cGMwRnljbUY1S0hCeWIyMXBjMlZ6S1NBL0lGQnliMjFwYzJVdVlXeHNLSEJ5YjIxcGMyVnpLU0E2SUhCeWIyMXBjMlZCYkd4UFltcGxZM1FvY0hKdmJXbHpaWE1wS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJ3Y205dGFYTmxRV3hzVDJKcVpXTjBLRzlpYWlrZ2UxeHVJQ0JqYjI1emRDQnJaWGx6SUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb2IySnFLVnh1SUNCamIyNXpkQ0IyWVd4MVpYTWdQU0JyWlhsekxtMWhjQ2hyWlhrZ1BUNGdiMkpxVzJ0bGVWMHBYRzRnSUhKbGRIVnliaUJRY205dGFYTmxMbUZzYkNoMllXeDFaWE1wTG5Sb1pXNG9jbVZ6ZFd4MGN5QTlQaUJ5WlhOMWJIUnpMbkpsWkhWalpTZ29iMkpxTENCMllXd3NJR2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2EyVjVJRDBnYTJWNWMxdHBibVJsZUYxY2JpQWdJQ0J5WlhSMWNtNGdUMkpxWldOMExtRnpjMmxuYmloN1cydGxlVjA2SUhaaGJIMHNJRzlpYWlsY2JpQWdmU3dnZTMwcEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCallYTjBLRzlpYWlrZ2V5QnlaWFIxY200Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0c5aWFpa2dmVnh1WEc1bWRXNWpkR2x2YmlCeVpXcGxZM1FvWlhKeUtTQjdYRzRnSUM4dklISmxkQzVmWTJGd2RIVnlaVk4wWVdOclZISmhZMlVvS1R0Y2JpQWdMeThnY21WMExsOXlaV3BsWTNSRFlXeHNZbUZqYXloeVpXRnpiMjRzSUhSeWRXVXBPMXh1SUNCcFppQW9aWEp5SUdsdWMzUmhibU5sYjJZZ1JYSnliM0lwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeWtnZEdocGN5NWZaWEp5YjNJZ1BTQmxjbkpjYmlBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvWlhKeUtWeHVJQ0I5WEc0Z0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1VtVnFaV04wSUc5dWJIa2dZV05qWlhCMGN5QmhJRzVsZHlCcGJuTjBZVzVqWlNCdlppQkZjbkp2Y2lGZ0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZlpHVnNZWGtvYlhObFl5a2dlMXh1SUNCamIyNXpkQ0JHVUNBOUlISmxjWFZwY21Vb0p5NHZKeWxjYmlBZ2FXWWdLQ0ZPZFcxaVpYSXVhWE5KYm5SbFoyVnlLRzF6WldNcEtTQjBhSEp2ZHlCdVpYY2dSbEJKYm5CMWRFVnljbTl5S0NkR1VDNWtaV3hoZVNodGFXeHNhWE5sWXlrZ2NtVnhkV2x5WlhNZ1lTQnVkVzFsY21saklHRnlaeTRuS1Z4dUlDQnlaWFIxY200Z2RtRnNkV1VnUFQ0Z2JtVjNJRVpRS0hKbGMyOXNkbVVnUFQ0Z2V5QnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lISmxjMjlzZG1Vb2RtRnNkV1VwTENCdGMyVmpLU0I5S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJrWld4aGVTaHRjMlZqS1NCN1hHNGdJR052Ym5OMElFWlFJRDBnY21WeGRXbHlaU2duTGk4bktWeHVJQ0JwWmlBb2RHaHBjeTV6ZEdWd2N5a2djbVYwZFhKdUlIUm9hWE11WVdSa1UzUmxjQ2duWkdWc1lYa25MQ0JiTGk0dVlYSm5kVzFsYm5SelhTbGNiaUFnY21WMGRYSnVJSFJvYVhNZ0ppWWdkR2hwY3k1ZlJsQWdQeUJHVUM1eVpYTnZiSFpsS0hSb2FYTXVkR2hsYmloZlpHVnNZWGtvYlhObFl5a3BLU0E2SUY5a1pXeGhlU2h0YzJWaktTZ3BYRzU5WEc0aVhYMD1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9wcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDcElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3hMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QSIsInNvdXJjZVJvb3QiOiIifQ==