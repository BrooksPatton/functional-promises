(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["FP"] = factory();
	else
		root["FP"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
class FunctionalError extends Error {
  constructor(msg, options) {
    if (typeof msg === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }
    super(msg);
    if (typeof options === 'object') {
      Object.getOwnPropertyNames(options).forEach(key => {
        this[key] = options[key];
      });
    }
    this.name = this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(this, this.constructor);
  }
}
exports.FunctionalError = FunctionalError;
class FunctionalUserError extends FunctionalError {}
exports.FunctionalUserError = FunctionalUserError;
class FPUnexpectedError extends FunctionalError {}
exports.FPUnexpectedError = FPUnexpectedError;
class FPInputError extends FunctionalError {}
exports.FPInputError = FPInputError;
class FPSoftError extends FunctionalError {}
exports.FPSoftError = FPSoftError;
class FPTimeout extends FunctionalError {}
exports.FPTimeout = FPTimeout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibXNnIiwib3B0aW9ucyIsIm1lc3NhZ2UiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImtleSIsIm5hbWUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLGVBQU4sU0FBOEJDLEtBQTlCLENBQW9DO0FBQ3pDQyxjQUFZQyxHQUFaLEVBQWlCQyxPQUFqQixFQUEwQjtBQUN4QixRQUFJLE9BQU9ELEdBQVAsS0FBZSxRQUFuQixFQUE2QjtBQUMzQkMsZ0JBQVVELEdBQVY7QUFDQSxVQUFLQSxJQUFJRSxPQUFULEVBQW1CRixNQUFNQSxJQUFJRSxPQUFWO0FBQ3BCO0FBQ0QsVUFBTUYsR0FBTjtBQUNBLFFBQUksT0FBT0MsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQkUsYUFBT0MsbUJBQVAsQ0FBMkJILE9BQTNCLEVBQ0dJLE9BREgsQ0FDV0MsT0FBTztBQUNkLGFBQUtBLEdBQUwsSUFBWUwsUUFBUUssR0FBUixDQUFaO0FBQ0QsT0FISDtBQUlEO0FBQ0QsU0FBS0MsSUFBTCxHQUFZLEtBQUtSLFdBQUwsQ0FBaUJRLElBQTdCO0FBQ0E7QUFDQVQsVUFBTVUsaUJBQU4sQ0FBd0IsSUFBeEIsRUFBOEIsS0FBS1QsV0FBbkM7QUFDRDtBQWhCd0M7UUFBOUJGLGUsR0FBQUEsZTtBQWtCTixNQUFNWSxtQkFBTixTQUFrQ1osZUFBbEMsQ0FBa0Q7UUFBNUNZLG1CLEdBQUFBLG1CO0FBQ04sTUFBTUMsaUJBQU4sU0FBZ0NiLGVBQWhDLENBQWdEO1FBQTFDYSxpQixHQUFBQSxpQjtBQUNOLE1BQU1DLFlBQU4sU0FBMkJkLGVBQTNCLENBQTJDO1FBQXJDYyxZLEdBQUFBLFk7QUFDTixNQUFNQyxXQUFOLFNBQTBCZixlQUExQixDQUEwQztRQUFwQ2UsVyxHQUFBQSxXO0FBQ04sTUFBTUMsU0FBTixTQUF3QmhCLGVBQXhCLENBQXdDO1FBQWxDZ0IsUyxHQUFBQSxTIiwiZmlsZSI6ImVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBGdW5jdGlvbmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1zZywgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgbXNnID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IG1zZ1xuICAgICAgaWYgKCBtc2cubWVzc2FnZSApIG1zZyA9IG1zZy5tZXNzYWdlXG4gICAgfVxuICAgIHN1cGVyKG1zZylcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcHRpb25zKVxuICAgICAgICAuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XVxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAvLyBDYXB0dXJpbmcgc3RhY2sgdHJhY2UsIGV4Y2x1ZGluZyBjb25zdHJ1Y3RvciBjYWxsIGZyb20gaXQuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3RvcilcbiAgfVxufVxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmV4cG9ydCBjbGFzcyBGUFVuZXhwZWN0ZWRFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0IGNsYXNzIEZQSW5wdXRFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuZXhwb3J0IGNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5leHBvcnQgY2xhc3MgRlBUaW1lb3V0IGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG4iXX0=

/***/ }),
/* 1 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FP;

var _errors = __webpack_require__(/*! ./modules/errors */ 0);

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

var _utils2 = _interopRequireDefault(_utils);

var _monads = __webpack_require__(/*! ./monads */ 3);

var _arrays = __webpack_require__(/*! ./arrays */ 4);

var _arrays2 = _interopRequireDefault(_arrays);

var _events = __webpack_require__(/*! ./events */ 5);

var _conditional = __webpack_require__(/*! ./conditional */ 6);

var _promise = __webpack_require__(/*! ./promise */ 7);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { isFunction, flatten } = _utils2.default;
const { map, find, findIndex, filter, reduce } = (0, _arrays2.default)(FP);
const { all, reject, delay, _delay } = (0, _promise2.default)(FP);

FP.prototype.all = all;
FP.prototype.map = map;
FP.prototype.find = find;
FP.prototype.findIndex = findIndex;
FP.prototype.filter = filter;
FP.prototype.reduce = reduce;
FP.prototype.listen = _events.listen;
FP.prototype.tapIf = _conditional.tapIf;
FP.prototype.thenIf = _conditional.thenIf;
FP.prototype._thenIf = _conditional._thenIf;
FP.prototype.delay = delay;
FP.prototype._delay = _delay;
FP.prototype.reject = reject;

// FP.default = FP
// export const all = allPromises

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = msec => FP.resolve().delay(msec);
FP.silent = limit => FP.resolve().silent(limit);

// Monadic Methods
FP.chain = _monads.chain;
FP.prototype.chainEnd = _monads.chainEnd;
FP.reject = FP.prototype.reject;
FP.resolve = resolve;

FP.promisify = promisify;
FP.promisifyAll = promisifyAll;
FP.unpack = unpack;

FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency(limit = Infinity) {
  if (this.steps) return this.addStep('concurrency', [...arguments]);
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet(errorLimit = Infinity) {
  if (this.steps) return this.addStep('quiet', [...arguments]);
  this._FP.errors = { count: 0, limit: errorLimit };
  return this;
};
FP.prototype.silent = FP.prototype.quiet;

FP.prototype.get = function get(...keyNames) {
  if (this.steps) return this.addStep('get', [...arguments]);
  keyNames = flatten(keyNames);
  return this.then(obj => {
    if (typeof obj === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce((extracted, key) => {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [...arguments]);
  return this.then(obj => {
    if (typeof obj === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [...arguments]);
  if (arguments.length === 2) return this.catchIf(...arguments);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.catch(err => fn(err)));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [...arguments]);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + typeof fn);

  return FP.resolve(this._FP.promise.catch(err => {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [...arguments]);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [...arguments]);
  if (!isFunction(fn)) throw new _errors.FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(value => fn(value) ? value : value));
};

function resolve(value) {
  return new FP((resolve, reject) => {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
}

function promisify(cb) {
  return (...args) => new FP((yah, nah) => cb.call(this, ...args, (err, res) => err ? nah(err) : yah(res)));
}

function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {
    throw new Error('Invalid Argument obj in promisifyAll(obj)');
  }
  return Object.getOwnPropertyNames(obj).filter(key => typeof obj[key] === 'function').reduce((obj, fnName) => {
    if (!/Sync/.test(fnName) && !obj[`${fnName}Async`]) obj[`${fnName}Async`] = FP.promisify(obj[`${fnName}`]);
    return obj;
  }, obj);
}

function unpack() {
  let resolve,
      reject,
      promise = new FP((yah, nah) => {
    resolve = yah;reject = nah;
  });
  return { promise, resolve, reject };
}

function FP(resolveRejectCB) {
  if (!(this instanceof FP)) {
    return new FP(resolveRejectCB);
  }
  if (arguments.length !== 1) throw new Error('FunctionalPromises constructor only accepts 1 callback argument');
  this._FP = {
    errors: { limit: 0, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4
  };
}
// if (process && process.on) {
//   // process.on('uncaughtException', e => console.error('FPromises: FATAL EXCEPTION: uncaughtException', e))
//   process.on('unhandledRejection', e => console.error('FPromises: FATAL ERROR: unhandledRejection', e))
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
const utils = {
  isPromiseLike(p) {
    return !!(p && typeof p.then === 'function');
  },
  isFunction(fn) {
    return typeof fn === 'function';
  },
  isEnumerable(list) {
    return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';
  },

  flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce((results, item) => results.concat(Array.isArray(item) ? utils.flatten(item) : [item]), []);
  }
};

exports.default = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwiaXNQcm9taXNlTGlrZSIsInAiLCJ0aGVuIiwiaXNGdW5jdGlvbiIsImZuIiwiaXNFbnVtZXJhYmxlIiwibGlzdCIsIkFycmF5IiwiaXNBcnJheSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiZmxhdHRlbiIsImFyciIsIkVycm9yIiwicmVkdWNlIiwicmVzdWx0cyIsIml0ZW0iLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsUUFBUTtBQUNaQyxnQkFBY0MsQ0FBZCxFQUFpQjtBQUFFLFdBQU8sQ0FBQyxFQUFFQSxLQUFLLE9BQU9BLEVBQUVDLElBQVQsS0FBa0IsVUFBekIsQ0FBUjtBQUE4QyxHQURyRDtBQUVaQyxhQUFXQyxFQUFYLEVBQWU7QUFBRSxXQUFPLE9BQU9BLEVBQVAsS0FBYyxVQUFyQjtBQUFpQyxHQUZ0QztBQUdaQyxlQUFhQyxJQUFiLEVBQW1CO0FBQUUsV0FBT0EsUUFBUUMsTUFBTUMsT0FBTixDQUFjRixJQUFkLENBQVIsSUFBK0IsT0FBT0EsS0FBS0csT0FBT0MsUUFBWixDQUFQLEtBQWlDLFVBQXZFO0FBQW1GLEdBSDVGOztBQUtaQyxVQUFRQyxHQUFSLEVBQWE7QUFDWCxRQUFJLENBQUNMLE1BQU1DLE9BQU4sQ0FBY0ksR0FBZCxDQUFMLEVBQXlCLE1BQU0sSUFBSUMsS0FBSixDQUFVLGlEQUFWLENBQU47QUFDekIsV0FBT0QsSUFBSUUsTUFBSixDQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixLQUFtQkQsUUFBUUUsTUFBUixDQUFlVixNQUFNQyxPQUFOLENBQWNRLElBQWQsSUFBc0JqQixNQUFNWSxPQUFOLENBQWNLLElBQWQsQ0FBdEIsR0FBNEMsQ0FBQ0EsSUFBRCxDQUEzRCxDQUE5QixFQUFrRyxFQUFsRyxDQUFQO0FBQ0Q7QUFSVyxDQUFkOztrQkFXZWpCLEsiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHtcbiAgaXNQcm9taXNlTGlrZShwKSB7IHJldHVybiAhIShwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicpIH0sXG4gIGlzRnVuY3Rpb24oZm4pIHsgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyB9LFxuICBpc0VudW1lcmFibGUobGlzdCkgeyByZXR1cm4gbGlzdCAmJiBBcnJheS5pc0FycmF5KGxpc3QpIHx8IHR5cGVvZiBsaXN0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicgfSxcblxuICBmbGF0dGVuKGFycikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBgZmxhdHRlbmAgcmVxdWlyZXMgdmFsaWQgYXJyYXkgcGFyYW1ldGVyJylcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgocmVzdWx0cywgaXRlbSkgPT4gcmVzdWx0cy5jb25jYXQoQXJyYXkuaXNBcnJheShpdGVtKSA/IHV0aWxzLmZsYXR0ZW4oaXRlbSkgOiBbaXRlbV0pLCBbXSlcbiAgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXRpbHNcbiJdfQ==

/***/ }),
/* 3 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chain = chain;
exports.chainEnd = chainEnd;

var _errors = __webpack_require__(/*! ./modules/errors */ 0);

/**
 * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
 * @returns FunctionalPromise
 */
function chain() {
  const FP = __webpack_require__(/*! ./index */ 1);
  // create a placeholder/initial promise to hold the steps/chain data
  const promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
 * Call after starting a `.chain()`.
 *
 * One of the few non-chainable methods in the API.
 * @returns a Function. It runs your functional chain!
 */
function chainEnd() {
  const FP = __webpack_require__(/*! ./index */ 1);

  return input => {
    if (!this.steps || this.steps.length <= 0) throw new _errors.FPInputError('No steps defined between .chain() & .chainEnd()');
    let stepCount = 0;
    let { promise, resolve, reject } = FP.unpack();
    while (stepCount < this.steps.length) {
      const [fnName,, args] = this.steps[stepCount];
      promise = promise[fnName](...args);
      stepCount++;
    }
    resolve(input);
    return promise;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsiY2hhaW4iLCJjaGFpbkVuZCIsIkZQIiwicmVxdWlyZSIsInByb21pc2UiLCJyZXNvbHZlIiwic3RlcHMiLCJpbnB1dCIsImxlbmd0aCIsIkZQSW5wdXRFcnJvciIsInN0ZXBDb3VudCIsInJlamVjdCIsInVucGFjayIsImZuTmFtZSIsImFyZ3MiXSwibWFwcGluZ3MiOiI7Ozs7O1FBTWdCQSxLLEdBQUFBLEs7UUFjQUMsUSxHQUFBQSxROztBQXBCaEI7O0FBRUE7Ozs7QUFJTyxTQUFTRCxLQUFULEdBQWlCO0FBQ3RCLFFBQU1FLEtBQUtDLFFBQVEsU0FBUixDQUFYO0FBQ0E7QUFDQSxRQUFNQyxVQUFVRixHQUFHRyxPQUFILEVBQWhCO0FBQ0FELFVBQVFFLEtBQVIsR0FBZ0IsRUFBaEI7QUFDQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1PLFNBQVNILFFBQVQsR0FBb0I7QUFDekIsUUFBTUMsS0FBS0MsUUFBUSxTQUFSLENBQVg7O0FBRUEsU0FBT0ksU0FBUztBQUNkLFFBQUksQ0FBQyxLQUFLRCxLQUFOLElBQWUsS0FBS0EsS0FBTCxDQUFXRSxNQUFYLElBQXFCLENBQXhDLEVBQTJDLE1BQU0sSUFBSUMsb0JBQUosQ0FBaUIsaURBQWpCLENBQU47QUFDM0MsUUFBSUMsWUFBWSxDQUFoQjtBQUNBLFFBQUksRUFBQ04sT0FBRCxFQUFVQyxPQUFWLEVBQW1CTSxNQUFuQixLQUE2QlQsR0FBR1UsTUFBSCxFQUFqQztBQUNBLFdBQU9GLFlBQVksS0FBS0osS0FBTCxDQUFXRSxNQUE5QixFQUFzQztBQUNwQyxZQUFNLENBQUNLLE1BQUQsR0FBV0MsSUFBWCxJQUFtQixLQUFLUixLQUFMLENBQVdJLFNBQVgsQ0FBekI7QUFDQU4sZ0JBQVVBLFFBQVFTLE1BQVIsRUFBZ0IsR0FBR0MsSUFBbkIsQ0FBVjtBQUNBSjtBQUNEO0FBQ0RMLFlBQVFFLEtBQVI7QUFDQSxXQUFPSCxPQUFQO0FBQ0QsR0FYRDtBQVlEIiwiZmlsZSI6Im1vbmFkcy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZQSW5wdXRFcnJvciB9IGZyb20gJy4vbW9kdWxlcy9lcnJvcnMnXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbigpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgLy8gY3JlYXRlIGEgcGxhY2Vob2xkZXIvaW5pdGlhbCBwcm9taXNlIHRvIGhvbGQgdGhlIHN0ZXBzL2NoYWluIGRhdGFcbiAgY29uc3QgcHJvbWlzZSA9IEZQLnJlc29sdmUoKVxuICBwcm9taXNlLnN0ZXBzID0gW11cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuLyoqXG4gKiBDYWxsIGFmdGVyIHN0YXJ0aW5nIGEgYC5jaGFpbigpYC5cbiAqXG4gKiBPbmUgb2YgdGhlIGZldyBub24tY2hhaW5hYmxlIG1ldGhvZHMgaW4gdGhlIEFQSS5cbiAqIEByZXR1cm5zIGEgRnVuY3Rpb24uIEl0IHJ1bnMgeW91ciBmdW5jdGlvbmFsIGNoYWluIVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhaW5FbmQoKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi9pbmRleCcpXG5cbiAgcmV0dXJuIGlucHV0ID0+IHtcbiAgICBpZiAoIXRoaXMuc3RlcHMgfHwgdGhpcy5zdGVwcy5sZW5ndGggPD0gMCkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignTm8gc3RlcHMgZGVmaW5lZCBiZXR3ZWVuIC5jaGFpbigpICYgLmNoYWluRW5kKCknKVxuICAgIGxldCBzdGVwQ291bnQgPSAwXG4gICAgbGV0IHtwcm9taXNlLCByZXNvbHZlLCByZWplY3R9ID0gRlAudW5wYWNrKClcbiAgICB3aGlsZSAoc3RlcENvdW50IDwgdGhpcy5zdGVwcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFtmbk5hbWUsICwgYXJnc10gPSB0aGlzLnN0ZXBzW3N0ZXBDb3VudF1cbiAgICAgIHByb21pc2UgPSBwcm9taXNlW2ZuTmFtZV0oLi4uYXJncylcbiAgICAgIHN0ZXBDb3VudCsrXG4gICAgfVxuICAgIHJlc29sdmUoaW5wdXQpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxufVxuIl19

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (FP) {

  return { map, find, findIndex, filter, reduce };

  function find(callback) {
    return _find.call(this, callback).then(({ item }) => item);
  }
  function findIndex(callback) {
    return _find.call(this, callback).then(({ index }) => index);
  }

  function _find(iterable, callback) {
    if (this.steps) return this.addStep('_find', [...arguments]);
    if (typeof iterable === 'function') {
      callback = iterable;
      iterable = this._FP.promise;
    }

    return FP.resolve(iterable).filter(callback).then(results => results[0] != undefined ? { item: results[0], index: results.indexOf(results[0]) } : { item: undefined, index: -1 });
  }

  function filter(iterable, callback) {
    if (this.steps) return this.addStep('filter', [...arguments]);
    if (typeof iterable === 'function') {
      callback = iterable;
      iterable = this._FP.promise;
    }

    return reduce.call(this, iterable, (acc, item) => Promise.resolve(callback(item)).then(x => x ? acc.concat([item]) : acc), []);
  }

  function reduce(iterable, reducer, initVal) {
    if (this.steps) return this.addStep('reduce', [...arguments]);
    if (typeof iterable === 'function') {
      initVal = reducer;
      reducer = iterable;
      iterable = this._FP ? this._FP.promise : this;
    } else iterable = FP.resolve(iterable, this);

    return new FP((resolve, reject) => {
      return iterable.then(iterable => {
        const iterator = iterable[Symbol.iterator]();
        let i = 0;

        const next = total => {
          const current = iterator.next();
          if (current.done) return resolve(total);

          Promise.all([total, current.value]).then(([total, item]) => next(reducer(total, item, i++))).catch(reject);
        };

        next(initVal);
      });
    });
  }

  /*eslint max-statements: ["error", 60]*/
  function map(args, fn, options) {
    if (this.steps) return this.addStep('map', [...arguments]);
    if (arguments.length === 1 && this && this._FP) {
      fn = args;
      args = this && this._FP && this._FP.promise;
    }
    let resolvedOrRejected = false;
    const threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
    const innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
    let initialThread = 0;
    let errors = [];
    let count = 0;
    const results = [];
    const threadPool = new Set();
    const threadPoolFull = () => threadPool.size >= threadLimit;
    const isDone = () => errors.length > this._FP.errors.limit || count >= args.length || resolvedOrRejected;
    const setResult = index => value => {
      threadPool.delete(index);
      results[index] = value;
      return value;
    };
    return FP.resolve(new Promise((resolve, reject) => {
      const resolveIt = x => {
        // console.log('Action.resolve:', resolvedOrRejected, x)
        if (resolvedOrRejected) {
          return null;
        } else {
          resolvedOrRejected = true;
        }
        resolve(x);
      };
      const rejectIt = x => {
        if (resolvedOrRejected) {
          return null;
        } else {
          resolvedOrRejected = true;
        }
        // console.log('Action.reject:', resolvedOrRejected, x)
        reject(x);
      };
      innerValues.then(items => {
        args = [...items];
        if (!isEnumerable(items)) return reject(new _errors.FPInputError('Invalid input data passed into FP.map()'));
        const complete = () => {
          let action = null;
          if (errors.length > this._FP.errors.limit) action = rejectIt;
          if (isDone()) action = resolveIt;
          if (action) return Promise.all(results).then(data => action(results)) ? true : true;
          return false;
        };
        const checkAndRun = val => {
          // console.log('checkAndRun', count, resolvedOrRejected, val)
          if (resolvedOrRejected) return;
          if (!complete() && !results[count]) runItem(count);
          return val;
        };

        const runItem = c => {
          if (resolvedOrRejected) {
            return null;
          } else {
            count++;
          }
          if (threadPoolFull()) return setTimeout(() => runItem(c), 0);
          if (results[c]) return results[c];
          threadPool.add(c);
          // either get value with `fn(item)` or `item.then(fn)`
          results[c] = Promise.resolve(args[c]).then(val => fn(val, c, args)).then(val => setResult(c)(val)).then(checkAndRun).catch(err => {
            this._FP.errors.count++;
            errors.push(err);
            // console.log('ERR HANDLER!', errors.length, this._FP.errors.limit)
            if (errors.length > this._FP.errors.limit) {
              const fpErr = errors.length === 1 ? err : new _errors.FunctionalError(`Error Limit ${this._FP.errors.limit} Exceeded.
                idx=${c} errCnt=${this._FP.errors.count}`, { errors, results, ctx: this });
              Promise.resolve(setResult(c)(err)).then(() => rejectIt(fpErr));
            } else {
              // console.warn('Error OK:', JSON.stringify(this._FP.errors))
              return Promise.resolve().then(() => setResult(c)(err)).then(checkAndRun);
            }
          });

          return results[c];
        };

        // Kick off x number of initial threads
        while (initialThread < threadLimit && initialThread < args.length) runItem(initialThread++);
      });
    }));
  }
};

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

var _utils2 = _interopRequireDefault(_utils);

var _errors = __webpack_require__(/*! ./modules/errors */ 0);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { isEnumerable } = _utils2.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listen = undefined;

var _errors = __webpack_require__(/*! ./modules/errors */ 0);

const listen = exports.listen = function (obj, ...eventNames) {
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) throw new _errors.FPInputError('Valid EventEmitter required.');
  // Gets callback to attach to the event handlers
  const handler = this.chainEnd();
  this._FP.destroy = () => this._FP.destroyHandles.map(fn => fn() || true).filter(v => v).length;
  this._FP.destroyHandles = eventNames.map(eventName => {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return () => obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);
  });
  return this;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsibGlzdGVuIiwib2JqIiwiZXZlbnROYW1lcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJGUElucHV0RXJyb3IiLCJoYW5kbGVyIiwiY2hhaW5FbmQiLCJfRlAiLCJkZXN0cm95IiwiZGVzdHJveUhhbmRsZXMiLCJtYXAiLCJmbiIsImZpbHRlciIsInYiLCJsZW5ndGgiLCJldmVudE5hbWUiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRU8sTUFBTUEsMEJBQVMsVUFBU0MsR0FBVCxFQUFjLEdBQUdDLFVBQWpCLEVBQTZCO0FBQ2pELE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RCxNQUFNLElBQUlDLG9CQUFKLENBQWlCLDhCQUFqQixDQUFOO0FBQzVEO0FBQ0EsUUFBTUMsVUFBVSxLQUFLQyxRQUFMLEVBQWhCO0FBQ0EsT0FBS0MsR0FBTCxDQUFTQyxPQUFULEdBQW1CLE1BQU0sS0FBS0QsR0FBTCxDQUFTRSxjQUFULENBQXdCQyxHQUF4QixDQUE0QkMsTUFBTUEsUUFBUSxJQUExQyxFQUFnREMsTUFBaEQsQ0FBdURDLEtBQUtBLENBQTVELEVBQStEQyxNQUF4RjtBQUNBLE9BQUtQLEdBQUwsQ0FBU0UsY0FBVCxHQUEwQlAsV0FBV1EsR0FBWCxDQUFlSyxhQUFhO0FBQ3BEZCxRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RZLFNBQXRELEVBQWlFVixPQUFqRTtBQUNBLFdBQU8sTUFBTUosSUFBSUEsSUFBSWUsbUJBQUosR0FBMEIscUJBQTFCLEdBQWtELEtBQXRELEVBQTZERCxTQUE3RCxFQUF3RVYsT0FBeEUsQ0FBYjtBQUNELEdBSHlCLENBQTFCO0FBSUEsU0FBTyxJQUFQO0FBQ0QsQ0FYTSIsImZpbGUiOiJldmVudHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGUElucHV0RXJyb3IgfSBmcm9tICcuL21vZHVsZXMvZXJyb3JzJ1xuXG5leHBvcnQgY29uc3QgbGlzdGVuID0gZnVuY3Rpb24ob2JqLCAuLi5ldmVudE5hbWVzKSB7XG4gIGlmICh0eXBlb2YgZXZlbnROYW1lcyA9PT0gJ3N0cmluZycpIGV2ZW50TmFtZXMgPSBbZXZlbnROYW1lc11cbiAgaWYgKCFvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignVmFsaWQgRXZlbnRFbWl0dGVyIHJlcXVpcmVkLicpXG4gIC8vIEdldHMgY2FsbGJhY2sgdG8gYXR0YWNoIHRvIHRoZSBldmVudCBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIHRoaXMuX0ZQLmRlc3Ryb3kgPSAoKSA9PiB0aGlzLl9GUC5kZXN0cm95SGFuZGxlcy5tYXAoZm4gPT4gZm4oKSB8fCB0cnVlKS5maWx0ZXIodiA9PiB2KS5sZW5ndGhcbiAgdGhpcy5fRlAuZGVzdHJveUhhbmRsZXMgPSBldmVudE5hbWVzLm1hcChldmVudE5hbWUgPT4ge1xuICAgIG9ialtvYmouYWRkRXZlbnRMaXN0ZW5lciA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdvbiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgICByZXR1cm4gKCkgPT4gb2JqW29iai5yZW1vdmVFdmVudExpc3RlbmVyID8gJ3JlbW92ZUV2ZW50TGlzdGVuZXInIDogJ29mZiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgfSlcbiAgcmV0dXJuIHRoaXNcbn0iXX0=

/***/ }),
/* 6 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._thenIf = exports.tapIf = exports.thenIf = undefined;

var _utils = __webpack_require__(/*! ./modules/utils */ 2);

exports.thenIf = thenIf;
exports.tapIf = tapIf;
exports._thenIf = _thenIf;


function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if ((0, _utils.isPromiseLike)(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if ((0, _utils.isPromiseLike)(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse, true)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf(cond = x => x, ifTrue = x => x, ifFalse = () => null, returnValue = false) {
  const FP = __webpack_require__(/*! ./index */ 1);
  return value => FP.resolve(cond(value)).then(ans => ans ? ifTrue(value) : ifFalse(value)).then(v => returnValue ? value : v);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVxdWlyZSIsInJlc29sdmUiLCJhbnMiLCJ2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O1FBRVFBLE0sR0FBQUEsTTtRQUFRQyxLLEdBQUFBLEs7UUFBT0MsTyxHQUFBQSxPOzs7QUFFdkIsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYixFQUF1QixDQUFDLEdBQUdDLFNBQUosQ0FBdkIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUksMEJBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS0MsSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLENBQVA7QUFDRDs7QUFFRCxTQUFTSixLQUFULENBQWVFLElBQWYsRUFBcUJDLE1BQXJCLEVBQTZCQyxPQUE3QixFQUFzQztBQUNwQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsT0FBYixFQUFzQixDQUFDLEdBQUdDLFNBQUosQ0FBdEIsQ0FBUDtBQUNoQixNQUFJQSxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCTCxhQUFTRCxJQUFUO0FBQ0FBLFdBQU9PLEtBQUtBLENBQVo7QUFDRDtBQUNELE1BQUksMEJBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS0MsSUFBTCxDQUFVQyxTQUFTVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLEVBQXFDTyxLQUFyQyxDQUFuQixDQUFQO0FBQ0Q7QUFDRCxTQUFPVixRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCLElBQS9CLENBQVA7QUFDRDs7QUFFRCxTQUFTSCxPQUFULENBQWlCQyxPQUFPTyxLQUFLQSxDQUE3QixFQUFnQ04sU0FBU00sS0FBS0EsQ0FBOUMsRUFBaURMLFVBQVUsTUFBTSxJQUFqRSxFQUF1RVEsY0FBYyxLQUFyRixFQUE0RjtBQUMxRixRQUFNQyxLQUFLQyxRQUFRLFNBQVIsQ0FBWDtBQUNBLFNBQU9ILFNBQ0xFLEdBQUdFLE9BQUgsQ0FBV2IsS0FBS1MsS0FBTCxDQUFYLEVBQ0dELElBREgsQ0FDUU0sT0FBUUEsTUFBTWIsT0FBT1EsS0FBUCxDQUFOLEdBQXNCUCxRQUFRTyxLQUFSLENBRHRDLEVBRUdELElBRkgsQ0FFUU8sS0FBTUwsY0FBY0QsS0FBZCxHQUFzQk0sQ0FGcEMsQ0FERjtBQUlEIiwiZmlsZSI6ImNvbmRpdGlvbmFsLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQcm9taXNlTGlrZSB9IGZyb20gJy4vbW9kdWxlcy91dGlscydcblxuZXhwb3J0IHt0aGVuSWYsIHRhcElmLCBfdGhlbklmfVxuXG5mdW5jdGlvbiB0aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0aGVuSWYnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZlRydWUgPSBjb25kXG4gICAgY29uZCA9IHggPT4geFxuICB9XG4gIGlmIChpc1Byb21pc2VMaWtlKHRoaXMpKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2YWx1ZSA9PiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSkodmFsdWUpKVxuICB9XG4gIHJldHVybiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSlcbn1cblxuZnVuY3Rpb24gdGFwSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0YXBJZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBfdGhlbklmKGNvbmQgPSB4ID0+IHgsIGlmVHJ1ZSA9IHggPT4geCwgaWZGYWxzZSA9ICgpID0+IG51bGwsIHJldHVyblZhbHVlID0gZmFsc2UpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgcmV0dXJuIHZhbHVlID0+XG4gICAgRlAucmVzb2x2ZShjb25kKHZhbHVlKSlcbiAgICAgIC50aGVuKGFucyA9PiAoYW5zID8gaWZUcnVlKHZhbHVlKSA6IGlmRmFsc2UodmFsdWUpKSlcbiAgICAgIC50aGVuKHYgPT4gKHJldHVyblZhbHVlID8gdmFsdWUgOiB2KSlcbn1cbiJdfQ==

/***/ }),
/* 7 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (FP) {

  return { all, reject, delay, _delay };

  function all(promises) {
    return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
  }

  function promiseAllObject(obj) {
    const keys = Object.getOwnPropertyNames(obj);
    const values = keys.map(key => obj[key]);
    return Promise.all(values).then(results => results.reduce((obj, val, index) => {
      var _Object$assign;

      const key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {}));
  }

  function reject(err) {
    if (err instanceof Error) {
      if (this) this._error = err;
      return Promise.reject(err);
    }
    throw new Error(`Reject only accepts a new instance of Error!`);
  }

  function _delay(msec) {
    if (!Number.isInteger(msec)) throw new _errors.FPInputError('FP.delay(millisec) requires a numeric arg.');
    return value => new FP(resolve => {
      setTimeout(() => resolve(value), msec);
    });
  }

  function delay(msec) {
    if (this.steps) return this.addStep('delay', [...arguments]);
    return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
  }
};

var _errors = __webpack_require__(/*! ./modules/errors */ 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbIkZQIiwiYWxsIiwicmVqZWN0IiwiZGVsYXkiLCJfZGVsYXkiLCJwcm9taXNlcyIsInJlc29sdmUiLCJBcnJheSIsImlzQXJyYXkiLCJQcm9taXNlIiwicHJvbWlzZUFsbE9iamVjdCIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsdWVzIiwibWFwIiwia2V5IiwidGhlbiIsInJlc3VsdHMiLCJyZWR1Y2UiLCJ2YWwiLCJpbmRleCIsImFzc2lnbiIsImVyciIsIkVycm9yIiwiX2Vycm9yIiwibXNlYyIsIk51bWJlciIsImlzSW50ZWdlciIsIkZQSW5wdXRFcnJvciIsInZhbHVlIiwic2V0VGltZW91dCIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsIl9GUCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQUVlLFVBQVNBLEVBQVQsRUFBYTs7QUFFMUIsU0FBTyxFQUFFQyxHQUFGLEVBQU9DLE1BQVAsRUFBZUMsS0FBZixFQUFzQkMsTUFBdEIsRUFBUDs7QUFFQSxXQUFTSCxHQUFULENBQWFJLFFBQWIsRUFBdUI7QUFDckIsV0FBT0wsR0FBR00sT0FBSCxDQUFXQyxNQUFNQyxPQUFOLENBQWNILFFBQWQsSUFBMEJJLFFBQVFSLEdBQVIsQ0FBWUksUUFBWixDQUExQixHQUFrREssaUJBQWlCTCxRQUFqQixDQUE3RCxDQUFQO0FBQ0Q7O0FBRUQsV0FBU0ssZ0JBQVQsQ0FBMEJDLEdBQTFCLEVBQStCO0FBQzdCLFVBQU1DLE9BQU9DLE9BQU9DLG1CQUFQLENBQTJCSCxHQUEzQixDQUFiO0FBQ0EsVUFBTUksU0FBU0gsS0FBS0ksR0FBTCxDQUFTQyxPQUFPTixJQUFJTSxHQUFKLENBQWhCLENBQWY7QUFDQSxXQUFPUixRQUFRUixHQUFSLENBQVljLE1BQVosRUFBb0JHLElBQXBCLENBQXlCQyxXQUFXQSxRQUFRQyxNQUFSLENBQWUsQ0FBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsS0FBcUI7QUFBQTs7QUFDN0UsWUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBaUJOLEdBQWpCLElBQXVCSSxHQUF2QixtQkFBOEJWLEdBQTlCLENBQVA7QUFDRCxLQUgwQyxFQUd4QyxFQUh3QyxDQUFwQyxDQUFQO0FBSUQ7O0FBRUQsV0FBU1QsTUFBVCxDQUFnQnNCLEdBQWhCLEVBQXFCO0FBQ25CLFFBQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFVBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLGFBQU9mLFFBQVFQLE1BQVIsQ0FBZXNCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsVUFBTSxJQUFJQyxLQUFKLENBQVcsOENBQVgsQ0FBTjtBQUNEOztBQUVELFdBQVNyQixNQUFULENBQWdCdUIsSUFBaEIsRUFBc0I7QUFDcEIsUUFBSSxDQUFDQyxPQUFPQyxTQUFQLENBQWlCRixJQUFqQixDQUFMLEVBQTZCLE1BQU0sSUFBSUcsb0JBQUosQ0FBaUIsNENBQWpCLENBQU47QUFDN0IsV0FBT0MsU0FBUyxJQUFJL0IsRUFBSixDQUFPTSxXQUFXO0FBQUUwQixpQkFBVyxNQUFNMUIsUUFBUXlCLEtBQVIsQ0FBakIsRUFBaUNKLElBQWpDO0FBQXdDLEtBQTVELENBQWhCO0FBQ0Q7O0FBRUQsV0FBU3hCLEtBQVQsQ0FBZXdCLElBQWYsRUFBcUI7QUFDbkIsUUFBSSxLQUFLTSxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsRUFBc0IsQ0FBQyxHQUFHQyxTQUFKLENBQXRCLENBQVA7QUFDaEIsV0FBTyxRQUFRLEtBQUtDLEdBQWIsR0FBbUJwQyxHQUFHTSxPQUFILENBQVcsS0FBS1ksSUFBTCxDQUFVZCxPQUFPdUIsSUFBUCxDQUFWLENBQVgsQ0FBbkIsR0FBeUR2QixPQUFPdUIsSUFBUCxHQUFoRTtBQUNEO0FBQ0YsQzs7QUFwQ0QiLCJmaWxlIjoicHJvbWlzZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZQSW5wdXRFcnJvciB9IGZyb20gJy4vbW9kdWxlcy9lcnJvcnMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKEZQKSB7XG5cbiAgcmV0dXJuIHsgYWxsLCByZWplY3QsIGRlbGF5LCBfZGVsYXkgfVxuXG4gIGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICAgIHJldHVybiBGUC5yZXNvbHZlKEFycmF5LmlzQXJyYXkocHJvbWlzZXMpID8gUHJvbWlzZS5hbGwocHJvbWlzZXMpIDogcHJvbWlzZUFsbE9iamVjdChwcm9taXNlcykpXG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopXG4gICAgY29uc3QgdmFsdWVzID0ga2V5cy5tYXAoa2V5ID0+IG9ialtrZXldKVxuICAgIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMpLnRoZW4ocmVzdWx0cyA9PiByZXN1bHRzLnJlZHVjZSgob2JqLCB2YWwsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2luZGV4XVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBba2V5XTogdmFsIH0sIG9iailcbiAgICB9LCB7fSkpXG4gIH1cblxuICBmdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxuICB9XG5cbiAgZnVuY3Rpb24gX2RlbGF5KG1zZWMpIHtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobXNlYykpIHRocm93IG5ldyBGUElucHV0RXJyb3IoJ0ZQLmRlbGF5KG1pbGxpc2VjKSByZXF1aXJlcyBhIG51bWVyaWMgYXJnLicpXG4gICAgcmV0dXJuIHZhbHVlID0+IG5ldyBGUChyZXNvbHZlID0+IHsgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKHZhbHVlKSwgbXNlYykgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGF5KG1zZWMpIHtcbiAgICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZGVsYXknLCBbLi4uYXJndW1lbnRzXSlcbiAgICByZXR1cm4gdGhpcyAmJiB0aGlzLl9GUCA/IEZQLnJlc29sdmUodGhpcy50aGVuKF9kZWxheShtc2VjKSkpIDogX2RlbGF5KG1zZWMpKClcbiAgfVxufVxuIl19

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,