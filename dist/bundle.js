/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _require = __webpack_require__(/*! ./modules/errors */ 1),FunctionalError = _require.FunctionalError;var _require2 =
__webpack_require__(/*! ./modules/utils */ 2),isFunction = _require2.isFunction;var _require3 =
__webpack_require__(/*! ./arrays */ 3),map = _require3.map,filter = _require3.filter;var _require4 =
__webpack_require__(/*! ./arrays */ 3),reduce = _require4.reduce;var _require5 =
__webpack_require__(/*! ./arrays */ 3),find = _require5.find,findIndex = _require5.findIndex;var _require6 =
__webpack_require__(/*! ./conditional */ 4),thenIf = _require6.thenIf,_thenIf = _require6._thenIf;var _require7 =
__webpack_require__(/*! ./conditional */ 4),tapIf = _require7.tapIf;var _require8 =
__webpack_require__(/*! ./events */ 7),listen = _require8.listen;var _require9 =
__webpack_require__(/*! ./monads */ 8),chain = _require9.chain,chainEnd = _require9.chainEnd;var _require10 =
__webpack_require__(/*! ./promise */ 5),all = _require10.all,cast = _require10.cast;var _require11 =
__webpack_require__(/*! ./promise */ 5),reject = _require11.reject,delay = _require11.delay;
var FP = FunctionalPromise;

function FunctionalPromise(resolveRejectCB, unknownArgs) {
  if (!(this instanceof FunctionalPromise)) {return new FunctionalPromise(resolveRejectCB);}
  if (unknownArgs != undefined) throw new Error('FunctionalPromise only accepts 1 argument');
  this._FP = {
    concurrencyLimit: 4,
    hardErrorLimit: -1,
    promise: new Promise(resolveRejectCB) };

}

// FPromise Core Stuff
FP.denodeify = FP.promisify = promisify;
FP.promisifyAll = promisifyAll;
FP.resolve = resolve;
FP.prototype.all = FP.all = all;
FP.prototype.cast = cast;
FP.prototype.reject = reject;
FP.prototype.tap = tap;
FP.prototype.then = then;
FP.prototype.delay = delay;
FP.delay = delay;

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;

// Array Helpers
FP.prototype.map = map;
FP.prototype.find = find;
FP.prototype.filter = filter;
FP.prototype.reduce = reduce;
FP.prototype.findIndex = findIndex;

// Conditional Methods
FP.prototype.tapIf = tapIf;
FP.prototype.thenIf = thenIf;
FP.prototype._thenIf = _thenIf;
FP.thenIf = _thenIf;

// Events Methods
FP.prototype.listen = listen;

FP.unpack = unpack;


FP.prototype.addStep = function (name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function () {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('concurrency', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.serial = function () {
  if (this.steps) return this.addStep('serial', [].concat(Array.prototype.slice.call(arguments)));
  return this.concurrency(1);
};

FP.prototype.get = function (keyName) {
  if (this.steps) return this.addStep('get', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[keyName] : obj;});
};

FP.prototype.set = function (keyName, value) {
  if (this.steps) return this.addStep('set', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.catch(function (err) {
    return fn(err); // try re-throw, might be really slow...
  }));
};

function then(fn) {
  if (this.steps) return this.addStep('then', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(fn));
}

function tap(fn) {
  if (this.steps) return this.addStep('tap', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return FP.resolve(this._FP.promise.then(function (value) {
    fn(value); // fires in the node callback queue (aka background task)
    return value;
  }));
}

function resolve(value) {
  return new FP(function (resolve, reject) {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
}

function promisify(cb) {var _this = this;
  return function () {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return new FP(function (yah, nah) {return (
        cb.call.apply(cb, [_this].concat(args, [function (err, res) {return err ? nah(err) : yah(res);}])));});};
}

function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(function (key) {return typeof obj[key] === 'function';}).
  reduce(function (obj, fnName) {
    if (!/Sync/.test(fnName) && !obj[fnName + 'Async']) obj[fnName + 'Async'] = promisify(obj['' + fnName]);
    return obj;
  }, obj);
}

function unpack() {
  var resolve = void 0,reject = void 0,promise = void 0;
  promise = new Promise(function (yah, nah) {resolve = yah;reject = nah;});
  return { promise: promise, resolve: resolve, reject: reject };
}

module.exports = FunctionalPromise;


if (process && process.on) {
  process.on('uncaughtException', function (e) {
    console.error('Process: FATAL EXCEPTION: uncaughtException', e, '\n\n');
  });
  process.on('unhandledRejection', function (e) {
    console.error('Process: FATAL PROMISE ERROR: unhandledRejection', e, '\n\n');
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiRnVuY3Rpb25hbEVycm9yIiwiaXNGdW5jdGlvbiIsIm1hcCIsImZpbHRlciIsInJlZHVjZSIsImZpbmQiLCJmaW5kSW5kZXgiLCJ0aGVuSWYiLCJfdGhlbklmIiwidGFwSWYiLCJsaXN0ZW4iLCJjaGFpbiIsImNoYWluRW5kIiwiYWxsIiwiY2FzdCIsInJlamVjdCIsImRlbGF5IiwiRlAiLCJGdW5jdGlvbmFsUHJvbWlzZSIsInJlc29sdmVSZWplY3RDQiIsInVua25vd25BcmdzIiwidW5kZWZpbmVkIiwiRXJyb3IiLCJfRlAiLCJjb25jdXJyZW5jeUxpbWl0IiwiaGFyZEVycm9yTGltaXQiLCJwcm9taXNlIiwiUHJvbWlzZSIsImRlbm9kZWlmeSIsInByb21pc2lmeSIsInByb21pc2lmeUFsbCIsInJlc29sdmUiLCJwcm90b3R5cGUiLCJ0YXAiLCJ0aGVuIiwidW5wYWNrIiwiYWRkU3RlcCIsIm5hbWUiLCJhcmdzIiwic3RlcHMiLCJwdXNoIiwiY29uY3VycmVuY3kiLCJsaW1pdCIsIkluZmluaXR5IiwiYXJndW1lbnRzIiwic2VyaWFsIiwiZ2V0Iiwia2V5TmFtZSIsIm9iaiIsInNldCIsInZhbHVlIiwiY2F0Y2giLCJmbiIsImVyciIsImNiIiwieWFoIiwibmFoIiwiY2FsbCIsInJlcyIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImtleSIsImZuTmFtZSIsInRlc3QiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2VzcyIsIm9uIiwiZSIsImNvbnNvbGUiLCJlcnJvciJdLCJtYXBwaW5ncyI6IndSQUEwQkEsUUFBUSxrQkFBUixDLENBQW5CQyxlLFlBQUFBLGU7QUFDbUJELFFBQVEsaUJBQVIsQyxDQUFuQkUsVSxhQUFBQSxVO0FBQ21CRixRQUFRLFVBQVIsQyxDQUFuQkcsRyxhQUFBQSxHLENBQUtDLE0sYUFBQUEsTTtBQUNjSixRQUFRLFVBQVIs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LElBQUljLEdBQUosQ0FBUCxLQUFvQixVQUEzQixFQUREO0FBRU4xRCxRQUZNLENBRUMsVUFBQzRDLEdBQUQsRUFBTWUsTUFBTixFQUFpQjtBQUN2QixRQUFJLENBQUMsT0FBT0MsSUFBUCxDQUFZRCxNQUFaLENBQUQsSUFBd0IsQ0FBQ2YsSUFBT2UsTUFBUCxXQUE3QixFQUFvRGYsSUFBT2UsTUFBUCxjQUF3QmxDLFVBQVVtQixTQUFPZSxNQUFQLENBQVYsQ0FBeEI7QUFDcEQsV0FBT2YsR0FBUDtBQUNELEdBTE0sRUFLSkEsR0FMSSxDQUFQO0FBTUQ7O0FBRUQsU0FBU2IsTUFBVCxHQUFrQjtBQUNoQixNQUFJSixnQkFBSixDQUFhaEIsZUFBYixDQUFxQlcsZ0JBQXJCO0FBQ0FBLFlBQVUsSUFBSUMsT0FBSixDQUFZLFVBQUM0QixHQUFELEVBQU1DLEdBQU4sRUFBYyxDQUFFekIsVUFBVXdCLEdBQVYsQ0FBZXhDLFNBQVN5QyxHQUFULENBQWMsQ0FBekQsQ0FBVjtBQUNBLFNBQU8sRUFBRTlCLGdCQUFGLEVBQVdLLGdCQUFYLEVBQW9CaEIsY0FBcEIsRUFBUDtBQUNEOztBQUVEa0QsT0FBT0MsT0FBUCxHQUFpQmhELGlCQUFqQjs7O0FBR0EsSUFBSWlELFdBQVdBLFFBQVFDLEVBQXZCLEVBQTJCO0FBQ3pCRCxVQUFRQyxFQUFSLENBQVcsbUJBQVgsRUFBZ0MsVUFBVUMsQ0FBVixFQUFhO0FBQzNDQyxZQUFRQyxLQUFSLENBQWMsNkNBQWQsRUFBNkRGLENBQTdELEVBQWdFLE1BQWhFO0FBQ0QsR0FGRDtBQUdBRixVQUFRQyxFQUFSLENBQVcsb0JBQVgsRUFBaUMsVUFBVUMsQ0FBVixFQUFhO0FBQzVDQyxZQUFRQyxLQUFSLENBQWMsa0RBQWQsRUFBa0VGLENBQWxFLEVBQXFFLE1BQXJFO0FBQ0QsR0FGRDtBQUdEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0Z1bmN0aW9uYWxFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcbmNvbnN0IHtpc0Z1bmN0aW9ufSAgICAgID0gcmVxdWlyZSgnLi9tb2R1bGVzL3V0aWxzJylcbmNvbnN0IHttYXAsIGZpbHRlcn0gICAgID0gcmVxdWlyZSgnLi9hcnJheXMnKVxuY29uc3Qge3JlZHVjZX0gICAgICAgICAgPSByZXF1aXJlKCcuL2FycmF5cycpXG5jb25zdCB7ZmluZCwgZmluZEluZGV4fSA9IHJlcXVpcmUoJy4vYXJyYXlzJylcbmNvbnN0IHt0aGVuSWYsIF90aGVuSWZ9ID0gcmVxdWlyZSgnLi9jb25kaXRpb25hbCcpXG5jb25zdCB7dGFwSWZ9ICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29uZGl0aW9uYWwnKVxuY29uc3Qge2xpc3Rlbn0gICAgICAgICAgPSByZXF1aXJlKCcuL2V2ZW50cycpXG5jb25zdCB7Y2hhaW4sIGNoYWluRW5kfSA9IHJlcXVpcmUoJy4vbW9uYWRzJylcbmNvbnN0IHthbGwsIGNhc3R9ICAgICAgID0gcmVxdWlyZSgnLi9wcm9taXNlJylcbmNvbnN0IHtyZWplY3QsIGRlbGF5fSAgID0gcmVxdWlyZSgnLi9wcm9taXNlJylcbmNvbnN0IEZQID0gRnVuY3Rpb25hbFByb21pc2VcblxuZnVuY3Rpb24gRnVuY3Rpb25hbFByb21pc2UocmVzb2x2ZVJlamVjdENCLCB1bmtub3duQXJncykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRnVuY3Rpb25hbFByb21pc2UpKSB7cmV0dXJuIG5ldyBGdW5jdGlvbmFsUHJvbWlzZShyZXNvbHZlUmVqZWN0Q0IpfVxuICBpZiAodW5rbm93bkFyZ3MgIT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uYWxQcm9taXNlIG9ubHkgYWNjZXB0cyAxIGFyZ3VtZW50JylcbiAgdGhpcy5fRlAgPSB7XG4gICAgY29uY3VycmVuY3lMaW1pdDogNCxcbiAgICBoYXJkRXJyb3JMaW1pdDogLTEsXG4gICAgcHJvbWlzZTogbmV3IFByb21pc2UocmVzb2x2ZVJlamVjdENCKSxcbiAgfVxufVxuXG4vLyBGUHJvbWlzZSBDb3JlIFN0dWZmXG5GUC5kZW5vZGVpZnkgPSBGUC5wcm9taXNpZnkgPSBwcm9taXNpZnlcbkZQLnByb21pc2lmeUFsbCA9IHByb21pc2lmeUFsbFxuRlAucmVzb2x2ZSA9IHJlc29sdmVcbkZQLnByb3RvdHlwZS5hbGwgPSBGUC5hbGwgPSBhbGxcbkZQLnByb3RvdHlwZS5jYXN0ID0gY2FzdFxuRlAucHJvdG90eXBlLnJlamVjdCA9IHJlamVjdFxuRlAucHJvdG90eXBlLnRhcCA9IHRhcFxuRlAucHJvdG90eXBlLnRoZW4gPSB0aGVuXG5GUC5wcm90b3R5cGUuZGVsYXkgPSBkZWxheVxuRlAuZGVsYXkgPSBkZWxheVxuXG4vLyBNb25hZGljIE1ldGhvZHNcbkZQLmNoYWluID0gY2hhaW5cbkZQLnByb3RvdHlwZS5jaGFpbkVuZCA9IGNoYWluRW5kXG5cbi8vIEFycmF5IEhlbHBlcnNcbkZQLnByb3RvdHlwZS5tYXAgPSBtYXBcbkZQLnByb3RvdHlwZS5maW5kID0gZmluZFxuRlAucHJvdG90eXBlLmZpbHRlciA9IGZpbHRlclxuRlAucHJvdG90eXBlLnJlZHVjZSA9IHJlZHVjZVxuRlAucHJvdG90eXBlLmZpbmRJbmRleCA9IGZpbmRJbmRleFxuXG4vLyBDb25kaXRpb25hbCBNZXRob2RzXG5GUC5wcm90b3R5cGUudGFwSWYgPSB0YXBJZlxuRlAucHJvdG90eXBlLnRoZW5JZiA9IHRoZW5JZlxuRlAucHJvdG90eXBlLl90aGVuSWYgPSBfdGhlbklmXG5GUC50aGVuSWYgPSBfdGhlbklmXG5cbi8vIEV2ZW50cyBNZXRob2RzXG5GUC5wcm90b3R5cGUubGlzdGVuID0gbGlzdGVuXG5cbkZQLnVucGFjayA9IHVucGFja1xuXG5cbkZQLnByb3RvdHlwZS5hZGRTdGVwID0gZnVuY3Rpb24obmFtZSwgYXJncykge1xuICBpZiAodGhpcy5zdGVwcykgdGhpcy5zdGVwcy5wdXNoKFtuYW1lLCB0aGlzLCBhcmdzXSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuRlAucHJvdG90eXBlLmNvbmN1cnJlbmN5ID0gZnVuY3Rpb24obGltaXQgPSBJbmZpbml0eSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY29uY3VycmVuY3knLCBbLi4uYXJndW1lbnRzXSlcbiAgdGhpcy5fRlAuY29uY3VycmVuY3lMaW1pdCA9IGxpbWl0XG4gIHJldHVybiB0aGlzXG59XG5cbkZQLnByb3RvdHlwZS5zZXJpYWwgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3NlcmlhbCcsIFsuLi5hcmd1bWVudHNdKVxuICByZXR1cm4gdGhpcy5jb25jdXJyZW5jeSgxKVxufVxuXG5GUC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5TmFtZSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnZ2V0JywgWy4uLmFyZ3VtZW50c10pXG4gIHJldHVybiB0aGlzLnRoZW4oKG9iaikgPT4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgPyBvYmpba2V5TmFtZV0gOiBvYmopXG59XG5cbkZQLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXlOYW1lLCB2YWx1ZSkge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnc2V0JywgWy4uLmFyZ3VtZW50c10pXG4gIHJldHVybiB0aGlzLnRoZW4ob2JqID0+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIG9ialtrZXlOYW1lXSA9IHZhbHVlXG4gICAgcmV0dXJuIG9ialxuICB9KVxufVxuXG5GUC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihmbikge1xuICBpZiAodGhpcy5zdGVwcykgcmV0dXJuIHRoaXMuYWRkU3RlcCgnY2F0Y2gnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC5jYXRjaChmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArIHR5cGVvZiBmbilcbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS5jYXRjaChlcnIgPT4ge1xuICAgIHJldHVybiBmbihlcnIpIC8vIHRyeSByZS10aHJvdywgbWlnaHQgYmUgcmVhbGx5IHNsb3cuLi5cbiAgfSkpXG59XG5cbmZ1bmN0aW9uIHRoZW4oZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW4nLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkgdGhyb3cgbmV3IEZ1bmN0aW9uYWxFcnJvcignSW52YWxpZCBmbiBhcmd1bWVudCBmb3IgYC50aGVuKGZuKWAuIE11c3QgYmUgYSBmdW5jdGlvbi4gQ3VycmVudGx5OiAnICsgdHlwZW9mIGZuKVxuICByZXR1cm4gRlAucmVzb2x2ZSh0aGlzLl9GUC5wcm9taXNlLnRoZW4oZm4pKVxufVxuXG5mdW5jdGlvbiB0YXAoZm4pIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcCcsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoIWlzRnVuY3Rpb24oZm4pKSB0aHJvdyBuZXcgRnVuY3Rpb25hbEVycm9yKCdJbnZhbGlkIGZuIGFyZ3VtZW50IGZvciBgLnRhcChmbilgLiBNdXN0IGJlIGEgZnVuY3Rpb24uIEN1cnJlbnRseTogJyArIHR5cGVvZiBmbilcbiAgcmV0dXJuIEZQLnJlc29sdmUodGhpcy5fRlAucHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICBmbih2YWx1ZSkgLy8gZmlyZXMgaW4gdGhlIG5vZGUgY2FsbGJhY2sgcXVldWUgKGFrYSBiYWNrZ3JvdW5kIHRhc2spXG4gICAgcmV0dXJuIHZhbHVlXG4gIH0pKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgRlAoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmICh2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pKSByZXR1cm4gdmFsdWUudGhlbihyZXNvbHZlKS5jYXRjaChyZWplY3QpXG4gICAgcmVzb2x2ZSh2YWx1ZSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gcHJvbWlzaWZ5KGNiKSB7XG4gIHJldHVybiAoLi4uYXJncykgPT4gbmV3IEZQKCh5YWgsIG5haCkgPT5cbiAgICBjYi5jYWxsKHRoaXMsIC4uLmFyZ3MsIChlcnIsIHJlcykgPT4gZXJyID8gbmFoKGVycikgOiB5YWgocmVzKSkpXG59XG5cbmZ1bmN0aW9uIHByb21pc2lmeUFsbChvYmopIHtcbiAgaWYgKCFvYmogfHwgIU9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSB7IHRocm93IG5ldyBFcnJvcignSW52YWxpZCBBcmd1bWVudCBvYmogaW4gcHJvbWlzaWZ5QWxsKG9iaiknKSB9XG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopXG4gIC5maWx0ZXIoa2V5ID0+IHR5cGVvZiBvYmpba2V5XSA9PT0gJ2Z1bmN0aW9uJylcbiAgLnJlZHVjZSgob2JqLCBmbk5hbWUpID0+IHtcbiAgICBpZiAoIS9TeW5jLy50ZXN0KGZuTmFtZSkgJiYgIW9ialtgJHtmbk5hbWV9QXN5bmNgXSkgb2JqW2Ake2ZuTmFtZX1Bc3luY2BdID0gcHJvbWlzaWZ5KG9ialtgJHtmbk5hbWV9YF0pXG4gICAgcmV0dXJuIG9ialxuICB9LCBvYmopXG59XG5cbmZ1bmN0aW9uIHVucGFjaygpIHtcbiAgbGV0IHJlc29sdmUsIHJlamVjdCwgcHJvbWlzZTtcbiAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKCh5YWgsIG5haCkgPT4geyByZXNvbHZlID0geWFoOyByZWplY3QgPSBuYWggfSlcbiAgcmV0dXJuIHsgcHJvbWlzZSwgcmVzb2x2ZSwgcmVqZWN0IH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbmFsUHJvbWlzZVxuXG5cbmlmIChwcm9jZXNzICYmIHByb2Nlc3Mub24pIHtcbiAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Byb2Nlc3M6IEZBVEFMIEVYQ0VQVElPTjogdW5jYXVnaHRFeGNlcHRpb24nLCBlLCAnXFxuXFxuJylcbiAgfSlcbiAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgZnVuY3Rpb24gKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdQcm9jZXNzOiBGQVRBTCBQUk9NSVNFIEVSUk9SOiB1bmhhbmRsZWRSZWplY3Rpb24nLCBlLCAnXFxuXFxuJylcbiAgfSlcbn0iXX0=
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 6)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var FunctionalError = function (_Error) {_inherits(FunctionalError, _Error);
  function FunctionalError(msg, options) {_classCallCheck(this, FunctionalError);
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }var _this = _possibleConstructorReturn(this, (FunctionalError.__proto__ || Object.getPrototypeOf(FunctionalError)).call(this,
    msg));
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      Object.assign(_this, options);
    }
    _this.name = _this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(_this, _this.constructor);return _this;
  }return FunctionalError;}(Error);var

FunctionalUserError = function (_FunctionalError) {_inherits(FunctionalUserError, _FunctionalError);function FunctionalUserError() {_classCallCheck(this, FunctionalUserError);return _possibleConstructorReturn(this, (FunctionalUserError.__proto__ || Object.getPrototypeOf(FunctionalUserError)).apply(this, arguments));}return FunctionalUserError;}(FunctionalError);var
FPUnexpectedError = function (_FunctionalError2) {_inherits(FPUnexpectedError, _FunctionalError2);function FPUnexpectedError() {_classCallCheck(this, FPUnexpectedError);return _possibleConstructorReturn(this, (FPUnexpectedError.__proto__ || Object.getPrototypeOf(FPUnexpectedError)).apply(this, arguments));}return FPUnexpectedError;}(FunctionalError);var
FPInputError = function (_FunctionalError3) {_inherits(FPInputError, _FunctionalError3);function FPInputError() {_classCallCheck(this, FPInputError);return _possibleConstructorReturn(this, (FPInputError.__proto__ || Object.getPrototypeOf(FPInputError)).apply(this, arguments));}return FPInputError;}(FunctionalError);var
FPSoftError = function (_FunctionalError4) {_inherits(FPSoftError, _FunctionalError4);function FPSoftError() {_classCallCheck(this, FPSoftError);return _possibleConstructorReturn(this, (FPSoftError.__proto__ || Object.getPrototypeOf(FPSoftError)).apply(this, arguments));}return FPSoftError;}(FunctionalError);var
FPTimeout = function (_FunctionalError5) {_inherits(FPTimeout, _FunctionalError5);function FPTimeout() {_classCallCheck(this, FPTimeout);return _possibleConstructorReturn(this, (FPTimeout.__proto__ || Object.getPrototypeOf(FPTimeout)).apply(this, arguments));}return FPTimeout;}(FunctionalError);

module.exports = {
  FunctionalError: FunctionalError,
  FunctionalUserError: FunctionalUserError,
  FPUnexpectedError: FPUnexpectedError,
  FPInputError: FPInputError,
  FPSoftError: FPSoftError,
  FPTimeout: FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJtc2ciLCJvcHRpb25zIiwibWVzc2FnZSIsIk9iamVjdCIsImFzc2lnbiIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJGdW5jdGlvbmFsVXNlckVycm9yIiwiRlBVbmV4cGVjdGVkRXJyb3IiLCJGUElucHV0RXJyb3IiLCJGUFNvZnRFcnJvciIsIkZQVGltZW91dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJxbkNBQU1BLGU7QUFDSiwyQkFBWUMsR0FBWixFQUFpQkMsT0FBakIsRUFBMEI7QUFDeEIsUUFBSSxRQUFPRCxHQUFQLHlDQUFPQSxHQUFQLE9BQWUsUUFBbkIsRUFBNkI7QUFDM0JDLGdCQUFVRCxHQUFWO0FBQ0EsVUFBS0EsSUFBSUUsT0FBVCxFQUFtQkYsTUFBTUEsSUFBSUUsT0FBVjtBQUNwQixLQUp1QjtBQUtsQkYsT0FMa0I7QUFNeEIsUUFBSSxRQUFPQyxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQy9CRSxhQUFPQyxNQUFQLFFBQW9CSCxPQUFwQjtBQUNEO0FBQ0QsVUFBS0ksSUFBTCxHQUFZLE1BQUtDLFdBQUwsQ0FBaUJELElBQTdCO0FBQ0E7QUFDQUUsVUFBTUMsaUJBQU4sUUFBOEIsTUFBS0YsV0FBbkMsRUFYd0I7QUFZekIsRyx5QkFiMkJDLEs7O0FBZXhCRSxtQix3VUFBNEJWLGU7QUFDNUJXLGlCLDhUQUEwQlgsZTtBQUMxQlksWSxnU0FBcUJaLGU7QUFDckJhLFcsMFJBQW9CYixlO0FBQ3BCYyxTLDhRQUFrQmQsZTs7QUFFeEJlLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmhCLGtDQURlO0FBRWZVLDBDQUZlO0FBR2ZDLHNDQUhlO0FBSWZDLDRCQUplO0FBS2ZDLDBCQUxlO0FBTWZDLHNCQU5lLEVBQWpCIiwiZmlsZSI6ImVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEZ1bmN0aW9uYWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobXNnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBtc2cgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0gbXNnXG4gICAgICBpZiAoIG1zZy5tZXNzYWdlICkgbXNnID0gbXNnLm1lc3NhZ2VcbiAgICB9XG4gICAgc3VwZXIobXNnKVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucylcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH1cbn1cbmNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dCxcbn1cbiJdfQ==

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var utils = module.exports = {
  isPromiseLike: function isPromiseLike(p) {
    return p && typeof p.then === 'function';
  },

  isFunction: function isFunction(fn) {
    return typeof fn === 'function';
  },

  isEnumerable: function isEnumerable(list) {
    return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';
  },

  flatten: function flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce(function (item, results) {return results.concat(Array.isArray(item) ? utils.flatten(item) : [item]);}, []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsIml0ZW0iLCJyZXN1bHRzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxlQUQ2Qix5QkFDZkMsQ0FEZSxFQUNaO0FBQ2YsV0FBT0EsS0FBSyxPQUFPQSxFQUFFQyxJQUFULEtBQWtCLFVBQTlCO0FBQ0QsR0FINEI7O0FBSzdCQyxZQUw2QixzQkFLbEJDLEVBTGtCLEVBS2Q7QUFDYixXQUFPLE9BQU9BLEVBQVAsS0FBYyxVQUFyQjtBQUNELEdBUDRCOztBQVM3QkMsY0FUNkIsd0JBU2hCQyxJQVRnQixFQVNWO0FBQ2pCLFdBQU9BLFFBQVFDLE1BQU1DLE9BQU4sQ0FBY0YsSUFBZCxDQUFSLElBQStCLE9BQU9BLEtBQUtHLE9BQU9DLFFBQVosQ0FBUCxLQUFpQyxVQUF2RTtBQUNELEdBWDRCOztBQWE3QkMsU0FiNkIsbUJBYXJCQyxHQWJxQixFQWFoQjtBQUNYLFFBQUksQ0FBQ0wsTUFBTUMsT0FBTixDQUFjSSxHQUFkLENBQUwsRUFBeUIsTUFBTSxJQUFJQyxLQUFKLENBQVUsaURBQVYsQ0FBTjtBQUN6QixXQUFPRCxJQUFJRSxNQUFKLENBQVcsVUFBQ0MsSUFBRCxFQUFPQyxPQUFQLFVBQW1CQSxRQUFRQyxNQUFSLENBQWVWLE1BQU1DLE9BQU4sQ0FBY08sSUFBZCxJQUFzQmxCLE1BQU1jLE9BQU4sQ0FBY0ksSUFBZCxDQUF0QixHQUE0QyxDQUFDQSxJQUFELENBQTNELENBQW5CLEVBQVgsRUFBa0csRUFBbEcsQ0FBUDtBQUNELEdBaEI0QixFQUEvQiIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUHJvbWlzZUxpa2UocCkge1xuICAgIHJldHVybiBwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbidcbiAgfSxcblxuICBpc0Z1bmN0aW9uKGZuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJ1xuICB9LFxuXG4gIGlzRW51bWVyYWJsZShsaXN0KSB7XG4gICAgcmV0dXJuIGxpc3QgJiYgQXJyYXkuaXNBcnJheShsaXN0KSB8fCB0eXBlb2YgbGlzdFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nXG4gIH0sXG5cbiAgZmxhdHRlbihhcnIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgYGZsYXR0ZW5gIHJlcXVpcmVzIHZhbGlkIGFycmF5IHBhcmFtZXRlcicpXG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKGl0ZW0sIHJlc3VsdHMpID0+IHJlc3VsdHMuY29uY2F0KEFycmF5LmlzQXJyYXkoaXRlbSkgPyB1dGlscy5mbGF0dGVuKGl0ZW0pIDogW2l0ZW1dKSwgW10pXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 3 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/utils */ 2),isEnumerable = _require.isEnumerable;var _require2 =
__webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require2.FPInputError;

module.exports = { map: map, find: find, findIndex: findIndex, filter: filter, reduce: reduce };

function find(callback) {
  return _find.call(this, callback).then(function (_ref) {var item = _ref.item;return item;});
}
function findIndex(callback) {
  return _find.call(this, callback).then(function (_ref2) {var index = _ref2.index;return index;});
}

function _find(iterable, callback) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(function (results) {return results && results[0] ?
    { item: results[0], index: results.indexOf(results[0]) } :
    { item: undefined, index: -1 };});
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, function (aggregate, item) {
    return Promise.resolve(callback(item)).then(function (value) {return value ? aggregate.concat([item]) : aggregate;});
  }, []);
}

function reduce(iterable, reducer, initVal) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else {
    iterable = FP.resolve(iterable, this);
  }
  return new FP(function (resolve, reject) {
    return iterable.then(function (iterable) {
      var iterator = iterable[Symbol.iterator]();
      var i = 0;

      var next = function next(total) {
        var current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),total = _ref4[0],item = _ref4[1];return next(reducer(total, item, i++));}).
        catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }

  var threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  var innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  var initialThread = 0;
  var errors = [];
  var count = 0;
  var results = [];
  var threadPool = new Set();
  var threadPoolFull = function threadPoolFull() {return threadPool.size >= threadLimit;};
  var isDone = function isDone() {return errors.length >= 0 || count >= args.length;};
  var setResult = function setResult(index) {return function (value) {
      results[index] = value;
      return value;
    };};

  return new FP(function (resolve, reject) {
    innerValues.then(function (items) {
      args = [].concat(_toConsumableArray(items));
      if (!isEnumerable(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      var complete = function complete() {
        if (errors.length >= 1) {
          reject(errors[0]);
        } else if (!isDone()) {
          Promise.all(results).then(resolve);
          return true;
        }
        return false;
      };
      var runItem = function runItem(c) {
        if (threadPoolFull()) return setTimeout(function () {return runItem(c);}, 0);
        if (count >= args.length) return Promise.all(results).then(resolve);
        var result = [args[c], c];
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        results[c] = Promise.resolve(args[c]).
        then(function (val) {return fn(val, c, args);}).
        then(function (val) {
          threadPool.delete(c);
          return setResult(c)(val);
        }).
        then(function (val) {
          if (!complete()) runItem(++count);
          return val;
        }).catch(function (err) {return errors.push(err);});
        return result;
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) {runItem(initialThread++);}
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 4 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/utils */ 2),isPromiseLike = _require.isPromiseLike;

module.exports = { thenIf: thenIf, tapIf: tapIf, _thenIf: _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse, true)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf() {var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {return x;};var ifTrue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {return x;};var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {return null;};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var FP = __webpack_require__(/*! ./index */ 0);
  return function (value) {return (
      FP.resolve(cond(value)).
      then(function (ans) {return ans ? ifTrue(value) : ifFalse(value);}).
      then(function (v) {return returnValue ? value : v;}));};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNQcm9taXNlTGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJlQUF3QkEsUUFBUSxpQkFBUixDLENBQWpCQyxhLFlBQUFBLGE7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0MsY0FBRCxFQUFTQyxZQUFULEVBQWdCQyxnQkFBaEIsRUFBakI7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYix1Q0FBMkJDLFNBQTNCLEdBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPLHlCQUFLTyxDQUFMLEVBQVA7QUFDRDtBQUNELE1BQUliLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS2MsSUFBTCxDQUFVLHlCQUFTVCxRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFULEVBQVYsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsdUNBQTBCQyxTQUExQixHQUFQO0FBQ2hCLE1BQUlBLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJMLGFBQVNELElBQVQ7QUFDQUEsV0FBTyx5QkFBS08sQ0FBTCxFQUFQO0FBQ0Q7QUFDRCxNQUFJYixjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtjLElBQUwsQ0FBVSx5QkFBU1QsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBVCxFQUFWLENBQVA7QUFDRDtBQUNELFNBQU9WLFFBQVFDLElBQVIsRUFBY0MsTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsR0FBNEYsS0FBM0VDLElBQTJFLHVFQUFwRSxxQkFBS08sQ0FBTCxFQUFvRSxLQUE1RE4sTUFBNEQsdUVBQW5ELHFCQUFLTSxDQUFMLEVBQW1ELEtBQTNDTCxPQUEyQyx1RUFBakMsb0JBQU0sSUFBTixFQUFpQyxLQUFyQlEsV0FBcUIsdUVBQVAsS0FBTztBQUMxRixNQUFNQyxLQUFLbEIsUUFBUSxTQUFSLENBQVg7QUFDQSxTQUFPO0FBQ0xrQixTQUFHQyxPQUFILENBQVdaLEtBQUtTLEtBQUwsQ0FBWDtBQUNHRCxVQURILENBQ1EsdUJBQVFLLE1BQU1aLE9BQU9RLEtBQVAsQ0FBTixHQUFzQlAsUUFBUU8sS0FBUixDQUE5QixFQURSO0FBRUdELFVBRkgsQ0FFUSxxQkFBTUUsY0FBY0QsS0FBZCxHQUFzQkssQ0FBNUIsRUFGUixDQURLLEdBQVA7QUFJRCIsImZpbGUiOiJjb25kaXRpb25hbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtpc1Byb21pc2VMaWtlfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91dGlscycpXG5cbm1vZHVsZS5leHBvcnRzID0ge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 5 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { all: all, cast: cast, reject: reject, delay: delay };

function all(promises) {
  var FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ?
  Promise.all(promises) :
  promiseAllObject(promises));
}

function promiseAllObject(obj) {
  var keys = Object.getOwnPropertyNames(obj);
  var values = keys.map(function (key) {return obj[key];});
  return Promise.all(values).
  then(function (results) {
    return results.reduce(function (obj, val, index) {var _Object$assign;
      var key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {});
  });
}

function cast(obj) {
  return Promise.resolve(obj);
}

function reject(err) {
  // ret._captureStackTrace();
  // ret._rejectCallback(reason, true);
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error('Reject only accepts a new instance of Error!');
}

function delay(value, delay) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (arguments.length === 1) {
    delay = value;
    value = this || null;
  }
  if (!Number.isInteger(delay)) throw new FPInputError('fp.delay([promise,] millisec) requires a numeric arg.');
  return new FP(function (resolve) {
    setTimeout(function () {return resolve(value);}, delay);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJGUElucHV0RXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwiY2FzdCIsInJlamVjdCIsImRlbGF5IiwicHJvbWlzZXMiLCJGUCIsInJlc29sdmUiLCJBcnJheSIsImlzQXJyYXkiLCJQcm9taXNlIiwicHJvbWlzZUFsbE9iamVjdCIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsdWVzIiwibWFwIiwia2V5IiwidGhlbiIsInJlc3VsdHMiLCJyZWR1Y2UiLCJ2YWwiLCJpbmRleCIsImFzc2lnbiIsImVyciIsIkVycm9yIiwiX2Vycm9yIiwidmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiZUFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFFBQUQsRUFBTUMsVUFBTixFQUFZQyxjQUFaLEVBQW9CQyxZQUFwQixFQUFqQjs7QUFFQSxTQUFTSCxHQUFULENBQWFJLFFBQWIsRUFBdUI7QUFDckIsTUFBTUMsS0FBS1QsUUFBUSxJQUFSLENBQVg7QUFDQSxTQUFPUyxHQUFHQyxPQUFILENBQVdDLE1BQU1DLE9BQU4sQ0FBY0osUUFBZDtBQUNmSyxVQUFRVCxHQUFSLENBQVlJLFFBQVosQ0FEZTtBQUVmTSxtQkFBaUJOLFFBQWpCLENBRkksQ0FBUDtBQUdEOztBQUVELFNBQVNNLGdCQUFULENBQTBCQyxHQUExQixFQUErQjtBQUM3QixNQUFNQyxPQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkgsR0FBM0IsQ0FBYjtBQUNBLE1BQU1JLFNBQVNILEtBQUtJLEdBQUwsQ0FBUyx1QkFBT0wsSUFBSU0sR0FBSixDQUFQLEVBQVQsQ0FBZjtBQUNBLFNBQU9SLFFBQVFULEdBQVIsQ0FBWWUsTUFBWjtBQUNORyxNQURNLENBQ0QsbUJBQVc7QUFDZixXQUFPQyxRQUFRQyxNQUFSLENBQWUsVUFBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDekMsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBZ0JOLEdBQWhCLElBQXNCSSxHQUF0QixtQkFBNEJWLEdBQTVCLENBQVA7QUFDRCxLQUhNLEVBR0osRUFISSxDQUFQO0FBSUQsR0FOTSxDQUFQO0FBT0Q7O0FBRUQsU0FBU1YsSUFBVCxDQUFjVSxHQUFkLEVBQW1CO0FBQ2pCLFNBQU9GLFFBQVFILE9BQVIsQ0FBZ0JLLEdBQWhCLENBQVA7QUFDRDs7QUFFRCxTQUFTVCxNQUFULENBQWdCc0IsR0FBaEIsRUFBcUI7QUFDbkI7QUFDQTtBQUNBLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9mLFFBQVFQLE1BQVIsQ0FBZXNCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLGdEQUFOO0FBQ0Q7O0FBRUQsU0FBU3RCLEtBQVQsQ0FBZXdCLEtBQWYsRUFBc0J4QixLQUF0QixFQUE2QjtBQUMzQixNQUFNRSxLQUFLVCxRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUlnQyxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCMUIsWUFBUXdCLEtBQVI7QUFDQUEsWUFBUSxRQUFRLElBQWhCO0FBQ0Q7QUFDRCxNQUFJLENBQUNHLE9BQU9DLFNBQVAsQ0FBaUI1QixLQUFqQixDQUFMLEVBQThCLE1BQU0sSUFBSU4sWUFBSixDQUFpQix1REFBakIsQ0FBTjtBQUM5QixTQUFPLElBQUlRLEVBQUosQ0FBTyxtQkFBVztBQUN2QjJCLGVBQVcsb0JBQU0xQixRQUFRcUIsS0FBUixDQUFOLEVBQVgsRUFBaUN4QixLQUFqQztBQUNELEdBRk0sQ0FBUDtBQUdEIiwiZmlsZSI6InByb21pc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7RlBJbnB1dEVycm9yfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHthbGwsIGNhc3QsIHJlamVjdCwgZGVsYXl9XG5cbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgcmV0dXJuIEZQLnJlc29sdmUoQXJyYXkuaXNBcnJheShwcm9taXNlcylcbiAgID8gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5mdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKVxuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gb2JqW2tleV0pXG4gIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMpXG4gIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgIHJldHVybiByZXN1bHRzLnJlZHVjZSgob2JqLCB2YWwsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2luZGV4XVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1trZXldOiB2YWx9LCBvYmopXG4gICAgfSwge30pXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGNhc3Qob2JqKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUob2JqKVxufVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIC8vIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgLy8gcmV0Ll9yZWplY3RDYWxsYmFjayhyZWFzb24sIHRydWUpO1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5mdW5jdGlvbiBkZWxheSh2YWx1ZSwgZGVsYXkpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgZGVsYXkgPSB2YWx1ZVxuICAgIHZhbHVlID0gdGhpcyB8fCBudWxsXG4gIH1cbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGRlbGF5KSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignZnAuZGVsYXkoW3Byb21pc2UsXSBtaWxsaXNlYykgcmVxdWlyZXMgYSBudW1lcmljIGFyZy4nKVxuICByZXR1cm4gbmV3IEZQKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh2YWx1ZSksIGRlbGF5KVxuICB9KVxufVxuIl19

/***/ }),
/* 6 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 7 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { listen: listen };

function listen(obj) {for (var _len = arguments.length, eventNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {eventNames[_key - 1] = arguments[_key];}
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) {
    throw new FPInputError('Input object isn\'t a valid EventEmitter or similar.');
  }

  // Sets up the handlers
  var handler = this.chainEnd();
  // console.log(`   > Attaching ${eventNames} handler`, eventNames)
  this.cleanupHandles = eventNames.map(function (eventName) {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return function () {return obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);};
  });

  return this;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsImNsZWFudXBIYW5kbGVzIiwibWFwIiwiZXZlbnROYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6ImVBQXVCQSxRQUFRLGtCQUFSLEMsQ0FBaEJDLFksWUFBQUEsWTs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxjQUFELEVBQWpCOztBQUVBLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQW9DLG1DQUFaQyxVQUFZLG1FQUFaQSxVQUFZO0FBQ2xDLE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RDtBQUMxRCxVQUFNLElBQUlOLFlBQUosQ0FBaUIsc0RBQWpCLENBQU47QUFDRDs7QUFFRDtBQUNBLE1BQU1PLFVBQVUsS0FBS0MsUUFBTCxFQUFoQjtBQUNBO0FBQ0EsT0FBS0MsY0FBTCxHQUFzQkosV0FBV0ssR0FBWCxDQUFlLHFCQUFhO0FBQ2hETixRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RLLFNBQXRELEVBQWlFSixPQUFqRTtBQUNBLFdBQU8sb0JBQU1ILElBQUlBLElBQUlRLG1CQUFKLEdBQTBCLHFCQUExQixHQUFrRCxLQUF0RCxFQUE2REQsU0FBN0QsRUFBd0VKLE9BQXhFLENBQU4sRUFBUDtBQUNELEdBSHFCLENBQXRCOztBQUtBLFNBQU8sSUFBUDtBQUNEIiwiZmlsZSI6ImV2ZW50cy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtGUElucHV0RXJyb3J9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpXG5cbm1vZHVsZS5leHBvcnRzID0ge2xpc3Rlbn1cblxuZnVuY3Rpb24gbGlzdGVuKG9iaiwgLi4uZXZlbnROYW1lcykge1xuICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdzdHJpbmcnKSBldmVudE5hbWVzID0gW2V2ZW50TmFtZXNdXG4gIGlmICghb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10pIHtcbiAgICB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdJbnB1dCBvYmplY3QgaXNuXFwndCBhIHZhbGlkIEV2ZW50RW1pdHRlciBvciBzaW1pbGFyLicpXG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIC8vIGNvbnNvbGUubG9nKGAgICA+IEF0dGFjaGluZyAke2V2ZW50TmFtZXN9IGhhbmRsZXJgLCBldmVudE5hbWVzKVxuICB0aGlzLmNsZWFudXBIYW5kbGVzID0gZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lID0+IHtcbiAgICBvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgcmV0dXJuICgpID0+IG9ialtvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA/ICdyZW1vdmVFdmVudExpc3RlbmVyJyA6ICdvZmYnXShldmVudE5hbWUsIGhhbmRsZXIpXG4gIH0pXG5cbiAgcmV0dXJuIHRoaXNcbn1cbiJdfQ==

/***/ }),
/* 8 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { chain: chain, chainEnd: chainEnd


  /**
                                                     * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                                     * @returns FunctionalPromise
                                                     */ };
function chain() {
  var FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  var promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);

  return function (input) {
    return new FP(function (resolve, reject) {
      var iterator = _this.steps[Symbol.iterator]();

      var next = function next(promise) {
        var current = iterator.next();
        if (current.done) return resolve(promise);var _current$value = _slicedToArray(
        current.value, 3),fnName = _current$value[0],args = _current$value[2];
        return next(promise[fnName].apply(promise, _toConsumableArray(args)));
      };
      next(FP.resolve(input));
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwicmVqZWN0IiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJuZXh0IiwiY3VycmVudCIsImRvbmUiLCJ2YWx1ZSIsImZuTmFtZSIsImFyZ3MiLCJpbnB1dCJdLCJtYXBwaW5ncyI6ImkwQkFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFlBQUQsRUFBUUM7OztBQUd6Qjs7O3VEQUhpQixFQUFqQjtBQU9BLFNBQVNELEtBQVQsR0FBaUI7QUFDZixNQUFNRSxLQUFLTixRQUFRLFNBQVIsQ0FBWDtBQUNBO0FBQ0EsTUFBTU8sVUFBVUQsR0FBR0UsT0FBSCxFQUFoQjtBQUNBRCxVQUFRRSxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsU0FBT0YsT0FBUDtBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixRQUFULEdBQW9CO0FBQ2xCLE1BQU1DLEtBQUtOLFFBQVEsU0FBUixDQUFYOztBQUVBLFNBQU8saUJBQVM7QUFDZCxXQUFPLElBQUlNLEVBQUosQ0FBTyxVQUFDRSxPQUFELEVBQVVFLE1BQVYsRUFBcUI7QUFDakMsVUFBTUMsV0FBVyxNQUFLRixLQUFMLENBQVdHLE9BQU9ELFFBQWxCLEdBQWpCOztBQUVBLFVBQU1FLE9BQU8sU0FBUEEsSUFBTyxVQUFXO0FBQ3RCLFlBQU1DLFVBQVVILFNBQVNFLElBQVQsRUFBaEI7QUFDQSxZQUFJQyxRQUFRQyxJQUFaLEVBQWtCLE9BQU9QLFFBQVFELE9BQVIsQ0FBUCxDQUZJO0FBR0dPLGdCQUFRRSxLQUhYLEtBR2ZDLE1BSGUscUJBR0xDLElBSEs7QUFJdEIsZUFBT0wsS0FBS04sUUFBUVUsTUFBUixvQ0FBbUJDLElBQW5CLEVBQUwsQ0FBUDtBQUNELE9BTEQ7QUFNQUwsV0FBS1AsR0FBR0UsT0FBSCxDQUFXVyxLQUFYLENBQUw7QUFDRCxLQVZNLENBQVA7QUFXRCxHQVpEO0FBYUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0ZQSW5wdXRFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7Y2hhaW4sIGNoYWluRW5kfVxuXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGNoYWluKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICAvLyBjcmVhdGUgYSBwbGFjZWhvbGRlci9pbml0aWFsIHByb21pc2UgdG8gaG9sZCB0aGUgc3RlcHMvY2hhaW4gZGF0YVxuICBjb25zdCBwcm9taXNlID0gRlAucmVzb2x2ZSgpXG4gIHByb21pc2Uuc3RlcHMgPSBbXVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG4vKipcbiAqIENhbGwgYWZ0ZXIgc3RhcnRpbmcgYSBgLmNoYWluKClgLlxuICpcbiAqIE9uZSBvZiB0aGUgZmV3IG5vbi1jaGFpbmFibGUgbWV0aG9kcyBpbiB0aGUgQVBJLlxuICogQHJldHVybnMgYSBGdW5jdGlvbi4gSXQgcnVucyB5b3VyIGZ1bmN0aW9uYWwgY2hhaW4hXG4gKi9cbmZ1bmN0aW9uIGNoYWluRW5kKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgcmV0dXJuIG5ldyBGUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuc3RlcHNbU3ltYm9sLml0ZXJhdG9yXSgpXG5cbiAgICAgIGNvbnN0IG5leHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGl0ZXJhdG9yLm5leHQoKVxuICAgICAgICBpZiAoY3VycmVudC5kb25lKSByZXR1cm4gcmVzb2x2ZShwcm9taXNlKVxuICAgICAgICBjb25zdCBbZm5OYW1lLCAsIGFyZ3NdID0gY3VycmVudC52YWx1ZVxuICAgICAgICByZXR1cm4gbmV4dChwcm9taXNlW2ZuTmFtZV0oLi4uYXJncykpXG4gICAgICB9XG4gICAgICBuZXh0KEZQLnJlc29sdmUoaW5wdXQpKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,