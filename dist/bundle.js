/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var isFunction = __webpack_require__(/*! lodash/isFunction */ 3);var _require =
__webpack_require__(/*! ./modules/errors */ 1),FunctionalError = _require.FunctionalError;var _require2 =
__webpack_require__(/*! ./events */ 15),listen = _require2.listen;var _require3 =
__webpack_require__(/*! ./monads */ 16),chain = _require3.chain,chainEnd = _require3.chainEnd;var _require4 =
__webpack_require__(/*! ./arrays */ 2),map = _require4.map,filter = _require4.filter;var _require5 =
__webpack_require__(/*! ./arrays */ 2),reduce = _require5.reduce;var _require6 =
__webpack_require__(/*! ./arrays */ 2),find = _require6.find,findIndex = _require6.findIndex;var _require7 =
__webpack_require__(/*! ./promise */ 5),all = _require7.all,cast = _require7.cast;var _require8 =
__webpack_require__(/*! ./promise */ 5),reject = _require8.reject,delay = _require8.delay;var _require9 =
__webpack_require__(/*! ./conditional */ 6),thenIf = _require9.thenIf,_thenIf = _require9._thenIf;var _require10 =
__webpack_require__(/*! ./conditional */ 6),tapIf = _require10.tapIf;
var FP = FunctionalPromise;

function FunctionalPromise(resolveRejectCB) {
  if (!(this instanceof FunctionalPromise)) {return new FunctionalPromise(resolveRejectCB);}
  if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 0) throw new Error('FunctionalPromise only accepts 1 argument');
  this._FP = {
    concurrencyLimit: 4,
    hardErrorLimit: -1,
    promise: new Promise(resolveRejectCB) };

}

// FPromise Core Stuff
FP.denodeify = FP.promisify = promisify;
FP.promisifyAll = promisifyAll;
FP.resolve = resolve;
FP.prototype.all = FP.all = all;
FP.prototype.cast = cast;
FP.prototype.reject = reject;
FP.prototype.tap = tap;
FP.prototype.then = then;
FP.prototype.delay = delay;
FP.delay = delay;

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;

// Array Helpers
FP.prototype.map = map;
FP.prototype.find = find;
FP.prototype.filter = filter;
FP.prototype.reduce = reduce;
FP.prototype.findIndex = findIndex;

// Conditional Methods
FP.prototype.tapIf = tapIf;
FP.prototype.thenIf = thenIf;
FP.prototype._thenIf = _thenIf;
FP.thenIf = _thenIf;

// Events Methods
FP.prototype.listen = listen;

FP.unpack = unpack;


FP.prototype.addStep = function (name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function () {var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
  if (this.steps) return this.addStep('concurrency', [].concat(Array.prototype.slice.call(arguments)));
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.serial = function () {
  if (this.steps) return this.addStep('serial', [].concat(Array.prototype.slice.call(arguments)));
  return this.concurrency(1);
};

FP.prototype.get = function (keyName) {
  if (this.steps) return this.addStep('get', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[keyName] : obj;});
};

FP.prototype.set = function (keyName, value) {
  if (this.steps) return this.addStep('set', [].concat(Array.prototype.slice.call(arguments)));
  return this.then(function (obj) {
    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [].concat(Array.prototype.slice.call(arguments)));
  if (this._FP.error) {
    var result = fn(this._FP.error);
    this._FP.error = undefined; // no dbl-catch
    return result;
  }
  // bypass error handling
  return FP.resolve(this._FP.value);
};

function then(fn) {
  if (this.steps) return this.addStep('then', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return this._FP.promise.then(fn);
}

function tap(fn) {
  if (this.steps) return this.addStep('tap', [].concat(Array.prototype.slice.call(arguments)));
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + (typeof fn === 'undefined' ? 'undefined' : _typeof(fn)));
  return this._FP.promise.then(function (value) {
    fn(value); // fires in the node callback queue (aka background task)
    return value;
  });
}

function resolve(value) {
  return new FP(function (resolve, reject) {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
}

function promisify(cb) {var _this = this;
  return function () {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return new FP(function (yah, nah) {return (
        cb.call.apply(cb, [_this].concat(args, [function (err, res) {return err ? nah(err) : yah(res);}])));});};
}

function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(function (key) {return typeof obj[key] === 'function';}).
  reduce(function (obj, fnName) {
    if (!/Sync/.test(fnName) && !obj[fnName + 'Async']) obj[fnName + 'Async'] = promisify(obj['' + fnName]);
    return obj;
  }, obj);
}

function unpack() {
  var resolve = void 0,reject = void 0,promise = void 0;
  promise = new Promise(function (yah, nah) {resolve = yah;reject = nah;});
  return { promise: promise, resolve: resolve, reject: reject };
}

module.exports = FunctionalPromise;


if (process && process.on) {
  process.on('uncaughtException', function (e) {
    console.error('Process: FATAL EXCEPTION: uncaughtException', e, '\n\n');
  });
  process.on('unhandledRejection', function (e) {
    console.error('Process: FATAL PROMISE ERROR: unhandledRejection', e, '\n\n');
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 7)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var FunctionalError = function (_Error) {_inherits(FunctionalError, _Error);
  function FunctionalError(msg, options) {_classCallCheck(this, FunctionalError);
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }var _this = _possibleConstructorReturn(this, (FunctionalError.__proto__ || Object.getPrototypeOf(FunctionalError)).call(this,
    msg));
    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
      Object.assign(_this, options);
    }
    _this.name = _this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(_this, _this.constructor);return _this;
  }return FunctionalError;}(Error);var

FunctionalUserError = function (_FunctionalError) {_inherits(FunctionalUserError, _FunctionalError);function FunctionalUserError() {_classCallCheck(this, FunctionalUserError);return _possibleConstructorReturn(this, (FunctionalUserError.__proto__ || Object.getPrototypeOf(FunctionalUserError)).apply(this, arguments));}return FunctionalUserError;}(FunctionalError);var
FPUnexpectedError = function (_FunctionalError2) {_inherits(FPUnexpectedError, _FunctionalError2);function FPUnexpectedError() {_classCallCheck(this, FPUnexpectedError);return _possibleConstructorReturn(this, (FPUnexpectedError.__proto__ || Object.getPrototypeOf(FPUnexpectedError)).apply(this, arguments));}return FPUnexpectedError;}(FunctionalError);var
FPInputError = function (_FunctionalError3) {_inherits(FPInputError, _FunctionalError3);function FPInputError() {_classCallCheck(this, FPInputError);return _possibleConstructorReturn(this, (FPInputError.__proto__ || Object.getPrototypeOf(FPInputError)).apply(this, arguments));}return FPInputError;}(FunctionalError);var
FPSoftError = function (_FunctionalError4) {_inherits(FPSoftError, _FunctionalError4);function FPSoftError() {_classCallCheck(this, FPSoftError);return _possibleConstructorReturn(this, (FPSoftError.__proto__ || Object.getPrototypeOf(FPSoftError)).apply(this, arguments));}return FPSoftError;}(FunctionalError);var
FPTimeout = function (_FunctionalError5) {_inherits(FPTimeout, _FunctionalError5);function FPTimeout() {_classCallCheck(this, FPTimeout);return _possibleConstructorReturn(this, (FPTimeout.__proto__ || Object.getPrototypeOf(FPTimeout)).apply(this, arguments));}return FPTimeout;}(FunctionalError);

module.exports = {
  FunctionalError: FunctionalError,
  FunctionalUserError: FunctionalUserError,
  FPUnexpectedError: FPUnexpectedError,
  FPInputError: FPInputError,
  FPSoftError: FPSoftError,
  FPTimeout: FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJtc2ciLCJvcHRpb25zIiwibWVzc2FnZSIsIk9iamVjdCIsImFzc2lnbiIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsIkVycm9yIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJGdW5jdGlvbmFsVXNlckVycm9yIiwiRlBVbmV4cGVjdGVkRXJyb3IiLCJGUElucHV0RXJyb3IiLCJGUFNvZnRFcnJvciIsIkZQVGltZW91dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJxbkNBQU1BLGU7QUFDSiwyQkFBWUMsR0FBWixFQUFpQkMsT0FBakIsRUFBMEI7QUFDeEIsUUFBSSxRQUFPRCxHQUFQLHlDQUFPQSxHQUFQLE9BQWUsUUFBbkIsRUFBNkI7QUFDM0JDLGdCQUFVRCxHQUFWO0FBQ0EsVUFBS0EsSUFBSUUsT0FBVCxFQUFtQkYsTUFBTUEsSUFBSUUsT0FBVjtBQUNwQixLQUp1QjtBQUtsQkYsT0FMa0I7QUFNeEIsUUFBSSxRQUFPQyxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQy9CRSxhQUFPQyxNQUFQLFFBQW9CSCxPQUFwQjtBQUNEO0FBQ0QsVUFBS0ksSUFBTCxHQUFZLE1BQUtDLFdBQUwsQ0FBaUJELElBQTdCO0FBQ0E7QUFDQUUsVUFBTUMsaUJBQU4sUUFBOEIsTUFBS0YsV0FBbkMsRUFYd0I7QUFZekIsRyx5QkFiMkJDLEs7O0FBZXhCRSxtQix3VUFBNEJWLGU7QUFDNUJXLGlCLDhUQUEwQlgsZTtBQUMxQlksWSxnU0FBcUJaLGU7QUFDckJhLFcsMFJBQW9CYixlO0FBQ3BCYyxTLDhRQUFrQmQsZTs7QUFFeEJlLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmhCLGtDQURlO0FBRWZVLDBDQUZlO0FBR2ZDLHNDQUhlO0FBSWZDLDRCQUplO0FBS2ZDLDBCQUxlO0FBTWZDLHNCQU5lLEVBQWpCIiwiZmlsZSI6ImVycm9ycy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEZ1bmN0aW9uYWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobXNnLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBtc2cgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0gbXNnXG4gICAgICBpZiAoIG1zZy5tZXNzYWdlICkgbXNnID0gbXNnLm1lc3NhZ2VcbiAgICB9XG4gICAgc3VwZXIobXNnKVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucylcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgLy8gQ2FwdHVyaW5nIHN0YWNrIHRyYWNlLCBleGNsdWRpbmcgY29uc3RydWN0b3IgY2FsbCBmcm9tIGl0LlxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gIH1cbn1cbmNsYXNzIEZ1bmN0aW9uYWxVc2VyRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVW5leHBlY3RlZEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUElucHV0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQU29mdEVycm9yIGV4dGVuZHMgRnVuY3Rpb25hbEVycm9yIHt9XG5jbGFzcyBGUFRpbWVvdXQgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEZ1bmN0aW9uYWxFcnJvcixcbiAgRnVuY3Rpb25hbFVzZXJFcnJvcixcbiAgRlBVbmV4cGVjdGVkRXJyb3IsXG4gIEZQSW5wdXRFcnJvcixcbiAgRlBTb2Z0RXJyb3IsXG4gIEZQVGltZW91dCxcbn1cbiJdfQ==

/***/ }),
/* 2 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var isArrayLike = __webpack_require__(/*! lodash/isArrayLike */ 17);var _require =
__webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { map: map, find: find, findIndex: findIndex, filter: filter, reduce: reduce };

function find(callback) {
  return _find.call(this, callback).then(function (_ref) {var item = _ref.item;return item;});
}
function findIndex(callback) {
  return _find.call(this, callback).then(function (_ref2) {var index = _ref2.index;return index;});
}

function _find(iterable, callback) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(function (results) {return results && results[0] ?
    { item: results[0], index: results.indexOf(results[0]) } :
    { item: undefined, index: -1 };});
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, function (aggregate, item) {
    return Promise.resolve(callback(item)).then(function (value) {return value ? aggregate.concat([item]) : aggregate;});
  }, []);
}

function reduce(iterable, reducer, initVal) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [].concat(Array.prototype.slice.call(arguments)));
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else {
    iterable = FP.resolve(iterable, this);
  }
  return new FP(function (resolve, reject) {
    return iterable.then(function (iterable) {
      var iterator = iterable[Symbol.iterator]();
      var i = 0;

      var next = function next(total) {
        var current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(function (_ref3) {var _ref4 = _slicedToArray(_ref3, 2),total = _ref4[0],item = _ref4[1];return next(reducer(total, item, i++));}).
        catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {
  var FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }

  var threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  var innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  var initialThread = 0;
  var errors = [];
  var count = 0;
  var results = [];
  var threadPool = new Set();
  var threadPoolFull = function threadPoolFull() {return threadPool.size >= threadLimit;};
  var isDone = function isDone() {return errors.length >= 0 || count >= args.length;};
  var setResult = function setResult(index) {return function (value) {
      results[index] = value;
      return value;
    };};

  return new FP(function (resolve, reject) {
    innerValues.then(function (items) {
      args = [].concat(_toConsumableArray(items));
      if (!isArrayLike(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      var complete = function complete() {
        if (errors.length >= 1) {
          reject(errors[0]);
        } else if (!isDone()) {
          Promise.all(results).then(resolve);
          return true;
        }
        return false;
      };
      var runItem = function runItem(c) {
        if (threadPoolFull()) return setTimeout(function () {return runItem(c);}, 0);
        if (count >= args.length) return Promise.all(results).then(resolve);
        var result = [args[c], c];
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        results[c] = Promise.resolve(args[c]).
        then(function (val) {return fn(val, c, args);}).
        then(function (val) {
          threadPool.delete(c);
          return setResult(c)(val);
        }).
        then(function (val) {
          if (!complete()) runItem(++count);
          return val;
        }).catch(function (err) {return errors.push(err);});
        return result;
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) {runItem(initialThread++);}
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 3 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ 8),
isObject = __webpack_require__(/*! ./isObject */ 14);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
funcTag = '[object Function]',
genTag = '[object GeneratorFunction]',
proxyTag = '[object Proxy]';

/**
                              * Checks if `value` is classified as a `Function` object.
                              *
                              * @static
                              * @memberOf _
                              * @since 0.1.0
                              * @category Lang
                              * @param {*} value The value to check.
                              * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                              * @example
                              *
                              * _.isFunction(_);
                              * // => true
                              *
                              * _.isFunction(/abc/);
                              * // => false
                              */
function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyJdLCJuYW1lcyI6WyJiYXNlR2V0VGFnIiwicmVxdWlyZSIsImlzT2JqZWN0IiwiYXN5bmNUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwicHJveHlUYWciLCJpc0Z1bmN0aW9uIiwidmFsdWUiLCJ0YWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxhQUFhQyxRQUFRLGVBQVIsQ0FBakI7QUFDSUMsV0FBV0QsUUFBUSxZQUFSLENBRGY7O0FBR0E7QUFDQSxJQUFJRSxXQUFXLHdCQUFmO0FBQ0lDLFVBQVUsbUJBRGQ7QUFFSUMsU0FBUyw0QkFGYjtBQUdJQyxXQUFXLGdCQUhmOztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxTQUFTQyxVQUFULENBQW9CQyxLQUFwQixFQUEyQjtBQUN6QixRQUFJLENBQUNOLFNBQVNNLEtBQVQsQ0FBTCxFQUFzQjtBQUNwQixlQUFPLEtBQVA7QUFDRDtBQUNEO0FBQ0E7QUFDQSxRQUFJQyxNQUFNVCxXQUFXUSxLQUFYLENBQVY7QUFDQSxXQUFPQyxPQUFPTCxPQUFQLElBQWtCSyxPQUFPSixNQUF6QixJQUFtQ0ksT0FBT04sUUFBMUMsSUFBc0RNLE9BQU9ILFFBQXBFO0FBQ0Q7O0FBRURJLE9BQU9DLE9BQVAsR0FBaUJKLFVBQWpCIiwiZmlsZSI6ImlzRnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIl19

/***/ }),
/* 4 */
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ 9);

/** Built-in value references. */
var _Symbol = root.Symbol;

module.exports = _Symbol;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyJdLCJuYW1lcyI6WyJyb290IiwicmVxdWlyZSIsIlN5bWJvbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU9DLFFBQVEsU0FBUixDQUFYOztBQUVBO0FBQ0EsSUFBSUMsVUFBU0YsS0FBS0UsTUFBbEI7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJGLE9BQWpCIiwiZmlsZSI6Il9TeW1ib2wuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIl19

/***/ }),
/* 5 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { all: all, cast: cast, reject: reject, delay: delay };

function all(promises) {
  var FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ?
  Promise.all(promises) :
  promiseAllObject(promises));
}

function promiseAllObject(obj) {
  var keys = Object.getOwnPropertyNames(obj);
  var values = keys.map(function (key) {return obj[key];});
  return Promise.all(values).
  then(function (results) {
    return results.reduce(function (obj, val, index) {var _Object$assign;
      var key = keys[index];
      return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
    }, {});
  });
}

function cast(obj) {
  return Promise.resolve(obj);
}

function reject(err) {
  // ret._captureStackTrace();
  // ret._rejectCallback(reason, true);
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error('Reject only accepts a new instance of Error!');
}

function delay(value, delay) {
  var FP = __webpack_require__(/*! ./ */ 0);
  if (arguments.length === 1) {
    delay = value;
    value = this || null;
  }
  if (!Number.isInteger(delay)) throw new FPInputError('fp.delay([promise,] millisec) requires a numeric arg.');
  return new FP(function (resolve) {
    setTimeout(function () {return resolve(value);}, delay);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJGUElucHV0RXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwiY2FzdCIsInJlamVjdCIsImRlbGF5IiwicHJvbWlzZXMiLCJGUCIsInJlc29sdmUiLCJBcnJheSIsImlzQXJyYXkiLCJQcm9taXNlIiwicHJvbWlzZUFsbE9iamVjdCIsIm9iaiIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidmFsdWVzIiwibWFwIiwia2V5IiwidGhlbiIsInJlc3VsdHMiLCJyZWR1Y2UiLCJ2YWwiLCJpbmRleCIsImFzc2lnbiIsImVyciIsIkVycm9yIiwiX2Vycm9yIiwidmFsdWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiZUFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFFBQUQsRUFBTUMsVUFBTixFQUFZQyxjQUFaLEVBQW9CQyxZQUFwQixFQUFqQjs7QUFFQSxTQUFTSCxHQUFULENBQWFJLFFBQWIsRUFBdUI7QUFDckIsTUFBTUMsS0FBS1QsUUFBUSxJQUFSLENBQVg7QUFDQSxTQUFPUyxHQUFHQyxPQUFILENBQVdDLE1BQU1DLE9BQU4sQ0FBY0osUUFBZDtBQUNmSyxVQUFRVCxHQUFSLENBQVlJLFFBQVosQ0FEZTtBQUVmTSxtQkFBaUJOLFFBQWpCLENBRkksQ0FBUDtBQUdEOztBQUVELFNBQVNNLGdCQUFULENBQTBCQyxHQUExQixFQUErQjtBQUM3QixNQUFNQyxPQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkgsR0FBM0IsQ0FBYjtBQUNBLE1BQU1JLFNBQVNILEtBQUtJLEdBQUwsQ0FBUyx1QkFBT0wsSUFBSU0sR0FBSixDQUFQLEVBQVQsQ0FBZjtBQUNBLFNBQU9SLFFBQVFULEdBQVIsQ0FBWWUsTUFBWjtBQUNORyxNQURNLENBQ0QsbUJBQVc7QUFDZixXQUFPQyxRQUFRQyxNQUFSLENBQWUsVUFBQ1QsR0FBRCxFQUFNVSxHQUFOLEVBQVdDLEtBQVgsRUFBcUI7QUFDekMsVUFBTUwsTUFBTUwsS0FBS1UsS0FBTCxDQUFaO0FBQ0EsYUFBT1QsT0FBT1UsTUFBUCxzQ0FBZ0JOLEdBQWhCLElBQXNCSSxHQUF0QixtQkFBNEJWLEdBQTVCLENBQVA7QUFDRCxLQUhNLEVBR0osRUFISSxDQUFQO0FBSUQsR0FOTSxDQUFQO0FBT0Q7O0FBRUQsU0FBU1YsSUFBVCxDQUFjVSxHQUFkLEVBQW1CO0FBQ2pCLFNBQU9GLFFBQVFILE9BQVIsQ0FBZ0JLLEdBQWhCLENBQVA7QUFDRDs7QUFFRCxTQUFTVCxNQUFULENBQWdCc0IsR0FBaEIsRUFBcUI7QUFDbkI7QUFDQTtBQUNBLE1BQUlBLGVBQWVDLEtBQW5CLEVBQTBCO0FBQ3hCLFFBQUksSUFBSixFQUFVLEtBQUtDLE1BQUwsR0FBY0YsR0FBZDtBQUNWLFdBQU9mLFFBQVFQLE1BQVIsQ0FBZXNCLEdBQWYsQ0FBUDtBQUNEO0FBQ0QsUUFBTSxJQUFJQyxLQUFKLGdEQUFOO0FBQ0Q7O0FBRUQsU0FBU3RCLEtBQVQsQ0FBZXdCLEtBQWYsRUFBc0J4QixLQUF0QixFQUE2QjtBQUMzQixNQUFNRSxLQUFLVCxRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUlnQyxVQUFVQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzFCMUIsWUFBUXdCLEtBQVI7QUFDQUEsWUFBUSxRQUFRLElBQWhCO0FBQ0Q7QUFDRCxNQUFJLENBQUNHLE9BQU9DLFNBQVAsQ0FBaUI1QixLQUFqQixDQUFMLEVBQThCLE1BQU0sSUFBSU4sWUFBSixDQUFpQix1REFBakIsQ0FBTjtBQUM5QixTQUFPLElBQUlRLEVBQUosQ0FBTyxtQkFBVztBQUN2QjJCLGVBQVcsb0JBQU0xQixRQUFRcUIsS0FBUixDQUFOLEVBQVgsRUFBaUN4QixLQUFqQztBQUNELEdBRk0sQ0FBUDtBQUdEIiwiZmlsZSI6InByb21pc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7RlBJbnB1dEVycm9yfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHthbGwsIGNhc3QsIHJlamVjdCwgZGVsYXl9XG5cbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgcmV0dXJuIEZQLnJlc29sdmUoQXJyYXkuaXNBcnJheShwcm9taXNlcylcbiAgID8gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICA6IHByb21pc2VBbGxPYmplY3QocHJvbWlzZXMpKVxufVxuXG5mdW5jdGlvbiBwcm9taXNlQWxsT2JqZWN0KG9iaikge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKVxuICBjb25zdCB2YWx1ZXMgPSBrZXlzLm1hcChrZXkgPT4gb2JqW2tleV0pXG4gIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXMpXG4gIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgIHJldHVybiByZXN1bHRzLnJlZHVjZSgob2JqLCB2YWwsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2luZGV4XVxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1trZXldOiB2YWx9LCBvYmopXG4gICAgfSwge30pXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGNhc3Qob2JqKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUob2JqKVxufVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIC8vIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgLy8gcmV0Ll9yZWplY3RDYWxsYmFjayhyZWFzb24sIHRydWUpO1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcykgdGhpcy5fZXJyb3IgPSBlcnJcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgUmVqZWN0IG9ubHkgYWNjZXB0cyBhIG5ldyBpbnN0YW5jZSBvZiBFcnJvciFgKVxufVxuXG5mdW5jdGlvbiBkZWxheSh2YWx1ZSwgZGVsYXkpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgZGVsYXkgPSB2YWx1ZVxuICAgIHZhbHVlID0gdGhpcyB8fCBudWxsXG4gIH1cbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGRlbGF5KSkgdGhyb3cgbmV3IEZQSW5wdXRFcnJvcignZnAuZGVsYXkoW3Byb21pc2UsXSBtaWxsaXNlYykgcmVxdWlyZXMgYSBudW1lcmljIGFyZy4nKVxuICByZXR1cm4gbmV3IEZQKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh2YWx1ZSksIGRlbGF5KVxuICB9KVxufVxuIl19

/***/ }),
/* 6 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/utils */ 19),isPromiseLike = _require.isPromiseLike;

module.exports = { thenIf: thenIf, tapIf: tapIf, _thenIf: _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [].concat(Array.prototype.slice.call(arguments)));
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = function cond(x) {return x;};
  }
  if (isPromiseLike(this)) {
    return this.then(function (value) {return _thenIf(cond, ifTrue, ifFalse, true)(value);});
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf() {var cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (x) {return x;};var ifTrue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (x) {return x;};var ifFalse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {return null;};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var FP = __webpack_require__(/*! ./index */ 0);
  return function (value) {return (
      FP.resolve(cond(value)).
      then(function (ans) {return ans ? ifTrue(value) : ifFalse(value);}).
      then(function (v) {return returnValue ? value : v;}));};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNQcm9taXNlTGlrZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJlQUF3QkEsUUFBUSxpQkFBUixDLENBQWpCQyxhLFlBQUFBLGE7O0FBRVBDLE9BQU9DLE9BQVAsR0FBaUIsRUFBQ0MsY0FBRCxFQUFTQyxZQUFULEVBQWdCQyxnQkFBaEIsRUFBakI7O0FBRUEsU0FBU0YsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLE1BQXRCLEVBQThCQyxPQUE5QixFQUF1QztBQUNyQyxNQUFJLEtBQUtDLEtBQVQsRUFBZ0IsT0FBTyxLQUFLQyxPQUFMLENBQWEsUUFBYix1Q0FBMkJDLFNBQTNCLEdBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPLHlCQUFLTyxDQUFMLEVBQVA7QUFDRDtBQUNELE1BQUliLGNBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBS2MsSUFBTCxDQUFVLHlCQUFTVCxRQUFRQyxJQUFSLEVBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCTyxLQUEvQixDQUFULEVBQVYsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsdUNBQTBCQyxTQUExQixHQUFQO0FBQ2hCLE1BQUlBLFVBQVVDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDMUJMLGFBQVNELElBQVQ7QUFDQUEsV0FBTyx5QkFBS08sQ0FBTCxFQUFQO0FBQ0Q7QUFDRCxNQUFJYixjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtjLElBQUwsQ0FBVSx5QkFBU1QsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBVCxFQUFWLENBQVA7QUFDRDtBQUNELFNBQU9WLFFBQVFDLElBQVIsRUFBY0MsTUFBZCxFQUFzQkMsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNEOztBQUVELFNBQVNILE9BQVQsR0FBNEYsS0FBM0VDLElBQTJFLHVFQUFwRSxxQkFBS08sQ0FBTCxFQUFvRSxLQUE1RE4sTUFBNEQsdUVBQW5ELHFCQUFLTSxDQUFMLEVBQW1ELEtBQTNDTCxPQUEyQyx1RUFBakMsb0JBQU0sSUFBTixFQUFpQyxLQUFyQlEsV0FBcUIsdUVBQVAsS0FBTztBQUMxRixNQUFNQyxLQUFLbEIsUUFBUSxTQUFSLENBQVg7QUFDQSxTQUFPO0FBQ0xrQixTQUFHQyxPQUFILENBQVdaLEtBQUtTLEtBQUwsQ0FBWDtBQUNHRCxVQURILENBQ1EsdUJBQVFLLE1BQU1aLE9BQU9RLEtBQVAsQ0FBTixHQUFzQlAsUUFBUU8sS0FBUixDQUE5QixFQURSO0FBRUdELFVBRkgsQ0FFUSxxQkFBTUUsY0FBY0QsS0FBZCxHQUFzQkssQ0FBNUIsRUFGUixDQURLLEdBQVA7QUFJRCIsImZpbGUiOiJjb25kaXRpb25hbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtpc1Byb21pc2VMaWtlfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy91dGlscycpXG5cbm1vZHVsZS5leHBvcnRzID0ge3RoZW5JZiwgdGFwSWYsIF90aGVuSWZ9XG5cbmZ1bmN0aW9uIHRoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RoZW5JZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKVxufVxuXG5mdW5jdGlvbiB0YXBJZihjb25kLCBpZlRydWUsIGlmRmFsc2UpIHtcbiAgaWYgKHRoaXMuc3RlcHMpIHJldHVybiB0aGlzLmFkZFN0ZXAoJ3RhcElmJywgWy4uLmFyZ3VtZW50c10pXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWZUcnVlID0gY29uZFxuICAgIGNvbmQgPSB4ID0+IHhcbiAgfVxuICBpZiAoaXNQcm9taXNlTGlrZSh0aGlzKSkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odmFsdWUgPT4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpKHZhbHVlKSlcbiAgfVxuICByZXR1cm4gX3RoZW5JZihjb25kLCBpZlRydWUsIGlmRmFsc2UsIHRydWUpXG59XG5cbmZ1bmN0aW9uIF90aGVuSWYoY29uZCA9IHggPT4geCwgaWZUcnVlID0geCA9PiB4LCBpZkZhbHNlID0gKCkgPT4gbnVsbCwgcmV0dXJuVmFsdWUgPSBmYWxzZSkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICByZXR1cm4gdmFsdWUgPT5cbiAgICBGUC5yZXNvbHZlKGNvbmQodmFsdWUpKVxuICAgICAgLnRoZW4oYW5zID0+IChhbnMgPyBpZlRydWUodmFsdWUpIDogaWZGYWxzZSh2YWx1ZSkpKVxuICAgICAgLnRoZW4odiA9PiAocmV0dXJuVmFsdWUgPyB2YWx1ZSA6IHYpKVxufVxuIl19

/***/ }),
/* 7 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 8 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(/*! ./_Symbol */ 4),
getRawTag = __webpack_require__(/*! ./_getRawTag */ 12),
objectToString = __webpack_require__(/*! ./_objectToString */ 13);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
                                                                 * The base implementation of `getTag` without fallbacks for buggy environments.
                                                                 *
                                                                 * @private
                                                                 * @param {*} value The value to query.
                                                                 * @returns {string} Returns the `toStringTag`.
                                                                 */
function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ?
    getRawTag(value) :
    objectToString(value);
}

module.exports = baseGetTag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiXSwibmFtZXMiOlsiU3ltYm9sIiwicmVxdWlyZSIsImdldFJhd1RhZyIsIm9iamVjdFRvU3RyaW5nIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJ1bmRlZmluZWQiLCJiYXNlR2V0VGFnIiwidmFsdWUiLCJPYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFTQyxRQUFRLFdBQVIsQ0FBYjtBQUNJQyxZQUFZRCxRQUFRLGNBQVIsQ0FEaEI7QUFFSUUsaUJBQWlCRixRQUFRLG1CQUFSLENBRnJCOztBQUlBO0FBQ0EsSUFBSUcsVUFBVSxlQUFkO0FBQ0lDLGVBQWUsb0JBRG5COztBQUdBO0FBQ0EsSUFBSUMsaUJBQWlCTixVQUFTQSxRQUFPTyxXQUFoQixHQUE4QkMsU0FBbkQ7O0FBRUE7Ozs7Ozs7QUFPQSxTQUFTQyxVQUFULENBQW9CQyxLQUFwQixFQUEyQjtBQUN6QixRQUFJQSxTQUFTLElBQWIsRUFBbUI7QUFDakIsZUFBT0EsVUFBVUYsU0FBVixHQUFzQkgsWUFBdEIsR0FBcUNELE9BQTVDO0FBQ0Q7QUFDRCxXQUFRRSxrQkFBa0JBLGtCQUFrQkssT0FBT0QsS0FBUCxDQUFyQztBQUNIUixjQUFVUSxLQUFWLENBREc7QUFFSFAsbUJBQWVPLEtBQWYsQ0FGSjtBQUdEOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCSixVQUFqQiIsImZpbGUiOiJfYmFzZUdldFRhZy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iXX0=

/***/ }),
/* 9 */
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ 10);

/** Detect free variable `self`. */
var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiXSwibmFtZXMiOlsiZnJlZUdsb2JhbCIsInJlcXVpcmUiLCJmcmVlU2VsZiIsInNlbGYiLCJPYmplY3QiLCJyb290IiwiRnVuY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoieVFBQUEsSUFBSUEsYUFBYUMsUUFBUSxlQUFSLENBQWpCOztBQUVBO0FBQ0EsSUFBSUMsV0FBVyxRQUFPQyxJQUFQLHlDQUFPQSxJQUFQLE1BQWUsUUFBZixJQUEyQkEsSUFBM0IsSUFBbUNBLEtBQUtDLE1BQUwsS0FBZ0JBLE1BQW5ELElBQTZERCxJQUE1RTs7QUFFQTtBQUNBLElBQUlFLE9BQU9MLGNBQWNFLFFBQWQsSUFBMEJJLFNBQVMsYUFBVCxHQUFyQzs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQkgsSUFBakIiLCJmaWxlIjoiX3Jvb3QuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iXX0=

/***/ }),
/* 10 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; /** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiXSwibmFtZXMiOlsiZnJlZUdsb2JhbCIsImdsb2JhbCIsIk9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiIwUUFBQTtBQUNBLElBQUlBLGFBQWEsUUFBT0MsTUFBUCx5Q0FBT0EsTUFBUCxNQUFpQixRQUFqQixJQUE2QkEsTUFBN0IsSUFBdUNBLE9BQU9DLE1BQVAsS0FBa0JBLE1BQXpELElBQW1FRCxNQUFwRjs7QUFFQUUsT0FBT0MsT0FBUCxHQUFpQkosVUFBakIiLCJmaWxlIjoiX2ZyZWVHbG9iYWwuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iXX0=
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 11)))

/***/ }),
/* 11 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object")
	g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzIl0sIm5hbWVzIjpbImciLCJGdW5jdGlvbiIsImV2YWwiLCJlIiwid2luZG93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InlRQUFBLElBQUlBLENBQUo7O0FBRUE7QUFDQUEsSUFBSyxZQUFXO0FBQ2YsUUFBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxLQUFJQSxLQUFLQyxTQUFTLGFBQVQsR0FBTCxJQUFrQyxDQUFDLEdBQUVDLElBQUgsRUFBUyxNQUFULENBQXRDO0FBQ0EsQ0FIRCxDQUdFLE9BQU1DLENBQU4sRUFBUztBQUNWO0FBQ0EsS0FBRyxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXJCO0FBQ0NKLEtBQUlJLE1BQUo7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJOLENBQWpCIiwiZmlsZSI6Imdsb2JhbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiJdfQ==

/***/ }),
/* 12 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol = __webpack_require__(/*! ./_Symbol */ 4);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
                                                  * Used to resolve the
                                                  * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                                                  * of values.
                                                  */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
                                                                 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                                                                 *
                                                                 * @private
                                                                 * @param {*} value The value to query.
                                                                 * @returns {string} Returns the raw `toStringTag`.
                                                                 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
  tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyJdLCJuYW1lcyI6WyJTeW1ib2wiLCJyZXF1aXJlIiwib2JqZWN0UHJvdG8iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwidW5kZWZpbmVkIiwiZ2V0UmF3VGFnIiwidmFsdWUiLCJpc093biIsImNhbGwiLCJ0YWciLCJ1bm1hc2tlZCIsImUiLCJyZXN1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFTQyxRQUFRLFdBQVIsQ0FBYjs7QUFFQTtBQUNBLElBQUlDLGNBQWNDLE9BQU9DLFNBQXpCOztBQUVBO0FBQ0EsSUFBSUMsaUJBQWlCSCxZQUFZRyxjQUFqQzs7QUFFQTs7Ozs7QUFLQSxJQUFJQyx1QkFBdUJKLFlBQVlLLFFBQXZDOztBQUVBO0FBQ0EsSUFBSUMsaUJBQWlCUixVQUFTQSxRQUFPUyxXQUFoQixHQUE4QkMsU0FBbkQ7O0FBRUE7Ozs7Ozs7QUFPQSxTQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUN4QixNQUFJQyxRQUFRUixlQUFlUyxJQUFmLENBQW9CRixLQUFwQixFQUEyQkosY0FBM0IsQ0FBWjtBQUNJTyxRQUFNSCxNQUFNSixjQUFOLENBRFY7O0FBR0EsTUFBSTtBQUNGSSxVQUFNSixjQUFOLElBQXdCRSxTQUF4QjtBQUNBLFFBQUlNLFdBQVcsSUFBZjtBQUNELEdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVUsQ0FBRTs7QUFFZCxNQUFJQyxTQUFTWixxQkFBcUJRLElBQXJCLENBQTBCRixLQUExQixDQUFiO0FBQ0EsTUFBSUksUUFBSixFQUFjO0FBQ1osUUFBSUgsS0FBSixFQUFXO0FBQ1RELFlBQU1KLGNBQU4sSUFBd0JPLEdBQXhCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT0gsTUFBTUosY0FBTixDQUFQO0FBQ0Q7QUFDRjtBQUNELFNBQU9VLE1BQVA7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQlQsU0FBakIiLCJmaWxlIjoiX2dldFJhd1RhZy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiJdfQ==

/***/ }),
/* 13 */
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
                                     * Used to resolve the
                                     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                                     * of values.
                                     */
var nativeObjectToString = objectProto.toString;

/**
                                                  * Converts `value` to a string using `Object.prototype.toString`.
                                                  *
                                                  * @private
                                                  * @param {*} value The value to convert.
                                                  * @returns {string} Returns the converted string.
                                                  */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvX29iamVjdFRvU3RyaW5nLmpzIl0sIm5hbWVzIjpbIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwidmFsdWUiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxJQUFJQSxjQUFjQyxPQUFPQyxTQUF6Qjs7QUFFQTs7Ozs7QUFLQSxJQUFJQyx1QkFBdUJILFlBQVlJLFFBQXZDOztBQUVBOzs7Ozs7O0FBT0EsU0FBU0MsY0FBVCxDQUF3QkMsS0FBeEIsRUFBK0I7QUFDN0IsU0FBT0gscUJBQXFCSSxJQUFyQixDQUEwQkQsS0FBMUIsQ0FBUDtBQUNEOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCSixjQUFqQiIsImZpbGUiOiJfb2JqZWN0VG9TdHJpbmcuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiJdfQ==

/***/ }),
/* 14 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; /**
                                                                                                                                                                                                                                                                           * Checks if `value` is the
                                                                                                                                                                                                                                                                           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                                                                                                                                                                                                                                                                           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                           * @static
                                                                                                                                                                                                                                                                           * @memberOf _
                                                                                                                                                                                                                                                                           * @since 0.1.0
                                                                                                                                                                                                                                                                           * @category Lang
                                                                                                                                                                                                                                                                           * @param {*} value The value to check.
                                                                                                                                                                                                                                                                           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                                                                                                                                                                                                                                                                           * @example
                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                           * _.isObject({});
                                                                                                                                                                                                                                                                           * // => true
                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                           * _.isObject([1, 2, 3]);
                                                                                                                                                                                                                                                                           * // => true
                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                           * _.isObject(_.noop);
                                                                                                                                                                                                                                                                           * // => true
                                                                                                                                                                                                                                                                           *
                                                                                                                                                                                                                                                                           * _.isObject(null);
                                                                                                                                                                                                                                                                           * // => false
                                                                                                                                                                                                                                                                           */
function isObject(value) {
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsInR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiMFFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsU0FBU0EsUUFBVCxDQUFrQkMsS0FBbEIsRUFBeUI7QUFDdkIsTUFBSUMsY0FBY0QsS0FBZCx5Q0FBY0EsS0FBZCxDQUFKO0FBQ0EsU0FBT0EsU0FBUyxJQUFULEtBQWtCQyxRQUFRLFFBQVIsSUFBb0JBLFFBQVEsVUFBOUMsQ0FBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCSixRQUFqQiIsImZpbGUiOiJpc09iamVjdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIl19

/***/ }),
/* 15 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { listen: listen };

function listen(obj) {for (var _len = arguments.length, eventNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {eventNames[_key - 1] = arguments[_key];}
  if (typeof eventNames === 'string') eventNames = [eventNames];
  if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) {
    throw new FPInputError('Input object isn\'t a valid EventEmitter or similar.');
  }

  // Sets up the handlers
  var handler = this.chainEnd();
  // console.log(`   > Attaching ${eventNames} handler`, eventNames)
  this.cleanupHandles = eventNames.map(function (eventName) {
    obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
    return function () {return obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);};
  });

  return this;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsImNsZWFudXBIYW5kbGVzIiwibWFwIiwiZXZlbnROYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6ImVBQXVCQSxRQUFRLGtCQUFSLEMsQ0FBaEJDLFksWUFBQUEsWTs7QUFFUEMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxjQUFELEVBQWpCOztBQUVBLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQW9DLG1DQUFaQyxVQUFZLG1FQUFaQSxVQUFZO0FBQ2xDLE1BQUksT0FBT0EsVUFBUCxLQUFzQixRQUExQixFQUFvQ0EsYUFBYSxDQUFDQSxVQUFELENBQWI7QUFDcEMsTUFBSSxDQUFDRCxJQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsQ0FBTCxFQUE0RDtBQUMxRCxVQUFNLElBQUlOLFlBQUosQ0FBaUIsc0RBQWpCLENBQU47QUFDRDs7QUFFRDtBQUNBLE1BQU1PLFVBQVUsS0FBS0MsUUFBTCxFQUFoQjtBQUNBO0FBQ0EsT0FBS0MsY0FBTCxHQUFzQkosV0FBV0ssR0FBWCxDQUFlLHFCQUFhO0FBQ2hETixRQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RLLFNBQXRELEVBQWlFSixPQUFqRTtBQUNBLFdBQU8sb0JBQU1ILElBQUlBLElBQUlRLG1CQUFKLEdBQTBCLHFCQUExQixHQUFrRCxLQUF0RCxFQUE2REQsU0FBN0QsRUFBd0VKLE9BQXhFLENBQU4sRUFBUDtBQUNELEdBSHFCLENBQXRCOztBQUtBLFNBQU8sSUFBUDtBQUNEIiwiZmlsZSI6ImV2ZW50cy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHtGUElucHV0RXJyb3J9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpXG5cbm1vZHVsZS5leHBvcnRzID0ge2xpc3Rlbn1cblxuZnVuY3Rpb24gbGlzdGVuKG9iaiwgLi4uZXZlbnROYW1lcykge1xuICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdzdHJpbmcnKSBldmVudE5hbWVzID0gW2V2ZW50TmFtZXNdXG4gIGlmICghb2JqW29iai5hZGRFdmVudExpc3RlbmVyID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ29uJ10pIHtcbiAgICB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdJbnB1dCBvYmplY3QgaXNuXFwndCBhIHZhbGlkIEV2ZW50RW1pdHRlciBvciBzaW1pbGFyLicpXG4gIH1cblxuICAvLyBTZXRzIHVwIHRoZSBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gIC8vIGNvbnNvbGUubG9nKGAgICA+IEF0dGFjaGluZyAke2V2ZW50TmFtZXN9IGhhbmRsZXJgLCBldmVudE5hbWVzKVxuICB0aGlzLmNsZWFudXBIYW5kbGVzID0gZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lID0+IHtcbiAgICBvYmpbb2JqLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnb24nXShldmVudE5hbWUsIGhhbmRsZXIpXG4gICAgcmV0dXJuICgpID0+IG9ialtvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA/ICdyZW1vdmVFdmVudExpc3RlbmVyJyA6ICdvZmYnXShldmVudE5hbWUsIGhhbmRsZXIpXG4gIH0pXG5cbiAgcmV0dXJuIHRoaXNcbn1cbiJdfQ==

/***/ }),
/* 16 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var _require = __webpack_require__(/*! ./modules/errors */ 1),FPInputError = _require.FPInputError;

module.exports = { chain: chain, chainEnd: chainEnd


  /**
                                                     * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                                     * @returns FunctionalPromise
                                                     */ };
function chain() {
  var FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  var promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {var _this = this;
  var FP = __webpack_require__(/*! ./index */ 0);

  return function (input) {
    return new FP(function (resolve, reject) {
      var iterator = _this.steps[Symbol.iterator]();

      var next = function next(promise) {
        var current = iterator.next();
        if (current.done) return resolve(promise);var _current$value = _slicedToArray(
        current.value, 3),fnName = _current$value[0],args = _current$value[2];
        return next(promise[fnName].apply(promise, _toConsumableArray(args)));
      };
      next(FP.resolve(input));
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkZQSW5wdXRFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwicmVqZWN0IiwiaXRlcmF0b3IiLCJTeW1ib2wiLCJuZXh0IiwiY3VycmVudCIsImRvbmUiLCJ2YWx1ZSIsImZuTmFtZSIsImFyZ3MiLCJpbnB1dCJdLCJtYXBwaW5ncyI6ImkwQkFBdUJBLFFBQVEsa0JBQVIsQyxDQUFoQkMsWSxZQUFBQSxZOztBQUVQQyxPQUFPQyxPQUFQLEdBQWlCLEVBQUNDLFlBQUQsRUFBUUM7OztBQUd6Qjs7O3VEQUhpQixFQUFqQjtBQU9BLFNBQVNELEtBQVQsR0FBaUI7QUFDZixNQUFNRSxLQUFLTixRQUFRLFNBQVIsQ0FBWDtBQUNBO0FBQ0EsTUFBTU8sVUFBVUQsR0FBR0UsT0FBSCxFQUFoQjtBQUNBRCxVQUFRRSxLQUFSLEdBQWdCLEVBQWhCO0FBQ0EsU0FBT0YsT0FBUDtBQUNEOztBQUVEOzs7Ozs7QUFNQSxTQUFTRixRQUFULEdBQW9CO0FBQ2xCLE1BQU1DLEtBQUtOLFFBQVEsU0FBUixDQUFYOztBQUVBLFNBQU8saUJBQVM7QUFDZCxXQUFPLElBQUlNLEVBQUosQ0FBTyxVQUFDRSxPQUFELEVBQVVFLE1BQVYsRUFBcUI7QUFDakMsVUFBTUMsV0FBVyxNQUFLRixLQUFMLENBQVdHLE9BQU9ELFFBQWxCLEdBQWpCOztBQUVBLFVBQU1FLE9BQU8sU0FBUEEsSUFBTyxVQUFXO0FBQ3RCLFlBQU1DLFVBQVVILFNBQVNFLElBQVQsRUFBaEI7QUFDQSxZQUFJQyxRQUFRQyxJQUFaLEVBQWtCLE9BQU9QLFFBQVFELE9BQVIsQ0FBUCxDQUZJO0FBR0dPLGdCQUFRRSxLQUhYLEtBR2ZDLE1BSGUscUJBR0xDLElBSEs7QUFJdEIsZUFBT0wsS0FBS04sUUFBUVUsTUFBUixvQ0FBbUJDLElBQW5CLEVBQUwsQ0FBUDtBQUNELE9BTEQ7QUFNQUwsV0FBS1AsR0FBR0UsT0FBSCxDQUFXVyxLQUFYLENBQUw7QUFDRCxLQVZNLENBQVA7QUFXRCxHQVpEO0FBYUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge0ZQSW5wdXRFcnJvcn0gPSByZXF1aXJlKCcuL21vZHVsZXMvZXJyb3JzJylcblxubW9kdWxlLmV4cG9ydHMgPSB7Y2hhaW4sIGNoYWluRW5kfVxuXG5cbi8qKlxuICogU3RhcnQgJ3JlY29yZGluZycgYSBjaGFpbiBvZiBjb21tYW5kcywgYWZ0ZXIgc3RlcHMgZGVmaW5lZCBjYWxsIGAuY2hhaW5FbmQoKWBcbiAqIEByZXR1cm5zIEZ1bmN0aW9uYWxQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGNoYWluKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuICAvLyBjcmVhdGUgYSBwbGFjZWhvbGRlci9pbml0aWFsIHByb21pc2UgdG8gaG9sZCB0aGUgc3RlcHMvY2hhaW4gZGF0YVxuICBjb25zdCBwcm9taXNlID0gRlAucmVzb2x2ZSgpXG4gIHByb21pc2Uuc3RlcHMgPSBbXVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG4vKipcbiAqIENhbGwgYWZ0ZXIgc3RhcnRpbmcgYSBgLmNoYWluKClgLlxuICpcbiAqIE9uZSBvZiB0aGUgZmV3IG5vbi1jaGFpbmFibGUgbWV0aG9kcyBpbiB0aGUgQVBJLlxuICogQHJldHVybnMgYSBGdW5jdGlvbi4gSXQgcnVucyB5b3VyIGZ1bmN0aW9uYWwgY2hhaW4hXG4gKi9cbmZ1bmN0aW9uIGNoYWluRW5kKCkge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vaW5kZXgnKVxuXG4gIHJldHVybiBpbnB1dCA9PiB7XG4gICAgcmV0dXJuIG5ldyBGUCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMuc3RlcHNbU3ltYm9sLml0ZXJhdG9yXSgpXG5cbiAgICAgIGNvbnN0IG5leHQgPSBwcm9taXNlID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGl0ZXJhdG9yLm5leHQoKVxuICAgICAgICBpZiAoY3VycmVudC5kb25lKSByZXR1cm4gcmVzb2x2ZShwcm9taXNlKVxuICAgICAgICBjb25zdCBbZm5OYW1lLCAsIGFyZ3NdID0gY3VycmVudC52YWx1ZVxuICAgICAgICByZXR1cm4gbmV4dChwcm9taXNlW2ZuTmFtZV0oLi4uYXJncykpXG4gICAgICB9XG4gICAgICBuZXh0KEZQLnJlc29sdmUoaW5wdXQpKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 17 */
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ 3),
isLength = __webpack_require__(/*! ./isLength */ 18);

/**
                                   * Checks if `value` is array-like. A value is considered array-like if it's
                                   * not a function and has a `value.length` that's an integer greater than or
                                   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                                   *
                                   * @static
                                   * @memberOf _
                                   * @since 4.0.0
                                   * @category Lang
                                   * @param {*} value The value to check.
                                   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                                   * @example
                                   *
                                   * _.isArrayLike([1, 2, 3]);
                                   * // => true
                                   *
                                   * _.isArrayLike(document.body.children);
                                   * // => true
                                   *
                                   * _.isArrayLike('abc');
                                   * // => true
                                   *
                                   * _.isArrayLike(_.noop);
                                   * // => false
                                   */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiXSwibmFtZXMiOlsiaXNGdW5jdGlvbiIsInJlcXVpcmUiLCJpc0xlbmd0aCIsImlzQXJyYXlMaWtlIiwidmFsdWUiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxhQUFhQyxRQUFRLGNBQVIsQ0FBakI7QUFDSUMsV0FBV0QsUUFBUSxZQUFSLENBRGY7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsU0FBU0UsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDMUIsU0FBT0EsU0FBUyxJQUFULElBQWlCRixTQUFTRSxNQUFNQyxNQUFmLENBQWpCLElBQTJDLENBQUNMLFdBQVdJLEtBQVgsQ0FBbkQ7QUFDRDs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQkosV0FBakIiLCJmaWxlIjoiaXNBcnJheUxpa2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiJdfQ==

/***/ }),
/* 18 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
                                          * Checks if `value` is a valid array-like length.
                                          *
                                          * **Note:** This method is loosely based on
                                          * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                                          *
                                          * @static
                                          * @memberOf _
                                          * @since 4.0.0
                                          * @category Lang
                                          * @param {*} value The value to check.
                                          * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                                          * @example
                                          *
                                          * _.isLength(3);
                                          * // => true
                                          *
                                          * _.isLength(Number.MIN_VALUE);
                                          * // => false
                                          *
                                          * _.isLength(Infinity);
                                          * // => false
                                          *
                                          * _.isLength('3');
                                          * // => false
                                          */
function isLength(value) {
  return typeof value == 'number' &&
  value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiXSwibmFtZXMiOlsiTUFYX1NBRkVfSU5URUdFUiIsImlzTGVuZ3RoIiwidmFsdWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLElBQUlBLG1CQUFtQixnQkFBdkI7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMEJBLFNBQVNDLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXlCO0FBQ3ZCLFNBQU8sT0FBT0EsS0FBUCxJQUFnQixRQUFoQjtBQUNMQSxVQUFRLENBQUMsQ0FESixJQUNTQSxRQUFRLENBQVIsSUFBYSxDQUR0QixJQUMyQkEsU0FBU0YsZ0JBRDNDO0FBRUQ7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUJILFFBQWpCIiwiZmlsZSI6ImlzTGVuZ3RoLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIl19

/***/ }),
/* 19 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var utils = module.exports = {
  isPromiseLike: function isPromiseLike(p) {
    return p && typeof p.then === 'function';
  },

  flatten: function flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce(function (item, results) {return results.concat(Array.isArray(item) ? utils.flatten(item) : [item]);}, []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImZsYXR0ZW4iLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvciIsInJlZHVjZSIsIml0ZW0iLCJyZXN1bHRzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxlQUQ2Qix5QkFDZkMsQ0FEZSxFQUNaO0FBQ2YsV0FBT0EsS0FBSyxPQUFPQSxFQUFFQyxJQUFULEtBQWtCLFVBQTlCO0FBQ0QsR0FINEI7O0FBSzdCQyxTQUw2QixtQkFLckJDLEdBTHFCLEVBS2hCO0FBQ1gsUUFBSSxDQUFDQyxNQUFNQyxPQUFOLENBQWNGLEdBQWQsQ0FBTCxFQUF5QixNQUFNLElBQUlHLEtBQUosQ0FBVSxpREFBVixDQUFOO0FBQ3pCLFdBQU9ILElBQUlJLE1BQUosQ0FBVyxVQUFDQyxJQUFELEVBQU9DLE9BQVAsVUFBbUJBLFFBQVFDLE1BQVIsQ0FBZU4sTUFBTUMsT0FBTixDQUFjRyxJQUFkLElBQXNCWixNQUFNTSxPQUFOLENBQWNNLElBQWQsQ0FBdEIsR0FBNEMsQ0FBQ0EsSUFBRCxDQUEzRCxDQUFuQixFQUFYLEVBQWtHLEVBQWxHLENBQVA7QUFDRCxHQVI0QixFQUEvQiIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUHJvbWlzZUxpa2UocCkge1xuICAgIHJldHVybiBwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbidcbiAgfSxcblxuICBmbGF0dGVuKGFycikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnIpKSB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBgZmxhdHRlbmAgcmVxdWlyZXMgdmFsaWQgYXJyYXkgcGFyYW1ldGVyJylcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoaXRlbSwgcmVzdWx0cykgPT4gcmVzdWx0cy5jb25jYXQoQXJyYXkuaXNBcnJheShpdGVtKSA/IHV0aWxzLmZsYXR0ZW4oaXRlbSkgOiBbaXRlbV0pLCBbXSlcbiAgfVxufVxuIl19

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,