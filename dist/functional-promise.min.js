/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {const { FunctionalError } = __webpack_require__(/*! ./modules/errors */ 1);
const { isFunction, flatten } = __webpack_require__(/*! ./modules/utils */ 2);
const { chain, chainEnd } = __webpack_require__(/*! ./monads */ 4);
const FP = FunctionalPromises;

FP.default = FP;

Object.assign(FP.prototype,
__webpack_require__(/*! ./arrays */ 5),
__webpack_require__(/*! ./events */ 6),
__webpack_require__(/*! ./conditional */ 7),
__webpack_require__(/*! ./promise */ 8));

function FunctionalPromises(resolveRejectCB) {
  if (!(this instanceof FunctionalPromises)) {return new FunctionalPromises(resolveRejectCB);}
  if (arguments.length !== 1) throw new Error('FunctionalPromises constructor only accepts 1 callback argument');
  this._FP = {
    errors: { limit: 0, count: 0 },
    promise: new Promise(resolveRejectCB),
    concurrencyLimit: 4 };

}

FP.all = FP.prototype.all;
FP.thenIf = FP.prototype._thenIf;
FP.delay = msec => FP.resolve().delay(msec);
FP.silent = limit => FP.resolve().silent(limit);

// Monadic Methods
FP.chain = chain;
FP.prototype.chainEnd = chainEnd;
FP.reject = FP.prototype.reject;


FP.prototype.addStep = function addStep(name, args) {
  if (this.steps) this.steps.push([name, this, args]);
  return this;
};

FP.prototype.concurrency = function concurrency(limit = Infinity) {
  if (this.steps) return this.addStep('concurrency', [...arguments]);
  this._FP.concurrencyLimit = limit;
  return this;
};

FP.prototype.quiet = function quiet(errorLimit = Infinity) {
  if (this.steps) return this.addStep('quiet', [...arguments]);
  this._FP.errors = { count: 0, limit: errorLimit };
  return this;
};
FP.prototype.silent = FP.prototype.quiet;

FP.prototype.get = function get(...keyNames) {
  if (this.steps) return this.addStep('get', [...arguments]);
  keyNames = flatten(keyNames);
  return this.then(obj => {
    if (typeof obj === 'object') {
      if (keyNames.length === 1) return obj[keyNames[0]];
      return keyNames.reduce((extracted, key) => {
        extracted[key] = obj[key];
        return extracted;
      }, {});
    }
    return obj;
  });
};

FP.prototype.set = function set(keyName, value) {
  if (this.steps) return this.addStep('set', [...arguments]);
  return this.then(obj => {
    if (typeof obj === 'object') obj[keyName] = value;
    return obj;
  });
};

FP.prototype.catch = function (fn) {
  if (this.steps) return this.addStep('catch', [...arguments]);
  if (arguments.length === 2) return this.catchIf(...arguments);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catch(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.catch(err => fn(err)));
};

FP.prototype.catchIf = function catchIf(condition, fn) {
  if (this.steps) return this.addStep('catchIf', [...arguments]);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.catchIf(condition, fn)`. Must be a function. Currently: ' + typeof fn);

  return FP.resolve(this._FP.promise.catch(err => {
    if (condition && err instanceof condition) return fn(err); // try re-throw, might be really slow...
    throw err;
  }));
};

FP.prototype.then = function then(fn) {
  if (this.steps) return this.addStep('then', [...arguments]);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.then(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(fn));
};

FP.prototype.tap = function tap(fn) {
  if (this.steps) return this.addStep('tap', [...arguments]);
  if (!isFunction(fn)) throw new FunctionalError('Invalid fn argument for `.tap(fn)`. Must be a function. Currently: ' + typeof fn);
  return FP.resolve(this._FP.promise.then(value => fn(value) ? value : value));
};

FP.resolve = FP.prototype.resolve = function resolve(value) {
  return new FP((resolve, reject) => {
    if (value && isFunction(value.then)) return value.then(resolve).catch(reject);
    resolve(value);
  });
};

FP.promisify = function promisify(cb) {
  return (...args) => new FP((yah, nah) =>
  cb.call(this, ...args, (err, res) => err ? nah(err) : yah(res)));
};

FP.promisifyAll = function promisifyAll(obj) {
  if (!obj || !Object.getPrototypeOf(obj)) {throw new Error('Invalid Argument obj in promisifyAll(obj)');}
  return Object.getOwnPropertyNames(obj).
  filter(key => typeof obj[key] === 'function').
  reduce((obj, fnName) => {
    if (!/Sync/.test(fnName) && !obj[`${fnName}Async`]) obj[`${fnName}Async`] = FP.promisify(obj[`${fnName}`]);
    return obj;
  }, obj);
};

FP.unpack = function unpack() {
  let resolve,reject,promise = new FP((yah, nah) => {resolve = yah;reject = nah;});
  return { promise, resolve, reject };
};

module.exports = FunctionalPromises;

if (process && process.on) {
  // process.on('uncaughtException', e => console.error('FPromises: FATAL EXCEPTION: uncaughtException', e))
  process.on('unhandledRejection', e => console.error('FPromises: FATAL ERROR: unhandledRejection', e));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/process/browser.js */ 3)))

/***/ }),
/* 1 */
/*!*******************************!*\
  !*** ./src/modules/errors.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

class FunctionalError extends Error {
  constructor(msg, options) {
    if (typeof msg === 'object') {
      options = msg;
      if (msg.message) msg = msg.message;
    }
    super(msg);
    if (typeof options === 'object') {
      Object.getOwnPropertyNames(options).
      forEach(key => {
        this[key] = options[key];
      });
    }
    this.name = this.constructor.name;
    // Capturing stack trace, excluding constructor call from it.
    Error.captureStackTrace(this, this.constructor);
  }}

class FunctionalUserError extends FunctionalError {}
class FPUnexpectedError extends FunctionalError {}
class FPInputError extends FunctionalError {}
class FPSoftError extends FunctionalError {}
class FPTimeout extends FunctionalError {}

module.exports = {
  FunctionalError,
  FunctionalUserError,
  FPUnexpectedError,
  FPInputError,
  FPSoftError,
  FPTimeout };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL2Vycm9ycy5qcyJdLCJuYW1lcyI6WyJGdW5jdGlvbmFsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibXNnIiwib3B0aW9ucyIsIm1lc3NhZ2UiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImtleSIsIm5hbWUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkZ1bmN0aW9uYWxVc2VyRXJyb3IiLCJGUFVuZXhwZWN0ZWRFcnJvciIsIkZQSW5wdXRFcnJvciIsIkZQU29mdEVycm9yIiwiRlBUaW1lb3V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZUFBTixTQUE4QkMsS0FBOUIsQ0FBb0M7QUFDbENDLGNBQVlDLEdBQVosRUFBaUJDLE9BQWpCLEVBQTBCO0FBQ3hCLFFBQUksT0FBT0QsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCQyxnQkFBVUQsR0FBVjtBQUNBLFVBQUtBLElBQUlFLE9BQVQsRUFBbUJGLE1BQU1BLElBQUlFLE9BQVY7QUFDcEI7QUFDRCxVQUFNRixHQUFOO0FBQ0EsUUFBSSxPQUFPQyxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQy9CRSxhQUFPQyxtQkFBUCxDQUEyQkgsT0FBM0I7QUFDR0ksYUFESCxDQUNXQyxPQUFPO0FBQ2QsYUFBS0EsR0FBTCxJQUFZTCxRQUFRSyxHQUFSLENBQVo7QUFDRCxPQUhIO0FBSUQ7QUFDRCxTQUFLQyxJQUFMLEdBQVksS0FBS1IsV0FBTCxDQUFpQlEsSUFBN0I7QUFDQTtBQUNBVCxVQUFNVSxpQkFBTixDQUF3QixJQUF4QixFQUE4QixLQUFLVCxXQUFuQztBQUNELEdBaEJpQzs7QUFrQnBDLE1BQU1VLG1CQUFOLFNBQWtDWixlQUFsQyxDQUFrRDtBQUNsRCxNQUFNYSxpQkFBTixTQUFnQ2IsZUFBaEMsQ0FBZ0Q7QUFDaEQsTUFBTWMsWUFBTixTQUEyQmQsZUFBM0IsQ0FBMkM7QUFDM0MsTUFBTWUsV0FBTixTQUEwQmYsZUFBMUIsQ0FBMEM7QUFDMUMsTUFBTWdCLFNBQU4sU0FBd0JoQixlQUF4QixDQUF3Qzs7QUFFeENpQixPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZsQixpQkFEZTtBQUVmWSxxQkFGZTtBQUdmQyxtQkFIZTtBQUlmQyxjQUplO0FBS2ZDLGFBTGU7QUFNZkMsV0FOZSxFQUFqQiIsImZpbGUiOiJlcnJvcnMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBGdW5jdGlvbmFsRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1zZywgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgbXNnID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IG1zZ1xuICAgICAgaWYgKCBtc2cubWVzc2FnZSApIG1zZyA9IG1zZy5tZXNzYWdlXG4gICAgfVxuICAgIHN1cGVyKG1zZylcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvcHRpb25zKVxuICAgICAgICAuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XVxuICAgICAgICB9KVxuICAgIH1cbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICAvLyBDYXB0dXJpbmcgc3RhY2sgdHJhY2UsIGV4Y2x1ZGluZyBjb25zdHJ1Y3RvciBjYWxsIGZyb20gaXQuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3RvcilcbiAgfVxufVxuY2xhc3MgRnVuY3Rpb25hbFVzZXJFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuY2xhc3MgRlBVbmV4cGVjdGVkRXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQSW5wdXRFcnJvciBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuY2xhc3MgRlBTb2Z0RXJyb3IgZXh0ZW5kcyBGdW5jdGlvbmFsRXJyb3Ige31cbmNsYXNzIEZQVGltZW91dCBleHRlbmRzIEZ1bmN0aW9uYWxFcnJvciB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgRnVuY3Rpb25hbEVycm9yLFxuICBGdW5jdGlvbmFsVXNlckVycm9yLFxuICBGUFVuZXhwZWN0ZWRFcnJvcixcbiAgRlBJbnB1dEVycm9yLFxuICBGUFNvZnRFcnJvcixcbiAgRlBUaW1lb3V0LFxufVxuIl19

/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

const utils = module.exports = {
  isPromiseLike(p) {return p && typeof p.then === 'function';},

  isFunction(fn) {return typeof fn === 'function';},

  isEnumerable(list) {return list && Array.isArray(list) || typeof list[Symbol.iterator] === 'function';},

  flatten(arr) {
    if (!Array.isArray(arr)) throw new Error('Method `flatten` requires valid array parameter');
    return arr.reduce((results, item) => results.concat(Array.isArray(item) ? utils.flatten(item) : [item]), []);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb2R1bGVzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzUHJvbWlzZUxpa2UiLCJwIiwidGhlbiIsImlzRnVuY3Rpb24iLCJmbiIsImlzRW51bWVyYWJsZSIsImxpc3QiLCJBcnJheSIsImlzQXJyYXkiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZsYXR0ZW4iLCJhcnIiLCJFcnJvciIsInJlZHVjZSIsInJlc3VsdHMiLCJpdGVtIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxRQUFRQyxPQUFPQyxPQUFQLEdBQWlCO0FBQzdCQyxnQkFBY0MsQ0FBZCxFQUFpQixDQUFFLE9BQU9BLEtBQUssT0FBT0EsRUFBRUMsSUFBVCxLQUFrQixVQUE5QixDQUEwQyxDQURoQzs7QUFHN0JDLGFBQVdDLEVBQVgsRUFBZSxDQUFFLE9BQU8sT0FBT0EsRUFBUCxLQUFjLFVBQXJCLENBQWlDLENBSHJCOztBQUs3QkMsZUFBYUMsSUFBYixFQUFtQixDQUFFLE9BQU9BLFFBQVFDLE1BQU1DLE9BQU4sQ0FBY0YsSUFBZCxDQUFSLElBQStCLE9BQU9BLEtBQUtHLE9BQU9DLFFBQVosQ0FBUCxLQUFpQyxVQUF2RSxDQUFtRixDQUwzRTs7QUFPN0JDLFVBQVFDLEdBQVIsRUFBYTtBQUNYLFFBQUksQ0FBQ0wsTUFBTUMsT0FBTixDQUFjSSxHQUFkLENBQUwsRUFBeUIsTUFBTSxJQUFJQyxLQUFKLENBQVUsaURBQVYsQ0FBTjtBQUN6QixXQUFPRCxJQUFJRSxNQUFKLENBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEtBQW1CRCxRQUFRRSxNQUFSLENBQWVWLE1BQU1DLE9BQU4sQ0FBY1EsSUFBZCxJQUFzQm5CLE1BQU1jLE9BQU4sQ0FBY0ssSUFBZCxDQUF0QixHQUE0QyxDQUFDQSxJQUFELENBQTNELENBQTlCLEVBQWtHLEVBQWxHLENBQVA7QUFDRCxHQVY0QixFQUEvQiIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZGxldnkvY29kZS9vc3MvZnVuY3Rpb25hbC1yaXZlciIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzUHJvbWlzZUxpa2UocCkgeyByZXR1cm4gcCAmJiB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nIH0sXG5cbiAgaXNGdW5jdGlvbihmbikgeyByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nIH0sXG5cbiAgaXNFbnVtZXJhYmxlKGxpc3QpIHsgcmV0dXJuIGxpc3QgJiYgQXJyYXkuaXNBcnJheShsaXN0KSB8fCB0eXBlb2YgbGlzdFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nIH0sXG5cbiAgZmxhdHRlbihhcnIpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgYGZsYXR0ZW5gIHJlcXVpcmVzIHZhbGlkIGFycmF5IHBhcmFtZXRlcicpXG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKHJlc3VsdHMsIGl0ZW0pID0+IHJlc3VsdHMuY29uY2F0KEFycmF5LmlzQXJyYXkoaXRlbSkgPyB1dGlscy5mbGF0dGVuKGl0ZW0pIDogW2l0ZW1dKSwgW10pXG4gIH1cbn1cbiJdfQ==

/***/ }),
/* 3 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {return [];};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {return '/';};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {return 0;};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 4 */
/*!***********************!*\
  !*** ./src/monads.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

const { FPInputError } = __webpack_require__(/*! ./modules/errors */ 1);

module.exports = { chain, chainEnd


  /**
                                    * Start 'recording' a chain of commands, after steps defined call `.chainEnd()`
                                    * @returns FunctionalPromise
                                    */ };
function chain() {
  const FP = __webpack_require__(/*! ./index */ 0);
  // create a placeholder/initial promise to hold the steps/chain data
  const promise = FP.resolve();
  promise.steps = [];
  return promise;
}

/**
   * Call after starting a `.chain()`.
   *
   * One of the few non-chainable methods in the API.
   * @returns a Function. It runs your functional chain!
   */
function chainEnd() {
  const FP = __webpack_require__(/*! ./index */ 0);

  return input => {
    if (!this.steps || this.steps.length <= 0) throw new FPInputError('No steps defined between .chain() & .chainEnd()');
    let stepCount = 0;
    let { promise, resolve, reject } = FP.unpack();
    while (stepCount < this.steps.length) {
      const [fnName,, args] = this.steps[stepCount];
      promise = promise[fnName](...args);
      stepCount++;
    }
    resolve(input);
    return promise;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tb25hZHMuanMiXSwibmFtZXMiOlsiRlBJbnB1dEVycm9yIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFpbiIsImNoYWluRW5kIiwiRlAiLCJwcm9taXNlIiwicmVzb2x2ZSIsInN0ZXBzIiwiaW5wdXQiLCJsZW5ndGgiLCJzdGVwQ291bnQiLCJyZWplY3QiLCJ1bnBhY2siLCJmbk5hbWUiLCJhcmdzIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUVBLFlBQUYsS0FBbUJDLFFBQVEsa0JBQVIsQ0FBekI7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsRUFBRUMsS0FBRixFQUFTQzs7O0FBRzFCOzs7c0NBSGlCLEVBQWpCO0FBT0EsU0FBU0QsS0FBVCxHQUFpQjtBQUNmLFFBQU1FLEtBQUtMLFFBQVEsU0FBUixDQUFYO0FBQ0E7QUFDQSxRQUFNTSxVQUFVRCxHQUFHRSxPQUFILEVBQWhCO0FBQ0FELFVBQVFFLEtBQVIsR0FBZ0IsRUFBaEI7QUFDQSxTQUFPRixPQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1BLFNBQVNGLFFBQVQsR0FBb0I7QUFDbEIsUUFBTUMsS0FBS0wsUUFBUSxTQUFSLENBQVg7O0FBRUEsU0FBT1MsU0FBUztBQUNkLFFBQUksQ0FBQyxLQUFLRCxLQUFOLElBQWUsS0FBS0EsS0FBTCxDQUFXRSxNQUFYLElBQXFCLENBQXhDLEVBQTJDLE1BQU0sSUFBSVgsWUFBSixDQUFpQixpREFBakIsQ0FBTjtBQUMzQyxRQUFJWSxZQUFZLENBQWhCO0FBQ0EsUUFBSSxFQUFDTCxPQUFELEVBQVVDLE9BQVYsRUFBbUJLLE1BQW5CLEtBQTZCUCxHQUFHUSxNQUFILEVBQWpDO0FBQ0EsV0FBT0YsWUFBWSxLQUFLSCxLQUFMLENBQVdFLE1BQTlCLEVBQXNDO0FBQ3BDLFlBQU0sQ0FBQ0ksTUFBRCxHQUFXQyxJQUFYLElBQW1CLEtBQUtQLEtBQUwsQ0FBV0csU0FBWCxDQUF6QjtBQUNBTCxnQkFBVUEsUUFBUVEsTUFBUixFQUFnQixHQUFHQyxJQUFuQixDQUFWO0FBQ0FKO0FBQ0Q7QUFDREosWUFBUUUsS0FBUjtBQUNBLFdBQU9ILE9BQVA7QUFDRCxHQVhEO0FBWUQiLCJmaWxlIjoibW9uYWRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9kbGV2eS9jb2RlL29zcy9mdW5jdGlvbmFsLXJpdmVyIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBGUElucHV0RXJyb3IgfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY2hhaW4sIGNoYWluRW5kIH1cblxuXG4vKipcbiAqIFN0YXJ0ICdyZWNvcmRpbmcnIGEgY2hhaW4gb2YgY29tbWFuZHMsIGFmdGVyIHN0ZXBzIGRlZmluZWQgY2FsbCBgLmNoYWluRW5kKClgXG4gKiBAcmV0dXJucyBGdW5jdGlvbmFsUHJvbWlzZVxuICovXG5mdW5jdGlvbiBjaGFpbigpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgLy8gY3JlYXRlIGEgcGxhY2Vob2xkZXIvaW5pdGlhbCBwcm9taXNlIHRvIGhvbGQgdGhlIHN0ZXBzL2NoYWluIGRhdGFcbiAgY29uc3QgcHJvbWlzZSA9IEZQLnJlc29sdmUoKVxuICBwcm9taXNlLnN0ZXBzID0gW11cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuLyoqXG4gKiBDYWxsIGFmdGVyIHN0YXJ0aW5nIGEgYC5jaGFpbigpYC5cbiAqXG4gKiBPbmUgb2YgdGhlIGZldyBub24tY2hhaW5hYmxlIG1ldGhvZHMgaW4gdGhlIEFQSS5cbiAqIEByZXR1cm5zIGEgRnVuY3Rpb24uIEl0IHJ1bnMgeW91ciBmdW5jdGlvbmFsIGNoYWluIVxuICovXG5mdW5jdGlvbiBjaGFpbkVuZCgpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcblxuICByZXR1cm4gaW5wdXQgPT4ge1xuICAgIGlmICghdGhpcy5zdGVwcyB8fCB0aGlzLnN0ZXBzLmxlbmd0aCA8PSAwKSB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdObyBzdGVwcyBkZWZpbmVkIGJldHdlZW4gLmNoYWluKCkgJiAuY2hhaW5FbmQoKScpXG4gICAgbGV0IHN0ZXBDb3VudCA9IDBcbiAgICBsZXQge3Byb21pc2UsIHJlc29sdmUsIHJlamVjdH0gPSBGUC51bnBhY2soKVxuICAgIHdoaWxlIChzdGVwQ291bnQgPCB0aGlzLnN0ZXBzLmxlbmd0aCkge1xuICAgICAgY29uc3QgW2ZuTmFtZSwgLCBhcmdzXSA9IHRoaXMuc3RlcHNbc3RlcENvdW50XVxuICAgICAgcHJvbWlzZSA9IHByb21pc2VbZm5OYW1lXSguLi5hcmdzKVxuICAgICAgc3RlcENvdW50KytcbiAgICB9XG4gICAgcmVzb2x2ZShpbnB1dClcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG59XG4iXX0=

/***/ }),
/* 5 */
/*!***********************!*\
  !*** ./src/arrays.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

const { isEnumerable } = __webpack_require__(/*! ./modules/utils */ 2);
const { FPInputError, FunctionalError } = __webpack_require__(/*! ./modules/errors */ 1);

module.exports = { map, find, findIndex, filter, reduce };

function find(callback) {return _find.call(this, callback).then(({ item }) => item);}
function findIndex(callback) {return _find.call(this, callback).then(({ index }) => index);}

function _find(iterable, callback) {
  const FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('_find', [...arguments]);
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return FP.resolve(iterable).
  filter(callback).
  then(results => results[0] != undefined ? { item: results[0], index: results.indexOf(results[0]) } : { item: undefined, index: -1 });
}

function filter(iterable, callback) {
  if (this.steps) return this.addStep('filter', [...arguments]);
  if (typeof iterable === 'function') {
    callback = iterable;
    iterable = this._FP.promise;
  }

  return reduce(iterable, (acc, item) => Promise.resolve(callback(item)).then(x => x ? acc.concat([item]) : acc), []);
}

function reduce(iterable, reducer, initVal) {
  const FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('reduce', [...arguments]);
  if (typeof iterable === 'function') {
    initVal = reducer;
    reducer = iterable;
    iterable = this._FP ? this._FP.promise : this;
  } else iterable = FP.resolve(iterable, this);

  return new FP((resolve, reject) => {
    return iterable.then(iterable => {
      const iterator = iterable[Symbol.iterator]();
      let i = 0;

      const next = total => {
        const current = iterator.next();
        if (current.done) return resolve(total);

        Promise.all([total, current.value]).
        then(([total, item]) => next(reducer(total, item, i++))).catch(reject);
      };

      next(initVal);
    });
  });
}

/*eslint max-statements: ["error", 60]*/
function map(args, fn, options) {
  const FP = __webpack_require__(/*! ./index */ 0);
  if (this.steps) return this.addStep('map', [...arguments]);
  if (arguments.length === 1 && this && this._FP) {
    fn = args;
    args = this && this._FP && this._FP.promise;
  }
  let resolvedOrRejected = false;
  const threadLimit = Math.max(1, Math.min(this && this._FP && this._FP.concurrencyLimit || 1, 4));
  const innerValues = this && this._FP && this._FP.promise ? this._FP.promise : Promise.resolve(args);
  let initialThread = 0;
  let errors = [];
  let count = 0;
  const results = [];
  const threadPool = new Set();
  const threadPoolFull = () => threadPool.size >= threadLimit;
  const isDone = () => errors.length > this._FP.errors.limit || count >= args.length || resolvedOrRejected;
  const setResult = index => value => {
    threadPool.delete(index);
    results[index] = value;
    return value;
  };
  return FP.resolve(new Promise((resolve, reject) => {
    const resolveIt = x => {
      // console.log('Action.resolve:', resolvedOrRejected, x)
      if (resolvedOrRejected) {return null;} else {resolvedOrRejected = true;}
      resolve(x);
    };
    const rejectIt = x => {
      if (resolvedOrRejected) {return null;} else {resolvedOrRejected = true;}
      // console.log('Action.reject:', resolvedOrRejected, x)
      reject(x);
    };
    innerValues.then(items => {
      args = [...items];
      if (!isEnumerable(items)) return reject(new FPInputError('Invalid input data passed into FP.map()'));
      const complete = () => {
        let action = null;
        if (errors.length > this._FP.errors.limit) action = rejectIt;
        if (isDone()) action = resolveIt;
        if (action) return Promise.all(results).then(data => action(results)) ? true : true;
        return false;
      };
      const checkAndRun = val => {
        // console.log('checkAndRun', count, resolvedOrRejected, val)
        if (resolvedOrRejected) return;
        if (!complete() && !results[count]) runItem(count);
        return val;
      };

      const runItem = c => {
        if (resolvedOrRejected) {return null;} else {count++;}
        if (threadPoolFull()) return setTimeout(() => runItem(c), 0);
        if (results[c]) return results[c];
        threadPool.add(c);
        // either get value with `fn(item)` or `item.then(fn)`
        results[c] = Promise.resolve(args[c]).
        then(val => fn(val, c, args)).
        then(val => setResult(c)(val)).
        then(checkAndRun).
        catch(err => {
          this._FP.errors.count++;
          errors.push(err);
          // console.log('ERR HANDLER!', errors.length, this._FP.errors.limit)
          if (errors.length > this._FP.errors.limit) {
            const fpErr = errors.length === 1 ? err : new FunctionalError(`Error Limit ${this._FP.errors.limit} Exceeded.
              idx=${c} errCnt=${this._FP.errors.count}`, { errors, results, ctx: this });
            Promise.resolve(setResult(c)(err)).then(() => rejectIt(fpErr));
          } else {// console.warn('Error OK:', JSON.stringify(this._FP.errors))
            return Promise.resolve().then(() => setResult(c)(err)).then(checkAndRun);
          }
        });

        return results[c];
      };

      // Kick off x number of initial threads
      while (initialThread < threadLimit && initialThread < args.length) runItem(initialThread++);
    });
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 6 */
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

const { FPInputError } = __webpack_require__(/*! ./modules/errors */ 1);

module.exports = {
  listen(obj, ...eventNames) {
    if (typeof eventNames === 'string') eventNames = [eventNames];
    if (!obj[obj.addEventListener ? 'addEventListener' : 'on']) throw new FPInputError('Valid EventEmitter required.');
    // Gets callback to attach to the event handlers
    const handler = this.chainEnd();
    this._FP.destroy = () => this._FP.destroyHandles.map(fn => fn() || true).filter(v => v).length;
    this._FP.destroyHandles = eventNames.map(eventName => {
      obj[obj.addEventListener ? 'addEventListener' : 'on'](eventName, handler);
      return () => obj[obj.removeEventListener ? 'removeEventListener' : 'off'](eventName, handler);
    });
    return this;
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9ldmVudHMuanMiXSwibmFtZXMiOlsiRlBJbnB1dEVycm9yIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJsaXN0ZW4iLCJvYmoiLCJldmVudE5hbWVzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJjaGFpbkVuZCIsIl9GUCIsImRlc3Ryb3kiLCJkZXN0cm95SGFuZGxlcyIsIm1hcCIsImZuIiwiZmlsdGVyIiwidiIsImxlbmd0aCIsImV2ZW50TmFtZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBQ0EsWUFBRCxLQUFpQkMsUUFBUSxrQkFBUixDQUF2Qjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmQyxTQUFPQyxHQUFQLEVBQVksR0FBR0MsVUFBZixFQUEyQjtBQUN6QixRQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0NBLGFBQWEsQ0FBQ0EsVUFBRCxDQUFiO0FBQ3BDLFFBQUksQ0FBQ0QsSUFBSUEsSUFBSUUsZ0JBQUosR0FBdUIsa0JBQXZCLEdBQTRDLElBQWhELENBQUwsRUFBNEQsTUFBTSxJQUFJUCxZQUFKLENBQWlCLDhCQUFqQixDQUFOO0FBQzVEO0FBQ0EsVUFBTVEsVUFBVSxLQUFLQyxRQUFMLEVBQWhCO0FBQ0EsU0FBS0MsR0FBTCxDQUFTQyxPQUFULEdBQW1CLE1BQU0sS0FBS0QsR0FBTCxDQUFTRSxjQUFULENBQXdCQyxHQUF4QixDQUE0QkMsTUFBTUEsUUFBUSxJQUExQyxFQUFnREMsTUFBaEQsQ0FBdURDLEtBQUtBLENBQTVELEVBQStEQyxNQUF4RjtBQUNBLFNBQUtQLEdBQUwsQ0FBU0UsY0FBVCxHQUEwQk4sV0FBV08sR0FBWCxDQUFlSyxhQUFhO0FBQ3BEYixVQUFJQSxJQUFJRSxnQkFBSixHQUF1QixrQkFBdkIsR0FBNEMsSUFBaEQsRUFBc0RXLFNBQXRELEVBQWlFVixPQUFqRTtBQUNBLGFBQU8sTUFBTUgsSUFBSUEsSUFBSWMsbUJBQUosR0FBMEIscUJBQTFCLEdBQWtELEtBQXRELEVBQTZERCxTQUE3RCxFQUF3RVYsT0FBeEUsQ0FBYjtBQUNELEtBSHlCLENBQTFCO0FBSUEsV0FBTyxJQUFQO0FBQ0QsR0FaYyxFQUFqQiIsImZpbGUiOiJldmVudHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7RlBJbnB1dEVycm9yfSA9IHJlcXVpcmUoJy4vbW9kdWxlcy9lcnJvcnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbGlzdGVuKG9iaiwgLi4uZXZlbnROYW1lcykge1xuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lcyA9PT0gJ3N0cmluZycpIGV2ZW50TmFtZXMgPSBbZXZlbnROYW1lc11cbiAgICBpZiAoIW9ialtvYmouYWRkRXZlbnRMaXN0ZW5lciA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdvbiddKSB0aHJvdyBuZXcgRlBJbnB1dEVycm9yKCdWYWxpZCBFdmVudEVtaXR0ZXIgcmVxdWlyZWQuJylcbiAgICAvLyBHZXRzIGNhbGxiYWNrIHRvIGF0dGFjaCB0byB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5jaGFpbkVuZCgpXG4gICAgdGhpcy5fRlAuZGVzdHJveSA9ICgpID0+IHRoaXMuX0ZQLmRlc3Ryb3lIYW5kbGVzLm1hcChmbiA9PiBmbigpIHx8IHRydWUpLmZpbHRlcih2ID0+IHYpLmxlbmd0aFxuICAgIHRoaXMuX0ZQLmRlc3Ryb3lIYW5kbGVzID0gZXZlbnROYW1lcy5tYXAoZXZlbnROYW1lID0+IHtcbiAgICAgIG9ialtvYmouYWRkRXZlbnRMaXN0ZW5lciA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdvbiddKGV2ZW50TmFtZSwgaGFuZGxlcilcbiAgICAgIHJldHVybiAoKSA9PiBvYmpbb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyAncmVtb3ZlRXZlbnRMaXN0ZW5lcicgOiAnb2ZmJ10oZXZlbnROYW1lLCBoYW5kbGVyKVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcbn0iXX0=

/***/ }),
/* 7 */
/*!****************************!*\
  !*** ./src/conditional.js ***!
  \****************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

const { isPromiseLike } = __webpack_require__(/*! ./modules/utils */ 2);

module.exports = { thenIf, tapIf, _thenIf };

function thenIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('thenIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if (isPromiseLike(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse);
}

function tapIf(cond, ifTrue, ifFalse) {
  if (this.steps) return this.addStep('tapIf', [...arguments]);
  if (arguments.length === 1) {
    ifTrue = cond;
    cond = x => x;
  }
  if (isPromiseLike(this)) {
    return this.then(value => _thenIf(cond, ifTrue, ifFalse, true)(value));
  }
  return _thenIf(cond, ifTrue, ifFalse, true);
}

function _thenIf(cond = x => x, ifTrue = x => x, ifFalse = () => null, returnValue = false) {
  const FP = __webpack_require__(/*! ./index */ 0);
  return value =>
  FP.resolve(cond(value)).
  then(ans => ans ? ifTrue(value) : ifFalse(value)).
  then(v => returnValue ? value : v);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9jb25kaXRpb25hbC5qcyJdLCJuYW1lcyI6WyJpc1Byb21pc2VMaWtlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVuSWYiLCJ0YXBJZiIsIl90aGVuSWYiLCJjb25kIiwiaWZUcnVlIiwiaWZGYWxzZSIsInN0ZXBzIiwiYWRkU3RlcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsIngiLCJ0aGVuIiwidmFsdWUiLCJyZXR1cm5WYWx1ZSIsIkZQIiwicmVzb2x2ZSIsImFucyIsInYiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBQ0EsYUFBRCxLQUFrQkMsUUFBUSxpQkFBUixDQUF4Qjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQixFQUFDQyxNQUFELEVBQVNDLEtBQVQsRUFBZ0JDLE9BQWhCLEVBQWpCOztBQUVBLFNBQVNGLE1BQVQsQ0FBZ0JHLElBQWhCLEVBQXNCQyxNQUF0QixFQUE4QkMsT0FBOUIsRUFBdUM7QUFDckMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLFFBQWIsRUFBdUIsQ0FBQyxHQUFHQyxTQUFKLENBQXZCLENBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPTyxLQUFLQSxDQUFaO0FBQ0Q7QUFDRCxNQUFJZCxjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtlLElBQUwsQ0FBVUMsU0FBU1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQk8sS0FBL0IsQ0FBbkIsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0osS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxNQUFyQixFQUE2QkMsT0FBN0IsRUFBc0M7QUFDcEMsTUFBSSxLQUFLQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsRUFBc0IsQ0FBQyxHQUFHQyxTQUFKLENBQXRCLENBQVA7QUFDaEIsTUFBSUEsVUFBVUMsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkwsYUFBU0QsSUFBVDtBQUNBQSxXQUFPTyxLQUFLQSxDQUFaO0FBQ0Q7QUFDRCxNQUFJZCxjQUFjLElBQWQsQ0FBSixFQUF5QjtBQUN2QixXQUFPLEtBQUtlLElBQUwsQ0FBVUMsU0FBU1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixFQUFxQ08sS0FBckMsQ0FBbkIsQ0FBUDtBQUNEO0FBQ0QsU0FBT1YsUUFBUUMsSUFBUixFQUFjQyxNQUFkLEVBQXNCQyxPQUF0QixFQUErQixJQUEvQixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0gsT0FBVCxDQUFpQkMsT0FBT08sS0FBS0EsQ0FBN0IsRUFBZ0NOLFNBQVNNLEtBQUtBLENBQTlDLEVBQWlETCxVQUFVLE1BQU0sSUFBakUsRUFBdUVRLGNBQWMsS0FBckYsRUFBNEY7QUFDMUYsUUFBTUMsS0FBS2pCLFFBQVEsU0FBUixDQUFYO0FBQ0EsU0FBT2U7QUFDTEUsS0FBR0MsT0FBSCxDQUFXWixLQUFLUyxLQUFMLENBQVg7QUFDR0QsTUFESCxDQUNRSyxPQUFRQSxNQUFNWixPQUFPUSxLQUFQLENBQU4sR0FBc0JQLFFBQVFPLEtBQVIsQ0FEdEM7QUFFR0QsTUFGSCxDQUVRTSxLQUFNSixjQUFjRCxLQUFkLEdBQXNCSyxDQUZwQyxDQURGO0FBSUQiLCJmaWxlIjoiY29uZGl0aW9uYWwuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7aXNQcm9taXNlTGlrZX0gPSByZXF1aXJlKCcuL21vZHVsZXMvdXRpbHMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHt0aGVuSWYsIHRhcElmLCBfdGhlbklmfVxuXG5mdW5jdGlvbiB0aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0aGVuSWYnLCBbLi4uYXJndW1lbnRzXSlcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZlRydWUgPSBjb25kXG4gICAgY29uZCA9IHggPT4geFxuICB9XG4gIGlmIChpc1Byb21pc2VMaWtlKHRoaXMpKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih2YWx1ZSA9PiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSkodmFsdWUpKVxuICB9XG4gIHJldHVybiBfdGhlbklmKGNvbmQsIGlmVHJ1ZSwgaWZGYWxzZSlcbn1cblxuZnVuY3Rpb24gdGFwSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlKSB7XG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCd0YXBJZicsIFsuLi5hcmd1bWVudHNdKVxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmVHJ1ZSA9IGNvbmRcbiAgICBjb25kID0geCA9PiB4XG4gIH1cbiAgaWYgKGlzUHJvbWlzZUxpa2UodGhpcykpIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKHZhbHVlID0+IF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKSh2YWx1ZSkpXG4gIH1cbiAgcmV0dXJuIF90aGVuSWYoY29uZCwgaWZUcnVlLCBpZkZhbHNlLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBfdGhlbklmKGNvbmQgPSB4ID0+IHgsIGlmVHJ1ZSA9IHggPT4geCwgaWZGYWxzZSA9ICgpID0+IG51bGwsIHJldHVyblZhbHVlID0gZmFsc2UpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuL2luZGV4JylcbiAgcmV0dXJuIHZhbHVlID0+XG4gICAgRlAucmVzb2x2ZShjb25kKHZhbHVlKSlcbiAgICAgIC50aGVuKGFucyA9PiAoYW5zID8gaWZUcnVlKHZhbHVlKSA6IGlmRmFsc2UodmFsdWUpKSlcbiAgICAgIC50aGVuKHYgPT4gKHJldHVyblZhbHVlID8gdmFsdWUgOiB2KSlcbn1cbiJdfQ==

/***/ }),
/* 8 */
/*!************************!*\
  !*** ./src/promise.js ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

const { FPInputError } = __webpack_require__(/*! ./modules/errors */ 1);

module.exports = { all, reject, delay, _delay };

function all(promises) {
  const FP = __webpack_require__(/*! ./ */ 0);
  return FP.resolve(Array.isArray(promises) ? Promise.all(promises) : promiseAllObject(promises));
}

function promiseAllObject(obj) {
  const keys = Object.getOwnPropertyNames(obj);
  const values = keys.map(key => obj[key]);
  return Promise.all(values).then(results => results.reduce((obj, val, index) => {var _Object$assign;
    const key = keys[index];
    return Object.assign((_Object$assign = {}, _Object$assign[key] = val, _Object$assign), obj);
  }, {}));
}

function reject(err) {
  if (err instanceof Error) {
    if (this) this._error = err;
    return Promise.reject(err);
  }
  throw new Error(`Reject only accepts a new instance of Error!`);
}

function _delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (!Number.isInteger(msec)) throw new FPInputError('FP.delay(millisec) requires a numeric arg.');
  return value => new FP(resolve => {setTimeout(() => resolve(value), msec);});
}

function delay(msec) {
  const FP = __webpack_require__(/*! ./ */ 0);
  if (this.steps) return this.addStep('delay', [...arguments]);
  return this && this._FP ? FP.resolve(this.then(_delay(msec))) : _delay(msec)();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wcm9taXNlLmpzIl0sIm5hbWVzIjpbIkZQSW5wdXRFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYWxsIiwicmVqZWN0IiwiZGVsYXkiLCJfZGVsYXkiLCJwcm9taXNlcyIsIkZQIiwicmVzb2x2ZSIsIkFycmF5IiwiaXNBcnJheSIsIlByb21pc2UiLCJwcm9taXNlQWxsT2JqZWN0Iiwib2JqIiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJ2YWx1ZXMiLCJtYXAiLCJrZXkiLCJ0aGVuIiwicmVzdWx0cyIsInJlZHVjZSIsInZhbCIsImluZGV4IiwiYXNzaWduIiwiZXJyIiwiRXJyb3IiLCJfZXJyb3IiLCJtc2VjIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwidmFsdWUiLCJzZXRUaW1lb3V0Iiwic3RlcHMiLCJhZGRTdGVwIiwiYXJndW1lbnRzIiwiX0ZQIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUVBLFlBQUYsS0FBbUJDLFFBQVEsa0JBQVIsQ0FBekI7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsRUFBRUMsR0FBRixFQUFPQyxNQUFQLEVBQWVDLEtBQWYsRUFBc0JDLE1BQXRCLEVBQWpCOztBQUVBLFNBQVNILEdBQVQsQ0FBYUksUUFBYixFQUF1QjtBQUNyQixRQUFNQyxLQUFLUixRQUFRLElBQVIsQ0FBWDtBQUNBLFNBQU9RLEdBQUdDLE9BQUgsQ0FBV0MsTUFBTUMsT0FBTixDQUFjSixRQUFkLElBQTBCSyxRQUFRVCxHQUFSLENBQVlJLFFBQVosQ0FBMUIsR0FBa0RNLGlCQUFpQk4sUUFBakIsQ0FBN0QsQ0FBUDtBQUNEOztBQUVELFNBQVNNLGdCQUFULENBQTBCQyxHQUExQixFQUErQjtBQUM3QixRQUFNQyxPQUFPQyxPQUFPQyxtQkFBUCxDQUEyQkgsR0FBM0IsQ0FBYjtBQUNBLFFBQU1JLFNBQVNILEtBQUtJLEdBQUwsQ0FBU0MsT0FBT04sSUFBSU0sR0FBSixDQUFoQixDQUFmO0FBQ0EsU0FBT1IsUUFBUVQsR0FBUixDQUFZZSxNQUFaLEVBQW9CRyxJQUFwQixDQUF5QkMsV0FBV0EsUUFBUUMsTUFBUixDQUFlLENBQUNULEdBQUQsRUFBTVUsR0FBTixFQUFXQyxLQUFYLEtBQXFCO0FBQzdFLFVBQU1MLE1BQU1MLEtBQUtVLEtBQUwsQ0FBWjtBQUNBLFdBQU9ULE9BQU9VLE1BQVAsc0NBQWlCTixHQUFqQixJQUF1QkksR0FBdkIsbUJBQThCVixHQUE5QixDQUFQO0FBQ0QsR0FIMEMsRUFHeEMsRUFId0MsQ0FBcEMsQ0FBUDtBQUlEOztBQUVELFNBQVNWLE1BQVQsQ0FBZ0J1QixHQUFoQixFQUFxQjtBQUNuQixNQUFJQSxlQUFlQyxLQUFuQixFQUEwQjtBQUN4QixRQUFJLElBQUosRUFBVSxLQUFLQyxNQUFMLEdBQWNGLEdBQWQ7QUFDVixXQUFPZixRQUFRUixNQUFSLENBQWV1QixHQUFmLENBQVA7QUFDRDtBQUNELFFBQU0sSUFBSUMsS0FBSixDQUFXLDhDQUFYLENBQU47QUFDRDs7QUFFRCxTQUFTdEIsTUFBVCxDQUFnQndCLElBQWhCLEVBQXNCO0FBQ3BCLFFBQU10QixLQUFLUixRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQUksQ0FBQytCLE9BQU9DLFNBQVAsQ0FBaUJGLElBQWpCLENBQUwsRUFBNkIsTUFBTSxJQUFJL0IsWUFBSixDQUFpQiw0Q0FBakIsQ0FBTjtBQUM3QixTQUFPa0MsU0FBUyxJQUFJekIsRUFBSixDQUFPQyxXQUFXLENBQUV5QixXQUFXLE1BQU16QixRQUFRd0IsS0FBUixDQUFqQixFQUFpQ0gsSUFBakMsRUFBd0MsQ0FBNUQsQ0FBaEI7QUFDRDs7QUFFRCxTQUFTekIsS0FBVCxDQUFleUIsSUFBZixFQUFxQjtBQUNuQixRQUFNdEIsS0FBS1IsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFJLEtBQUttQyxLQUFULEVBQWdCLE9BQU8sS0FBS0MsT0FBTCxDQUFhLE9BQWIsRUFBc0IsQ0FBQyxHQUFHQyxTQUFKLENBQXRCLENBQVA7QUFDaEIsU0FBTyxRQUFRLEtBQUtDLEdBQWIsR0FBbUI5QixHQUFHQyxPQUFILENBQVcsS0FBS1ksSUFBTCxDQUFVZixPQUFPd0IsSUFBUCxDQUFWLENBQVgsQ0FBbkIsR0FBeUR4QixPQUFPd0IsSUFBUCxHQUFoRTtBQUNEIiwiZmlsZSI6InByb21pc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2RsZXZ5L2NvZGUvb3NzL2Z1bmN0aW9uYWwtcml2ZXIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IEZQSW5wdXRFcnJvciB9ID0gcmVxdWlyZSgnLi9tb2R1bGVzL2Vycm9ycycpXG5cbm1vZHVsZS5leHBvcnRzID0geyBhbGwsIHJlamVjdCwgZGVsYXksIF9kZWxheSB9XG5cbmZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICBjb25zdCBGUCA9IHJlcXVpcmUoJy4vJylcbiAgcmV0dXJuIEZQLnJlc29sdmUoQXJyYXkuaXNBcnJheShwcm9taXNlcykgPyBQcm9taXNlLmFsbChwcm9taXNlcykgOiBwcm9taXNlQWxsT2JqZWN0KHByb21pc2VzKSlcbn1cblxuZnVuY3Rpb24gcHJvbWlzZUFsbE9iamVjdChvYmopIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iailcbiAgY29uc3QgdmFsdWVzID0ga2V5cy5tYXAoa2V5ID0+IG9ialtrZXldKVxuICByZXR1cm4gUHJvbWlzZS5hbGwodmFsdWVzKS50aGVuKHJlc3VsdHMgPT4gcmVzdWx0cy5yZWR1Y2UoKG9iaiwgdmFsLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBba2V5XTogdmFsIH0sIG9iailcbiAgfSwge30pKVxufVxuXG5mdW5jdGlvbiByZWplY3QoZXJyKSB7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGlmICh0aGlzKSB0aGlzLl9lcnJvciA9IGVyclxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpXG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBSZWplY3Qgb25seSBhY2NlcHRzIGEgbmV3IGluc3RhbmNlIG9mIEVycm9yIWApXG59XG5cbmZ1bmN0aW9uIF9kZWxheShtc2VjKSB7XG4gIGNvbnN0IEZQID0gcmVxdWlyZSgnLi8nKVxuICBpZiAoIU51bWJlci5pc0ludGVnZXIobXNlYykpIHRocm93IG5ldyBGUElucHV0RXJyb3IoJ0ZQLmRlbGF5KG1pbGxpc2VjKSByZXF1aXJlcyBhIG51bWVyaWMgYXJnLicpXG4gIHJldHVybiB2YWx1ZSA9PiBuZXcgRlAocmVzb2x2ZSA9PiB7IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh2YWx1ZSksIG1zZWMpIH0pXG59XG5cbmZ1bmN0aW9uIGRlbGF5KG1zZWMpIHtcbiAgY29uc3QgRlAgPSByZXF1aXJlKCcuLycpXG4gIGlmICh0aGlzLnN0ZXBzKSByZXR1cm4gdGhpcy5hZGRTdGVwKCdkZWxheScsIFsuLi5hcmd1bWVudHNdKVxuICByZXR1cm4gdGhpcyAmJiB0aGlzLl9GUCA/IEZQLnJlc29sdmUodGhpcy50aGVuKF9kZWxheShtc2VjKSkpIDogX2RlbGF5KG1zZWMpKClcbn1cbiJdfQ==

/***/ })
/******/ ]);